// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_hsrp_oper.hsrp.summary;

// HSRP summary statistics
message hsrp_summary_info_KEYS {
}

message hsrp_summary_info {
    // Number of IPv4 sessions in ACTIVE state
    uint32 ipv4_sessions_active = 50;
    // Number of IPv4 sessions in STANDBY state
    uint32 ipv4_sessions_standby = 51;
    // Number of IPv4 sessions in SPEAK state
    uint32 ipv4_sessions_speak = 52;
    // Number of IPv4 sessions in LISTEN state
    uint32 ipv4_sessions_listen = 53;
    // Number of IPv4 sessions in LEARN state
    uint32 ipv4_sessions_learn = 54;
    // Number of IPv4 sessions in INIT state
    uint32 ipv4_sessions_init = 55;
    // Number of IPv4 slaves in ACTIVE state
    uint32 ipv4_slaves_active = 56;
    // Number of IPv4 slaves in STANDBY state
    uint32 ipv4_slaves_standby = 57;
    // Number of IPv4 slaves in SPEAK state
    uint32 ipv4_slaves_speak = 58;
    // Number of IPv4 slaves in LISTEN state
    uint32 ipv4_slaves_listen = 59;
    // Number of IPv4 slaves in LEARN state
    uint32 ipv4_slaves_learn = 60;
    // Number of IPv4 slaves in INIT state
    uint32 ipv4_slaves_init = 61;
    // Number of UP IPv4 Virtual IP Addresses on groups in ACTIVE state
    uint32 ipv4_virtual_ip_addresses_active_up = 62;
    // Number of DOWN IPv4 Virtual IP Addresses on groups in ACTIVE state
    uint32 ipv4_virtual_ip_addresses_active_down = 63;
    // Number of UP IPv4 Virtual IP Addresses on groups in STANDBY state
    uint32 ipv4_virtual_ip_addresses_standby_up = 64;
    // Number of DOWN IPv4 Virtual IP Addresses on groups in STANDBY state
    uint32 ipv4_virtual_ip_addresses_standby_down = 65;
    // Number of UP IPv4 Virtual IP Addresses on groups in SPEAK state
    uint32 ipv4_virtual_ip_addresses_speak_up = 66;
    // Number of DOWN IPv4 Virtual IP Addresses on groups in SPEAK state
    uint32 ipv4_virtual_ip_addresses_speak_down = 67;
    // Number of UP IPv4 Virtual IP Addresses on groups in LISTEN state
    uint32 ipv4_virtual_ip_addresses_listen_up = 68;
    // Number of DOWN IPv4 Virtual IP Addresses on groups in LISTEN state
    uint32 ipv4_virtual_ip_addresses_listen_down = 69;
    // Number of UP IPv4 Virtual IP Addresses on groups in LEARN state
    uint32 ipv4_virtual_ip_addresses_learn_up = 70;
    // Number of DOWN IPv4 Virtual IP Addresses on groups in LEARN state
    uint32 ipv4_virtual_ip_addresses_learn_down = 71;
    // Number of UP IPv4 Virtual IP Addresses on groups in INIT state
    uint32 ipv4_virtual_ip_addresses_init_up = 72;
    // Number of DOWN IPv4 Virtual IP Addresses on groups in INIT state
    uint32 ipv4_virtual_ip_addresses_init_down = 73;
    // Number of IPv6 sessions in ACTIVE state
    uint32 ipv6_sessions_active = 74;
    // Number of IPv6 sessions in STANDBY state
    uint32 ipv6_sessions_standby = 75;
    // Number of IPv6 sessions in SPEAK state
    uint32 ipv6_sessions_speak = 76;
    // Number of IPv6 sessions in LISTEN state
    uint32 ipv6_sessions_listen = 77;
    // Number of IPv6 sessions in LEARN state
    uint32 ipv6_sessions_learn = 78;
    // Number of IPv6 sessions in INIT state
    uint32 ipv6_sessions_init = 79;
    // Number of IPv6 slaves in ACTIVE state
    uint32 ipv6_slaves_active = 80;
    // Number of IPv6 slaves in STANDBY state
    uint32 ipv6_slaves_standby = 81;
    // Number of IPv6 slaves in SPEAK state
    uint32 ipv6_slaves_speak = 82;
    // Number of IPv6 slaves in LISTEN state
    uint32 ipv6_slaves_listen = 83;
    // Number of IPv6 slaves in LEARN state
    uint32 ipv6_slaves_learn = 84;
    // Number of IPv6 slaves in INIT state
    uint32 ipv6_slaves_init = 85;
    // Number of UP IPv6 Virtual IP Addresses on groups in ACTIVE state
    uint32 ipv6_virtual_ip_addresses_active_up = 86;
    // Number of DOWN IPv6 Virtual IP Addresses on groups in ACTIVE state
    uint32 ipv6_virtual_ip_addresses_active_down = 87;
    // Number of UP IPv6 Virtual IP Addresses on groups in STANDBY state
    uint32 ipv6_virtual_ip_addresses_standby_up = 88;
    // Number of DOWN IPv6 Virtual IP Addresses on groups in STANDBY state
    uint32 ipv6_virtual_ip_addresses_standby_down = 89;
    // Number of UP IPv6 Virtual IP Addresses on groups in SPEAK state
    uint32 ipv6_virtual_ip_addresses_speak_up = 90;
    // Number of DOWN IPv6 Virtual IP Addresses on groups in SPEAK state
    uint32 ipv6_virtual_ip_addresses_speak_down = 91;
    // Number of UP IPv6 Virtual IP Addresses on groups in LISTEN state
    uint32 ipv6_virtual_ip_addresses_listen_up = 92;
    // Number of DOWN IPv6 Virtual IP Addresses on groups in LISTEN state
    uint32 ipv6_virtual_ip_addresses_listen_down = 93;
    // Number of UP IPv6 Virtual IP Addresses on groups in LEARN state
    uint32 ipv6_virtual_ip_addresses_learn_up = 94;
    // Number of DOWN IPv6 Virtual IP Addresses on groups in LEARN state
    uint32 ipv6_virtual_ip_addresses_learn_down = 95;
    // Number of UP IPv6 Virtual IP Addresses on groups in INIT state
    uint32 ipv6_virtual_ip_addresses_init_up = 96;
    // Number of DOWN IPv6 Virtual IP Addresses on groups in INIT state
    uint32 ipv6_virtual_ip_addresses_init_down = 97;
    // Number of HSRP interfaces with IPv4 caps in UP state
    uint32 interfaces_ipv4_state_up = 98;
    // Number of HSRP interfaces with IPv4 caps in DOWN state
    uint32 interfaces_ipv4_state_down = 99;
    // Number of tracked interfaces with IPv4 caps in UP state
    uint32 tracked_interfaces_ipv4_state_up = 100;
    // Number of tracked interfaces with IPv4 caps in DOWN state
    uint32 tracked_interfaces_ipv4_state_down = 101;
    // Number of tracked objects in UP state
    uint32 tracked_objects_up = 102;
    // Number of tracked objects in DOWN state
    uint32 tracked_objects_down = 103;
    // Number of HSRP interfaces with IPv6 caps in UP state
    uint32 interfaces_ipv6_state_up = 104;
    // Number of HSRP interfaces with IPv6 caps in DOWN state
    uint32 interfaces_ipv6_state_down = 105;
    // Number of tracked interfaces with IPv6 caps in UP state
    uint32 tracked_interfaces_ipv6_state_up = 106;
    // Number of tracked interfaces with IPv6 caps in DOWN state
    uint32 tracked_interfaces_ipv6_state_down = 107;
    // Number of HSRP BFD sessions in UP state
    uint32 bfd_sessions_up = 108;
    // Number of HSRP BFD sessions in DOWN state
    uint32 bfd_sessions_down = 109;
    // Number of HSRP BFD sessions in INACTIVE state
    uint32 bfd_session_inactive = 110;
}

