// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2vpn_oper.l2vpn.xconnect_mp2mps.xconnect_mp2mp;

message l2vpn_mp2mp_xc_KEYS {
    string group_name = 1;
    string mp2_mp_name = 2;
}

message l2vpn_mp2mp_xc {
    // Group name
    string group_name = 50;
    // MP2MP name
    string mp2_mp_name = 51;
    // Identification Number
    uint32 mp2_mpid = 52;
    // Vpn ID
    uint32 vpn_id = 53;
    // VPN MTU
    uint32 vpn_mtu = 54;
    // L2 Encapsulation
    string l2_encapsulation = 55;
    // l2vpn xc auto discovery info
    l2vpn_xc_disco discovery = 56;
    // Administratively disabled
    bool xconnect_shutdown = 57;
}

// HASI ID Event
message hasi_id_event {
    // LocalID
    uint64 local_id = 1;
    // RemoteID
    uint64 remore_id = 2;
    // Time
    uint32 time = 3;
    // Count
    uint64 count = 4;
}

// HASI Slave Object ID events
message hasi_s_obj_id_events {
    // Create
    hasi_id_event create = 1;
    // Updates
    hasi_id_event updates = 2;
    // ApplicationSyncs
    hasi_id_event application_syncs = 3;
    // ApplicationNaks
    hasi_id_event application_naks = 4;
    // SummaryReplaySyncs
    hasi_id_event summary_replay_syncs = 5;
    // SummaryReplayNaks
    hasi_id_event summary_replay_naks = 6;
    // CacheNakRetries
    hasi_id_event cache_nak_retries = 7;
}

// HASI Slave Object Context
message hasi_s_object_ctx {
    // ObjectSyncID
    uint64 object_sync_id = 1;
    // ObjectType
    uint32 object_type = 2;
    // ObjectIdEvents
    hasi_s_obj_id_events object_id_events = 3;
}

// HASI Master Slave ID Events
message hasi_m_id_events {
    // ApplicationSyncs
    hasi_id_event application_syncs = 1;
    // ImplicitDeletes
    hasi_id_event implicit_deletes = 2;
    // ApplicationNaks
    hasi_id_event application_naks = 3;
    // SummaryReplaySyncs
    hasi_id_event summary_replay_syncs = 4;
    // SummaryReplayNaks
    hasi_id_event summary_replay_naks = 5;
}

// HASI Master Object Client Info
message hasi_m_object_slave_info {
    // SlaveId
    uint32 slave_id = 1;
    // IdEvents
    hasi_m_id_events id_events = 2;
}

// HASI Master Object Context
message hasi_m_object_ctx {
    // ObjectSyncID
    uint64 object_sync_id = 1;
    // ObjectType
    uint32 object_type = 2;
    // Queue
    uint32 queue = 3;
    // CreateID
    uint64 create_id = 4;
    // CreateTime
    uint32 create_time = 5;
    // UpdateTime
    uint32 update_time = 6;
    // DeleteTime
    uint32 delete_time = 7;
    // DeleteContextLength
    uint32 delete_ctx_lenght = 8;
    // SlaveInformation
    repeated hasi_m_object_slave_info slave_information = 9;
    // HasHistory
    bool has_history = 10;
    // PreActiveHistory
    hasi_s_obj_id_events pre_active_history = 11;
}

// Per object HASI information
message l2vpn_sync_hasi_object {
    // Object Type Name
    string obj_name = 1;
    // Master Context
    hasi_m_object_ctx master_context = 2;
    // Slave Context
    hasi_s_object_ctx slave_context = 3;
    // Do/Do not have Hasi info
    bool in_hasi = 4;
}

message l2vpn_rt_2byte_as {
    // 2 Byte AS Number
    uint32 two_byte_as = 1;
    // 4 Byte Index
    uint32 four_byte_index = 2;
}

message l2vpn_rt_4byte_as {
    // 4 Byte AS Number
    uint32 four_byte_as = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_rt_v4addr {
    // IPv4 Address
    string ipv4_address = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_rt_es_import {
    // Top 4 bytes of ES Import
    uint32 high_bytes = 1;
    // Low 2 bytes of ES Import
    uint32 low_bytes = 2;
}

message l2vpn_rt {
    string rt = 1;
    l2vpn_rt_2byte_as two_byte_as = 2;
    l2vpn_rt_4byte_as four_byte_as = 3;
    l2vpn_rt_v4addr v4_addr = 4;
    l2vpn_rt_es_import es_import = 5;
}

message l2vpn_rd_auto {
    // BGP Router ID
    string router_id = 1;
    // Auto-generated Index
    uint32 auto_index = 2;
}

message l2vpn_rd_2byte_as {
    // 2 Byte AS Number
    uint32 two_byte_as = 1;
    // 4 Byte Index
    uint32 four_byte_index = 2;
}

message l2vpn_rd_4byte_as {
    // 4 Byte AS Number
    uint32 four_byte_as = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_rd_v4addr {
    // IPv4 Address
    string ipv4_address = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_rd {
    string rd = 1;
    l2vpn_rd_auto auto = 2;
    l2vpn_rd_2byte_as two_byte_as = 3;
    l2vpn_rd_4byte_as four_byte_as = 4;
    l2vpn_rd_v4addr v4_addr = 5;
}

message l2vpn_xc_disco {
    // Autodiscovery Method
    uint32 ad_method = 1;
    // VPN Added
    bool vpn_added = 2;
    // Service Connected
    bool ad_service_connected = 3;
    // Route Distinguisher
    l2vpn_rd rd_value = 4;
    // Import Route Targets
    repeated l2vpn_rt import_rt = 5;
    // Export Route Targets
    repeated l2vpn_rt export_rt = 6;
    // Signaling Protocol
    uint32 ad_signalling_method = 7;
    // CE Range
    uint32 ce_range = 8;
    // Export Route Policy
    string export_route_policy = 9;
    // Number of attachment circuits up
    uint32 number_a_cs_up = 10;
    // Number of pseudowires up
    uint32 number_p_ws_up = 11;
    // Number of ce2ce Advertised
    uint32 number_ce2_ce_advertised = 12;
    // Number of attachment circuits
    uint32 number_a_cs = 13;
    // Number of pseudowires
    uint32 number_pseudowires = 14;
    // Number of ce2ce
    uint32 number_ce2_c_es = 15;
}

