// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2vpn_oper.l2vpn.bridge_domains.bridge_domain.bridge_domain_info;

message l2vpn_bridge_KEYS {
    string bridge_domain_group_name = 1;
    string bridge_domain_name = 2;
}

message l2vpn_bridge {
    // Group name
    string group_name = 50;
    // Bridge-domain name
    string bridge_name = 51;
    // Identification number
    uint32 bridge_domain_id = 52;
    // Bridge-domain state
    string bridge_state = 53;
    // Bridge-domain coupled state
    string bridge_coupled_state = 54;
    // Bridge-domain shgid
    uint32 bridge_shg_id = 55;
    // Bridge-domain msti
    uint32 bridge_msti = 56;
    // Number of bridge ports (AC,PW) which are up
    uint32 acpwup = 57;
    // Bridge-domain internal msti
    uint32 bridge_internal_msti = 58;
    // Bridge-domain is configured
    bool configured = 59;
    // Number of virtual forwarding interfaces
    uint32 number_vf_is = 60;
    // Number of Access VFIs
    uint32 number_access_vf_is = 61;
    // Number of attachment circuits
    uint32 number_a_cs = 62;
    // Number of attachment circuits up
    uint32 number_a_cs_up = 63;
    // Number of pseudowires
    uint32 number_pseudowires = 64;
    // Number of pseudowires up
    uint32 number_p_ws_up = 65;
    // Number of pseudowires standby
    uint32 standby_pseudowires = 66;
    // Number of pbbs
    uint32 number_pb_bs = 67;
    // Number of pbbs up
    uint32 number_pb_bs_up = 68;
    // Number of VNIs
    uint32 num_vn_is = 69;
    // Number of VNIs up
    uint32 num_vn_is_up = 70;
    // Number of pseudowires partially programmed
    uint32 partially_programmed_pseudowires = 71;
    // Number of attachment circuits partially programmed
    uint32 partially_programmed_a_cs = 72;
    // Maximum transmission unit
    uint32 bridge_mtu = 73;
    // Administratively disabled
    bool shutdown = 74;
    // Oper down because MAC limit reached
    bool mac_limit_down = 75;
    // Oper down because no FGID
    bool flodd_group_id_down = 76;
    // Security parameters
    l2vpn_bridge_sec_param security_parameters = 77;
    // MAC withdraw enabled
    bool mac_withdraw = 78;
    // MAC Access PW withdraw enabled
    bool mac_withdraw_access = 79;
    // MAC Access PW withdraw relaying from access to access enabled
    bool mac_withdraw_relay = 80;
    // Event on which MAC withdraw is sent
    string mac_withdraw_option = 81;
    // MAC addresses for filtering
    repeated l2vpn_bd_mac mac_filter = 82;
    // P2MP Enabled on this Bridge Domain
    bool p2_mp_enabled = 83;
    // Virtual Forwarding Interfaces
    repeated l2vpn_vfi bridge_vfi = 84;
    // Access Virtual Forwarding Interfaces
    repeated l2vpn_vfi bridge_access_vfi = 85;
    // Bridge-domain type
    string bridge_type = 86;
    // PBB parameters
    l2vpn_bridge_pbb_params pbb_parameters = 87;
    // EVPN parameters
    l2vpn_bridge_evpn_params evpn_parameters = 88;
    // VNI parameters
    l2vpn_bridge_vni vni_parameters = 89;
    // VNI, IRB, Native-Evpn state
    string vine_fsm_state = 90;
    // Time when the bridge domain was created
    string time_created = 91;
    // Time elapsed since creation
    string time_elapsed_creation = 92;
    // Last time the bridge domain status changed
    string last_time_status_changed = 93;
    // Time elapsed since status changed
    string time_elapsed_status_changed = 94;
    // Load Balance Type
    string load_balance = 95;
    // Bridge is partially programmed
    bool is_bridge_partially_programmed = 96;
    // E-VPN id
    uint32 evi = 97;
    // Config or Auto
    bool is_rd_configured = 98;
    // Route Distinguisher
    l2vpn_rd rd = 99;
    // EVPN Imposition Packet Count
    uint64 imposition_pkt_count = 100;
    // EVPN Imposition Byte Count
    uint64 imposition_byte_count = 101;
    // EVPN Disposition Packet Count
    uint64 disposition_pkt_count = 102;
    // EVPN Disposition Byte Count
    uint64 disposition_bytecount = 103;
    // BGP AS number
    uint32 as = 104;
    // nV Satellite Offload IPv4 Multicast Disabled
    bool n_v_satellite_offload_ipv4_multicast_disabled = 105;
}

// L2FIB statistics counters
message l2fib_stats_bag_counters {
    // packets counters
    uint64 packet_counts = 1;
    // bytes counters
    uint64 byte_counts = 2;
}

// L2FIB imposition statistics
message l2fib_stats_bag_imp {
    // imposition stats
    l2fib_stats_bag_counters imposition_stat = 1;
    // imposition mtu drop stats
    l2fib_stats_bag_counters imposition_mtu_drop = 2;
    // imposition tail drop stats
    l2fib_stats_bag_counters impostion_tail_drop = 3;
    // rx discards
    l2fib_stats_bag_counters l2fsbi_drop = 4;
    // Multicast
    l2fib_stats_bag_counters multicast = 5;
    // Broadcast
    l2fib_stats_bag_counters broadcast = 6;
    // Known Unicast
    l2fib_stats_bag_counters known_unicast = 7;
    // Unknown Unicast
    l2fib_stats_bag_counters unknown_unicast = 8;
}

// L2FIB disposition statistics
message l2fib_stats_bag_disp {
    // disposition stats
    l2fib_stats_bag_counters disposition_stat = 1;
    // disposition mtu drop stats
    l2fib_stats_bag_counters disposition_mtu_drop = 2;
    // disposition tail drop stats
    l2fib_stats_bag_counters disposition_tail_drop = 3;
    // disposition storm control multicast drop stats
    l2fib_stats_bag_counters multicast_drop = 4;
    // disposition storm control unknown unicast drop stats
    l2fib_stats_bag_counters unicast_drop = 5;
    // disposition storm control broadcast drop stats
    l2fib_stats_bag_counters broadcast_drop = 6;
    // tx discards
    l2fib_stats_bag_counters received_drops = 7;
    // Disposition dynamic ARP inspection drop statistics
    l2fib_stats_bag_counters dai_drop = 8;
    // disposition IP source guard drop statistics
    l2fib_stats_bag_counters ipsg_drop = 9;
    // Disposition Out-of-Order Drops
    l2fib_stats_bag_counters disposition_oo_o_drops = 10;
    // Disposition P2MP Stats
    l2fib_stats_bag_counters disposition_p2_mp_stats = 11;
    // Known Unicast
    l2fib_stats_bag_counters known_unicast = 12;
    // MAC Move
    l2fib_stats_bag_counters mac_move = 13;
}

// L2FIB sequence numbers
message l2fib_stats_bag_seq_num {
    // sequence number sent
    uint32 sequence_number_sent = 1;
    // sequence number expected
    uint32 sequence_number_expected = 2;
    // Bypassed inbound sequence packets
    uint64 bypassed_inbound_sequence_packet = 3;
    // Bypassed outbound sequence packets
    uint64 bypassed_out_sequence_packet = 4;
}

// L2FIB forwarding statistics
message l2fib_stats_bag_forwarding {
    // imposition stats
    l2fib_stats_bag_imp impostion_stats = 1;
    // disposition stats
    l2fib_stats_bag_disp dispostion_stats = 2;
    // sequence numbers
    l2fib_stats_bag_seq_num sequence_number = 3;
}

// HASI ID Event
message hasi_id_event {
    // LocalID
    uint64 local_id = 1;
    // RemoteID
    uint64 remore_id = 2;
    // Time
    uint32 time = 3;
    // Count
    uint64 count = 4;
}

// HASI Slave Object ID events
message hasi_s_obj_id_events {
    // Create
    hasi_id_event create = 1;
    // Updates
    hasi_id_event updates = 2;
    // ApplicationSyncs
    hasi_id_event application_syncs = 3;
    // ApplicationNaks
    hasi_id_event application_naks = 4;
    // SummaryReplaySyncs
    hasi_id_event summary_replay_syncs = 5;
    // SummaryReplayNaks
    hasi_id_event summary_replay_naks = 6;
    // CacheNakRetries
    hasi_id_event cache_nak_retries = 7;
}

// HASI Slave Object Context
message hasi_s_object_ctx {
    // ObjectSyncID
    uint64 object_sync_id = 1;
    // ObjectType
    uint32 object_type = 2;
    // ObjectIdEvents
    hasi_s_obj_id_events object_id_events = 3;
}

// HASI Master Slave ID Events
message hasi_m_id_events {
    // ApplicationSyncs
    hasi_id_event application_syncs = 1;
    // ImplicitDeletes
    hasi_id_event implicit_deletes = 2;
    // ApplicationNaks
    hasi_id_event application_naks = 3;
    // SummaryReplaySyncs
    hasi_id_event summary_replay_syncs = 4;
    // SummaryReplayNaks
    hasi_id_event summary_replay_naks = 5;
}

// HASI Master Object Client Info
message hasi_m_object_slave_info {
    // SlaveId
    uint32 slave_id = 1;
    // IdEvents
    hasi_m_id_events id_events = 2;
}

// HASI Master Object Context
message hasi_m_object_ctx {
    // ObjectSyncID
    uint64 object_sync_id = 1;
    // ObjectType
    uint32 object_type = 2;
    // Queue
    uint32 queue = 3;
    // CreateID
    uint64 create_id = 4;
    // CreateTime
    uint32 create_time = 5;
    // UpdateTime
    uint32 update_time = 6;
    // DeleteTime
    uint32 delete_time = 7;
    // DeleteContextLength
    uint32 delete_ctx_lenght = 8;
    // SlaveInformation
    repeated hasi_m_object_slave_info slave_information = 9;
    // HasHistory
    bool has_history = 10;
    // PreActiveHistory
    hasi_s_obj_id_events pre_active_history = 11;
}

// Per object HASI information
message l2vpn_sync_hasi_object {
    // Object Type Name
    string obj_name = 1;
    // Master Context
    hasi_m_object_ctx master_context = 2;
    // Slave Context
    hasi_s_object_ctx slave_context = 3;
    // Do/Do not have Hasi info
    bool in_hasi = 4;
}

message l2vpn_vpls_id_auto {
    // 2 Byte AS Number
    uint32 asn = 1;
    // VPN ID
    uint32 vpn_id = 2;
}

message l2vpn_vpls_id_2byte_as {
    // 2 Byte AS Number
    uint32 two_byte_as = 1;
    // 4 Byte Index
    uint32 four_byte_index = 2;
}

message l2vpn_vpls_id_v4addr {
    // IPv4 Address
    string ipv4_address = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_vpls_id {
    string vpls_id_type = 1;
    l2vpn_vpls_id_auto auto = 2;
    l2vpn_vpls_id_2byte_as two_byte_as = 3;
    l2vpn_vpls_id_v4addr v4_addr = 4;
}

// Storm Control Configuration
message l2vpn_bag_storm_control_type {
    // Bridge Domain Policer
    bool bd_policer = 1;
    // Unknown-unicast Storm Control
    bool unicast = 2;
    // Multicast Storm Control
    bool multicast = 3;
    // Broadcast Storm Control
    bool broadcast = 4;
}

message l2vpn_bridge_sec_param {
    // MAC address limit
    uint32 mac_limit = 1;
    // MAC limit action
    string mac_limit_action = 2;
    // MAC limit notification
    string mac_limit_notification = 3;
    // MAC aging time in seconds
    uint32 mac_aging_time = 4;
    // MAC Aging Mode
    string mac_aging_mode = 5;
    // MAC flooding enabled
    bool mac_flooding = 6;
    // MAC learning enabled
    bool mac_learning = 7;
    // Learning disabled due to MAC limit action
    bool learn_disabled_mac_limit_action = 8;
    // Flooding of unknown-unicast disabled due to MAC limit action
    bool flood_uu_disabled_mac_limit_action = 9;
    // MAC limit reached
    bool mac_limit_reached = 10;
    // Flooding unknown unicast enabled
    bool flood_unknown_unicast_enabled = 11;
    // MAC Flush when port goes down
    bool mac_port_down_flush_enabled = 12;
    // Split Horizon Group ID
    uint32 split_horizon_group_id = 13;
    // Is IP Source Guard Enabled
    bool is_ip_source_guard_enabled = 14;
    // Is IP Source Guard Logging Enabled
    bool is_ipsg_logging_enabled = 15;
    // Is Dynamic ARP Inspection Enabled
    bool is_dai_enabled = 16;
    // Is DAI Logging Enabled
    bool is_dai_logging_enabled = 17;
    // Is DAI Source MAC Address Validation Enabled
    bool is_dai_addr_validate_source_mac_enabled = 18;
    // Is DAI Dstination MAC Address Validation Enabled
    bool is_dai_addr_validate_destination_mac_enabled = 19;
    // Is DAI IPv4 Addr Validation Enabled
    bool is_dai_addr_validate_ipv4_enabled = 20;
    // Is MAC Secure Enabled
    bool is_mac_secure_enabled = 21;
    // MAC Secure Action
    string mac_secure_action = 22;
    // Is MAC Secure Logging Enabled
    bool is_mac_secure_logging_enabled = 23;
    // Is MAC Secure Accept Shutdown Enabled (BP only)
    bool is_mac_secure_accept_shutdown_enabled = 24;
    // DAI Address Validation mask
    uint32 dai_address_validation_mask = 25;
    // DHCPv4 Snoop Status
    bool dhc_pv4_snoop = 26;
    // DHCPv4 Profile Name
    string dhc_pv4_profile_name = 27;
    // IGMPv4 Disabled
    bool igm_pv4_disabled = 28;
    // IGMPv4 Profile Name
    string igm_pv4_profile_name = 29;
    // MLD Profile Name
    string mld_profile_name = 30;
    // MMRP Flood Optimization Status
    bool mmrp_flood_optimization = 31;
    // Storm Control Configuration
    l2vpn_bag_storm_control_type storm_control = 32;
    // Unicast Storm Control Rate Unit
    string unicast_storm_control_rate_unit = 33;
    // Unicast Storm Control PPS
    uint64 unicast_storm_control_pps = 34;
    // Unicast Storm Control KbPS
    uint64 unicast_storm_control_kb_ps = 35;
    // Multicast Storm Control Rate Unit
    string multicast_storm_control_rate_unit = 36;
    // Multicast Storm Control PPS
    uint64 multicast_storm_control_pps = 37;
    // Multicast Storm Control KbPS
    uint64 multicast_storm_control_kb_ps = 38;
    // Broadcast Storm Control Rate Unit
    string broadcast_storm_control_rate_unit = 39;
    // Broadcast Storm Control PPS
    uint64 broadcast_storm_control_pps = 40;
    // Broadcast Storm Control KbPS
    uint64 broadcast_storm_control_kb_ps = 41;
}

message l2vpn_rt_2byte_as {
    // 2 Byte AS Number
    uint32 two_byte_as = 1;
    // 4 Byte Index
    uint32 four_byte_index = 2;
}

message l2vpn_rt_4byte_as {
    // 4 Byte AS Number
    uint32 four_byte_as = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_rt_v4addr {
    // IPv4 Address
    string ipv4_address = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_rt_es_import {
    // Top 4 bytes of ES Import
    uint32 high_bytes = 1;
    // Low 2 bytes of ES Import
    uint32 low_bytes = 2;
}

message l2vpn_rt {
    string rt = 1;
    l2vpn_rt_2byte_as two_byte_as = 2;
    l2vpn_rt_4byte_as four_byte_as = 3;
    l2vpn_rt_v4addr v4_addr = 4;
    l2vpn_rt_es_import es_import = 5;
}

message l2vpn_rd_auto {
    // BGP Router ID
    string router_id = 1;
    // Auto-generated Index
    uint32 auto_index = 2;
}

message l2vpn_rd_2byte_as {
    // 2 Byte AS Number
    uint32 two_byte_as = 1;
    // 4 Byte Index
    uint32 four_byte_index = 2;
}

message l2vpn_rd_4byte_as {
    // 4 Byte AS Number
    uint32 four_byte_as = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_rd_v4addr {
    // IPv4 Address
    string ipv4_address = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_rd {
    string rd = 1;
    l2vpn_rd_auto auto = 2;
    l2vpn_rd_2byte_as two_byte_as = 3;
    l2vpn_rd_4byte_as four_byte_as = 4;
    l2vpn_rd_v4addr v4_addr = 5;
}

message l2vpn_bd_disco {
    // Vpn ID
    uint32 vpn_id = 1;
    // Route Distinguisher
    l2vpn_rd rd_value = 2;
    // Signaling protocol
    uint32 ad_signalling_method = 3;
    // Autodiscovery method
    uint32 ad_method = 4;
    // VPLS Edge ID
    uint32 ve_id = 5;
    // Provisioned VPLS edge ID
    uint32 provisioned_ve_id = 6;
    // VE range
    uint32 ve_range = 7;
    // List of import route targets
    repeated l2vpn_rt import_rt = 8;
    // List of export route targets
    repeated l2vpn_rt export_rt = 9;
    // Autonomous System Number
    uint32 as_number = 10;
    // VPLS ID
    l2vpn_vpls_id vpls_id = 11;
    // L2PVN Router ID
    string l2_vpn_router_id = 12;
    // Is VPN id configured
    bool vpn_added = 13;
    // Is the BGP service connected?
    bool service_connected = 14;
    // VPLS-ID Conflict
    bool vpls_id_conflict = 15;
    // Export Route Policy
    string export_route_policy = 16;
}

message l2vpn_bridge_port_sec_param {
    // Basic Security Parameters
    l2vpn_bridge_sec_param base = 1;
    // Storm Control Configuration
    l2vpn_bag_storm_control_type storm_control = 2;
    // Unicast Storm Control Rate Unit
    string unicast_storm_control_rate_unit = 3;
    // Unicast Storm Control PPS
    uint64 unicast_storm_control_pps = 4;
    // Unicast Storm Control KbPS
    uint64 unicast_storm_control_kb_ps = 5;
    // Multicast Storm Control Rate Unit
    string multicast_storm_control_rate_unit = 6;
    // Multicast Storm Control PPS
    uint64 multicast_storm_control_pps = 7;
    // Multicast Storm Control KbPS
    uint64 multicast_storm_control_kb_ps = 8;
    // Broadcast Storm Control Rate Unit
    string broadcast_storm_control_rate_unit = 9;
    // Broadcast Storm Control PPS
    uint64 broadcast_storm_control_pps = 10;
    // Broadcast Storm Control KbPS
    uint64 broadcast_storm_control_kb_ps = 11;
    // DHCPv4 Trust Status
    bool dhc_pv4_trust = 12;
}

// L2VPN Static MAC Address
message l2vpn_bd_mac {
    // MAC address
    string address = 1;
    // Backbone MAC address
    string bmac = 2;
    // Next Hop IP
    string next_hop_ip = 3;
}

message l2vpn_vfi_p2mp {
    // P2MP transport
    string transport = 1;
    // P2MP signaling
    string signaling = 2;
    // PTree ID
    uint32 p_tree_id = 3;
    // TE Attribute Set Name
    string attribute_set_name = 4;
    // Transport Status
    string transport_status = 5;
    // P2MP Tunnel Local Label
    uint32 local_label = 6;
    // P2MP Tunnel Interface Name
    string tunnel_interface = 7;
}

// L2VPN Virtual Forwarding Instance
message l2vpn_vfi {
    // Virtual forwarding instance name
    string vfi_name = 1;
    // Shutdown
    bool shutdown = 2;
    // VFI is an Access VFI
    bool access = 3;
    // VFI state
    string vfi_state = 4;
    // Number of Pseudowires
    uint32 number_pseudowires = 5;
    // Auto Discovery information
    l2vpn_bd_disco discovery_information = 6;
    // Multicast P2MP information
    repeated l2vpn_vfi_p2mp p2_mp_information = 7;
}

// L2VPN PBB edge port
message l2vpn_bd_pbb_edge_port {
    // Xconnect ID
    uint32 x_connect_id = 1;
    // Unknown Unicast MAC Configured
    bool unknown_unicast_mac_set = 2;
    // Unknown Unicast MAC
    string unknown_unicast_mac = 3;
    // CMAC to BMAC Mapping
    repeated l2vpn_bd_mac bmac_mapping = 4;
    // Security Parameters
    l2vpn_bridge_port_sec_param security_parameters = 5;
    // PBB Edge Port State
    string edge_port_state = 6;
    // Statistics
    l2fib_stats_bag_forwarding statistics = 7;
}

// L2VPN PBB core port
message l2vpn_bd_pbb_core_port {
    // Xconnect ID
    uint32 x_connect_id = 1;
    // Vlan ID
    uint32 vlan_id = 2;
    // Security Parameters
    l2vpn_bridge_port_sec_param security_parameters = 3;
    // PBB Core Port State
    string core_port_state = 4;
}

// L2VPN EVPN port
message l2vpn_bd_evpn_port {
    // Xconnect ID
    uint32 x_connect_id = 1;
    // Security Parameters
    l2vpn_bridge_port_sec_param security_parameters = 2;
    // EVPN Port State
    string evpn_port_state = 3;
    // Statistics
    l2fib_stats_bag_forwarding statistics = 4;
}

message l2vpn_bridge_pbb_edge {
    // SID
    uint32 i_sid = 1;
    // Core Bridge Domain Name
    string core_bridge_name = 2;
    // Core Bridge State
    string core_bridge_state = 3;
    // PBB Edge Port
    l2vpn_bd_pbb_edge_port edge_port = 4;
    // MIRP-lite Status
    string mirp_lite_status = 5;
    // MIRP-lite protocol info
    string mirp_lite_protocol = 6;
}

message l2vpn_bridge_pbb_core {
    // Number of Associated PBB Edges
    uint32 num_ass_edge = 1;
    // PBB Core Port
    l2vpn_bd_pbb_core_port core_port = 2;
}

message l2vpn_bridge_pbb_params {
    string type = 1;
    // PBB Edge
    l2vpn_bridge_pbb_edge pbb_edge = 2;
    // PBB Core
    l2vpn_bridge_pbb_core pbb_core = 3;
}

message l2vpn_bridge_vni {
    // VNI
    uint32 vni = 1;
    // NVE Overlay
    string overlay = 2;
    // Static MAC addresses
    repeated l2vpn_bd_mac static_mac = 3;
    // Source IP Address
    string source_ip_addr = 4;
    // Multicast Group Address
    string multicast_group_addr = 5;
    // Anycast VTEP IP Address
    string anycast_vtep_ip_addr = 6;
    // Anycast Multicast Group Address
    string anycast_mcast_group_addr = 7;
    // UDP Port
    uint32 udp_port = 8;
    // VNI Encapsulation Type
    string vni_encap_type = 9;
    // VNI Port State
    string vni_port_state = 10;
    // VNI Mode
    string vni_mode = 11;
    // Security Parameters
    l2vpn_bridge_port_sec_param security_parameters = 12;
    // Xconnect ID
    uint32 x_connect_id = 13;
    // Statistics
    l2fib_stats_bag_forwarding statistics = 14;
}

message l2vpn_bridge_evpn_params {
    // E-VPN id
    uint32 evi = 1;
    // EVPN Port
    l2vpn_bd_evpn_port evpn_port = 2;
}

