// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2vpn_oper.l2vpn.bridge_domains.bridge_domain.bridge_acs.bridge_ac;

// L2VPN Bridge Attachment Circuit
message l2vpn_bd_ac_KEYS {
    string bridge_domain_group_name = 1;
    string bridge_domain_name = 2;
    string interface_name = 3;
}

message l2vpn_bd_ac {
    // Attachment Circuit
    l2vpn_ac attachment_circuit = 50;
    // Security Parameters
    l2vpn_bridge_port_sec_param security_parameters = 51;
    // MyMac Index
    uint32 bvi_mac_index = 52;
    // Static MAC addresses
    repeated l2vpn_bd_mac static_mac = 53;
    // BVI MAC addresses
    repeated l2vpn_bd_mac bvimac = 54;
}

// L2FIB statistics counters
message l2fib_stats_bag_counters {
    // packets counters
    uint64 packet_counts = 1;
    // bytes counters
    uint64 byte_counts = 2;
}

// L2FIB imposition statistics
message l2fib_stats_bag_imp {
    // imposition stats
    l2fib_stats_bag_counters imposition_stat = 1;
    // imposition mtu drop stats
    l2fib_stats_bag_counters imposition_mtu_drop = 2;
    // imposition tail drop stats
    l2fib_stats_bag_counters impostion_tail_drop = 3;
    // rx discards
    l2fib_stats_bag_counters l2fsbi_drop = 4;
    // Multicast
    l2fib_stats_bag_counters multicast = 5;
    // Broadcast
    l2fib_stats_bag_counters broadcast = 6;
    // Known Unicast
    l2fib_stats_bag_counters known_unicast = 7;
    // Unknown Unicast
    l2fib_stats_bag_counters unknown_unicast = 8;
}

// L2FIB disposition statistics
message l2fib_stats_bag_disp {
    // disposition stats
    l2fib_stats_bag_counters disposition_stat = 1;
    // disposition mtu drop stats
    l2fib_stats_bag_counters disposition_mtu_drop = 2;
    // disposition tail drop stats
    l2fib_stats_bag_counters disposition_tail_drop = 3;
    // disposition storm control multicast drop stats
    l2fib_stats_bag_counters multicast_drop = 4;
    // disposition storm control unknown unicast drop stats
    l2fib_stats_bag_counters unicast_drop = 5;
    // disposition storm control broadcast drop stats
    l2fib_stats_bag_counters broadcast_drop = 6;
    // tx discards
    l2fib_stats_bag_counters received_drops = 7;
    // Disposition dynamic ARP inspection drop statistics
    l2fib_stats_bag_counters dai_drop = 8;
    // disposition IP source guard drop statistics
    l2fib_stats_bag_counters ipsg_drop = 9;
    // Disposition Out-of-Order Drops
    l2fib_stats_bag_counters disposition_oo_o_drops = 10;
    // Disposition P2MP Stats
    l2fib_stats_bag_counters disposition_p2_mp_stats = 11;
    // Known Unicast
    l2fib_stats_bag_counters known_unicast = 12;
    // MAC Move
    l2fib_stats_bag_counters mac_move = 13;
}

// L2FIB sequence numbers
message l2fib_stats_bag_seq_num {
    // sequence number sent
    uint32 sequence_number_sent = 1;
    // sequence number expected
    uint32 sequence_number_expected = 2;
    // Bypassed inbound sequence packets
    uint64 bypassed_inbound_sequence_packet = 3;
    // Bypassed outbound sequence packets
    uint64 bypassed_out_sequence_packet = 4;
}

// L2FIB forwarding statistics
message l2fib_stats_bag_forwarding {
    // imposition stats
    l2fib_stats_bag_imp impostion_stats = 1;
    // disposition stats
    l2fib_stats_bag_disp dispostion_stats = 2;
    // sequence numbers
    l2fib_stats_bag_seq_num sequence_number = 3;
}

// Interface info for Generic interface list
message item_iflist_if {
    // Interface name
    string interface_name = 1;
    // Replicate status
    string replicate_status = 2;
}

// Generic interface list info
message item_iflist_ifl {
    // Interface-list name
    string interface_list_name = 1;
    // Interface internal ID
    uint32 interface_list_id = 2;
    // Interfaces
    repeated item_iflist_if interfaces = 3;
}

message l2vpn_ethernet {
    // XConnect tags
    uint32 x_connect_tags = 1;
}

// EFP range
message l2vpn_efp_range {
    uint32 lower = 1;
    uint32 upper = 2;
}

message l2vpn_vlan {
    // XConnect tags
    uint32 x_connect_tags = 1;
    // VLAN rewrite tag
    uint32 vlan_rewrite_tag = 2;
    // Simple EFP
    uint32 simple_efp = 3;
    // Encapsulation Type
    uint32 encapsulation_type = 4;
    // Outer Tag
    uint32 outer_tag = 5;
    repeated l2vpn_efp_range vlan_ranges = 6;
}

message l2vpn_atm {
    // Max number of cells packed
    uint32 maximum_number_cells_packed = 1;
    // Max number of cells unpacked
    uint32 maximum_number_cells_un_packed = 2;
    // ATM mode
    string atm_mode = 3;
    // Virtual path identifier
    uint32 vpi = 4;
    // Virtual channel identifier
    uint32 vci = 5;
}

message l2vpn_fr {
    // Frame Relay mode
    string fr_mode = 1;
    // Data-link connection identifier
    uint32 dlci = 2;
}

message l2vpn_pwhe {
    // Is this Interface list valid
    bool is_valid = 1;
    // Interface list data
    item_iflist_ifl interface_list = 2;
    // Internal Label
    uint32 internal_label = 3;
}

// L2VPN TDM options
message l2vpn_tdm_option {
    // TDM payload bytes
    uint32 payload_bytes = 1;
    // TDM bit rate in units of Kbps
    uint32 bit_rate = 2;
    // RTP header
    string rtp = 3;
    // TDM Timestamping mode
    string timestamp_mode = 4;
    // Signalling packets
    uint32 signalling_packets = 5;
    // CAS
    uint32 cas = 6;
    // RTP header payload type
    uint32 rtp_header_payload_type = 7;
    // Timestamping clock frequency in units of 8Khz
    uint32 timestamp_clock_freq = 8;
    // Synchronization Source identifier
    uint32 ssrc = 9;
}

// L2VPN TDM parameters
message l2vpn_tdm {
    // Timeslots separated by , or - from 1 to 31. : indicates individual timeslot and - represents a range.E.g. 1-3,5 represents timeslots 1, 2, 3, and 5.
    string timeslot_group = 1;
    // Timeslot rate in units of Kbps
    uint32 timeslot_rate = 2;
    // TDM mode
    string tdm_mode = 3;
    // TDM options
    l2vpn_tdm_option tdm_options = 4;
}

message l2vpn_interface_params {
    string type = 1;
    // Ethernet
    l2vpn_ethernet ethernet = 2;
    // VLAN
    l2vpn_vlan vlan = 3;
    // TDM
    l2vpn_tdm tdm = 4;
    // ATM
    l2vpn_atm atm = 5;
    // Frame Relay
    l2vpn_fr fr = 6;
    // PW Ether
    l2vpn_pwhe pseudowire_ether = 7;
    // PW IW
    l2vpn_pwhe pseudowire_iw = 8;
}

message l2vpn_interface {
    // Interface name
    string name = 1;
    // Interface MTU
    uint32 mtu = 2;
    // Payload bytes
    uint32 payload_bytes = 3;
    // Interface parameters
    l2vpn_interface_params parameters = 4;
}

message l2vpn_protection {
    // Type of the protection
    string protection_type = 1;
    // Protection configured
    string protection_configured = 2;
    // Name of the segment acting as backup
    string protection_name = 3;
    // Name of the protected segment
    string protected_name = 4;
    // Active
    bool active = 5;
}

message l2vpn_ac {
    // Interface
    l2vpn_interface interface = 1;
    // State
    string state = 2;
    // MSTi
    string msti = 3;
    // Internal MSTi
    string internal_ms_ti = 4;
    // Interface Handler
    string interface_handle = 5;
    // Node ID
    string node_id = 6;
    // XConnect ID
    uint32 x_connect_id = 7;
    // MSTi mismatch
    bool ms_ti_mismatch = 8;
    // MTU mismatched
    bool mtu_mismatched = 9;
    // TDM media parms mismatched
    bool tdm_media_mismatched = 10;
    // BVI Mac Conflict
    bool bvi_mac_conflict = 11;
    // BVI no BP Up
    bool bvi_no_port_up = 12;
    // Control word mismatched
    bool control_word_mismatched = 13;
    // Encapsulation mismatched
    bool encapsulation_mismatched = 14;
    // Encapsulation Error
    string encapsulation_error = 15;
    // Interworking type
    string interworking = 16;
    // L2VPN Out of memory state
    uint32 out_of_memory_state = 17;
    // Statistics
    l2fib_stats_bag_forwarding statistics = 18;
    // Oper down due to MSTI mismatch
    bool msti_mismatch_down = 19;
    // Oper down because MAC limit reached
    bool mac_limit_oper_down = 20;
    // Redundancy Group ID
    uint32 redundancy_group_id = 21;
    // Redundancy Group State
    string redundancy_group_state = 22;
    // Redundancy Object ID
    uint64 redundancy_object_id = 23;
    // Protection object used for this segment
    l2vpn_protection l2vpn_protection = 24;
    // Is attachment-circuit partially programmed
    bool is_ac_partially_programmed = 25;
    // EVPN Internal Label
    uint32 evpn_internal_label = 26;
}

// Storm Control Configuration
message l2vpn_bag_storm_control_type {
    // Bridge Domain Policer
    bool bd_policer = 1;
    // Unknown-unicast Storm Control
    bool unicast = 2;
    // Multicast Storm Control
    bool multicast = 3;
    // Broadcast Storm Control
    bool broadcast = 4;
}

message l2vpn_bridge_sec_param {
    // MAC address limit
    uint32 mac_limit = 1;
    // MAC limit action
    string mac_limit_action = 2;
    // MAC limit notification
    string mac_limit_notification = 3;
    // MAC aging time in seconds
    uint32 mac_aging_time = 4;
    // MAC Aging Mode
    string mac_aging_mode = 5;
    // MAC flooding enabled
    bool mac_flooding = 6;
    // MAC learning enabled
    bool mac_learning = 7;
    // Learning disabled due to MAC limit action
    bool learn_disabled_mac_limit_action = 8;
    // Flooding of unknown-unicast disabled due to MAC limit action
    bool flood_uu_disabled_mac_limit_action = 9;
    // MAC limit reached
    bool mac_limit_reached = 10;
    // Flooding unknown unicast enabled
    bool flood_unknown_unicast_enabled = 11;
    // MAC Flush when port goes down
    bool mac_port_down_flush_enabled = 12;
    // Split Horizon Group ID
    uint32 split_horizon_group_id = 13;
    // Is IP Source Guard Enabled
    bool is_ip_source_guard_enabled = 14;
    // Is IP Source Guard Logging Enabled
    bool is_ipsg_logging_enabled = 15;
    // Is Dynamic ARP Inspection Enabled
    bool is_dai_enabled = 16;
    // Is DAI Logging Enabled
    bool is_dai_logging_enabled = 17;
    // Is DAI Source MAC Address Validation Enabled
    bool is_dai_addr_validate_source_mac_enabled = 18;
    // Is DAI Dstination MAC Address Validation Enabled
    bool is_dai_addr_validate_destination_mac_enabled = 19;
    // Is DAI IPv4 Addr Validation Enabled
    bool is_dai_addr_validate_ipv4_enabled = 20;
    // Is MAC Secure Enabled
    bool is_mac_secure_enabled = 21;
    // MAC Secure Action
    string mac_secure_action = 22;
    // Is MAC Secure Logging Enabled
    bool is_mac_secure_logging_enabled = 23;
    // Is MAC Secure Accept Shutdown Enabled (BP only)
    bool is_mac_secure_accept_shutdown_enabled = 24;
    // DAI Address Validation mask
    uint32 dai_address_validation_mask = 25;
    // DHCPv4 Snoop Status
    bool dhc_pv4_snoop = 26;
    // DHCPv4 Profile Name
    string dhc_pv4_profile_name = 27;
    // IGMPv4 Disabled
    bool igm_pv4_disabled = 28;
    // IGMPv4 Profile Name
    string igm_pv4_profile_name = 29;
    // MLD Profile Name
    string mld_profile_name = 30;
    // MMRP Flood Optimization Status
    bool mmrp_flood_optimization = 31;
    // Storm Control Configuration
    l2vpn_bag_storm_control_type storm_control = 32;
    // Unicast Storm Control Rate Unit
    string unicast_storm_control_rate_unit = 33;
    // Unicast Storm Control PPS
    uint64 unicast_storm_control_pps = 34;
    // Unicast Storm Control KbPS
    uint64 unicast_storm_control_kb_ps = 35;
    // Multicast Storm Control Rate Unit
    string multicast_storm_control_rate_unit = 36;
    // Multicast Storm Control PPS
    uint64 multicast_storm_control_pps = 37;
    // Multicast Storm Control KbPS
    uint64 multicast_storm_control_kb_ps = 38;
    // Broadcast Storm Control Rate Unit
    string broadcast_storm_control_rate_unit = 39;
    // Broadcast Storm Control PPS
    uint64 broadcast_storm_control_pps = 40;
    // Broadcast Storm Control KbPS
    uint64 broadcast_storm_control_kb_ps = 41;
}

message l2vpn_bridge_port_sec_param {
    // Basic Security Parameters
    l2vpn_bridge_sec_param base = 1;
    // Storm Control Configuration
    l2vpn_bag_storm_control_type storm_control = 2;
    // Unicast Storm Control Rate Unit
    string unicast_storm_control_rate_unit = 3;
    // Unicast Storm Control PPS
    uint64 unicast_storm_control_pps = 4;
    // Unicast Storm Control KbPS
    uint64 unicast_storm_control_kb_ps = 5;
    // Multicast Storm Control Rate Unit
    string multicast_storm_control_rate_unit = 6;
    // Multicast Storm Control PPS
    uint64 multicast_storm_control_pps = 7;
    // Multicast Storm Control KbPS
    uint64 multicast_storm_control_kb_ps = 8;
    // Broadcast Storm Control Rate Unit
    string broadcast_storm_control_rate_unit = 9;
    // Broadcast Storm Control PPS
    uint64 broadcast_storm_control_pps = 10;
    // Broadcast Storm Control KbPS
    uint64 broadcast_storm_control_kb_ps = 11;
    // DHCPv4 Trust Status
    bool dhc_pv4_trust = 12;
}

// L2VPN Static MAC Address
message l2vpn_bd_mac {
    // MAC address
    string address = 1;
    // Backbone MAC address
    string bmac = 2;
    // Next Hop IP
    string next_hop_ip = 3;
}

