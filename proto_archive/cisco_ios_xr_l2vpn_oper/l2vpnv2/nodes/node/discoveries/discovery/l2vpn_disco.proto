// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2vpn_oper.l2vpnv2.nodes.node.discoveries.discovery;

// L2VPN DISCO
message l2vpn_disco_KEYS {
    string node_id = 1;
    string service_name = 2;
    string group_name = 3;
    string vpn_name = 4;
}

message l2vpn_disco {
    // Ignore MTU Mismatch
    bool mtu_mismatch_ignore = 50;
    // Number of vpns
    uint32 number_vpn = 51;
    // VPN id
    uint32 vpn_id = 52;
    // Service Type
    string service_name = 53;
    // Group name
    string group_name = 54;
    // VPN instance name
    string vpn_name = 55;
    // Is the service connected
    bool is_service_connected = 56;
    // Info about signalling protocol
    l2vpn_disco_sig_info signalling_info = 57;
}

message l2vpn_vpls_id_auto {
    // 2 Byte AS Number
    uint32 asn = 1;
    // VPN ID
    uint32 vpn_id = 2;
}

message l2vpn_vpls_id_2byte_as {
    // 2 Byte AS Number
    uint32 two_byte_as = 1;
    // 4 Byte Index
    uint32 four_byte_index = 2;
}

message l2vpn_vpls_id_v4addr {
    // IPv4 Address
    string ipv4_address = 1;
    // 2 Byte Index
    uint32 two_byte_index = 2;
}

message l2vpn_vpls_id {
    string vpls_id_type = 1;
    l2vpn_vpls_id_auto auto = 2;
    l2vpn_vpls_id_2byte_as two_byte_as = 3;
    l2vpn_vpls_id_v4addr v4_addr = 4;
}

message l2vpn_label_block {
    // Creation time
    uint32 label_time_created = 1;
    // Label Base
    uint32 label_base = 2;
    // Block offset
    uint32 block_offset = 3;
    // Block size
    uint32 block_size = 4;
    // Local edge ID
    uint32 local_edge_id = 5;
    //  Peer id
    string next_hop = 6;
    // Status Vector
    repeated uint32 status_vector = 7;
    // Label Error
    string label_error = 8;
}

message l2vpn_nlri_ldp_sig {
    // NLRI creation time
    uint32 nlri_time_created = 1;
    // Local BGP Address
    string local_address = 2;
    // Remote BGP Address
    string remote_address = 3;
    // Remote L2VPN Router ID
    string remote_l2_router_id = 4;
}

message l2vpn_disco_edge {
    // Edge ids
    uint32 edge_id = 1;
    // Number of label blocks
    uint32 label_count = 2;
    // List of label blocks
    repeated l2vpn_label_block label_block = 3;
}

message l2vpn_disco_ldp_sig {
    // Local VPLS-ID
    l2vpn_vpls_id local_vpls_id = 1;
    // Local L2VPN Router ID
    string local_l2_router_id = 2;
    // Number of remote Edges
    uint32 number_remote_edges = 3;
    // List of NLRIs
    repeated l2vpn_nlri_ldp_sig remote_nlr_is = 4;
}

message l2vpn_disco_bgp_sig {
    // Number of Edges
    uint32 number_edges = 1;
    // Number of remote Edges
    uint32 number_remote_edges = 2;
    // List of edge ids
    repeated l2vpn_disco_edge edge = 3;
    // List of edge ids
    repeated l2vpn_disco_edge r_edge = 4;
}

message l2vpn_disco_sig_info {
    string ad_signalling_method = 1;
    l2vpn_disco_bgp_sig bgp_sig_info = 2;
    l2vpn_disco_ldp_sig ldp_sig_info = 3;
}

