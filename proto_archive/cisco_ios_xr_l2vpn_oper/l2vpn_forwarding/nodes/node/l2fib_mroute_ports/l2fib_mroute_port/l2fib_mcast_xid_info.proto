// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_mroute_ports.l2fib_mroute_port;

// L2fib xid info
message l2fib_mcast_xid_info_KEYS {
    string node_id = 1;
    string bd_name = 2;
    uint32 xcid = 3;
    string source = 4;
    string group = 5;
}

message l2fib_mcast_xid_info {
    // Base Information
    l2fib_base_info base_information = 50;
    // Bridge Id
    uint32 bridge_id = 51;
    // AC If handle
    string ac_interface_handle = 52;
    // Leaf Ptr
    uint32 leaf_pointer = 53;
    // PW ID
    bytes pw_id = 54;
    // NHOP IP Address
    string next_hop_address = 55;
    // Forwarding Statistics
    l2fib_platform_stats_bag forward_stats = 56;
    // Source Prefix
    l2fib_prefix_info source_prefix = 57;
    // Destination Prefix
    l2fib_prefix_info destination_prefix = 58;
    // Isid Id
    uint32 isid = 59;
    // Csfl Id
    uint32 csfl = 60;
    // Sat Id
    uint32 sat_id = 61;
    // Ole Offloaded
    bool is_ole_offloaded = 62;
    // Ole Master
    bool is_ole_master = 63;
    // Topo HubAndSpoke
    bool is_topo_hub_and_spoke = 64;
}

// L2FIB mcast statistics counters
message l2fib_mcast_bag_counters {
    // Number of packets
    uint64 packets = 1;
    // Number of bytes
    uint64 bytes = 2;
}

// L2FIB mcast forwarding statistics
message l2fib_mcast_stats_bag {
    // forwarded stats
    l2fib_mcast_bag_counters multicast_forward_stat = 1;
    // received stats
    l2fib_mcast_bag_counters received_stat = 2;
    // punted stats
    l2fib_mcast_bag_counters punt = 3;
    // dropped stats
    l2fib_mcast_bag_counters drop = 4;
    // core forwarded stats
    l2fib_mcast_bag_counters multicast_core_forward_stat = 5;
    // core received stats
    l2fib_mcast_bag_counters core_received_stat = 6;
}

message l2fib_platform_stats_union_bag {
    string data_type = 1;
    l2fib_mcast_stats_bag mulicast = 2;
}

// L2FIB platform statistics
message l2fib_platform_stats_bag {
    // fwd stats
    l2fib_platform_stats_union_bag forward_stat = 1;
}

message l2fib_base_info {
}

// L2FIB event item
message l2fib_evt_entry {
    // The real timestamp of the event
    bytes event_time = 1;
    // Event type
    uint32 event_type = 2;
    // Multiple event instance flag
    bool event_many = 3;
    // Unwrittable flag
    bool event_sticky = 4;
    // base flag object
    uint32 event_flags = 5;
}

// L2FIB event history
message l2fib_evt_history {
    // number of item in the array
    uint32 event_neighbor_entry = 1;
    repeated l2fib_evt_entry event_entry = 2;
}

message l2fib_prefix_info {
    // The prefix protocol
    uint32 proto = 1;
    // The prefix length
    uint32 prefix_length = 2;
    // The prefix
    bytes prefix = 3;
}

