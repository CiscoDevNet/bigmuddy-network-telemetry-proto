// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fibmac_hardware_egresses.l2fibmac_hardware_egress;

// L2VPN bridge MAC address info
message l2fib_bridge_mac_info_KEYS {
    string node_id = 1;
    string address = 2;
    string group_name = 3;
    string name = 4;
}

message l2fib_bridge_mac_info {
    // Base information
    l2fib_base_info base = 50;
    // Platform is HW Learn
    uint32 platform_is_hw_learn = 51;
    // Segment
    l2fib_bridge_port_seg_key_un segment = 52;
    // Nodeid list
    string node_id = 53;
    // Bridge name
    string bridge_domain_name = 54;
    // Bridge ID
    uint32 bridge_id = 55;
    // Flag: Configured BMAC
    bool bmac_configured = 56;
    // Flag: L3 Vxlan
    bool vni_l3_flag = 57;
    // Backbone MAC Address
    string pbb_bmac = 58;
    // L3 encapsulation Vlan ID
    uint32 l3_encapsulation_vlan_id = 59;
    // Evpn Context
    l2fib_bridge_mac_evpn_ctx_un evpn_ctx = 60;
    // IS Next Hop Valid
    bool next_hop_valid = 61;
    // Next Hop
    l2fib_nhop_info next_hop = 62;
    // Peer VTEP IP for this MAC Address
    string peer_vtep_ip = 63;
    // MAC Flag Extension
    uint32 flag_extension = 64;
    // VNI Information
    uint32 vni = 65;
}

message l2fib_base_info {
}

// L2FIB event item
message l2fib_evt_entry {
    // The real timestamp of the event
    bytes event_time = 1;
    // Event type
    uint32 event_type = 2;
    // Multiple event instance flag
    bool event_many = 3;
    // Unwrittable flag
    bool event_sticky = 4;
    // base flag object
    uint32 event_flags = 5;
}

// L2FIB event history
message l2fib_evt_history {
    // number of item in the array
    uint32 event_neighbor_entry = 1;
    repeated l2fib_evt_entry event_entry = 2;
}

message l2fib_pw_key_info {
    // Pseudowire ID
    uint64 pw_id = 1;
    // Next Hop Address
    string next_hop_address = 2;
    // Pseudowire ID type
    string pseudo_wire_id_type = 3;
}

message l2fib_ac_key_info {
    // Interface Handle
    string interface_handle = 1;
}

message l2fib_nhop_info {
    // Base Information
    l2fib_base_info base = 1;
    // NHOP Address
    string next_hop_address = 2;
    // NHOP Internal Label
    uint32 next_hop_internal_label = 3;
    // Is Platform Data Valid
    bool plaformt_data_valid = 4;
    // Platform Data Length
    uint32 platform_data_length = 5;
    // Children Count
    uint32 children_count = 6;
}

message l2fib_pbb_key_info {
    // Xconnect ID
    uint32 xcid = 1;
}

message l2fib_vni_key_info {
    // Xconnect ID
    uint32 xcid = 1;
    // Parent NVE Interface
    string parent_if = 2;
}

message l2fib_evpn_key_info {
    // Xconnect ID
    uint32 xcid = 1;
}

message l2fib_bridge_port_seg_key_un {
    string data_type = 1;
    l2fib_ac_key_info ac = 2;
    l2fib_pbb_key_info pbb = 3;
    l2fib_vni_key_info vni = 4;
    l2fib_evpn_key_info evpn = 5;
    l2fib_pw_key_info pw = 6;
}

message l2vpn_evpn_moi_info {
    // Next Hop IPv6 address
    string next_hop_ipv6_addr = 1;
    // Inclusive mcast label
    uint32 m_cast_label = 2;
}

message l2fib_bridge_mac_evpn_ctx_un {
    string data_type = 1;
    uint32 esi_id = 2;
    uint32 local_label = 3;
    l2vpn_evpn_moi_info m_cast_ole = 4;
    string bp_ifh = 5;
}

