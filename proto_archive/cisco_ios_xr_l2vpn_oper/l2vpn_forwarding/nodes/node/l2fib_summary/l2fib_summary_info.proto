// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_summary;

// L2FIB summary info
message l2fib_summary_info_KEYS {
    string node_id = 1;
}

message l2fib_summary_info {
    // xconnect db summary info
    l2fib_xc_summary_info xconnect_summary = 50;
    // nhop db summry info
    l2fib_nh_summary_info next_hop_summary = 51;
    // L2TP disposition object summary
    l2fib_l2tp_disp_summary_info l2_tp_disposition_summary = 52;
    // Bridge-domain summary info
    l2fib_bd_summary_info bridge_domain_summary = 53;
    // mac summary info
    l2fib_mac_summary_info mac_summary = 54;
    // queue summary info
    l2fib_obj_queues_summary queue_summary = 55;
    // evpn summary info
    l2fib_evpn_summary_info evpn_summary = 56;
    // Global configuration
    l2fib_global_cfg_info global_cfg = 57;
    // P2MP PTree summary info
    l2fib_ptree_summary_info p_tree_summary = 58;
    // PWGroup summary info
    l2fib_pwgroup_summary_info pw_group_summary = 59;
    // PWHE Main-port summary info
    l2fib_pwhe_mp_summary_info pwhe_mp_summary = 60;
}

message l2fib_base_info {
}

// L2FIB event item
message l2fib_evt_entry {
    // The real timestamp of the event
    bytes event_time = 1;
    // Event type
    uint32 event_type = 2;
    // Multiple event instance flag
    bool event_many = 3;
    // Unwrittable flag
    bool event_sticky = 4;
    // base flag object
    uint32 event_flags = 5;
}

// L2FIB event history
message l2fib_evt_history {
    // number of item in the array
    uint32 event_neighbor_entry = 1;
    repeated l2fib_evt_entry event_entry = 2;
}

message l2fib_obj_queues_summary {
    // number of objects in inline queue
    uint32 inline_cnt = 1;
    // number of objects in retry queue
    uint32 retry_cnt = 2;
    // number of objects in update queues
    uint32 update_cnt = 3;
    // number of objects in delete queues
    uint32 del_cnt = 4;
}

// xconnect db summary
message l2fib_xc_summary_info {
    // total number of entries
    uint32 xconnect_count = 1;
    // number of up entries
    uint32 xconnect_up_count = 2;
    // number of down entries
    uint32 xconnect_down_count = 3;
    // number of ac->pw-mpls entries
    uint32 ac_to_pw_count_mpls = 4;
    // number of ac->pw-l2tp entries
    uint32 ac_to_pw_count_l2_tp = 5;
    // number of ac->pw-l2tp-ipv6 entries
    uint32 ac_to_pw_count_l2_tp_ip_v6 = 6;
    // number of ac->pw-l2tpv2 entries
    uint32 ac_to_pw_count_l2_tpv2 = 7;
    // number of ac->ac entries
    uint32 ac_to_ac_count = 8;
    // number of ac->unknown type entries
    uint32 ac_to_unknown_count = 9;
    // number of monitor_session->pw entries
    uint32 mon_sess_to_pw_count = 10;
    // number of monitor_session->unknown type entries
    uint32 mon_sess_to_unknown_count = 11;
    // number of ac->bp entries
    uint32 ac_to_bp_count = 12;
    // number of pw->bp entries
    uint32 pw_to_bp_count = 13;
    // number of pw->unknown type entries
    uint32 pw_to_unknown_count = 14;
    // number of pbb->bp entries
    uint32 pbb_to_bp_count = 15;
    // number of pbb->unknown type entries
    uint32 pbb_to_unknown_count = 16;
    // number of vni->bp entries
    uint32 vni_to_bp_count = 17;
    // number of vni->unknown type entries
    uint32 vni_to_unknown_count = 18;
    // number of evpn->bp entries
    uint32 evpn_to_bp_count = 19;
    // number of evpn->unknown type entries
    uint32 evpn_to_unknown_count = 20;
    // number of down acs with reason aib
    uint32 ac_down_count_aib = 21;
    // number of down acs with reason l2vpn
    uint32 ac_down_count_l2_vpn = 22;
    // number of down acs with reason fib
    uint32 ac_down_count_l3_fib = 23;
    // number of down acs with reason vpdn
    uint32 ac_down_count_vpdn = 24;
    // number of xc updates dropped due to VPWS PW invalid xid
    uint32 vpws_pw_invalid_xid_drop_count = 25;
    // number of xc updates dropped due to VPLS PW invalid xid
    uint32 vpls_pw_invalid_xid_drop_count = 26;
    // number of xc updates dropped due to Virtual AC invalid xid
    uint32 virtual_ac_invalid_xid_drop_count = 27;
    // number of xc updates dropped due to PBB invalid xid
    uint32 pbb_invalid_xid_drop_count = 28;
    // number of xc updates dropped due to VNI invalid xid
    uint32 vni_invalid_xid_drop_count = 29;
    // number of xc updates dropped due to EVPN invalid xid
    uint32 evpn_invalid_xid_drop_count = 30;
    // number of xc updates dropped due to max VPLS PWs exceeded
    uint32 vpls_pw_max_exceeded_drop_cnt = 31;
    // number of xc updates dropped due to max Bundle ACs exceeded
    uint32 bundle_ac_max_exceeded_drop_cnt = 32;
    // number of p2p xconnects
    uint32 p2_p_count = 33;
    // number of bridge-port xconnects
    uint32 bp_count = 34;
    // number of PWHE L2IF xconnects
    uint32 pwhe_l2_if_count = 35;
}

// Specific nhop summary
message l2fib_nh_summary_info2 {
    // total number of nhops
    uint32 next_hop_count = 1;
    // number of bound nhops
    uint32 bound_next_hop_count = 2;
    // number of unbound nhops
    uint32 unbound_next_hop_count = 3;
    // number of nhops pending registration with fib 
    uint32 next_hop_pending_registration_count = 4;
}

// nhop db summary
message l2fib_nh_summary_info {
    // MPLS Internal Label nexthop summary
    l2fib_nh_summary_info2 mpls_il = 1;
    // MPLS nexthop summary
    l2fib_nh_summary_info2 mpls = 2;
    // L2TP nexthop summary
    l2fib_nh_summary_info2 l2_tp = 3;
    // LSM nexthop summary
    l2fib_nh_summary_info2 lsm = 4;
    // P2MPtun nexthop summary
    l2fib_nh_summary_info2 p2_mp_tunnels = 5;
}

// L2TP disposition session object summary
message l2fib_l2tp_disp_summary_info {
    // number of l2tp disposition session objects
    uint32 l2_tp_disposition_session_count = 1;
    // number of bound l2tp dispostion objects
    uint32 bound_l2_tp_disposition_session_count = 2;
    // number of unbound l2tp disposition objects
    uint32 unbound_l2_tp_disposition_session_count = 3;
}

// L2FIB bridge mac summary info
message l2fib_mac_summary_info {
    // number of locally learnt macs
    uint32 local_mac_count = 1;
    // number of remotely learned macs
    uint32 remote_mac_count = 2;
    // number of static macs
    uint32 static_mac_count = 3;
    // number of routed macs
    uint32 routed_mac_count = 4;
    // number of all macs
    uint32 mac_count = 5;
    // number of Source BMACs
    uint32 sbmac_count = 6;
    // number of BMACs
    uint32 bmac_count = 7;
}

// L2VPN bridge-domain summary info
message l2fib_bd_summary_info {
    // Number of bridge-domains
    uint32 bridge_domain_count = 1;
    // Number of bridge-domain updates dropped
    uint32 bridge_domain_drop_count = 2;
    // Number of bridge-domains with BVI
    uint32 bridge_domain_with_bvi_count = 3;
    // Number of bridge-domains with P2MP enabled
    uint32 bridge_domain_with_p2mp_enabled = 4;
    // Number of bridge-domains with PBB EVPN enabled
    uint32 bridge_domain_with_pbbevpn_enabled = 5;
    // Number of bridge-domains with EVPN enabled
    uint32 bridge_domain_with_evpn_enabled = 6;
}

// L2VPN PTree summary info
message l2fib_ptree_summary_info {
    // Number of PTree objects
    uint32 total_p_tree_count = 1;
    // Number of MLDP enabled PTree objects
    uint32 mldp_enabled_p_tree_count = 2;
    // Number of MLDP PTree Objects owned by LMRIB
    uint32 lmrib_mldpp_tree_count = 3;
    // Number of RSVP-TE enabled PTree objects
    uint32 rsvp_te_enabled_p_tree_count = 4;
    // Number of RSVP-TE PTree Objects owned by LMRIB
    uint32 lmrib_rsvp_tep_tree_count = 5;
}

// L2VPN PWGROUP summary info
message l2fib_pwgroup_summary_info {
    // Platform supports Grouping
    bool plat_grouping_supported = 1;
    // Total number of PWGROUP objects
    uint32 total_pw_groups = 2;
    // Number of PWGROUP objects down
    uint32 pw_groups_down = 3;
}

// L2VPN Global Configuration
message l2fib_global_cfg_info {
    // Base Information
    l2fib_base_info base = 1;
    // Type of Load-Balancing
    string load_balance_type = 2;
    // Base of label range in use for EVPN IMC PD
    uint32 evpn_imc_label_block_base = 3;
    // Size of label range in use for EVPN IMC PD
    uint32 evpn_imc_label_block_size = 4;
}

// L2VPN evpn summary info
message l2fib_evpn_summary_info {
    // Number of EVPN Multicast Replication lists
    uint32 total_count = 1;
    // Number of ISID leaves
    uint32 isid_count = 2;
    // Number of default leaves
    uint32 default_count = 3;
}

// L2VPN PWHE Main-port summary info
message l2fib_pwhe_mp_summary_info {
    // Number of PWHE Main-ports
    uint32 total_count = 1;
}

