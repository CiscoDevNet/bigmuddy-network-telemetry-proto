// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2vpn_oper.l2vpn_forwarding.nodes.node.l2fib_message_summary;

// L2FIB message counters summary info
message l2fib_ext_msg_summary_info_KEYS {
    string node_id = 1;
}

message l2fib_ext_msg_summary_info {
    repeated l2fib_gbl_msg_info messages = 50;
    // Event history buffer
    l2fib_gbl_evt_history event_history = 51;
    // Round-Trip delay
    l2fib_gbl_rtd round_trip_delay = 52;
}

// L2FIB event item
message l2fib_evt_entry {
    // The real timestamp of the event
    bytes event_time = 1;
    // Event type
    uint32 event_type = 2;
    // Multiple event instance flag
    bool event_many = 3;
    // Unwrittable flag
    bool event_sticky = 4;
    // base flag object
    uint32 event_flags = 5;
}

// L2FIB global event history
message l2fib_gbl_evt_history {
    // number of item in the array
    uint32 event_neighbor_entry = 1;
    repeated uint32 extra_information1 = 2;
    repeated uint32 extra_information2 = 3;
    repeated l2fib_evt_entry event_entry = 4;
}

// Round-trip delay for PD calls per action
message l2fib_gbl_rtd_item {
    // The number of time PD is called
    uint32 number_pd_update = 1;
    // The number of time PD is called in 0 time
    uint32 number_pd_update_zero = 2;
    // The minimum round trip delay
    uint64 minimum_round_trip_delay = 3;
    // The maximum round trip delay
    uint64 maximum_round_trip_delay = 4;
    // The average round trip delay
    uint64 average_round_trip_delay = 5;
}

// Round-trip delay measurement
message l2fib_gbl_rtd {
    repeated l2fib_gbl_rtd_item create = 1;
    repeated l2fib_gbl_rtd_item modify = 2;
    repeated l2fib_gbl_rtd_item delete = 3;
    repeated l2fib_gbl_rtd_item bind = 4;
    repeated l2fib_gbl_rtd_item unbind = 5;
    repeated l2fib_gbl_rtd_item mac_flush = 6;
    repeated l2fib_gbl_rtd_item p_irtd = 7;
    l2fib_gbl_rtd_item bdxc_rtd = 8;
    l2fib_gbl_rtd_item aging_rtd = 9;
    l2fib_gbl_rtd_item punt_rtd = 10;
    l2fib_gbl_rtd_item lock_rtd = 11;
    l2fib_gbl_rtd_item platform_init_rtd = 12;
    uint32 rtd_max_objtype = 13;
}

// L2FIB message counter item info
message l2fib_gbl_msg_info {
    // number of message
    uint32 messgae_count = 1;
    // Time string
    bytes time = 2;
    // Extra info 1
    uint32 information1 = 3;
    // Extra info 2
    uint32 information2 = 4;
}

