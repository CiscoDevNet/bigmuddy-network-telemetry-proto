// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_rsvp_oper.rsvp.rsb_briefs.rsb_brief;

// Compact Form of RSVP Reservation Info
message rsvp_mgmt_reservation_compact_KEYS {
    string destination_address = 1;
    uint32 destination_port = 2;
    uint32 protocol = 3;
    string extended_tunnel_id = 4;
    string session_type = 5;
    uint32 p2_mp_id = 6;
    string source_address = 7;
    uint32 source_port = 8;
    string sub_group_origin = 9;
    uint32 sub_group_id = 10;
    string vrf_name = 11;
}

message rsvp_mgmt_reservation_compact {
    // RSVP Session Information
    rsvp_mgmt_session_info session = 50;
    // RSVP S2L Sub-LSP information
    rsvp_mgmt_s2l_sub_lsp_ipv4 s2_l_sub_lsp = 51;
    // Flow Spec Information
    rsvp_mgmt_flow_spec flow_spec = 52;
    // Generic Flow Spec Info
    rsvp_mgmt_gen_flow_spec generic_flow_spec = 53;
    // RSVP Style
    rsvp_mgmt_style style = 54;
    // RSVP Filter
    rsvp_mgmt_filter_info filter = 55;
    // Reservation Input Interface
    string input_interface = 56;
}

// RSVP S2L Sub-LSP
message rsvp_mgmt_s2l_sub_lsp_ipv4 {
    // S2L Sub-LSP Destination Address
    string s2_l_destination_address = 1;
}

// RSVP Filter
message rsvp_mgmt_filter_ipv4 {
    // Source Address
    string source_address = 1;
    // Source Port
    uint32 source_port = 2;
}

// RSVP P2MP IPv4 FilterSpec
message rsvp_mgmt_filter_p2mp_ipv4 {
    // Source Address
    string source_address = 1;
    // Source Port
    uint32 source_port = 2;
    // Point to Multipoint SubGroup Origin
    string p2_mp_sub_group_origin = 3;
    // Point to Multipoint Subgroup ID
    uint32 sub_group_id = 4;
}

// Union of the different RSVP filterspec types
message rsvp_filter_union {
    string filter_type = 1;
    // UDP IPV4 FilterSpec
    rsvp_mgmt_filter_ipv4 udp_ipv4_session = 2;
    // IPv4 P2MP LSP FilterSpec
    rsvp_mgmt_filter_p2mp_ipv4 p2_mp_ipv4_session = 3;
}

// RSVP FilterSpec Info
message rsvp_mgmt_filter_info {
    // RSVP Filter
    rsvp_filter_union rsvp_filter = 1;
}

// RSVP UDP IPv4 Session
message rsvp_mgmt_session_udp_ipv4 {
    // Destination address
    string destination_address = 1;
    // Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
    uint32 protocol = 2;
    // The Session Destination Port
    uint32 destination_port = 3;
}

// RSVP LSP-Tunnel-IPv4 Session
message rsvp_mgmt_session_lsp_tunnel_ipv4 {
    // Destination address
    string destination_address = 1;
    // The Session Tunnel ID
    uint32 tunnel_id = 2;
    // The Session Extended Tunnel ID
    string extended_tunnel_id = 3;
}

// RSVP UNI IPv4 Session
message rsvp_mgmt_session_uni_ipv4 {
    // Destination address
    string destination_address = 1;
    // The Session Tunnel ID
    uint32 tunnel_id = 2;
    // The Session Extended Address
    string extended_address = 3;
}

// RSVP P2MP-LSP-Tunnel-IPv4 Session
message rsvp_mgmt_session_p2mp_lsp_tunnel_ipv4 {
    // The Point to Multipoint ID
    uint32 p2_mp_id = 1;
    // The Session Tunnel ID
    uint32 tunnel_id = 2;
    // The Session Extended Tunnel ID
    string extended_tunnel_id = 3;
}

// Union of the different RSVP session types
message rsvp_session_union {
    string session_type = 1;
    // UDP IPv4 session
    rsvp_mgmt_session_udp_ipv4 ipv4 = 2;
    // IPv4 LSP session
    rsvp_mgmt_session_lsp_tunnel_ipv4 ipv4_lsp_session = 3;
    // IPv4 UNI session
    rsvp_mgmt_session_uni_ipv4 ipv4_uni_session = 4;
    // IPv4 P2MP LSP session
    rsvp_mgmt_session_p2mp_lsp_tunnel_ipv4 ipv4_p2_mp_lsp_session = 5;
}

// RSVP Session Info
message rsvp_mgmt_session_info {
    // RSVP Session
    rsvp_session_union rsvp_session = 1;
}

// RSVP Reservation Style
message rsvp_mgmt_style {
    // The Reservation Type: WF, SE or FF
    string reservation_type = 1;
}

// RSVP Flow Spec
message rsvp_mgmt_flow_spec {
    // The Flow Average Rate in bytes per second
    uint64 flow_average_rate = 1;
    // The Flow Maximum Burst
    uint64 flow_max_burst = 2;
    // The Flow Peak Rate in bytes per second
    uint64 flow_peak_rate = 3;
    // The Flow Minimum Unit
    uint32 flow_min_unit = 4;
    // The Flow Maximum Unit
    uint32 flow_max_unit = 5;
    // The Flow Requested Rate in bytes per second
    uint64 flow_requested_rate = 6;
    // The Flow Slack
    uint32 flow_slack = 7;
    // The Flow Quality of Service
    string flow_qos = 8;
}

// RSVP G709 OTN FlowSpec Info
message rsvp_mgmt_flow_spec_g709_otn {
    // G709 OTN Flow Signal Type (Refer G709 v3)
    uint32 flow_signal_type = 1;
    // G709 OTN Flow NVC
    uint32 flow_nvc = 2;
    // G709 OTN Flow Multiplier
    uint32 flow_multiplier = 3;
    // G709 OTN Flow Bit Rate
    uint64 flow_bit_rate = 4;
}

// Union of different RSVP Generic FlowSpec types
message rsvp_mgmt_gen_flow_spec {
    string flow_spec_type = 1;
    // G709 OTN FlowSpec
    rsvp_mgmt_flow_spec_g709_otn g709_otn_flow_spec = 2;
}

