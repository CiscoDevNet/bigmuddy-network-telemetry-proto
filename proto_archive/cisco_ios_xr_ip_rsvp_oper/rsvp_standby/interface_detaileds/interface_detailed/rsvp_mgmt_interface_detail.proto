// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_rsvp_oper.rsvp_standby.interface_detaileds.interface_detailed;

// Detail Form of RSVP interface Info
message rsvp_mgmt_interface_detail_KEYS {
    string interface_name = 1;
}

message rsvp_mgmt_interface_detail {
    // Interface Name
    string interface_name = 50;
    // Interface bandwidth information
    rsvp_mgmt_dste_mode_interface_bw bandwidth_information = 51;
    // Interface flags
    rsvp_mgmt_interface_flags flags = 52;
    // IP TOS (precedence/DSCP) to use in signalling messages
    uint32 signalling_ip_tos = 53;
    // Integrity send password
    string integrity_send_password = 54;
    // Integrity receive password
    string integrity_receive_password = 55;
    // Integrity recv password optional
    uint32 integrity_receive_password_optional = 56;
    // Refresh timer state
    string refresh_timer_state = 57;
    // Summary refresh timer state
    string summary_refresh_timer_state = 58;
    // Refresh interval in msecs
    sint32 refresh_interval = 59;
    // Out-of-band Refresh interval in msecs
    uint32 out_of_band_refresh_interval = 60;
    // Max size in bytes of a single SRefresh
    uint32 summary_refresh_max_size = 61;
    // Max size in bytes of a single Bundle message
    uint32 bundle_message_max_size = 62;
    // Expiry timer state
    string expiry_timer_state = 63;
    // Number of states for expiry check
    sint32 expiry_states = 64;
    // Expiry interval in msecs
    sint32 expiry_interval = 65;
    // Number of missed messages tolerated
    sint32 expiry_drops_tolerated = 66;
    // Number of out-of-band missed messages tolerated
    uint32 out_of_band_expiry_drops_tolerated = 67;
    // ACK hold time in msec
    uint32 ack_hold_time = 68;
    // Max size for ACK message
    uint32 ack_max_size = 69;
    // Retransmit time in msec
    uint32 retransmit_time = 70;
    // Pacing interval in msecs
    uint32 pacing_interval = 71;
    // No. of messages per interval
    uint32 pacing_message_rate = 72;
    // State of pacing timer
    string pacing_timer_state = 73;
    // Number of messages deferred for pacing
    sint32 pacing_messages = 74;
    // Neighbor array
    repeated rsvp_mgmt_nbor neighbor_array = 75;
}

// RSVP Time Spec
message rsvp_mgmt_timespec {
    // Time Value in Seconds
    sint32 seconds = 1;
    // Time Value in Nano-seconds
    sint32 nanoseconds = 2;
}

// RSVP Message ID
message rsvp_mgmt_messageid {
    // Message ID
    uint32 message_id = 1;
}

// Neighbor
message rsvp_mgmt_nbor {
    // Is neighbor capable of Refresh Reduction
    bool is_neighbor_refresh_reduction_capable = 1;
    // IP address of the neighbor
    string neighbor_address = 2;
    // Number of MessageIDs
    uint32 message_i_ds = 3;
    // List of Neighbor MessageIDs
    repeated rsvp_mgmt_messageid neighbor_message_i_ds = 4;
    // Number of outgoing states to the neighbour
    sint32 outgoing_states = 5;
    // Expiry time
    rsvp_mgmt_timespec expiry_time = 6;
}

// Interface related flags
message rsvp_mgmt_interface_flags {
    // MPLS enabled on interface
    bool is_mpls_enabled = 1;
    // Refresh Reduction enabled
    bool is_refresh_reduction_enabled = 2;
    // Message pacing enabled
    bool is_pacing_enabled = 3;
    // Refresh enabled
    bool is_refresh_enabled = 4;
    // Summary Refresh enabled
    bool is_s_refresh_enabled = 5;
    // Interface is DOWN
    bool is_interface_down = 6;
    // Interface is created
    bool is_interface_created = 7;
    // Use reliable xmt for SRefresh
    bool is_rel_s_refresh_enabled = 8;
    // This is backup tunnel
    bool is_backup_tunnel = 9;
    // RSVP explicitly configured
    bool is_rsvp_configured = 10;
    // Interface is defined in non-Default VRF
    bool is_non_default_vrf = 11;
    // Use bundling for outgoing RSVP messages.
    bool is_message_bundling_enabled = 12;
}

// Prestandard DSTE interface bandwidth information
message rsvp_mgmt_interface_bw_prestd_dste {
    // Bandwidth (bits per second) now allocated
    uint64 allocated_bit_rate = 1;
    // Max bandwidth (bits per second) allowed per flow
    uint64 max_flow_bandwidth = 2;
    // Max bandwidth (bits per second) allowed
    uint64 max_bandwidth = 3;
    // Max bandwidth (bits per second) allowed in subpool
    uint64 max_subpool_bandwidth = 4;
    // True if the Max B/W is an absolute value and false if its a percentage
    bool is_max_bandwidth_absolute = 5;
    // True if the Max sub-pool B/W is an absolute value and false if its a percentage
    bool is_max_subpool_bandwidth_absolute = 6;
}

// RSVP interface bandwidth info with standard based DSTE enabled
message rsvp_mgmt_interface_bw_std_dste {
    // Bandwidth (bits per second) now allocated
    uint64 allocated_bit_rate = 1;
    // Max bandwidth (bits per second) allowed per flow
    uint64 max_flow_bandwidth = 2;
    // Max bandwidth (bits per second) allowed
    uint64 max_bandwidth = 3;
    // Max bandwidth (bits per second) allowed in BC0 pool
    uint64 max_pool0_bandwidth = 4;
    // Max bandwidth (bits per second) allowed in BC1 pool
    uint64 max_pool1_bandwidth = 5;
    // True if the Max B/W is an absolute value and false if its a percentage
    bool is_max_bandwidth_absolute = 6;
    // True if the Max BC0 B/W is an absolute value and false if its a percentage
    bool is_max_bc0_bandwidth_absolute = 7;
    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a percentage
    bool is_max_bc1_bandwidth_absolute = 8;
}

// Union of the different RSVP interface bandwidth types
message rsvp_mgmt_dste_mode_interface_bw {
    string dste_mode = 1;
    // Prestandard DSTE interface information
    rsvp_mgmt_interface_bw_prestd_dste pre_standard_dste_interface = 2;
    // Standard DSTE interface information
    rsvp_mgmt_interface_bw_std_dste standard_dste_interface = 3;
}

