// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_rsvp_oper.rsvp_standby.psb_detaileds.psb_detailed;

// Detailed Form of RSVP Path Info
message rsvp_mgmt_path_detail_KEYS {
    string destination_address = 1;
    uint32 destination_port = 2;
    uint32 protocol = 3;
    string extended_tunnel_id = 4;
    string session_type = 5;
    uint32 p2_mp_id = 6;
    string source_address = 7;
    uint32 source_port = 8;
    string sub_group_origin = 9;
    uint32 sub_group_id = 10;
    string vrf_name = 11;
}

message rsvp_mgmt_path_detail {
    // RSVP Session Information
    rsvp_mgmt_session_info session = 50;
    // RSVP S2L Sub-LSP information
    rsvp_mgmt_s2l_sub_lsp_ipv4 s2_l_sub_lsp = 51;
    // RSVP Template
    rsvp_mgmt_filter_info template = 52;
    // RSVP Session Attribute
    rsvp_mgmt_session_attribute session_attribute = 53;
    // RSVP Traffic Spec Info
    rsvp_mgmt_traffic_spec traffic_spec = 54;
    // RSVP Generic Traffic Spec Info
    rsvp_mgmt_gen_traffic_spec generic_traffic_spec = 55;
    // Path Input Interface
    string input_interface = 56;
    // Path Flags
    rsvp_mgmt_path_flags path_flags = 57;
    // Path Backup Tunnel
    string backup_tunnel_name = 58;
    // Path Hop Info
    rsvp_mgmt_hop_info hop = 59;
    // Policy Sources Info
    rsvp_mgmt_policy_sources policy_source_info = 60;
    // RSVP Header Info
    rsvp_mgmt_header_info header = 61;
    // Expiry Time
    rsvp_mgmt_timespec expiry_time = 62;
    // Policy Flags
    rsvp_mgmt_policy_flags policy_flags = 63;
    // Policy Query Flags
    rsvp_mgmt_policy_query_flags policy_query_flags = 64;
    // Path Forwarding Contexts
    repeated rsvp_path_forwarding_context pfc = 65;
    // Label Information
    rsvp_mgmt_label_info label_info = 66;
    // DS-TE Class-Type
    rsvp_mgmt_ct_info class_type = 67;
    // Incoming ERO validity
    bool is_in_ero_valid = 68;
    // Incoming Explicit Route Sub Objects
    repeated rsvp_mgmt_ero_subobj in_ero = 69;
    // Outgoing ERO validity
    bool is_out_ero_valid = 70;
    // Outgoing Explicit Route Sub Objects
    repeated rsvp_mgmt_ero_subobj out_ero = 71;
}

// RSVP S2L Sub-LSP
message rsvp_mgmt_s2l_sub_lsp_ipv4 {
    // S2L Sub-LSP Destination Address
    string s2_l_destination_address = 1;
}

// RSVP Filter
message rsvp_mgmt_filter_ipv4 {
    // Source Address
    string source_address = 1;
    // Source Port
    uint32 source_port = 2;
}

// RSVP P2MP IPv4 FilterSpec
message rsvp_mgmt_filter_p2mp_ipv4 {
    // Source Address
    string source_address = 1;
    // Source Port
    uint32 source_port = 2;
    // Point to Multipoint SubGroup Origin
    string p2_mp_sub_group_origin = 3;
    // Point to Multipoint Subgroup ID
    uint32 sub_group_id = 4;
}

// Union of the different RSVP filterspec types
message rsvp_filter_union {
    string filter_type = 1;
    // UDP IPV4 FilterSpec
    rsvp_mgmt_filter_ipv4 udp_ipv4_session = 2;
    // IPv4 P2MP LSP FilterSpec
    rsvp_mgmt_filter_p2mp_ipv4 p2_mp_ipv4_session = 3;
}

// RSVP FilterSpec Info
message rsvp_mgmt_filter_info {
    // RSVP Filter
    rsvp_filter_union rsvp_filter = 1;
}

// RSVP UDP IPv4 Session
message rsvp_mgmt_session_udp_ipv4 {
    // Destination address
    string destination_address = 1;
    // Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
    uint32 protocol = 2;
    // The Session Destination Port
    uint32 destination_port = 3;
}

// RSVP LSP-Tunnel-IPv4 Session
message rsvp_mgmt_session_lsp_tunnel_ipv4 {
    // Destination address
    string destination_address = 1;
    // The Session Tunnel ID
    uint32 tunnel_id = 2;
    // The Session Extended Tunnel ID
    string extended_tunnel_id = 3;
}

// RSVP UNI IPv4 Session
message rsvp_mgmt_session_uni_ipv4 {
    // Destination address
    string destination_address = 1;
    // The Session Tunnel ID
    uint32 tunnel_id = 2;
    // The Session Extended Address
    string extended_address = 3;
}

// RSVP P2MP-LSP-Tunnel-IPv4 Session
message rsvp_mgmt_session_p2mp_lsp_tunnel_ipv4 {
    // The Point to Multipoint ID
    uint32 p2_mp_id = 1;
    // The Session Tunnel ID
    uint32 tunnel_id = 2;
    // The Session Extended Tunnel ID
    string extended_tunnel_id = 3;
}

// Union of the different RSVP session types
message rsvp_session_union {
    string session_type = 1;
    // UDP IPv4 session
    rsvp_mgmt_session_udp_ipv4 ipv4 = 2;
    // IPv4 LSP session
    rsvp_mgmt_session_lsp_tunnel_ipv4 ipv4_lsp_session = 3;
    // IPv4 UNI session
    rsvp_mgmt_session_uni_ipv4 ipv4_uni_session = 4;
    // IPv4 P2MP LSP session
    rsvp_mgmt_session_p2mp_lsp_tunnel_ipv4 ipv4_p2_mp_lsp_session = 5;
}

// RSVP Session Info
message rsvp_mgmt_session_info {
    // RSVP Session
    rsvp_session_union rsvp_session = 1;
}

// RSVP Policy Sources
message rsvp_mgmt_policy_sources {
    // Policy Source is TE Link
    bool is_te_link = 1;
    // Policy Source is Local
    bool is_local = 2;
    // Policy Source is COPS
    bool is_cops = 3;
    // Policy Source is Default
    bool is_default = 4;
    // Policy Source is Cable
    bool is_cable = 5;
}

// RSVP Policy Flags
message rsvp_mgmt_policy_flags {
    // Accepted
    bool is_accepted = 1;
    // Installed
    bool is_installed = 2;
    // Forwarding
    bool is_forwarding = 3;
}

// RSVP Policy Query Flags
message rsvp_mgmt_policy_query_flags {
    // Needed
    bool is_needed = 1;
    // Report Required
    bool is_report_required = 2;
    // Resynchronization
    bool is_resync = 3;
    // Bypass
    bool is_bypass = 4;
}

// RSVP Time Spec
message rsvp_mgmt_timespec {
    // Time Value in Seconds
    sint32 seconds = 1;
    // Time Value in Nano-seconds
    sint32 nanoseconds = 2;
}

// Hop Info
message rsvp_mgmt_hop_info {
    // IP address of the neighbor
    string neighbor_address = 1;
    // Neighbor Logical Interface Name
    string neighbor_logical_interface_name = 2;
}

// RSVP Traffic Spec Info
message rsvp_mgmt_traffic_spec {
    // Traffic Average Rate in bytes per second
    uint64 traffic_average_rate = 1;
    // Traffic Maximum Burst
    uint64 traffic_max_burst = 2;
    // Traffic Peak Rate in bytes per second
    uint64 traffic_peak_rate = 3;
    // Traffic Minimum Unit
    uint32 traffic_min_unit = 4;
    // Traffic Maximum Unit
    uint32 traffic_max_unit = 5;
}

// RSVP G709 OTN Sender Tspec Info
message rsvp_mgmt_tspec_g709_otn {
    // G709 OTN Traffic Signal Type (Refer G709 v3)
    uint32 traffic_signal_type = 1;
    // G709 OTN Traffic NVC
    uint32 traffic_nvc = 2;
    // G709 OTN Traffic Multiplier
    uint32 traffic_multiplier = 3;
    // G709 OTN Traffic Bit Rate
    uint64 traffic_bit_rate = 4;
}

// Union of different RSVP Generic Sender Tspec types
message rsvp_mgmt_gen_traffic_spec {
    string tspec_type = 1;
    // G709 OTN Sender Tspec
    rsvp_mgmt_tspec_g709_otn g709_otn_tspec = 2;
    // Integrated Services Sender Tspec
    rsvp_mgmt_traffic_spec intsrv_tspec = 3;
}

// RSVP Path Flags
message rsvp_mgmt_path_flags {
    // Non-RSVP Hop Upstream
    bool is_non_rsvp_hop_upstream = 1;
    // Local Sender
    bool is_local_sender = 2;
    // MessageID Valid
    bool is_message_id_valid = 3;
    // Rerouted
    bool is_local_repair = 4;
    // Bidirectional
    bool is_bidirectional = 5;
    // Locked Out
    bool is_lockout = 6;
}

// RSVP Session Attribute Flags
message rsvp_mgmt_session_attribute_flags {
    // Local Protection
    bool is_local_protect = 1;
    // Node Protection
    bool is_node_protect = 2;
    // Bandwidth Protection
    bool is_bandwidth_protect = 3;
    // Records Labels
    bool is_record_labels = 4;
    // Shared Explicit Requested
    bool is_shared_explicit_requested = 5;
}

// RSVP Session Attributes
message rsvp_mgmt_session_attribute {
    // Setup Priority
    uint32 setup_priority = 1;
    // Reservation Priority
    uint32 reservation_priority = 2;
    // Session Attributes
    rsvp_mgmt_session_attribute_flags sess_attribute_flags = 3;
}

// RSVP/IP Header Info
message rsvp_mgmt_header_info {
    // RSVP Version
    uint32 rsvp_version = 1;
    // RSVP Header Flags (defined in RFC2205 Section 3.1.1)
    uint32 rsvp_header_flags = 2;
    // RSVP TTL
    uint32 rsvp_ttl = 3;
    // RSVP Message Type
    uint32 rsvp_message_type = 4;
    // IP Type of Service
    uint32 ip_tos = 5;
    // IP TTL
    uint32 ip_ttl = 6;
    // IP Source Address
    string ip_source_address = 7;
}

// RSVP Path Forwarding Context
message rsvp_path_forwarding_context {
    // Output interface
    string output_interface = 1;
    // Policy Flags
    rsvp_mgmt_policy_flags policy_flags = 2;
    // Policy Query Flags
    rsvp_mgmt_policy_query_flags policy_query_flags = 3;
}

// RSVP Generalized Label
message rsvp_mgmt_generalized_label {
    // Generalized Label Value
    repeated uint32 value = 1;
}

// Union of different RSVP Generic Label types
message rsvp_mgmt_generic_label {
    string generic_label_type = 1;
    // Generalized Label
    rsvp_mgmt_generalized_label generalized_label = 2;
}

// Label Information
message rsvp_mgmt_label_info {
    // Is the label information valid
    bool is_valid = 1;
    // Local Downstream Label
    uint32 local_downstream_label = 2;
    // Generic Local Downstream Label
    rsvp_mgmt_generic_label generic_local_downstream_label = 3;
    // Outgoing Downstream Label
    uint32 outgoing_downstream_label = 4;
    // Generic Outgoing Downstream Label
    rsvp_mgmt_generic_label generic_outgoing_downstream_label = 5;
    // MergePoint Label
    uint32 merge_point_label = 6;
    // Generic MergePoint Label
    rsvp_mgmt_generic_label generic_merge_point_label = 7;
    // Outgoing Upstream Label
    uint32 outgoing_upstream_label = 8;
    // Generic Outgoing Upstream Label
    rsvp_mgmt_generic_label generic_outgoing_upstream_label = 9;
    // Local Upstream Label
    uint32 local_upstream_label = 10;
    // Generic Local Upstream Label
    rsvp_mgmt_generic_label generic_local_upstream_label = 11;
    // Recovery Label
    uint32 recovery_label = 12;
    // LSP Wrap Label
    uint32 lsp_wrap_label = 13;
    // Generic Recovery Label
    rsvp_mgmt_generic_label generic_recovery_label = 14;
}

// Class-Type Information
message rsvp_mgmt_ct_info {
    // Is the Class-Type information valid
    bool is_class_type_info_valid = 1;
    // DS-TE Class-Type
    uint32 class_type = 2;
}

// RSVP ERO IPV4 subobject
message rsvp_mgmt_ero_ipv4_subobj {
    // ERO Entry Is Strict
    bool is_strict_route = 1;
    // The ERO IPV4 Address
    string ero_address = 2;
    // ERO Prefix Length
    uint32 prefix_length = 3;
}

// RSVP ERO UNNUM subobject
message rsvp_mgmt_ero_unnum_subobj {
    // ERO Entry Is Strict
    bool is_strict_route = 1;
    // The Interface ID in ERO
    uint32 ero_interface_id = 2;
    // The Router ID in ERO
    string ero_router_id = 3;
    // Status of ERO
    string status = 4;
}

// Union of the different RSVP ERO types
message rsvp_mgmt_ero_subobj {
    string ero_type = 1;
    // IPV4 ERO Sub Object
    rsvp_mgmt_ero_ipv4_subobj ipv4_ero_sub_object = 2;
    // Unnumbered ERO Sub Object
    rsvp_mgmt_ero_unnum_subobj unnumbered_ero_sub_object = 3;
}

