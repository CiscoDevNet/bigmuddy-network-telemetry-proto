// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_rsvp_oper.rsvp_standby.authentication_details.authentication_detail;

// Authentication Detail Information
message rsvp_mgmt_authentication_detail_KEYS {
    string source_address = 1;
    string destination_address = 2;
    string mode_id = 3;
    string interface_name = 4;
}

message rsvp_mgmt_authentication_detail {
    // Basic authentication data
    rsvp_mgmt_authentication_compact auth_compact = 50;
    // Key status
    uint32 key_status = 51;
    // Direction
    uint32 key_digest_info = 52;
    // Lifetime (seconds)
    uint32 lifetime = 53;
    // Remaining lifetime (seconds)
    uint32 lifetime_left = 54;
    // Challenge status
    string challenge_status = 55;
    rsvp_mgmt_auth_direction direction_info = 56;
}

// RSVP Authentication Send Type Counters
message rsvp_mgmt_auth_send_type_counters {
    // Messages sent
    uint32 authentication_sent = 1;
    // Failures
    uint32 authentication_failures = 2;
    // Challenges received
    uint32 authentication_send_challenges_received = 3;
    // Challenge responses sent
    uint32 authentication_challenge_responses_sent = 4;
}

// RSVP Authentication Receive Type Counters
message rsvp_mgmt_auth_recv_type_counters {
    // Valid messages
    uint32 authentication_received_valid_messages = 1;
    // Challenges sent
    uint32 authentication_received_challenges_sent = 2;
    // Challenge responses received
    uint32 authentication_received_challenge_response = 3;
    // Challenges resent
    uint32 authentication_received_challenges_resent = 4;
    // Challenge timeouts
    uint32 authentication_received_challenge_timeouts = 5;
    // Authentication received during challenge
    uint32 authentication_received_during_challenge = 6;
    // Authentication received incomplete
    uint32 authentication_received_incomplete = 7;
    // Authentication received with no integrity
    uint32 authentication_received_no_integrity = 8;
    // Authentication received with bad digest
    uint32 authentication_received_bad_digest = 9;
    // Authentication received with wrong digest type
    uint32 authentication_received_wrong_digest_type = 10;
    // Authentication received with duplicate sequence number
    uint32 authentication_received_sequence_number_duplicate = 11;
    // Authentication received with sequence number out of range
    uint32 authentication_received_sequence_number_outof_range = 12;
    // Incorect challenge responses received
    uint32 authentication_received_wrong_challenges_response = 13;
    // Duplicate challenge responses received
    uint32 authentication_received_challenges_response_duplicate = 14;
    // Challenge responses received late
    uint32 authentication_received_response_late = 15;
    // Authentication received with bad mesage format
    uint32 authentication_received_bad_message_format = 16;
}

// RSVP Authentication Send Type Information
message rsvp_mgmt_auth_direction_send {
    // Sequence number
    uint64 sequence = 1;
    // Counters
    rsvp_mgmt_auth_send_type_counters counters = 2;
}

// RSVP Authentication Recieve Type Information
message rsvp_mgmt_auth_direction_recv {
    // Sequence number
    uint64 sequence = 1;
    // Sequence window size
    uint32 sequence_window_size = 2;
    // Sequence window count
    uint32 sequence_window_count = 3;
    // Sequence window
    repeated uint64 sequence_window = 4;
    // Counters
    rsvp_mgmt_auth_recv_type_counters counters = 5;
}

// Union of the different RSVP Authentication Direction types
message rsvp_mgmt_auth_direction {
    string auth_direction = 1;
    rsvp_mgmt_auth_direction_send send_info = 2;
    rsvp_mgmt_auth_direction_recv receive_info = 3;
}

// Authentication Compact Information
message rsvp_mgmt_authentication_compact {
    // Source address
    string source_address = 1;
    // Destination address
    string destination_address = 2;
    // Neighbor address
    string neighbor_address = 3;
    // Direction
    string direction = 4;
    // Key type
    string key_type = 5;
    // Key source
    string key_source = 6;
    // Key ID
    uint64 key_id = 7;
    // Key validity
    uint32 key_id_valid = 8;
}

