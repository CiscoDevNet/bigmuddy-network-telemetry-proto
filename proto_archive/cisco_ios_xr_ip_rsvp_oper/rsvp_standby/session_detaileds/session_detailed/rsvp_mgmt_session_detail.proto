// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_rsvp_oper.rsvp_standby.session_detaileds.session_detailed;

// RSVP Detail Session Info
message rsvp_mgmt_session_detail_KEYS {
    string destination_address = 1;
    uint32 destination_port = 2;
    uint32 protocol = 3;
    string extended_tunnel_id = 4;
    string session_type = 5;
    uint32 p2_mp_id = 6;
    string vrf_name = 7;
}

message rsvp_mgmt_session_detail {
    // Compact session data
    rsvp_mgmt_session_compact compact = 50;
    // RSVP S2L Sub-LSP information
    rsvp_mgmt_s2l_sub_lsp_ipv4 s2_l_sub_lsp = 51;
    // Path and Reservation Info
    repeated rsvp_session_psb_rsb_detail psb_rsb_info = 52;
}

// RSVP S2L Sub-LSP
message rsvp_mgmt_s2l_sub_lsp_ipv4 {
    // S2L Sub-LSP Destination Address
    string s2_l_destination_address = 1;
}

// RSVP UDP IPv4 Session
message rsvp_mgmt_session_udp_ipv4 {
    // Destination address
    string destination_address = 1;
    // Protocol type (originally defined in RFC 790, further values in subsequent RFCs)
    uint32 protocol = 2;
    // The Session Destination Port
    uint32 destination_port = 3;
}

// RSVP LSP-Tunnel-IPv4 Session
message rsvp_mgmt_session_lsp_tunnel_ipv4 {
    // Destination address
    string destination_address = 1;
    // The Session Tunnel ID
    uint32 tunnel_id = 2;
    // The Session Extended Tunnel ID
    string extended_tunnel_id = 3;
}

// RSVP UNI IPv4 Session
message rsvp_mgmt_session_uni_ipv4 {
    // Destination address
    string destination_address = 1;
    // The Session Tunnel ID
    uint32 tunnel_id = 2;
    // The Session Extended Address
    string extended_address = 3;
}

// RSVP P2MP-LSP-Tunnel-IPv4 Session
message rsvp_mgmt_session_p2mp_lsp_tunnel_ipv4 {
    // The Point to Multipoint ID
    uint32 p2_mp_id = 1;
    // The Session Tunnel ID
    uint32 tunnel_id = 2;
    // The Session Extended Tunnel ID
    string extended_tunnel_id = 3;
}

// Union of the different RSVP session types
message rsvp_session_union {
    string session_type = 1;
    // UDP IPv4 session
    rsvp_mgmt_session_udp_ipv4 ipv4 = 2;
    // IPv4 LSP session
    rsvp_mgmt_session_lsp_tunnel_ipv4 ipv4_lsp_session = 3;
    // IPv4 UNI session
    rsvp_mgmt_session_uni_ipv4 ipv4_uni_session = 4;
    // IPv4 P2MP LSP session
    rsvp_mgmt_session_p2mp_lsp_tunnel_ipv4 ipv4_p2_mp_lsp_session = 5;
}

// RSVP Session Info
message rsvp_mgmt_session_info {
    // RSVP Session
    rsvp_session_union rsvp_session = 1;
}

// RSVP Flow Spec
message rsvp_mgmt_flow_spec {
    // The Flow Average Rate in bytes per second
    uint64 flow_average_rate = 1;
    // The Flow Maximum Burst
    uint64 flow_max_burst = 2;
    // The Flow Peak Rate in bytes per second
    uint64 flow_peak_rate = 3;
    // The Flow Minimum Unit
    uint32 flow_min_unit = 4;
    // The Flow Maximum Unit
    uint32 flow_max_unit = 5;
    // The Flow Requested Rate in bytes per second
    uint64 flow_requested_rate = 6;
    // The Flow Slack
    uint32 flow_slack = 7;
    // The Flow Quality of Service
    string flow_qos = 8;
}

// RSVP G709 OTN FlowSpec Info
message rsvp_mgmt_flow_spec_g709_otn {
    // G709 OTN Flow Signal Type (Refer G709 v3)
    uint32 flow_signal_type = 1;
    // G709 OTN Flow NVC
    uint32 flow_nvc = 2;
    // G709 OTN Flow Multiplier
    uint32 flow_multiplier = 3;
    // G709 OTN Flow Bit Rate
    uint64 flow_bit_rate = 4;
}

// Union of different RSVP Generic FlowSpec types
message rsvp_mgmt_gen_flow_spec {
    string flow_spec_type = 1;
    // G709 OTN FlowSpec
    rsvp_mgmt_flow_spec_g709_otn g709_otn_flow_spec = 2;
}

// RSVP Traffic Spec Info
message rsvp_mgmt_traffic_spec {
    // Traffic Average Rate in bytes per second
    uint64 traffic_average_rate = 1;
    // Traffic Maximum Burst
    uint64 traffic_max_burst = 2;
    // Traffic Peak Rate in bytes per second
    uint64 traffic_peak_rate = 3;
    // Traffic Minimum Unit
    uint32 traffic_min_unit = 4;
    // Traffic Maximum Unit
    uint32 traffic_max_unit = 5;
}

// RSVP G709 OTN Sender Tspec Info
message rsvp_mgmt_tspec_g709_otn {
    // G709 OTN Traffic Signal Type (Refer G709 v3)
    uint32 traffic_signal_type = 1;
    // G709 OTN Traffic NVC
    uint32 traffic_nvc = 2;
    // G709 OTN Traffic Multiplier
    uint32 traffic_multiplier = 3;
    // G709 OTN Traffic Bit Rate
    uint64 traffic_bit_rate = 4;
}

// Union of different RSVP Generic Sender Tspec types
message rsvp_mgmt_gen_traffic_spec {
    string tspec_type = 1;
    // G709 OTN Sender Tspec
    rsvp_mgmt_tspec_g709_otn g709_otn_tspec = 2;
    // Integrated Services Sender Tspec
    rsvp_mgmt_traffic_spec intsrv_tspec = 3;
}

// RSVP Generalized Label
message rsvp_mgmt_generalized_label {
    // Generalized Label Value
    repeated uint32 value = 1;
}

// Union of different RSVP Generic Label types
message rsvp_mgmt_generic_label {
    string generic_label_type = 1;
    // Generalized Label
    rsvp_mgmt_generalized_label generalized_label = 2;
}

// RSVP ERO IPV4 subobject
message rsvp_mgmt_ero_ipv4_subobj {
    // ERO Entry Is Strict
    bool is_strict_route = 1;
    // The ERO IPV4 Address
    string ero_address = 2;
    // ERO Prefix Length
    uint32 prefix_length = 3;
}

// RSVP ERO UNNUM subobject
message rsvp_mgmt_ero_unnum_subobj {
    // ERO Entry Is Strict
    bool is_strict_route = 1;
    // The Interface ID in ERO
    uint32 ero_interface_id = 2;
    // The Router ID in ERO
    string ero_router_id = 3;
    // Status of ERO
    string status = 4;
}

// Union of the different RSVP ERO types
message rsvp_mgmt_ero_subobj {
    string ero_type = 1;
    // IPV4 ERO Sub Object
    rsvp_mgmt_ero_ipv4_subobj ipv4_ero_sub_object = 2;
    // Unnumbered ERO Sub Object
    rsvp_mgmt_ero_unnum_subobj unnumbered_ero_sub_object = 3;
}

// RSVP Compact Session Info
message rsvp_mgmt_session_compact {
    // RSVP Session Information
    rsvp_mgmt_session_info session = 1;
    // Number of path state block states
    uint32 ps_bs = 2;
    // Number of reservation state block states
    uint32 rs_bs = 3;
    // Number of request states
    uint32 requests = 4;
    // Number of elements in detail list
    uint32 detail_list_size = 5;
}

// RSVP RRO IPV4 Subobject Flags
message rsvp_mgmt_rro_ipv4_subobj_flags {
    // Local Protection Available
    bool is_protection_available = 1;
    // Local Protection In Use
    bool is_protection_in_use = 2;
    // Bandwidth Protection Available
    bool is_bandwidth_protected = 3;
    // Node Protection Available
    bool is_node_protection_available = 4;
    // Node ID In Use
    bool is_node_id = 5;
}

// RSVP RRO Label Subobject Flags
message rsvp_mgmt_rro_label_subobj_flags {
    // Label is Global across all interfaces
    bool is_global_label = 1;
}

// RSVP RRO UNNUMBERED Subobject Flags
message rsvp_mgmt_rro_unnumbered_subobj_flags {
    // Local Protection Available
    bool is_protection_available = 1;
    // Local Protection In Use
    bool is_protection_in_use = 2;
    // Bandwidth Protection Available
    bool is_bandwidth_protected = 3;
    // Node Protection Available
    bool is_node_protection_available = 4;
    // Node ID In Use
    bool is_node_id = 5;
}

// RSVP RRO IPV4 subobject
message rsvp_mgmt_rro_ipv4_subobj {
    // The RRO IPV4 Subobject Flags
    rsvp_mgmt_rro_ipv4_subobj_flags flags = 1;
    // The RRO IPV4 Address
    string rro_address = 2;
}

// RSVP RRO Label subobject
message rsvp_mgmt_rro_label_subobj {
    // The RRO Subobject Label Flags
    rsvp_mgmt_rro_label_subobj_flags flags = 1;
    // The RRO Subobject Label Value
    uint32 label = 2;
    // Is the RRO Subobject Label Variable Length
    bool is_label_variable_length = 3;
    // The RRO Subobject Variable Length Label
    repeated uint32 variable_length_label = 4;
}

// RSVP RRO Unnumbered subobject
message rsvp_mgmt_rro_unnumbered_subobj {
    // The RRO Subobject Unnumbered Flags
    rsvp_mgmt_rro_unnumbered_subobj_flags flags = 1;
    // The RRO Interface Address
    string interface_address = 2;
    // The RRO Interface ID
    uint32 interface_id = 3;
}

// RSVP RRO SRLG subobject
message rsvp_mgmt_rro_srlg_subobj {
    // The RRO Subobject SRLGs
    repeated uint32 srl_gs = 1;
}

// Union of the different RSVP RRO types
message rsvp_mgmt_rro_subobj {
    string rro_type = 1;
    // IPV4 RRO Sub Object
    rsvp_mgmt_rro_ipv4_subobj ipv4_rro_sub_object = 2;
    // Label RRO Sub Object
    rsvp_mgmt_rro_label_subobj label_rro_sub_object = 3;
    // Unnumbered RRO Sub Object
    rsvp_mgmt_rro_unnumbered_subobj unnumbered_rro_sub_object = 4;
    // SRLG RRO Sub Object
    rsvp_mgmt_rro_srlg_subobj srlg_rro_sub_object = 5;
}

// RSVP ASSOCIATION IPv4 Object Info
message rsvp_mgmt_association_ipv4 {
    // Association Type (RFC 4872)
    uint32 type = 1;
    // Association ID
    uint32 id = 2;
    // Association IPV4 Source Address
    string source = 3;
}

// RSVP ASSOCIATION IPv6 Object Info
message rsvp_mgmt_association_ipv6 {
    // Association Type (RFC 4872)
    uint32 type = 1;
    // Association ID
    uint32 id = 2;
    // Association IPV6 Source Address
    string source = 3;
}

// RSVP EXTENDED ASSOCIATION IPv4 Object Info
message rsvp_mgmt_association_ipv4_ext {
    // Association Type (RFC 4872)
    uint32 type = 1;
    // Association ID
    uint32 id = 2;
    // Association IPV4 Source Address
    string source = 3;
    // Global Association Source
    uint32 global_source = 4;
    // Extended Association ID
    repeated uint32 extended_id = 5;
}

// RSVP EXTENDED ASSOCIATION IPv6 Object Info
message rsvp_mgmt_association_ipv6_ext {
    // Association Type (RFC 4872)
    uint32 type = 1;
    // Association ID
    uint32 id = 2;
    // Association IPV6 Source Address
    string source = 3;
    // Global Association Source
    uint32 global_source = 4;
    // Extended Association ID
    repeated uint32 extended_id = 5;
}

// Union of the different ASSOCIATION types
message rsvp_mgmt_association {
    string association_type = 1;
    // IPV4 ASSOCIATION Object
    rsvp_mgmt_association_ipv4 ipv4 = 2;
    // IPV6 ASSOCIATION Object
    rsvp_mgmt_association_ipv6 ipv6 = 3;
    // EXTENDED IPV4 ASSOCIATION Object
    rsvp_mgmt_association_ipv4_ext extended_ipv4 = 4;
    // EXTENDED IPV6 ASSOCIATION Object
    rsvp_mgmt_association_ipv6_ext extended_ipv6 = 5;
}

// RSVP PROTECTION Object Link Flags
message rsvp_mgmt_protection_link_flags {
    // Indicates Enhanced Protection Scheme
    bool enhanced = 1;
    // Dedicated 1+1 Protection
    bool ded1_plus1 = 2;
    // Dedicated 1:1 Protection
    bool ded1_to1 = 3;
    // Shared Link Layer Protection
    bool shared = 4;
    // LSP should not use any Link Layer Protection
    bool unprotected = 5;
    // LSP should use Links that are protecting other (primary) traffic
    bool extra_traffic = 6;
    // Reserved Bit 1
    bool reserved_bit1 = 7;
    // Reserved Bit 2
    bool reserved_bit2 = 8;
}

// RSVP PROTECTION Object LSP Flags
message rsvp_mgmt_protection_lsp_flags {
    // Full Rerouting
    bool rerouting = 1;
    // Rerouting Without Extra-Traffic
    bool rerouting_no_et = 2;
    // 1:N Protection with Extra-Traffic
    bool one_to_n_protection_et = 3;
    // 1+1 Unidirectional Protection
    bool one_plus_one_uni = 4;
    // 1+1 Bidirectional Protection
    bool one_plus_one_bi = 5;
}

// RSVP PROTECTION Object Info
message rsvp_mgmt_protection {
    // Secondary Bit
    bool s = 1;
    // Protecting Bit
    bool p = 2;
    // Notification Bit
    bool n = 3;
    // Operational Bit
    bool o = 4;
    // PROTECTION Object LSP Flags
    rsvp_mgmt_protection_lsp_flags lsp_flags = 5;
    // PROTECTION Object Link Flags
    rsvp_mgmt_protection_link_flags link_flags = 6;
}

message rsvp_mgmt_rev_lsp_unsupported_subobj {
    repeated uint32 value = 1;
}

// RSVP REVERSE_LSP Object
message rsvp_mgmt_reverse_lsp {
    // Explicit Route Sub Objects
    repeated rsvp_mgmt_ero_subobj ero = 1;
    // Generic Traffic Spec object
    rsvp_mgmt_gen_traffic_spec generic_traffic_spec = 2;
    // Unsupported REVERSE_LSP Sub Objects
    repeated rsvp_mgmt_rev_lsp_unsupported_subobj unsup_sub_objects = 3;
}

// RSVP Detail Session Path Info
message rsvp_session_psb_detail {
    // Entry validity
    bool is_valid = 1;
    // Destination address
    string destination_address = 2;
    // LSP ID
    uint32 lsp_id = 3;
    // Point to Multipoint SubGroup Origin
    string p2_mp_sub_group_origin = 4;
    // Point to Multipoint Subgroup ID
    uint32 sub_group_id = 5;
    // Interface on which inbound message was received
    string in_interface = 6;
    // Label for inbound traffic
    uint32 in_label = 7;
    // Generic Label for inbound traffic
    rsvp_mgmt_generic_label generic_in_label = 8;
    // LSP Wrap Label
    uint32 lsp_wrap_label = 9;
    // Address validity
    bool is_bad_address = 10;
    // IP address of Path's incoming interface
    string incoming_interface_address = 11;
    // ERO validity
    bool is_ero_valid = 12;
    // RRO validity
    bool is_rro_valid = 13;
    // Traffic Spec validity
    bool is_traffic_spec_valid = 14;
    // Explicit Route Sub Objects
    repeated rsvp_mgmt_ero_subobj ero = 15;
    // Record Route Sub Objects
    repeated rsvp_mgmt_rro_subobj rro = 16;
    // Traffic Spec object
    rsvp_mgmt_traffic_spec traffic_spec = 17;
    // Generic Traffic Spec object
    rsvp_mgmt_gen_traffic_spec generic_traffic_spec = 18;
    // Tunnel name
    string tunnel_name = 19;
    // Association object
    rsvp_mgmt_association association = 20;
    // Protection object
    rsvp_mgmt_protection protection = 21;
    // Reverse LSP object
    rsvp_mgmt_reverse_lsp reverse_lsp = 22;
}

// RSVP Detail Session Reservation Info
message rsvp_session_rsb_detail {
    // Entry validity
    bool is_valid = 1;
    // Destination address
    string destination_address = 2;
    // Interface on which outbound message was sent
    string out_interface = 3;
    // Label for outbound traffic
    uint32 out_label = 4;
    // Generic Label for outbound traffic
    rsvp_mgmt_generic_label generic_out_label = 5;
    // Backup tunnel interface
    string backup_interface = 6;
    // Backup label
    uint32 backup_label = 7;
    // RRO validity
    bool is_rro_valid = 8;
    // FlowSpec validity
    bool is_flow_spec_valid = 9;
    // Record route object
    repeated rsvp_mgmt_rro_subobj rro = 10;
    // Flow spec object
    rsvp_mgmt_flow_spec flow_spec = 11;
    // Generic Flow Spec object
    rsvp_mgmt_gen_flow_spec generic_flow_spec = 12;
}

// List of Path and Reservation Info
message rsvp_session_psb_rsb_detail {
    // Path Info
    repeated rsvp_session_psb_detail psb_info = 1;
    // Reservation Info
    repeated rsvp_session_rsb_detail rsb_info = 2;
}

