// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_aaa_protocol_radius_oper.radius.nodes.node.authentication;

// RADIUS authentication data of all servers
message radius_server_authentication_KEYS {
    string node_name = 1;
}

message radius_server_authentication {
    // List of authentication groups
    repeated radius_authentication authentication_groups = 50;
}

// RADIUS authentication data
message radius_authentication_data {
    // Number of access requests
    uint32 access_requests = 1;
    // Number of pending access requests
    uint32 pending_access_requests = 2;
    // Number of retransmitted access requests
    uint32 access_request_retransmits = 3;
    // Number of access accepts
    uint32 access_accepts = 4;
    // Number of access rejects
    uint32 access_rejects = 5;
    // Number of access challenges
    uint32 access_challenges = 6;
    // Number of access packets timed out
    uint32 access_timeouts = 7;
    // Number of bad access responses
    uint32 bad_access_responses = 8;
    // Number of bad access authenticators
    uint32 bad_access_authenticators = 9;
    // Number of packets received with unknown type from authentication server
    uint32 unknown_access_types = 10;
    // Number of access responses dropped
    uint32 dropped_access_responses = 11;
    // Round trip time for authentication in milliseconds
    uint32 rtt = 12;
    // Average response time for authentication requests
    uint32 authen_response_time = 13;
    // Number of succeeded authentication transactions
    uint32 authen_transaction_successess = 14;
    // Number of failed authentication transactions
    uint32 authen_transaction_failure = 15;
    // Number of unexpected authentication responses
    uint32 authen_unexpected_responses = 16;
    // Number of server error authentication responses
    uint32 authen_server_error_responses = 17;
    // Number of incorrect authentication responses
    uint32 authen_incorrect_responses = 18;
}

// RADIUS authentication
message radius_authentication {
    // IP address of RADIUS server
    string server_address = 1;
    // Authentication port number
    uint32 port = 2;
    // Authentication data
    radius_authentication_data authentication = 3;
    // IP address buffer
    string ip_address = 4;
    // IP address Family
    string family = 5;
}

