// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.update_groups.update_group;

// BGP Update Group information
message bgp_updgrp_bag_KEYS {
    string instance_name = 1;
    string af_name = 2;
    uint32 update_group_id = 3;
    uint32 filter_group_id = 4;
}

message bgp_updgrp_bag {
    // Process instance ID
    uint32 process_instance_id = 50;
    // Neighbor session Address family
    uint32 session_af_name = 51;
    // Update group index
    uint32 update_group_number = 52;
    // Address family for update group
    string update_group_af_name = 53;
    // Send communities
    bool should_send_communities = 54;
    // Send Extended communities
    bool should_send_ext_communities = 55;
    // Send Stitching RT
    bool should_send_stitching_rt = 56;
    // ORF receive capability
    bool has_orf_receive_capability = 57;
    // Route-reflector client
    bool is_route_reflector_client = 58;
    // True if client-to-client reflection is disabled 
    bool is_client_reflection_disabled = 59;
    // accept-legacy-pe-RT route
    bool accepts_legacy_pe_rt_route = 60;
    // Cluster ID (populated ifclient-to-client reflectionis disabled)
    uint32 updgrp_cluster_id = 61;
    // Cluster ID type:undefined/number/Ip address
    uint32 updgrp_cluster_type = 62;
    // ORR Group Name
    string orr_group_name = 63;
    // ORR Group Index
    uint32 orr_group_index = 64;
    // ORR Root address configuredfor the neighbor connection
    bool is_orr_root_address_configured = 65;
    // Remove private AS numbers
    bool should_remove_private_a_ss = 66;
    // Remove private AS numbersif the entire path consistsof private ASes
    bool should_remove_private_as_ent_path = 67;
    // Next-hop-self
    bool use_next_hop_self = 68;
    // Next-hop-unchanged multipath
    bool use_next_hop_unchanged_mpath = 69;
    // Internal peers
    bool is_internal_peers = 70;
    // Common admin peers
    bool is_common_admin_peers = 71;
    // 4-byte AS capable peers
    bool is4_byte_as_peer = 72;
    // Add-path capable peers
    bool is_addpath_capable = 73;
    // Send mcast attribute enabled
    bool is_send_mcast_attr_enabled = 74;
    // AIGP capable peers
    bool is_aigp_capable = 75;
    // Send AIGP cost community to peers
    bool is_aigp_cost_community_capable = 76;
    // Send AIGP cost in MED
    bool is_aigp_med_capable = 77;
    // Send Long-lived Stale paths
    bool is_llgr_capable = 78;
    // Send tranlsated paths
    bool is_adv_capable = 79;
    // Send Re-orig paths
    bool is_adv_reorg_capable = 80;
    // Disable advertising native routes
    bool disable_native_advertisement = 81;
    // Disable advertising default VRF  imported routes
    bool disable_def_vrf_imp_advertisement = 82;
    // Encapsulation type
    uint32 encapsulation_type = 83;
    // Advertise RT type
    uint32 advertise_rt_type = 84;
    // Directly connected EBGP v6 peers
    bool is_directly_connected_ebgp_v6_peers = 85;
    // Minimum advertisement interval, secs part
    uint32 minimum_advertisement_interval = 86;
    // Minimum advertisement interval, msecs part
    uint32 minimum_advertisement_interval_msecs = 87;
    // Local AS number
    uint32 local_as = 88;
    // Outbound route policy name
    string route_policy_out = 89;
    // Number of times the update has been desynchronized
    uint32 desync_count = 90;
    // Number of times sub-groups have been merged
    uint32 subgrp_merge_count = 91;
    // Current count of refresh subgroups
    uint32 refresh_subgrp_count = 92;
    // Number of updates formatted
    uint32 updates_formatted = 93;
    // No. of updates replicated
    uint32 updates_replicated = 94;
    // Neighbors in this update group which are not in any sub-group
    repeated bgp_addrtype neighbor_list = 95;
    // Performance statistics
    bgp_perf_updgrp_ performance_statistics = 96;
    // Update sub-group list
    repeated bgp_upd_subgrp_ update_sub_group_list = 97;
    // Local AS Replace-AS option
    bool local_as_replace_as = 98;
    // AS Override option
    bool as_override = 99;
    // Site-of-origin option
    bool soo = 100;
    // Site-of-origin value
    bytes soo_value = 101;
    // Split horizon check
    bool split_horizon = 102;
    // Update group has labeled AFI enabled
    bool is_labeled_afi_enabled = 103;
    // Update group has unlabeled AFI enabled
    bool is_unlabeled_afi_enabled = 104;
    // Remote AS number
    uint32 remote_as = 105;
    // Advertise Permanent-Net capable peers
    bool is_adv_perm_net_capable = 106;
    // Send GSHUT community
    bool should_send_gshut_community = 107;
    // GSHUT active
    bool gshut_active = 108;
    // GSHUT local preference set
    bool gshut_locpref_set = 109;
    // GSHUT local preference
    uint32 gshut_locpref = 110;
    // GSHUT AS prepends
    uint32 gshut_prepends = 111;
    // Advertise routes with local-label via Unicast SAFI
    bool advertise_local_labeled_route_unicast = 112;
}

// IPV4Tunnel Address type
message IPV4TunnelAddressType {
    string value = 1;
}

// IPV4MDT Address type
message IPV4MDTAddressType {
    string value = 1;
}

// IPV4 RTConstraint Address type
message RTConstraintAddressType {
    string value = 1;
}

// IPV6 Address type
message IPV6AddressType {
    string value = 1;
}

message bgp_l2vpn_addr_t {
    bytes l2vpn_address = 1;
}

// L2VPN EVPN Address type
message L2VPNEVPNAddressType {
    string value = 1;
}

message bgp_l2vpn_mspw_addr_t {
    bytes l2vpn_address = 1;
}

// IPV6 MVPN Address type
message IPV6MVPNAddressType {
    string value = 1;
}

// IPV4 MVPN Address type
message IPV4MVPNAddressType {
    string value = 1;
}

// LINKSTATE LINKSTATE Address type
message LS_LSAddressType {
    string value = 1;
}

// IPv4 Flowspec Address type
message IPv4FlowspecAddressType {
    string value = 1;
}

// IPv6 Flowspec Address type
message IPv6FlowspecAddressType {
    string value = 1;
}

message bgp_addrtype {
    string afi = 1;
    // IPv4 Addr
    string ipv4_address = 2;
    // IPv4 Mcast Addr
    string ipv4_mcast_address = 3;
    // IPv4 Label Addr
    string ipv4_label_address = 4;
    // IPv4 Tunnel
    IPV4TunnelAddressType ipv4_tunnel_address = 5;
    // IPv4 MDT Addr
    IPV4MDTAddressType ipv4_mdt_address = 6;
    // IPv4 VPN Addr
    string ipv4_vpn_address = 7;
    // IPv4 VPN Mcast Addr
    string ipv4_vpna_mcastddress = 8;
    // IPV6 Addr
    IPV6AddressType ipv6_address = 9;
    // IPV6 Mcast Addr
    IPV6AddressType ipv6_mcast_address = 10;
    // IPv6 Label Addr
    IPV6AddressType ipv6_label_address = 11;
    // IPv6 VPN Addr
    IPV6AddressType ipv6_vpn_address = 12;
    // IPv6 VPN Mcast Addr
    IPV6AddressType ipv6_vpn_mcast_address = 13;
    // L2VPN VPLS Addr
    bgp_l2vpn_addr_t l2_vpnvpls_address = 14;
    // RT Constrt Addr
    RTConstraintAddressType rt_constraint_address = 15;
    // MVPN addr
    IPV6MVPNAddressType ipv6_mvpn_address = 16;
    // MVPN4 addr
    IPV4MVPNAddressType ipv4_mvpn_address = 17;
    // L2VPN EVPN Addr
    L2VPNEVPNAddressType l2_vpn_evpn_address = 18;
    // LINKSTATE LINKSTATE Addr
    LS_LSAddressType ls_ls_address = 19;
    // L2VPN MSPW Addr
    bgp_l2vpn_mspw_addr_t l2_vpn_mspw_address = 20;
    // IPV4 Flowspec Addr
    IPv4FlowspecAddressType ipv4_flowspec_address = 21;
    // IPV6 Flowspec Addr
    IPv6FlowspecAddressType ipv6_flowspec_address = 22;
    // IPV4 VPN Flowspec Addr
    IPv4FlowspecAddressType ipv4_vpn_flowspec_address = 23;
    // IPV6 VPN Flowspec Addr
    IPv6FlowspecAddressType ipv6_vpn_flowspec_address = 24;
}

message bgp_perf_updgrp_ {
    // No. of calls to update generation function
    uint32 update_generation_calls = 1;
    // No. of prefixes updates generated for
    uint32 update_generation_prefixes_count = 2;
    // No. of be prefixes updates generated for
    uint32 update_generation_be_prefixes_count = 3;
    // No. of update messages generated
    uint32 update_generation_messages_count = 4;
    // Time spent generating updates (milliseconds)
    uint32 update_generation_time = 5;
    // Timestamp when update timer started for updgrp
    uint64 updgen_timer_start_time = 6;
    // Timestamp when update timer stopped for updgrp
    uint64 updgen_timer_stop_time = 7;
    // Timestamp when update timer processed for updgrp
    uint64 updgen_timer_process_time = 8;
}

message bgp_upd_filtergrp_ {
    // Update sub-group index
    uint32 update_filter_group_number = 1;
    // Neighbors in this update sub-group
    repeated bgp_addrtype neighbor_list = 2;
    // RT count per filter group
    uint32 r_ts = 3;
    // Flags per filter group
    uint32 f_group_flags = 4;
    // Nbrs per filter group
    uint32 f_group_neighbors = 5;
    // Number of message elems created for filtergroup
    uint32 f_group_created_message_elements = 6;
    // Number of message elems deleted
    uint32 f_group_deleted_message_elements = 7;
    // Number of message elems queued
    uint32 f_group_queued_message_elements = 8;
    // Number of prefixes advertised to filtergroup in last update walk
    uint32 f_group_advertised_prefixes = 9;
    // Number of prefixes advertised to filtergroup in all update walk
    uint32 f_group_total_advertised_prefixes = 10;
    // Number of prefixes withdrawn f`rom filtergroupin last update walk
    uint32 f_group_withdrawn_prefixes = 11;
    // Number of prefixes withdrawn f`rom filtergroupin all update walk
    uint32 f_group_total_withdrawn_prefixes = 12;
    // Number of prefixes  non-optm from filtergroupin all update walk
    uint32 f_group_total_non_optimised_prefixes = 13;
    // Number of prefixes skipped for filtergroup in last update walk
    uint32 f_group_skipped_prefixes = 14;
    // Number of prefixes suppressed for filtergroup in last update walk
    uint32 f_group_suppressed_prefixes = 15;
    // RT attribute list present
    bool is_rt_present = 16;
    // Extended community attribute
    repeated uint32 extended_community = 17;
}

message bgp_upd_subgrp_ {
    // Update sub-group index
    uint32 update_sub_group_number = 1;
    // Update sub-group fgrp-num
    uint32 filter_group = 2;
    // Wait for  RT Nbr EoRs
    bool wait_for_eo_rs = 3;
    // Update f-group list
    repeated bgp_upd_filtergrp_ update_filter_group_list = 4;
    // Neighbors in this subgrp not in any filtergrp
    repeated bgp_addrtype neighbor_list = 5;
}

