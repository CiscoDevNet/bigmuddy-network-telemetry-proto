// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.update_generation_sub_groups.update_generation_sub_group;

// BGP Update generation Sub-group information
message bgp_updgen_subgrp_bag_KEYS {
    string instance_name = 1;
    string af_name = 2;
    uint32 update_group_index = 3;
    uint32 sub_group_index = 4;
    uint32 sub_group_id = 5;
}

message bgp_updgen_subgrp_bag {
    // ProcessID
    uint32 process_id = 50;
    // VRF Name
    string update_vrf_name = 51;
    // Address family identifier
    string update_group_af_name = 52;
    // Sub-group index
    uint32 sub_group_index = 53;
    // Sub-group ID
    uint32 sub_group_id = 54;
    // Parent Sub-group index
    uint32 parent_sub_group_index = 55;
    // Parent Sub-group identifier
    uint32 parent_sub_group_id = 56;
    // Update-group index
    uint32 update_group_index = 57;
    // Main table version
    uint32 update_main_table_version = 58;
    // VRF Table RIB version
    uint32 update_vrf_table_rib_version = 59;
    // Current update limit
    uint32 current_update_limit_sub_group = 60;
    // Configured update limit
    uint32 configured_update_limit_sub_group = 61;
    // OutQueue messages
    uint32 update_out_queue_messages = 62;
    // OutQueue size
    uint32 update_out_queue_size = 63;
    // Is update throttled
    bool update_throttled = 64;
    // Refresh sub-group count
    uint32 refresh_sub_group_count = 65;
    // Filter-group count
    uint32 filter_group_count = 66;
    // Neighbor count
    uint32 neighbor_count = 67;
    // Version
    uint32 version = 68;
    // NSR version
    uint32 nsr_version = 69;
    // Pending target version
    uint32 pending_target_version = 70;
    // Next resume version
    uint32 next_resume_version = 71;
    // Refresh target version
    uint32 update_refresh_target_version = 72;
    // Is IO write event pending
    bool io_write_event_pending = 73;
    // Is default route sent
    bool update_default_route_sent = 74;
    // Creation time
    bgp_timespec creation_timestamp = 75;
    // Merge count
    uint32 merge_count = 76;
    // Last merge time
    bgp_timespec last_merge_timestamp = 77;
    // Last merged sub-group index
    uint32 last_merged_sub_group_index = 78;
    // Sending EoR has been attempted
    bool eo_r_attempted = 79;
    // First update walk start time
    bgp_timespec first_update_walk_start_timestamp = 80;
    // First update walk end time
    bgp_timespec first_update_walk_end_timestamp = 81;
    // Last update walk start time
    bgp_timespec last_update_walk_start_timestamp = 82;
    // Last update walk end time
    bgp_timespec last_update_walk_end_timestamp = 83;
    // Time since last update walk end event
    uint32 last_update_walk_end_age = 84;
    // Last update queued time
    bgp_timespec last_update_queued_timestamp = 85;
    // Time since last update queued event (in seconds)
    uint32 last_update_queued_age = 86;
    // Update statistics
    bgp_updgen_stats_bag update_statistics = 87;
}

message bgp_timespec {
    // Seconds part of time value
    uint32 seconds = 1;
    // Nanoseconds part of time value
    uint32 nanoseconds = 2;
}

// BGP Update generation common statistics information
message bgp_updgen_stats_bag {
    // OutQueue High Messages
    uint32 update_out_queue_messages_high = 1;
    // OutQueue Cumulative Messages
    uint32 update_out_queue_messages_cumulative = 2;
    // OutQueue Discarded Messages
    uint32 update_out_queue_messages_discarded = 3;
    // OutQueue Cleared Messages
    uint32 update_out_queue_messages_cleared = 4;
    // OutQueue Hi Size
    uint32 update_out_queue_size_high = 5;
    // OutQueue Cumulative Size
    uint64 update_out_queue_size_cumulative = 6;
    // OutQueue Discarded Size
    uint64 update_out_queue_size_discarded = 7;
    // OutQueue Cleared Size
    uint64 update_out_queue_size_cleared = 8;
    // Last Discarded time
    bgp_timespec last_update_discard_timestamp = 9;
    // Time since last Discard event (in seconds)
    uint32 last_update_discard_age = 10;
    // Last Cleared time
    bgp_timespec last_update_cleared_timestamp = 11;
    // Time since last Clear event (in seconds)
    uint32 last_update_cleard_age = 12;
    // Throttle Count
    uint32 update_throttle_count = 13;
    // Last Throttled time
    bgp_timespec last_update_throttle_timestamp = 14;
    // Time since last Throttle event (in seconds)
    uint32 last_update_throttle_age = 15;
    // Recovery Count
    uint32 update_recovery_count = 16;
    // Last Recovery time
    bgp_timespec last_update_recovery_timestamp = 17;
    // Time since last Recovery event (in seconds)
    uint32 last_update_recovery_age = 18;
    // Memory allocation failure count
    uint32 update_memory_allocation_fail_count = 19;
    // Memory allocation failure time
    bgp_timespec last_update_memory_allocation_fail_timestamp = 20;
    // Time since last memory allocation failure event (in seconds)
    uint32 last_update_memory_allocation_fail_age = 21;
}

