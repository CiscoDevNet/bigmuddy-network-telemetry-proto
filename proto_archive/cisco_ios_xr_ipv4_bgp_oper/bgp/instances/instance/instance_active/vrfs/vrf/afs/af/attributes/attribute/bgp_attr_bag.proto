// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.attributes.attribute;

// BGP attribute information
message bgp_attr_bag_KEYS {
    string instance_name = 1;
    string vrf_name = 2;
    string af_name = 3;
    uint32 attribute_iid = 4;
    uint32 attribute_cache_bucket = 5;
    uint32 attribute_cache_id = 6;
}

message bgp_attr_bag {
    // Process instance ID
    uint32 process_instance_id = 50;
    // Attribute Instance ID
    uint32 attribute_instance_id = 51;
    // ID of attribute structure
    uint32 attribute_structure_id = 52;
    // Hash value for attribute structure
    uint32 attribute_structure_hash_value = 53;
    // Number of paths which use this attribute structure
    uint32 reference_count = 54;
    // Attributes
    bgp_attr_ attribute_info = 55;
}

// IPV4Tunnel Address type
message IPV4TunnelAddressType {
    string value = 1;
}

// IPV4MDT Address type
message IPV4MDTAddressType {
    string value = 1;
}

// IPV4 RTConstraint Address type
message RTConstraintAddressType {
    string value = 1;
}

// IPV6 Address type
message IPV6AddressType {
    string value = 1;
}

// MAC Address type
message MACAddressType {
    string value = 1;
}

message bgp_attr_rnh_addr_t {
    string len = 1;
    // IPv4 Addr
    string ipv4_address = 2;
    // IPv6 Addr
    IPV6AddressType ipv6_address = 3;
    // MAC Addr
    MACAddressType mac_address = 4;
}

message bgp_l2vpn_addr_t {
    bytes l2vpn_address = 1;
}

// L2VPN EVPN Address type
message L2VPNEVPNAddressType {
    string value = 1;
}

message bgp_l2vpn_mspw_addr_t {
    bytes l2vpn_address = 1;
}

// IPV6 MVPN Address type
message IPV6MVPNAddressType {
    string value = 1;
}

// IPV4 MVPN Address type
message IPV4MVPNAddressType {
    string value = 1;
}

// LINKSTATE LINKSTATE Address type
message LS_LSAddressType {
    string value = 1;
}

// IPv4 Flowspec Address type
message IPv4FlowspecAddressType {
    string value = 1;
}

// IPv6 Flowspec Address type
message IPv6FlowspecAddressType {
    string value = 1;
}

message bgp_addrtype {
    string afi = 1;
    // IPv4 Addr
    string ipv4_address = 2;
    // IPv4 Mcast Addr
    string ipv4_mcast_address = 3;
    // IPv4 Label Addr
    string ipv4_label_address = 4;
    // IPv4 Tunnel
    IPV4TunnelAddressType ipv4_tunnel_address = 5;
    // IPv4 MDT Addr
    IPV4MDTAddressType ipv4_mdt_address = 6;
    // IPv4 VPN Addr
    string ipv4_vpn_address = 7;
    // IPv4 VPN Mcast Addr
    string ipv4_vpna_mcastddress = 8;
    // IPV6 Addr
    IPV6AddressType ipv6_address = 9;
    // IPV6 Mcast Addr
    IPV6AddressType ipv6_mcast_address = 10;
    // IPv6 Label Addr
    IPV6AddressType ipv6_label_address = 11;
    // IPv6 VPN Addr
    IPV6AddressType ipv6_vpn_address = 12;
    // IPv6 VPN Mcast Addr
    IPV6AddressType ipv6_vpn_mcast_address = 13;
    // L2VPN VPLS Addr
    bgp_l2vpn_addr_t l2_vpnvpls_address = 14;
    // RT Constrt Addr
    RTConstraintAddressType rt_constraint_address = 15;
    // MVPN addr
    IPV6MVPNAddressType ipv6_mvpn_address = 16;
    // MVPN4 addr
    IPV4MVPNAddressType ipv4_mvpn_address = 17;
    // L2VPN EVPN Addr
    L2VPNEVPNAddressType l2_vpn_evpn_address = 18;
    // LINKSTATE LINKSTATE Addr
    LS_LSAddressType ls_ls_address = 19;
    // L2VPN MSPW Addr
    bgp_l2vpn_mspw_addr_t l2_vpn_mspw_address = 20;
    // IPV4 Flowspec Addr
    IPv4FlowspecAddressType ipv4_flowspec_address = 21;
    // IPV6 Flowspec Addr
    IPv6FlowspecAddressType ipv6_flowspec_address = 22;
    // IPV4 VPN Flowspec Addr
    IPv4FlowspecAddressType ipv4_vpn_flowspec_address = 23;
    // IPV6 VPN Flowspec Addr
    IPv6FlowspecAddressType ipv6_vpn_flowspec_address = 24;
}

message bgp_pedistlbl_entry_ {
    //  PE address
    string pe_address = 1;
    // Label
    uint32 label = 2;
}

message bgp_common_attr_entry_ {
    // Metric attribute present
    bool is_metric_present = 1;
    // Local Preference attribute present
    bool is_local_pref_present = 2;
    // Atomic aggregate attribute present
    bool is_atomic_aggregate_present = 3;
    // Aggregator attribute present
    bool is_aggregator_present = 4;
    // Origin attribute present
    bool is_origin_present = 5;
    // AS path attribute present
    bool is_as_path_present = 6;
    // Community attribute present
    bool is_community_present = 7;
    // Extended community attribute present
    bool is_extended_community_present = 8;
    // SSA attribute present
    bool is_ssa_present = 9;
    // Connector present
    bool is_connector_present = 10;
    // PMSI Attribute  present
    bool is_pmsi_present = 11;
    // PPMP Attribute  present
    bool is_pppmp_present = 12;
    // AIGP Present
    bool is_aigp_present = 13;
    // PE distinguisher label  attribute present
    bool is_pe_distinguisher_label_present = 14;
    // BGP LS attribute present
    bool is_ls_attribute_present = 15;
    // Label Index attribute present
    bool is_label_index_present = 16;
    // Neighbor AS number
    uint32 neighbor_as = 17;
    // AS where aggregation was last performed
    uint32 aggregator_as = 18;
    // Address where aggregation was performed
    string aggregator_address = 19;
    // Metric
    uint32 metric = 20;
    // Local preference
    uint32 local_preference = 21;
    // Origin
    uint32 origin = 22;
    // AS path attribute
    repeated uint32 as_path = 23;
    // Community attribute
    repeated uint32 community = 24;
    // Extended community Flags
    uint32 extended_community_flags = 25;
    // Extended community attribute
    repeated uint32 extended_community = 26;
    // Unknown attributes
    repeated uint32 unknown_attributes = 27;
    // Cluster list attribute
    repeated uint32 cluster_list = 28;
    // Originator attribute
    string originator = 29;
    // L2TPv3 session id
    uint32 l2_t_pv3_session_id = 30;
    // L2TPv3 Cookie
    repeated uint32 l2_t_pv3_cookie = 31;
    // Connector Type
    uint32 connector_type = 32;
    // Connector Value
    repeated uint32 connector_value = 33;
    // AIGP metric value
    uint64 aigp_metric_value = 34;
    // PMSI Type
    uint32 pmsi_type = 35;
    // PMSI Value
    uint32 pmsi_flags = 36;
    // PMSI label
    uint32 pmsi_label = 37;
    // PMSI Value
    repeated uint32 pmsi_value = 38;
    // PPMP Value
    uint32 ppm_pvalue = 39;
    // PE distinguisher label attribute
    repeated bgp_pedistlbl_entry_ pe_distinguisher_label = 40;
    // BGP LS attribute
    repeated uint32 ls_attr = 41;
    // Label Index attribute
    repeated uint32 label_index_attr = 42;
}

message bgp_attr_ {
    // AS path encoded as 2-byte
    bool is_as_path2_byte = 1;
    // Application gateway present
    bool is_application_gateway_present = 2;
    // BGP ATTR_SET attribute present
    bool is_attr_set_present = 3;
    // AIGP set by policy inbound IGP 
    bool set_aigp_inbound_igp = 4;
    // AIGP set by policy inbound metric
    bool set_aigp_inbound_metric = 5;
    // RNH Attribute  present
    bool is_rnh_present = 6;
    // RIB RNH Attribute  present
    bool is_ribrnh_present = 7;
    // Attribute key number
    uint32 attribute_key_number = 8;
    // Attribute reuse ID Configured
    bool attribute_reuse_id_config = 9;
    // Attribute reuse ID maximum ID
    uint32 attribute_reuse_id_max_id = 10;
    // Attribute reuse ID nodes
    uint32 attribute_reuse_id_node = 11;
    // Attribute reuse ID current ID
    uint32 attribute_reuse_id_current = 12;
    // Attribute reuse ID allocated keys
    uint32 attribute_reuse_id_keys = 13;
    // Attribute reuse ID timer in seconds
    uint32 attribute_reuse_id_recover_sec = 14;
    // VPN Distinguisher
    uint32 vpn_distinguisher = 15;
    // Common attributes
    bgp_common_attr_entry_ common_attributes = 16;
    // ATTR_SET attribute
    bgp_common_attr_entry_ attr_set = 17;
    // RNH Type
    uint32 rnh_type = 18;
    // RNH Length
    uint32 rnh_len = 19;
    // RNH Address Length
    uint32 rnh_addr_len = 20;
    // RNH Address
    bgp_attr_rnh_addr_t rnh_addr = 21;
    // RIB RNH Table
    uint32 ribrnh_table = 22;
    // RIB RNH MAC Address
    string ribrnh_mac = 23;
    // RIB RNH IP Address
    bgp_addrtype ribrnh_ip = 24;
    // RIB RNH IP Table
    uint32 ribrnhip_table = 25;
    // RIB RNH Vni
    uint32 ribrnh_vni = 26;
    // RIB RNH Encapsulation Type
    uint32 ribrnh_encap = 27;
}

