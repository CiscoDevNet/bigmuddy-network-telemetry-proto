// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.update_generation_neighbors.update_generation_neighbor;

// BGP Update generation Neighbor information
message bgp_updgen_nbr_bag_KEYS {
    string instance_name = 1;
    string vrf_name = 2;
    string af_name = 3;
    uint32 update_group_index = 4;
    uint32 sub_group_index = 5;
    uint32 sub_group_id = 6;
    uint32 filter_group_index = 7;
    string neighbor_address = 8;
}

message bgp_updgen_nbr_bag {
    // ProcessID
    uint32 process_id = 50;
    // VRF Name
    string update_vrf_name = 51;
    // Address family identifier
    string update_group_af_name = 52;
    // Neighbor address
    bgp_addrtype update_neighbor_address = 53;
    // Filter-group index
    uint32 update_filter_group_index = 54;
    // Refresh Filter-group index
    uint32 refresh_filter_group_index = 55;
    // Sub-group index
    uint32 sub_group_index = 56;
    // Refresh Sub-group index
    uint32 refresh_sub_group_index = 57;
    // Refresh sub-group ID
    uint32 refresh_sub_group_id = 58;
    // Update-group index
    uint32 update_group_index = 59;
    // Main table version
    uint32 update_main_table_version = 60;
    // VRF Table RIB version
    uint32 update_vrf_table_rib_version = 61;
    // OutQueue messages
    uint32 update_out_queue_messages = 62;
    // OutQueue size
    uint32 update_out_queue_size = 63;
    // Refresh OutQueue messages
    uint32 refresh_update_out_queue_messages = 64;
    // Refresh OutQueue size
    uint32 refresh_update_out_queue_size = 65;
    // Filter-group messages
    uint32 update_filter_group_messages = 66;
    // Last added time
    bgp_timespec last_sub_group_add_timestamp = 67;
    // Last removed time
    bgp_timespec last_sub_group_remove_timestamp = 68;
    // Last added time
    bgp_timespec last_filter_group_add_timestamp = 69;
    // Last removed time
    bgp_timespec last_filter_group_remove_timestamp = 70;
    // Version
    uint32 version = 71;
    // Pending target version
    uint32 pending_target_version = 72;
    // Resume version
    uint32 next_resume_version = 73;
    // Ack version
    uint32 ack_version = 74;
    // Synced ack version
    uint32 synced_ack_version = 75;
    // Outstanding version count
    uint32 outstanding_version_count = 76;
    // Refresh version
    uint32 update_refresh_version = 77;
    // Requested refresh target version
    uint32 refresh_requested_target_version = 78;
    // Refresh target version
    uint32 update_refresh_target_version = 79;
    // Pending refresh target version
    uint32 refresh_pending_target_version = 80;
    // Refresh resume version
    uint32 refresh_next_resume_version = 81;
    // Refresh Ack version
    uint32 refresh_ack_version = 82;
    // First default-origination time
    bgp_timespec first_default_originate_timestamp = 83;
    // Last default-origination time
    bgp_timespec last_default_originate_timestamp = 84;
    // Time since last default-origination event (in seconds)
    uint32 last_default_originate_age = 85;
    // Default-origination state
    sint32 default_originate_state = 86;
    // Default-origination context
    sint32 default_originate_internal_context = 87;
    // Number of EORs outstanding
    bool is_eor_outstanding = 88;
    // Refresh Outbound count
    uint32 outbound_refresh_count = 89;
    // Refresh Inbound count
    uint32 inbound_refresh_count = 90;
    // Last update-group timer start
    bgp_timespec last_update_group_start_timestamp = 91;
    // Last update-group timer expiry
    bgp_timespec last_update_group_expiry_timestamp = 92;
    // Is update-group timer running
    bool is_update_group_timer_running = 93;
    // Current Update-group address-family identifier
    string current_update_group_af_name = 94;
    // Last Update-group address-family identifier
    string last_update_group_af_name = 95;
    // First update queued time
    bgp_timespec first_update_queued_timestamp = 96;
    // Last update queued time
    bgp_timespec last_update_queued_timestamp = 97;
    // Time since last update queued event (in seconds)
    uint32 last_update_queued_age = 98;
    // Last refresh update queued time
    bgp_timespec last_refresh_update_queued_timestamp = 99;
    // Time since last refresh update queued event (in seconds)
    uint32 last_refresh_update_queued_age = 100;
    // First update write time
    bgp_timespec first_update_write_timestamp = 101;
    // Last update write time
    bgp_timespec last_update_write_timestamp = 102;
    // Time since last update write event (in seconds)
    uint32 last_update_write_age = 103;
    // Last refresh update write time
    bgp_timespec last_refresh_update_write_timestamp = 104;
    // Time since last refresh update write event (in seconds)
    uint32 last_refresh_update_write_age = 105;
    // Update statistics
    bgp_updgen_stats_bag update_statistics = 106;
}

message bgp_timespec {
    // Seconds part of time value
    uint32 seconds = 1;
    // Nanoseconds part of time value
    uint32 nanoseconds = 2;
}

// IPV4Tunnel Address type
message IPV4TunnelAddressType {
    string value = 1;
}

// IPV4MDT Address type
message IPV4MDTAddressType {
    string value = 1;
}

// IPV4 RTConstraint Address type
message RTConstraintAddressType {
    string value = 1;
}

// IPV6 Address type
message IPV6AddressType {
    string value = 1;
}

message bgp_l2vpn_addr_t {
    bytes l2vpn_address = 1;
}

// L2VPN EVPN Address type
message L2VPNEVPNAddressType {
    string value = 1;
}

message bgp_l2vpn_mspw_addr_t {
    bytes l2vpn_address = 1;
}

// IPV6 MVPN Address type
message IPV6MVPNAddressType {
    string value = 1;
}

// IPV4 MVPN Address type
message IPV4MVPNAddressType {
    string value = 1;
}

// LINKSTATE LINKSTATE Address type
message LS_LSAddressType {
    string value = 1;
}

// IPv4 Flowspec Address type
message IPv4FlowspecAddressType {
    string value = 1;
}

// IPv6 Flowspec Address type
message IPv6FlowspecAddressType {
    string value = 1;
}

message bgp_addrtype {
    string afi = 1;
    // IPv4 Addr
    string ipv4_address = 2;
    // IPv4 Mcast Addr
    string ipv4_mcast_address = 3;
    // IPv4 Label Addr
    string ipv4_label_address = 4;
    // IPv4 Tunnel
    IPV4TunnelAddressType ipv4_tunnel_address = 5;
    // IPv4 MDT Addr
    IPV4MDTAddressType ipv4_mdt_address = 6;
    // IPv4 VPN Addr
    string ipv4_vpn_address = 7;
    // IPv4 VPN Mcast Addr
    string ipv4_vpna_mcastddress = 8;
    // IPV6 Addr
    IPV6AddressType ipv6_address = 9;
    // IPV6 Mcast Addr
    IPV6AddressType ipv6_mcast_address = 10;
    // IPv6 Label Addr
    IPV6AddressType ipv6_label_address = 11;
    // IPv6 VPN Addr
    IPV6AddressType ipv6_vpn_address = 12;
    // IPv6 VPN Mcast Addr
    IPV6AddressType ipv6_vpn_mcast_address = 13;
    // L2VPN VPLS Addr
    bgp_l2vpn_addr_t l2_vpnvpls_address = 14;
    // RT Constrt Addr
    RTConstraintAddressType rt_constraint_address = 15;
    // MVPN addr
    IPV6MVPNAddressType ipv6_mvpn_address = 16;
    // MVPN4 addr
    IPV4MVPNAddressType ipv4_mvpn_address = 17;
    // L2VPN EVPN Addr
    L2VPNEVPNAddressType l2_vpn_evpn_address = 18;
    // LINKSTATE LINKSTATE Addr
    LS_LSAddressType ls_ls_address = 19;
    // L2VPN MSPW Addr
    bgp_l2vpn_mspw_addr_t l2_vpn_mspw_address = 20;
    // IPV4 Flowspec Addr
    IPv4FlowspecAddressType ipv4_flowspec_address = 21;
    // IPV6 Flowspec Addr
    IPv6FlowspecAddressType ipv6_flowspec_address = 22;
    // IPV4 VPN Flowspec Addr
    IPv4FlowspecAddressType ipv4_vpn_flowspec_address = 23;
    // IPV6 VPN Flowspec Addr
    IPv6FlowspecAddressType ipv6_vpn_flowspec_address = 24;
}

// BGP Update generation common statistics information
message bgp_updgen_stats_bag {
    // OutQueue High Messages
    uint32 update_out_queue_messages_high = 1;
    // OutQueue Cumulative Messages
    uint32 update_out_queue_messages_cumulative = 2;
    // OutQueue Discarded Messages
    uint32 update_out_queue_messages_discarded = 3;
    // OutQueue Cleared Messages
    uint32 update_out_queue_messages_cleared = 4;
    // OutQueue Hi Size
    uint32 update_out_queue_size_high = 5;
    // OutQueue Cumulative Size
    uint64 update_out_queue_size_cumulative = 6;
    // OutQueue Discarded Size
    uint64 update_out_queue_size_discarded = 7;
    // OutQueue Cleared Size
    uint64 update_out_queue_size_cleared = 8;
    // Last Discarded time
    bgp_timespec last_update_discard_timestamp = 9;
    // Time since last Discard event (in seconds)
    uint32 last_update_discard_age = 10;
    // Last Cleared time
    bgp_timespec last_update_cleared_timestamp = 11;
    // Time since last Clear event (in seconds)
    uint32 last_update_cleard_age = 12;
    // Throttle Count
    uint32 update_throttle_count = 13;
    // Last Throttled time
    bgp_timespec last_update_throttle_timestamp = 14;
    // Time since last Throttle event (in seconds)
    uint32 last_update_throttle_age = 15;
    // Recovery Count
    uint32 update_recovery_count = 16;
    // Last Recovery time
    bgp_timespec last_update_recovery_timestamp = 17;
    // Time since last Recovery event (in seconds)
    uint32 last_update_recovery_age = 18;
    // Memory allocation failure count
    uint32 update_memory_allocation_fail_count = 19;
    // Memory allocation failure time
    bgp_timespec last_update_memory_allocation_fail_timestamp = 20;
    // Time since last memory allocation failure event (in seconds)
    uint32 last_update_memory_allocation_fail_age = 21;
}

