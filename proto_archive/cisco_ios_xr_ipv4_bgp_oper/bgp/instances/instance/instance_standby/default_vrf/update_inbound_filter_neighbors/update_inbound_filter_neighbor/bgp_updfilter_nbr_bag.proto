// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor;

// BGP Update filtering Neighbor information
message bgp_updfilter_nbr_bag_KEYS {
    string instance_name = 1;
    string neighbor_address = 2;
}

message bgp_updfilter_nbr_bag {
    // VRF Name
    string update_vrf_name = 50;
    // Neighbor address
    bgp_addrtype update_neighbor_address = 51;
    // Logging is enabled
    bool update_filter_logging_enabled = 52;
    // Configured Filtered message buffer count
    uint32 configured_update_filter_message_buffer_count = 53;
    // Operational Filtered messages buffer count
    uint32 operational_update_filter_message_buffer_count = 54;
    // Indicates if the message buffers are circular
    bool update_filter_message_buffer_circular = 55;
    // Update attribute-filter group name
    string update_attribute_filter_group_name = 56;
    // Attribute filtering is enabled
    bool operational_update_attribute_filtering_enabled = 57;
    // Attribute filtering is enabled for the current message being parsed
    bool message_update_attribute_filtering_enabled = 58;
    // Total update messages count
    uint32 total_filter_update_message_count = 59;
    // Total update messages count since session establishment
    uint32 establishment_total_filter_update_message_count = 60;
    // Filtered messages count
    uint32 update_filtered_message_count = 61;
    // Filtered messages count since session establishment
    uint32 establishment_update_filtered_message_count = 62;
    // First filtered message received time: time elapsed since 00:00:00 UTC, January 1, 1970
    bgp_timespec first_update_filtered_timestamp = 63;
    // Last filtered message received time: time elapsed since 00:00:00 UTC, January 1, 1970
    bgp_timespec last_update_filtered_timestamp = 64;
    // Time since last filtered message received event (in seconds)
    uint32 last_update_filtered_age = 65;
    // List of attributes that can be filtered
    repeated bgp_updfilter_attrf_attr_bag update_attribute_filter_attributes_list = 66;
    // List of filtered messages
    repeated bgp_updfilter_msg_bag update_filter_message_list = 67;
    // Filtered messages list count
    uint32 update_filter_message_list_count = 68;
}

message bgp_timespec {
    // Seconds part of time value
    uint32 seconds = 1;
    // Nanoseconds part of time value
    uint32 nanoseconds = 2;
}

// IPV4Tunnel Address type
message IPV4TunnelAddressType {
    string value = 1;
}

// IPV4MDT Address type
message IPV4MDTAddressType {
    string value = 1;
}

// IPV4 RTConstraint Address type
message RTConstraintAddressType {
    string value = 1;
}

// IPV6 Address type
message IPV6AddressType {
    string value = 1;
}

message bgp_l2vpn_addr_t {
    bytes l2vpn_address = 1;
}

// L2VPN EVPN Address type
message L2VPNEVPNAddressType {
    string value = 1;
}

message bgp_l2vpn_mspw_addr_t {
    bytes l2vpn_address = 1;
}

// IPV6 MVPN Address type
message IPV6MVPNAddressType {
    string value = 1;
}

// IPV4 MVPN Address type
message IPV4MVPNAddressType {
    string value = 1;
}

// LINKSTATE LINKSTATE Address type
message LS_LSAddressType {
    string value = 1;
}

// IPv4 Flowspec Address type
message IPv4FlowspecAddressType {
    string value = 1;
}

// IPv6 Flowspec Address type
message IPv6FlowspecAddressType {
    string value = 1;
}

message bgp_addrtype {
    string afi = 1;
    // IPv4 Addr
    string ipv4_address = 2;
    // IPv4 Mcast Addr
    string ipv4_mcast_address = 3;
    // IPv4 Label Addr
    string ipv4_label_address = 4;
    // IPv4 Tunnel
    IPV4TunnelAddressType ipv4_tunnel_address = 5;
    // IPv4 MDT Addr
    IPV4MDTAddressType ipv4_mdt_address = 6;
    // IPv4 VPN Addr
    string ipv4_vpn_address = 7;
    // IPv4 VPN Mcast Addr
    string ipv4_vpna_mcastddress = 8;
    // IPV6 Addr
    IPV6AddressType ipv6_address = 9;
    // IPV6 Mcast Addr
    IPV6AddressType ipv6_mcast_address = 10;
    // IPv6 Label Addr
    IPV6AddressType ipv6_label_address = 11;
    // IPv6 VPN Addr
    IPV6AddressType ipv6_vpn_address = 12;
    // IPv6 VPN Mcast Addr
    IPV6AddressType ipv6_vpn_mcast_address = 13;
    // L2VPN VPLS Addr
    bgp_l2vpn_addr_t l2_vpnvpls_address = 14;
    // RT Constrt Addr
    RTConstraintAddressType rt_constraint_address = 15;
    // MVPN addr
    IPV6MVPNAddressType ipv6_mvpn_address = 16;
    // MVPN4 addr
    IPV4MVPNAddressType ipv4_mvpn_address = 17;
    // L2VPN EVPN Addr
    L2VPNEVPNAddressType l2_vpn_evpn_address = 18;
    // LINKSTATE LINKSTATE Addr
    LS_LSAddressType ls_ls_address = 19;
    // L2VPN MSPW Addr
    bgp_l2vpn_mspw_addr_t l2_vpn_mspw_address = 20;
    // IPV4 Flowspec Addr
    IPv4FlowspecAddressType ipv4_flowspec_address = 21;
    // IPV6 Flowspec Addr
    IPv6FlowspecAddressType ipv6_flowspec_address = 22;
    // IPV4 VPN Flowspec Addr
    IPv4FlowspecAddressType ipv4_vpn_flowspec_address = 23;
    // IPV6 VPN Flowspec Addr
    IPv6FlowspecAddressType ipv6_vpn_flowspec_address = 24;
}

// BGP Update filtering attributes information
message bgp_updfilter_attrf_attr_bag {
    // Internal attribute code [RFC4271: BGP4]
    uint32 update_internal_attribute_code = 1;
    // Filtering action
    string update_filter_action = 2;
    // Filter match counter
    uint32 update_filter_match_count = 3;
    // Filter match counter since last session establishment
    uint32 establishment_update_filter_match_count = 4;
    // Last attribute filtered time: time elapsed since 00:00:00 UTC, January 1, 1970
    bgp_timespec last_update_filter_match_timestamp = 5;
    // Time since this attribute was last filtered (in seconds)
    uint32 last_update_filter_match_age = 6;
}

// BGP Update filtering element information
message bgp_updfilter_elem_bag {
    // Attribute Flags [RFC4271: BGP4]
    uint32 update_attribute_flags = 1;
    // Attribute code [RFC4271: BGP4]
    uint32 update_attribute_code = 2;
    // Filtering action
    string update_filter_action = 3;
}

// BGP Update filter message information
message bgp_updfilter_msg_bag {
    // Filtered attributes count
    uint32 update_filtered_attribute_count = 1;
    // Filtering final action
    string update_filter_final_action = 2;
    // Message timestamp: time elapsed since 00:00:00 UTC, January 1, 1970
    bgp_timespec update_filter_message_timestamp = 3;
    // Filtering element list
    repeated bgp_updfilter_elem_bag update_filter_element_list = 4;
    // NLRI address-family
    string update_filter_nlri_address_family = 5;
    // List of NLRIs in string format
    string update_filter_nlri_string = 6;
    // Indicates whether NLRI string was truncated due to lack of space
    bool update_filter_nlri_string_truncated = 7;
    // Raw Message data in binary format
    repeated uint32 update_filter_message_data = 8;
}

