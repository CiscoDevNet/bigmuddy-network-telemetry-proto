// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_lsd_oper.mpls_lsd.applications.application;

// LSD application information
message mpls_lsd_app_KEYS {
    string application_name = 1;
}

message mpls_lsd_app {
    // Application name
    string application_name = 50;
    // Application type
    string application_type = 51;
    // Primary/Backup role
    sint32 application_role_primary = 52;
    // client-app instance
    string application_instance = 53;
    // App reg ts
    uint64 app_reg_time = 54;
    // App disconnect ts
    uint64 app_disconnect_time = 55;
    // App flow control status
    sint32 app_flow_controlled = 56;
    // Flow Ctrl ts
    uint64 flow_ctrl_time = 57;
    // Flow Ctrl Clr ts
    uint64 flow_ctrl_clr_time = 58;
    // App go active timestamp
    uint64 go_act_ts = 59;
    // Application state
    string application_state = 60;
    // Recovery time [secs] remaining if client is timing out
    uint32 recovery_time_remaining_seconds = 61;
    // Recovery time [secs] elapsed if client is timing out
    uint32 recovery_time_elapsed_seconds = 62;
    // Recovery time [secs] specified at registration or set explicitly
    uint32 recovery_time_register_seconds = 63;
    // Node ID where application is/was running
    string node_id = 64;
    // Application Statistics
    mpls_lsd_app_stats application_statistics = 65;
}

// LSD application connection statistics
message mpls_lsd_app_connected_stats {
    // RT set count
    uint32 rt_set_msg_count = 1;
    // Operation count
    uint32 operation_msg_count = 2;
    // Label OOR count
    uint32 oor_label_count = 3;
    // Error count
    uint32 error_msg_count = 4;
}

// LSD application statistics
message mpls_lsd_app_stats {
    // Connected statistics
    mpls_lsd_app_connected_stats connected = 1;
    // Number of interface enabled
    uint32 interface_enable = 2;
    // Number of interface enable pending
    uint32 interface_enable_pending = 3;
    // Label context count
    repeated uint32 label_context_count = 4;
    // Label context pending count
    repeated uint32 label_context_pending_count = 5;
    // Connect count
    uint32 connect_count = 6;
}

