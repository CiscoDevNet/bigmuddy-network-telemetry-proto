// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_lsd_oper.mpls_lsd_nodes.mpls_lsd_node.labels.label;

// Label information
message mpls_lsd_lbl_KEYS {
    string node_name = 1;
    uint32 label_id = 2;
}

message mpls_lsd_lbl {
    // Label value
    uint32 label = 50;
    // Application owner
    repeated mpls_lsd_app_rsrc_state application_owner = 51;
    // Rewrite bound to label
    sint32 rewrite_is_bound = 52;
    // Label context
    mpls_lsd_lbl_ctx label_context = 53;
    // Rewrite owner
    uint32 rewrite_owners = 54;
    // RSI connected
    sint32 rs_iconnected = 55;
    // VRF Name
    string vrf_name = 56;
}

// LSD application state
message mpls_lsd_app_rsrc_state {
    // Application name
    string application_name = 1;
    // Application type
    string application_type = 2;
    // Primary/Backup role
    sint32 application_role_primary = 3;
    // Application instance Name
    string application_instance = 4;
    // Application resource state
    string resource_state = 5;
}

// LSD IPv4 context
message mpls_lsd_lbl_ctx_ipv4 {
    // Table ID
    uint32 table_id = 1;
    // IPv4 prefix
    string prefix = 2;
    // IPv4 prefix length
    uint32 prefix_length = 3;
    // Security ID
    uint32 security_id = 4;
    // VRF Name
    string vrf_name = 5;
}

// LSD IPv6 context
message mpls_lsd_lbl_ctx_ipv6 {
    // Table ID
    uint32 table_id = 1;
    // Prefix
    string prefix = 2;
    // Prefix length
    uint32 prefix_length = 3;
    // Security ID
    uint32 security_id = 4;
    // VRF Name
    string vrf_name = 5;
}

// LSD TEv4 context
message mpls_lsd_lbl_ctx_tev4 {
    // Table ID
    uint32 table_id = 1;
    // Tunnel source
    string tunnel_source = 2;
    // Tunnel destination
    string tunnel_dest = 3;
    // Tunnel ID
    uint32 tunnel_id = 4;
    // Extended tunnel ID
    uint32 tunnel_id_extension = 5;
    // Tunnel LSP ID
    uint32 tunnel_lsp_id = 6;
    // Is this an SRTE head tunnel
    sint32 is_srte = 7;
}

// L3VPN IPv4 context
message mpls_lsd_lbl_ctx_l3vpn_ipv4 {
    // IPv4 prefix
    string prefix = 1;
    // Prefix length
    uint32 prefix_length = 2;
    // Route distinguisher
    uint64 route_distinguisher = 3;
}

// L3VPN IPv6 context
message mpls_lsd_lbl_ctx_l3vpn_ipv6 {
    // IPv6 prefix
    string prefix = 1;
    // Prefix length
    uint32 prefix_length = 2;
    // Route distinguisher
    uint64 route_distinguisher = 3;
}

// L3VPN vrf context
message mpls_lsd_lbl_ctx_l3vpn_vrf {
    // Table ID
    uint32 table_id = 1;
    // Security ID
    uint32 security_id = 2;
}

// L3VPN CEv4 context
message mpls_lsd_lbl_ctx_l3vpn_cev4 {
    // Table ID
    uint32 table_id = 1;
    // IPv4 nexthop
    string ipv4_next_hop = 2;
    // Security ID
    uint32 security_id = 3;
}

// L3VPN CEv6 context
message mpls_lsd_lbl_ctx_l3vpn_cev6 {
    // Table ID
    uint32 table_id = 1;
    // IPv6 nexthop
    string ipv6_next_hop = 2;
    // Security ID
    uint32 security_id = 3;
}

// Pseudo-wire context
message mpls_lsd_lbl_ctx_pw {
    // Address prefix
    string prefix = 1;
    // Pseudo-wire ID
    uint64 pseudowire_id = 2;
    // Remote L2 Router ID
    uint32 remote_l2_router_id = 3;
    // Subinterface
    string subinterface = 4;
}

// Label block context
message mpls_lsd_lbl_ctx_lbl_blk {
    // Service
    uint32 service = 1;
    // VPN ID
    uint32 vpn_id = 2;
    // Edge ID
    uint32 edge_id = 3;
    // Offset
    uint32 offset = 4;
    // Number of labels
    uint32 size = 5;
}

// IP subscriber context
message mpls_lsd_lbl_ctx_ip_sub {
    // Table Id
    uint32 table_id = 1;
    // Parent interface
    string parent_interface = 2;
}

// TEv4 p2mp context
message mpls_lsd_lbl_ctx_tev4_p2mp {
    // Table ID
    uint32 table_id = 1;
    // Tunnel source
    string tunnel_source = 2;
    // Point to multipoint ID
    uint32 p2_mp_id = 3;
    // Tunnel ID
    uint32 tunnel_id = 4;
    // Tunnel ID extension
    uint32 tunnel_id_extension = 5;
    // Tunnel LSP ID
    uint32 tunnel_lsp_id = 6;
    // Previous hop
    string previous_hop = 7;
}

// MLDP IPv4 context
message mpls_lsd_lbl_ctx_mldpv4 {
    // Table ID
    uint32 table_id = 1;
    // LSM ID Type
    uint32 type = 2;
    // LSM ID
    uint32 lsm_id = 3;
    // Peer LSR Id
    string peer_lsrid = 4;
    // Peer Label Space Id
    uint32 peer_label_space_id = 5;
}

// Pseudo-wire Head-end context
message mpls_lsd_lbl_ctx_pwhe {
    // Pseudo-wire Head-end interface
    string pwhe_intf = 1;
}

// TP context
message mpls_lsd_lbl_ctx_tp {
    // TP source global ID
    uint32 source_global_id = 1;
    // TP source node ID
    string source_node_id = 2;
    // TP destination global ID
    uint32 dest_global_id = 3;
    // TP destination node ID
    string dest_node_id = 4;
    // TP source tunnel ID
    uint32 source_tunnel_id = 5;
    // TP destination tunnel ID
    uint32 dest_tunnel_id = 6;
    // TP LSP ID
    uint32 lsp_id = 7;
}

// Generic routing encapsulation context
message mpls_lsd_lbl_ctx_gre {
    // Generic routing encapsulation interface
    string gre_interface = 1;
}

// Generic routing encapsulation context
message mpls_lsd_lbl_ctx_gre_ipv6 {
    // Generic routing encapsulation IPv6 interface
    string gre_ipv6_interface = 1;
}

// EVPN context
message mpls_lsd_lbl_ctx_evpn {
    // EVPN ID
    uint32 evpn_id = 1;
    // EVPN TAG
    uint32 evpn_tag = 2;
    // Ethernet Segment ID
    bytes ethernet_segment = 3;
}

// BFD BLB IPv4 content
message mpls_lsd_lbl_ctx_blb_ipv4 {
    // BFD BLB interface
    string blb_intf = 1;
    // IPv4 prefix
    string prefix = 2;
}

// BFD BLB IPv6 content
message mpls_lsd_lbl_ctx_blb_ipv6 {
    // BFD BLB interface
    string blb_intf = 1;
    // IPv6 prefix
    string prefix = 2;
}

// PIM I-PMSI label context
message mpls_lsd_lbl_ctx_pim_i_pmsi {
    // VRF-ID
    uint32 vrf_id = 1;
    // Head
    sint32 head = 2;
    // PIM6
    sint32 v6 = 3;
}

// PIM S-PMSI label context
message mpls_lsd_lbl_ctx_pim_s_pmsi {
    // VRF-ID
    uint32 vrf_id = 1;
    // Originating Router
    string source = 2;
    // Head
    sint32 head = 3;
    // PIM6
    sint32 v6 = 4;
    // Head LSM-ID
    uint32 hli = 5;
    // Segmented Multicast
    sint32 seg = 6;
}

// L3VPN NH SET context
message mpls_lsd_lbl_ctx_l3vpn_nh_set {
    // Table ID
    uint32 table_id = 1;
    // Next Hop Set ID
    uint32 next_hop_set_id = 2;
}

// SR Prefix Segment context
message mpls_lsd_lbl_ctx_sr_pfx_seg {
    // Table ID
    uint32 table_id = 1;
    // Prefix Segment ID
    uint32 segment_id = 2;
}

// SR Adj Segment ipv4 context
message mpls_lsd_lbl_ctx_sr_adj_seg_ipv4 {
    // Adjacency index
    uint32 index = 1;
    // Adjacency type
    uint32 type = 2;
    // Adjacency interface
    string intf = 3;
    // Adjacency nexthop IPv4 address
    string addr = 4;
}

// SR Adj Segment ipv6 context
message mpls_lsd_lbl_ctx_sr_adj_seg_ipv6 {
    // Adjacency index
    uint32 index = 1;
    // Adjacency type
    uint32 type = 2;
    // Adjacency interface
    string intf = 3;
    // Adjacency nexthop IPv6 address
    string addr = 4;
}

// Label block SRGB context
message mpls_lsd_lbl_ctx_lbl_blk_srgb {
    // Start Label
    uint32 start_label = 1;
    // Offset
    uint32 offset = 2;
    // Number of labels
    uint32 size = 3;
}

// Traffic Engineering Binding context
message mpls_lsd_lbl_ctx_te_binding {
    // MPLS Traffic Engineering Tunnel or Group ID
    uint32 te_identifier = 1;
    // Type of identifier for the binding
    string te_type = 2;
}

message mpls_lsd_lbl_ctx_key {
    string label_context_type = 1;
    // IPv4 label context
    mpls_lsd_lbl_ctx_ipv4 ipv4_data = 2;
    // IPv6 label context
    mpls_lsd_lbl_ctx_ipv6 ipv6_data = 3;
    // TEv4 label context
    mpls_lsd_lbl_ctx_tev4 t_ev4_data = 4;
    // L3VPN IPv4 label context
    mpls_lsd_lbl_ctx_l3vpn_ipv4 ipv4_l3vpn_data = 5;
    // L3VPN IPv6 label context
    mpls_lsd_lbl_ctx_l3vpn_ipv6 ipv6_l3vpn_data = 6;
    // L3VPN VRF label context
    mpls_lsd_lbl_ctx_l3vpn_vrf vrf_l3vpn_data = 7;
    // L3VPN CEv4 label context
    mpls_lsd_lbl_ctx_l3vpn_cev4 c_ev4_l3vpn_data = 8;
    // L3VPN CEv6 label context
    mpls_lsd_lbl_ctx_l3vpn_cev6 c_ev6_l3vpn_data = 9;
    // Pseudowire label context
    mpls_lsd_lbl_ctx_pw pseudowire_data = 10;
    // Label block context
    mpls_lsd_lbl_ctx_lbl_blk label_block_data = 11;
    // IP Subscriber context
    mpls_lsd_lbl_ctx_ip_sub ip_sub_data = 12;
    // TEv4 P2MP context
    mpls_lsd_lbl_ctx_tev4_p2mp t_ev4_p2_mp_data = 13;
    // MLDPv4 LSM-ID context
    mpls_lsd_lbl_ctx_mldpv4 mld_pv4_data = 14;
    // Pseudowire Head-end label context
    mpls_lsd_lbl_ctx_pwhe pseudowire_head_end_data = 15;
    // TP context
    mpls_lsd_lbl_ctx_tp tp_data = 16;
    // Generic routing encapsulation context
    mpls_lsd_lbl_ctx_gre generic_routing_encapsulation = 17;
    // Generic routing encapsulation context
    mpls_lsd_lbl_ctx_gre_ipv6 ipv6_generic_routing_encapsulation = 18;
    // EVPN context
    mpls_lsd_lbl_ctx_evpn evpn_data = 19;
    // BFD BLB label context
    mpls_lsd_lbl_ctx_blb_ipv4 ipv4_blb_data = 20;
    // BFD BLB label context
    mpls_lsd_lbl_ctx_blb_ipv6 ipv6_blb_data = 21;
    // PIM I-PMSI label conext
    mpls_lsd_lbl_ctx_pim_i_pmsi pi_mi_pmsi_data = 22;
    // PIM S-PMSI label conext
    mpls_lsd_lbl_ctx_pim_s_pmsi pi_ms_pmsi_data = 23;
    // L3VPN NH SET label context
    mpls_lsd_lbl_ctx_l3vpn_nh_set next_hop_set_l3_vpn = 24;
    // SR Prefix Segment context
    mpls_lsd_lbl_ctx_sr_pfx_seg sr_prefix_segment = 25;
    // SR Adj Segment ipv4 context
    mpls_lsd_lbl_ctx_sr_adj_seg_ipv4 sr_adj_segment_ipv4 = 26;
    // SR Adj Segment ipv6 context
    mpls_lsd_lbl_ctx_sr_adj_seg_ipv6 sr_adj_segment_ipv6 = 27;
    // Label block SRGB context
    mpls_lsd_lbl_ctx_lbl_blk_srgb label_block_srgb_data = 28;
    // MPLS TE tunnel binding context
    mpls_lsd_lbl_ctx_te_binding te_binding = 29;
}

// Label context
message mpls_lsd_lbl_ctx {
    // Label Key
    mpls_lsd_lbl_ctx_key key = 1;
    // Application opaque data
    bytes application_data = 2;
}

