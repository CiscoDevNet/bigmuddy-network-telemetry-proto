// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_infra_policymgr_oper.policy_manager.global.class_map.class_map_types.class_map_type.class_maps.class_map;

// Class-map bag
message class_map_bg_KEYS {
    string type = 1;
    string class_map_name = 2;
}

message class_map_bg {
    // Pointer to the modified class-map
    repeated class_map_bg_item class_map_bg = 50;
}

message class_map_bg_item {
    // Magic number on top of class-map bag
    uint32 magic = 1;
    // Name of the class-map
    string name = 2;
    // Class-Map Type QoS/PBR/Netflow/...
    string type = 3;
    // Class-Map Mode Match any/Match all
    string mode = 4;
    // Class-Map Internal
    uint32 flags = 5;
    // Number of Match infos
    uint32 match_count = 6;
    // Pointer to the first Match info
    class_match_info_st match_infop = 7;
    // MD5 checksum of the encoded class-map bag
    bytes chk_sum = 8;
    string description = 9;
}

message mac_addr_st {
    // MAC address
    repeated uint32 mac_addr = 1;
    // MAC mask
    repeated uint32 mask = 2;
}

message uint32_rng_st {
    uint32 min = 1;
    uint32 max = 2;
}

message uint32_rng_array {
    repeated uint32_rng_st value = 1;
}

message uint8_rng_st {
    uint32 min = 1;
    uint32 max = 2;
}

message uint16_rng_st {
    uint32 min = 1;
    uint32 max = 2;
}

message vlan_id_st {
    uint32 min = 1;
    uint32 max = 2;
    uint32 mask = 3;
}

message flow_key_array {
    bytes keys = 1;
    uint32 num = 2;
}

message flow_key_st {
    // flow keys
    flow_key_array flow_keys = 1;
    // Maximum count of flows
    uint32 max_count = 2;
    // Idle timeout of flows (in seconds)
    uint32 idle_timeout = 3;
}

message proto_icmp_st {
    // Protocol type
    uint32 type = 1;
    // Protocol code
    uint32 code = 2;
}

message dei_bit_st {
    // Value of the DEI bit
    uint32 bit_value = 1;
}

message tcp_flag_st {
    // Value of TCP flag
    uint32 value = 1;
    // Match any TCP flag bit
    bool match_any = 2;
}

message uint8_array {
    repeated uint32 value = 1;
}

message uint8_rng_array {
    repeated uint8_rng_st value = 1;
}

message uint16_rng_array {
    repeated uint16_rng_st value = 1;
}

message uint64_array {
    repeated uint64 value = 1;
}

message string_td {
    string value = 1;
}

message string_array {
    repeated string_td value = 1;
}

message match_nas_port_st {
    string sub_id = 1;
    string operator = 2;
    uint32 value = 3;
}

message nas_port_array {
    repeated match_nas_port_st value = 1;
}

message match_domain_st {
    string domain_name = 1;
    string format_name = 2;
}

message domain_array {
    repeated match_domain_st value = 1;
}

message match_ipv4_st {
    string prefix = 1;
    string mask = 2;
}

message match_ipv6_st {
    string prefix = 1;
    uint32 mask = 2;
}

message ipv4_addr_array {
    repeated match_ipv4_st value = 1;
}

message ipv6_addr_array {
    repeated match_ipv6_st value = 1;
}

message mac_addr_array {
    repeated mac_addr_st value = 1;
}

message vlan_id_array {
    repeated vlan_id_st value = 1;
}

// Union of pointers to the supported match criteria
message class_match_data_un {
    string type = 1;
    // IPv4 DSCP
    uint8_rng_array ipv4_dscp = 2;
    // IPv6 DSCP
    uint8_rng_array ipv6_dscp = 3;
    // Match DSCP range array
    uint8_rng_array dscp = 4;
    // IPv4 Precedence
    uint8_array ipv4_prec = 5;
    // IPv6 Precedence
    uint8_array ipv6_prec = 6;
    // Match Precedence array
    uint8_array prec = 7;
    // Match Discard Class array
    uint8_array discard_class = 8;
    // Match QoS group array
    uint16_rng_array qos_group = 9;
    // Match Traffic class array
    uint8_rng_array traffic_class = 10;
    // Match Protocol array
    uint16_rng_array proto = 11;
    // Match ICMPV4 Protocol
    proto_icmp_st icmp_v4 = 12;
    // Match ICMPV6 Protocol array
    proto_icmp_st icmp_v6 = 13;
    // IPv4 packet length array
    uint16_rng_array ipv4_packet_len = 14;
    // IPv6 packet length array
    uint16_rng_array ipv6_packet_len = 15;
    // Match packet length array
    uint16_rng_array packet_len = 16;
    // Match flow-tag array
    uint8_rng_array flow_tag = 17;
    // Match tcp flag value
    tcp_flag_st tcp_flag = 18;
    // Match ipv4 icmp type
    uint8_rng_array icmpv4_type = 19;
    // Match ipv4 icmp code
    uint8_rng_array icmpv4_code = 20;
    // Match ipv6 icmp type
    uint8_rng_array icmpv6_type = 21;
    // Match ipv6 icmp code
    uint8_rng_array icmpv6_code = 22;
    // Match MPLS experimental topmost array
    uint8_array mpls_exp = 23;
    // Match MPLS experimental imposition array
    uint8_array mpls_exp_imp = 24;
    // MPLS Disposition IPv4 Access-list
    string_array mpls_disp_ipv4_acl = 25;
    // MPLS Disposition IPv6 Access-list
    string_array mpls_disp_ipv6_acl = 26;
    // MPLS Topmost EOS
    uint32 mpls_top_eos = 27;
    // MPLS Topmost LABEL
    uint32_rng_array mpls_top_label = 28;
    // Match CoS array
    uint8_array cos = 29;
    // Match inner header CoS
    uint8_array cos_inr = 30;
    // Match DEI Bit
    dei_bit_st dei = 31;
    // Match inner DEI Bit
    dei_bit_st dei_inr = 32;
    // Match VLAN array
    vlan_id_array vlan = 33;
    // Match inner header VLAN range array
    uint16_rng_array vlan_inr = 34;
    // Match FR DLCI range array
    uint16_rng_array fr_dlci = 35;
    // Match Source MAC address
    mac_addr_st src_mac = 36;
    // Match Destination MAC address
    mac_addr_st dst_mac = 37;
    // Match ATM CLP level
    uint8_array atm_clp = 38;
    // Match FR DE value
    uint8_array fr_de = 39;
    // Fragment type
    uint32 fragment_type = 40;
    // IPv4 Access-list
    string_array ipv4_acl = 41;
    // IPv6 Access-list
    string_array ipv6_acl = 42;
    // Ethernet-Services Access-list
    string_array ether_service_acl = 43;
    // Available Identifiers
    uint8_array avail_id = 44;
    // Authentication Status
    string authen_status = 45;
    // Media Type
    uint8_array media_type = 46;
    // MLP Negotiated
    string mlp_negotiated = 47;
    // Protocol
    uint8_array subs_protocol = 48;
    // DNIS
    string_array dnis = 49;
    // DNIS Regular Expression
    string_array dnis_regex = 50;
    // Domain Name
    domain_array domain = 51;
    // Domain Regular Expression
    domain_array domain_regex = 52;
    // NAS Port
    nas_port_array nas_port = 53;
    // Service Name
    string_array service_name = 54;
    // Service Name Regular Exp
    string_array service_name_regex = 55;
    // Source Address IPV4
    ipv4_addr_array src_addr_ipv4 = 56;
    // Destination Address IPV4
    ipv4_addr_array dst_addr_ipv4 = 57;
    // Source Address IPV6
    ipv6_addr_array src_addr_ipv6 = 58;
    // Destination Address IPV6
    ipv6_addr_array dst_addr_ipv6 = 59;
    // Source Address MAC
    mac_addr_array src_addr_mac = 60;
    // Timer
    string_array timer = 61;
    // Timer Regular Expression
    string_array timer_regexp = 62;
    // Tunnel Name
    string_array tunnel_name = 63;
    // Tunnel Name Regular Expression
    string_array tunnel_name_regex = 64;
    // User Name
    string_array user_name = 65;
    // User Name Regular Expression
    string_array user_name_regex = 66;
    // Authenticated User Name
    string_array auth_username = 67;
    // Authenticated User Name RegEx
    string_array auth_username_regex = 68;
    // Unauthenticated User Name
    string_array unauth_username = 69;
    // Unauthenticated User Name RegEx
    string_array unauth_username_regex = 70;
    // Authenticated domain name
    string_array auth_domain = 71;
    // Authenticated Domain Name RegEx
    string_array auth_domain_regex = 72;
    // Unauthenticated Domain Name
    string_array unauth_domain = 73;
    // Unauthenticated Domain Name RegEx
    string_array unauth_domain_regex = 74;
    // Vendor ID
    string_array vendor_id = 75;
    // Vendor ID RegEx
    string_array vendor_id_regex = 76;
    // Access interface
    string_array access_interface = 77;
    // Input interface
    string_array input_interface = 78;
    // Input interface handle
    uint64_array input_intfhdl = 79;
    // Ethernet type
    uint16_rng_array ethertype = 80;
    // Flow key structure
    flow_key_st flow_key_data = 81;
    // Dhcp Client ID
    string_array dhcp_client_id = 82;
    // Dhcp Client ID RegEx
    string_array dhcp_client_id_regex = 83;
    // Circuit ID
    string_array circuit_id = 84;
    // Circuit ID RegEx
    string_array circuit_id_regex = 85;
    // Remote ID
    string_array remote_id = 86;
    // Remote ID RegEx
    string_array remote_id_regex = 87;
    // Source port
    uint16_rng_array src_port = 88;
    // Destination port
    uint16_rng_array dst_port = 89;
}

// Class-map match info
message class_match_info_st {
    // Next match criteria
    repeated class_match_info_st_item class_match_info_st = 1;
}

message class_match_info_st_item {
    // Match criteria
    class_match_data_un match_data = 1;
    // Flags
    uint32 flags = 2;
}

