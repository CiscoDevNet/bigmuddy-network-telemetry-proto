// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_infra_policymgr_oper.policy_manager.global.policy_map.transient_p_map_app_type_tables.transient_p_map_app_type_table.transient_p_map_names.transient_p_map_name;

// Policy-map Bag
message policy_map_bg_KEYS {
    string type = 1;
    string policy_map_name = 2;
}

message policy_map_bg {
    repeated policy_map_bg_item policy_map_bg = 50;
}

message policy_map_bg_item {
    string name = 1;
    string type = 2;
    uint32 magic = 3;
    uint32 flags = 4;
    uint32 num_classes = 5;
    uint32 max_hierarchy = 6;
    uint32 class_dflt_hrchy_depth = 7;
    uint32 num_policy_class_info = 8;
    uint32 table_id = 9;
    uint32 handle = 10;
    pmap_var_list_st pmap_var_list = 11;
    policy_event_info_bg event_infop = 12;
    // MD5 checksum of the encoded class-map bag
    bytes chk_sum = 13;
    policy_chk_sum rateless_chk_sum = 14;
    string description = 15;
    uint64 pclass_diff = 16;
}

message policy_param_uint32_st_ {
    uint32 value = 1;
    string unit = 2;
}

message policy_chk_sum {
    bytes value = 1;
}

message var_cmap_name {
    string value = 1;
}

// Union of default values corrosponding to variable type
message plmgr_var_val_un {
    string type = 1;
    var_cmap_name class_name = 2;
    uint32 uint8_val = 3;
    uint32 uint16_val = 4;
    uint32 uint32_val = 5;
    uint32 param_uint32_val = 6;
    uint32 dscp_val = 7;
    uint32 prec_val = 8;
}

message pmap_var_info_st {
    string name = 1;
    uint32 id = 2;
    plmgr_var_val_un val = 3;
}

message pmap_var_list_st {
    repeated uint32 offset = 1;
    repeated pmap_var_info_st pmap_var_list_arr = 2;
}

message mac_addr_st {
    // MAC address
    repeated uint32 mac_addr = 1;
    // MAC mask
    repeated uint32 mask = 2;
}

message uint32_rng_st {
    uint32 min = 1;
    uint32 max = 2;
}

message uint32_rng_array {
    repeated uint32_rng_st value = 1;
}

message uint8_rng_st {
    uint32 min = 1;
    uint32 max = 2;
}

message uint16_rng_st {
    uint32 min = 1;
    uint32 max = 2;
}

message vlan_id_st {
    uint32 min = 1;
    uint32 max = 2;
    uint32 mask = 3;
}

message flow_key_array {
    bytes keys = 1;
    uint32 num = 2;
}

message flow_key_st {
    // flow keys
    flow_key_array flow_keys = 1;
    // Maximum count of flows
    uint32 max_count = 2;
    // Idle timeout of flows (in seconds)
    uint32 idle_timeout = 3;
}

message proto_icmp_st {
    // Protocol type
    uint32 type = 1;
    // Protocol code
    uint32 code = 2;
}

message dei_bit_st {
    // Value of the DEI bit
    uint32 bit_value = 1;
}

message tcp_flag_st {
    // Value of TCP flag
    uint32 value = 1;
    // Match any TCP flag bit
    bool match_any = 2;
}

message uint8_array {
    repeated uint32 value = 1;
}

message uint8_rng_array {
    repeated uint8_rng_st value = 1;
}

message uint16_rng_array {
    repeated uint16_rng_st value = 1;
}

message uint64_array {
    repeated uint64 value = 1;
}

message string_td {
    string value = 1;
}

message string_array {
    repeated string_td value = 1;
}

message match_nas_port_st {
    string sub_id = 1;
    string operator = 2;
    uint32 value = 3;
}

message nas_port_array {
    repeated match_nas_port_st value = 1;
}

message match_domain_st {
    string domain_name = 1;
    string format_name = 2;
}

message domain_array {
    repeated match_domain_st value = 1;
}

message match_ipv4_st {
    string prefix = 1;
    string mask = 2;
}

message match_ipv6_st {
    string prefix = 1;
    uint32 mask = 2;
}

message ipv4_addr_array {
    repeated match_ipv4_st value = 1;
}

message ipv6_addr_array {
    repeated match_ipv6_st value = 1;
}

message mac_addr_array {
    repeated mac_addr_st value = 1;
}

message vlan_id_array {
    repeated vlan_id_st value = 1;
}

// Union of pointers to the supported match criteria
message class_match_data_un {
    string type = 1;
    // IPv4 DSCP
    uint8_rng_array ipv4_dscp = 2;
    // IPv6 DSCP
    uint8_rng_array ipv6_dscp = 3;
    // Match DSCP range array
    uint8_rng_array dscp = 4;
    // IPv4 Precedence
    uint8_array ipv4_prec = 5;
    // IPv6 Precedence
    uint8_array ipv6_prec = 6;
    // Match Precedence array
    uint8_array prec = 7;
    // Match Discard Class array
    uint8_array discard_class = 8;
    // Match QoS group array
    uint16_rng_array qos_group = 9;
    // Match Traffic class array
    uint8_rng_array traffic_class = 10;
    // Match Protocol array
    uint16_rng_array proto = 11;
    // Match ICMPV4 Protocol
    proto_icmp_st icmp_v4 = 12;
    // Match ICMPV6 Protocol array
    proto_icmp_st icmp_v6 = 13;
    // IPv4 packet length array
    uint16_rng_array ipv4_packet_len = 14;
    // IPv6 packet length array
    uint16_rng_array ipv6_packet_len = 15;
    // Match packet length array
    uint16_rng_array packet_len = 16;
    // Match flow-tag array
    uint8_rng_array flow_tag = 17;
    // Match tcp flag value
    tcp_flag_st tcp_flag = 18;
    // Match ipv4 icmp type
    uint8_rng_array icmpv4_type = 19;
    // Match ipv4 icmp code
    uint8_rng_array icmpv4_code = 20;
    // Match ipv6 icmp type
    uint8_rng_array icmpv6_type = 21;
    // Match ipv6 icmp code
    uint8_rng_array icmpv6_code = 22;
    // Match MPLS experimental topmost array
    uint8_array mpls_exp = 23;
    // Match MPLS experimental imposition array
    uint8_array mpls_exp_imp = 24;
    // MPLS Disposition IPv4 Access-list
    string_array mpls_disp_ipv4_acl = 25;
    // MPLS Disposition IPv6 Access-list
    string_array mpls_disp_ipv6_acl = 26;
    // MPLS Topmost EOS
    uint32 mpls_top_eos = 27;
    // MPLS Topmost LABEL
    uint32_rng_array mpls_top_label = 28;
    // Match CoS array
    uint8_array cos = 29;
    // Match inner header CoS
    uint8_array cos_inr = 30;
    // Match DEI Bit
    dei_bit_st dei = 31;
    // Match inner DEI Bit
    dei_bit_st dei_inr = 32;
    // Match VLAN array
    vlan_id_array vlan = 33;
    // Match inner header VLAN range array
    uint16_rng_array vlan_inr = 34;
    // Match FR DLCI range array
    uint16_rng_array fr_dlci = 35;
    // Match Source MAC address
    mac_addr_st src_mac = 36;
    // Match Destination MAC address
    mac_addr_st dst_mac = 37;
    // Match ATM CLP level
    uint8_array atm_clp = 38;
    // Match FR DE value
    uint8_array fr_de = 39;
    // Fragment type
    uint32 fragment_type = 40;
    // IPv4 Access-list
    string_array ipv4_acl = 41;
    // IPv6 Access-list
    string_array ipv6_acl = 42;
    // Ethernet-Services Access-list
    string_array ether_service_acl = 43;
    // Available Identifiers
    uint8_array avail_id = 44;
    // Authentication Status
    string authen_status = 45;
    // Media Type
    uint8_array media_type = 46;
    // MLP Negotiated
    string mlp_negotiated = 47;
    // Protocol
    uint8_array subs_protocol = 48;
    // DNIS
    string_array dnis = 49;
    // DNIS Regular Expression
    string_array dnis_regex = 50;
    // Domain Name
    domain_array domain = 51;
    // Domain Regular Expression
    domain_array domain_regex = 52;
    // NAS Port
    nas_port_array nas_port = 53;
    // Service Name
    string_array service_name = 54;
    // Service Name Regular Exp
    string_array service_name_regex = 55;
    // Source Address IPV4
    ipv4_addr_array src_addr_ipv4 = 56;
    // Destination Address IPV4
    ipv4_addr_array dst_addr_ipv4 = 57;
    // Source Address IPV6
    ipv6_addr_array src_addr_ipv6 = 58;
    // Destination Address IPV6
    ipv6_addr_array dst_addr_ipv6 = 59;
    // Source Address MAC
    mac_addr_array src_addr_mac = 60;
    // Timer
    string_array timer = 61;
    // Timer Regular Expression
    string_array timer_regexp = 62;
    // Tunnel Name
    string_array tunnel_name = 63;
    // Tunnel Name Regular Expression
    string_array tunnel_name_regex = 64;
    // User Name
    string_array user_name = 65;
    // User Name Regular Expression
    string_array user_name_regex = 66;
    // Authenticated User Name
    string_array auth_username = 67;
    // Authenticated User Name RegEx
    string_array auth_username_regex = 68;
    // Unauthenticated User Name
    string_array unauth_username = 69;
    // Unauthenticated User Name RegEx
    string_array unauth_username_regex = 70;
    // Authenticated domain name
    string_array auth_domain = 71;
    // Authenticated Domain Name RegEx
    string_array auth_domain_regex = 72;
    // Unauthenticated Domain Name
    string_array unauth_domain = 73;
    // Unauthenticated Domain Name RegEx
    string_array unauth_domain_regex = 74;
    // Vendor ID
    string_array vendor_id = 75;
    // Vendor ID RegEx
    string_array vendor_id_regex = 76;
    // Access interface
    string_array access_interface = 77;
    // Input interface
    string_array input_interface = 78;
    // Input interface handle
    uint64_array input_intfhdl = 79;
    // Ethernet type
    uint16_rng_array ethertype = 80;
    // Flow key structure
    flow_key_st flow_key_data = 81;
    // Dhcp Client ID
    string_array dhcp_client_id = 82;
    // Dhcp Client ID RegEx
    string_array dhcp_client_id_regex = 83;
    // Circuit ID
    string_array circuit_id = 84;
    // Circuit ID RegEx
    string_array circuit_id_regex = 85;
    // Remote ID
    string_array remote_id = 86;
    // Remote ID RegEx
    string_array remote_id_regex = 87;
    // Source port
    uint16_rng_array src_port = 88;
    // Destination port
    uint16_rng_array dst_port = 89;
}

message class_map_name {
    string value = 1;
}

message inline_class_map_bg {
    string mode = 1;
    uint32 flags = 2;
    uint32 match_count = 3;
    class_match_info_st match_infop = 4;
}

message inline_cmap_data_hd {
    inline_class_map_bg value = 1;
}

// Union of object name and app object ptr
message pol_class_enc_un {
    string enc = 1;
    class_map_name class_name = 2;
    uint64 hd = 3;
    uint32 idx = 4;
    inline_cmap_data_hd inline_cmap = 5;
}

// Class-map match info
message class_match_info_st {
    // Next match criteria
    repeated class_match_info_st_item class_match_info_st = 1;
}

message class_match_info_st_item {
    // Match criteria
    class_match_data_un match_data = 1;
    // Flags
    uint32 flags = 2;
}

// Class-map bag
message class_map_bg {
    // Pointer to the modified class-map
    repeated class_map_bg_item class_map_bg = 1;
}

message class_map_bg_item {
    // Magic number on top of class-map bag
    uint32 magic = 1;
    // Name of the class-map
    string name = 2;
    // Class-Map Type QoS/PBR/Netflow/...
    string type = 3;
    // Class-Map Mode Match any/Match all
    string mode = 4;
    // Class-Map Internal
    uint32 flags = 5;
    // Number of Match infos
    uint32 match_count = 6;
    // Pointer to the first Match info
    class_match_info_st match_infop = 7;
    // MD5 checksum of the encoded class-map bag
    bytes chk_sum = 8;
    string description = 9;
}

message action_mark_info_st {
    string type = 1;
    uint32 mark_flags = 2;
    uint32 value = 3;
}

message action_mark_info {
    repeated action_mark_info_st value = 1;
}

message action_mark2_info_st {
    uint32 value = 1;
    uint32 value_overflow = 2;
    uint32 type = 3;
    uint32 mark_flags = 4;
}

message action_mark2_info {
    repeated action_mark2_info_st value = 1;
}

message action_wred_info_st {
    string type = 1;
    repeated uint8_rng_st match_ranges = 2;
    uint32 wred_flags = 3;
    policy_param_uint32_st_ min_threshold = 4;
    policy_param_uint32_st_ max_threshold = 5;
    uint32 probability = 6;
}

message action_wred_info {
    repeated action_wred_info_st value = 1;
}

// Priority action
message action_prio_info_st {
    uint32 prio_lvl = 1;
}

// Encapsulation sequence action
message action_encap_info_st {
    uint32 seq = 1;
}

// Min BW action
message action_minbw_info_st {
    policy_param_uint32_st_ bw = 1;
}

// BW remaining action
message action_bwrem_info_st {
    policy_param_uint32_st_ bwrem = 1;
}

message action_qlimit_info_st {
    string type = 1;
    uint32 qlimit_flags = 2;
    policy_param_uint32_st_ qlim = 3;
    policy_param_uint32_st_ atmclp_qlim = 4;
    repeated uint8_rng_st match_values = 5;
}

message action_qlimit_info_array {
    repeated action_qlimit_info_st value = 1;
}

message action_shape_info_st {
    policy_param_uint32_st_ bw = 1;
    policy_param_uint32_st_ be = 2;
}

message action_shape_info_p {
    action_shape_info_st value = 1;
}

message police_action_un {
    string type = 1;
    action_mark_info_st mark = 2;
}

message action_pfc_info_st {
    uint32 pfc_pause_set = 1;
    uint32 buffer_size_flag = 2;
    policy_param_uint32_st_ buffer_size = 3;
    policy_param_uint32_st_ pause_threshold = 4;
    policy_param_uint32_st_ resume_threshold = 5;
}

message action_pfc_info_p {
    action_pfc_info_st value = 1;
}

message action_police_info_st {
    policy_param_uint32_st_ rate = 1;
    policy_param_uint32_st_ burst = 2;
    policy_param_uint32_st_ peak_rate = 3;
    policy_param_uint32_st_ peak_burst = 4;
    policy_param_uint32_st_ cdvt = 5;
    repeated police_action_un conform_actns = 6;
    repeated police_action_un exceed_actns = 7;
    repeated police_action_un violate_actns = 8;
    pol_class_enc_un confclass_encode = 9;
    class_map_bg confclass_p = 10;
    pol_class_enc_un excdclass_encode = 11;
    class_map_bg excdclass_p = 12;
    uint32 flags = 13;
    uint32 police_flags = 14;
    string sbuck_name = 15;
    string sbuck_type = 16;
}

message action_police_info_p {
    action_police_info_st value = 1;
}

// Authenticate AAA list info
message action_authen_aaa_st {
    string aaa_list_name = 1;
    string authen_password = 2;
}

// Collect identifiers
message action_collect_id_st {
    string id = 1;
    string aaa_list_name = 2;
}

message action_decode_identifier_st {
    string id = 1;
    string format_name = 2;
}

message action_template_st {
    string template_name = 1;
    string aaa_list_name = 2;
    uint32 flags = 3;
}

message action_accounting_event_st {
    string action = 1;
    string aaa_list_name = 2;
}

// authorize identifiers
message action_authorize_id_st {
    uint32 id = 1;
    string aaa_list_name = 2;
    string format_name = 3;
    string password = 4;
}

message action_set_timer_st {
    string timer_name = 1;
    uint32 duration = 2;
    string absolute_time = 3;
}

message action_stop_timer_st {
    string timer_name = 1;
}

message action_query_ancp_session_st {
    uint32 enable = 1;
}

message action_proxy_aaa_st {
    string aaa_list_name = 1;
}

message action_acct_aaa_list_st {
    string aaa_list_name = 1;
    uint32 secs = 2;
}

message action_prepaid_cfg_st {
    string prepaid_config_profile_name = 1;
}

message action_timeout_idle_st {
    uint32 secs = 1;
}

message action_cac_info_st {
    uint32 cac_type = 1;
    uint32 idle_timeout = 2;
    policy_param_uint32_st_ flow_rate = 3;
    policy_param_uint32_st_ rate = 4;
}

message action_cac_info_p {
    action_cac_info_st value = 1;
}

message action_afmon_flow_parm_info_st {
    uint32 max_mon_flows = 1;
    uint32 mon_interval = 2;
    uint32 intvl_hist = 3;
    uint32 flow_timeout = 4;
}

message action_afmon_flow_parm_info_p {
    action_afmon_flow_parm_info_st value = 1;
}

message action_afmon_ipcbr_info_st {
    string action_metric_type = 1;
    uint32 ip_pkt_rate = 2;
    policy_param_uint32_st_ ip_bit_rate = 3;
    policy_param_uint32_st_ media_bit_rate = 4;
    uint32 media_pkt_size = 5;
    uint32 media_pkts_per_ip = 6;
}

message action_afmon_ipcbr_info_p {
    action_afmon_ipcbr_info_st value = 1;
}

message afmon_rtp_clock_rate_st_ {
    uint32 pt = 1;
    uint32 frequency = 2;
}

message action_afmon_rtp_info_st {
    string action_metric_type = 1;
    uint32 min_sequential = 2;
    uint32 max_dropout = 3;
    uint32 max_misorder = 4;
    uint32 seq_ext_cop4_en = 5;
    repeated afmon_rtp_clock_rate_st_ clock_rate = 6;
}

message action_afmon_rtp_info_p {
    action_afmon_rtp_info_st value = 1;
}

message action_afmon_mdi_info_st {
    string action_metric_type = 1;
    repeated uint32 pids = 2;
    uint32 filtered_pkt_rate = 3;
    uint32 ip_pkt_rate = 4;
    policy_param_uint32_st_ ip_bit_rate = 5;
}

message action_afmon_mdi_info_p {
    action_afmon_mdi_info_st value = 1;
}

message action_afmon_fmm_info_st {
    string fmm_name = 1;
}

message action_afmon_fmm_info_p {
    action_afmon_fmm_info_st value = 1;
}

message action_afmon_react_st {
    uint32 oper_id = 1;
    string description = 2;
    uint32 trig_num_intvls = 3;
    uint32 clone_ifh = 4;
    uint32 notif_actns = 5;
    uint32 criterion = 6;
    uint32 trig_type = 7;
    uint32 trig_relop = 8;
    string trig_level_1 = 9;
    string trig_level_2 = 10;
    uint32 alm_grp_thresh = 11;
    uint32 alm_type = 12;
    uint32 alm_severity = 13;
}

message action_afmon_react_info {
    repeated action_afmon_react_st value = 1;
}

// service fragment action
message action_sfrag_info_st {
    // Service Fragment Name
    string name = 1;
}

message action_ipv4_nh_info_st {
    string nh_addr = 1;
    string vrf_name = 2;
}

message action_ipv4_nh_info_array {
    repeated action_ipv4_nh_info_st value = 1;
}

message action_ipv6_nh_info_st {
    string nh_addr = 1;
    string vrf_name = 2;
}

message action_ipv6_nh_info_array {
    repeated action_ipv6_nh_info_st value = 1;
}

// redirect action
message action_redirect_info_st {
    uint32 value = 1;
    uint32 type = 2;
}

// output_interface action
message action_output_interface_info_st {
    // output interface name
    string out_ifname = 1;
}

// httpr action
message action_httpr_info_st {
    // redirect url
    string redirect_url = 1;
}

message action_pbf_info_st {
    string addr = 1;
    string vrf = 2;
    uint32 rt_type = 3;
    bytes rt = 4;
}

message action_pbf_info_array {
    repeated action_pbf_info_st value = 1;
}

// punt action
message action_punt_info_st {
    // service node ID type
    string sn_type = 1;
    // service node index
    uint32 sn_index = 2;
    // service node name
    string sn_name = 3;
    // application ID
    uint32 app_id = 4;
    // local ID
    uint32 local_id = 5;
    // vservice node type
    string vsnode_type = 6;
}

// copy action
message action_copy_info_st {
    // number of bytes
    uint32 num_byte = 1;
    // service node ID type
    string sn_type = 2;
    // service node index
    uint32 sn_index = 3;
    // service node url
    string sn_name = 4;
    // application ID
    uint32 app_id = 5;
    // local ID
    uint32 local_id = 6;
    // vservice node type
    string vsnode_type = 7;
}

// service function path
message action_service_function_path_st {
    // service path id
    uint32 path_id = 1;
    // service path index
    uint32 service_index = 2;
    // metadata name
    string meta_name = 3;
    // vservice index
    uint32 vs_index = 4;
}

message policy_map_type_n_name_st {
    string name = 1;
    string type = 2;
}

message policy_map_hd_st {
    uint64 hd = 1;
    policy_map_bg data_hd = 2;
}

message chld_pol_enc_un {
    string enc = 1;
    policy_map_type_n_name_st info = 2;
    policy_map_hd_st hd_info = 3;
}

message action_service_policy_info_p {
    chld_pol_enc_un value = 1;
}

// Pointers to the action data of different type
message policy_action_datap_un {
    string type = 1;
    action_mark_info mark = 2;
    action_mark2_info mark2 = 3;
    action_wred_info wred = 4;
    action_encap_info_st encap = 5;
    action_prio_info_st prio = 6;
    action_bwrem_info_st bwrem = 7;
    action_minbw_info_st min_bw = 8;
    action_authen_aaa_st authen_aaa = 9;
    action_collect_id_st collect_id = 10;
    action_decode_identifier_st decode_id = 11;
    action_set_timer_st set_timer = 12;
    action_stop_timer_st stop_timer = 13;
    action_acct_aaa_list_st acct_aaa_list = 14;
    action_query_ancp_session_st query_ancp = 15;
    action_prepaid_cfg_st prepaid_cfg = 16;
    action_timeout_idle_st timeout_idle = 17;
    action_proxy_aaa_st proxy_aaa = 18;
    action_template_st act_template = 19;
    action_template_st deact_template = 20;
    action_qlimit_info_array qlimit = 21;
    action_accounting_event_st accounting_event_aaa = 22;
    action_authorize_id_st authorize_id = 23;
    action_afmon_react_info afm_react = 24;
    action_httpr_info_st httpr = 25;
    action_punt_info_st punt = 26;
    action_copy_info_st copy = 27;
    action_sfrag_info_st sfrag = 28;
    action_redirect_info_st redirect = 29;
    action_output_interface_info_st out_intf = 30;
    action_service_function_path_st serv_func = 31;
    action_police_info_p police = 32;
    action_shape_info_p shape = 33;
    action_service_policy_info_p child_policy = 34;
    action_cac_info_p cac = 35;
    action_pfc_info_p pfc = 36;
    action_afmon_flow_parm_info_p flow_parm = 37;
    action_afmon_ipcbr_info_p ipcbr = 38;
    action_afmon_rtp_info_p rtp = 39;
    action_afmon_rtp_info_p rtp_mmr = 40;
    action_afmon_rtp_info_p rtp_j2k = 41;
    action_afmon_rtp_info_p rtp_voice = 42;
    action_afmon_mdi_info_p mdi = 43;
    action_afmon_mdi_info_p mdi_rtp = 44;
    action_afmon_fmm_info_p fmm = 45;
    action_pbf_info_array pbf = 46;
    action_ipv4_nh_info_array ipv4_nh = 47;
    action_ipv6_nh_info_array ipv6_nh = 48;
    uint32 data_p = 49;
}

// Per class action structure
message policy_action_info_st {
    repeated policy_action_info_st_item policy_action_info_st = 1;
}

message policy_action_info_st_item {
    uint32 seq = 1;
    uint32 flags = 2;
    policy_action_datap_un actp = 3;
}

// Class per policy info
message policy_class_info_bg {
    repeated policy_class_info_bg_item policy_class_info_bg = 1;
}

message policy_class_info_bg_item {
    uint32 policy_class_hd = 1;
    uint32 seq = 2;
    uint32 flags = 3;
    string ctype = 4;
    pol_class_enc_un cl_encode = 5;
    class_map_bg clmp_p = 6;
    uint32 num_actions = 7;
    uint32 version = 8;
    string exe_strat = 9;
    policy_action_info_st act_infop = 10;
}

// Event info bag
message policy_event_info_bg {
    repeated policy_event_info_bg_item policy_event_info_bg = 1;
}

message policy_event_info_bg_item {
    string event_type = 1;
    string cond_eval = 2;
    policy_class_info_bg class_infop = 3;
    uint64 avl_tree = 4;
    uint32 flags = 5;
}

