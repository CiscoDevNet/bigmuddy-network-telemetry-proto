// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_acl_oper.ipv4_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence;

// ACLE bag
message ipv4_acl_edm_ace_KEYS {
    string access_list_name = 1;
    uint32 sequence_number = 2;
}

message ipv4_acl_edm_ace {
    // ACE type (acl, remark)
    string item_type = 50;
    // ACLE sequence number
    uint32 sequence = 51;
    // Permit/deny
    string grant = 52;
    // IPv4 protocol type
    uint32 protocol = 53;
    // Source address
    string source_address = 54;
    // Source mask
    string source_address_mask = 55;
    // Destination address
    string destination_address = 56;
    // Destination mask
    string destination_address_mask = 57;
    // Source operator
    string source_operator = 58;
    // Source port 1
    uint32 source_port1 = 59;
    // Source port 2
    uint32 source_port2 = 60;
    // Deprecated by Source operator
    string sorce_operator = 61;
    // Deprecated by SourcePort1
    uint32 sorce_port1 = 62;
    // Deprecated by SourcePort2
    uint32 sorce_port2 = 63;
    // Destination operator
    string destination_operator = 64;
    // Destination port 1
    uint32 destination_port1 = 65;
    // Destination port 2
    uint32 destination_port2 = 66;
    // Log option
    string log_option = 67;
    // Counter name
    string counter_name = 68;
    // Capture option, TRUE if enabled
    bool capture = 69;
    // DSCP present
    bool dscp_present = 70;
    // DSCP or DSCP range start
    uint32 dscp = 71;
    // DSCP Range End
    uint32 dscp2 = 72;
    // DSCP Operator
    uint32 dscp_operator = 73;
    // Precedence present
    bool precedence_present = 74;
    // Precedence
    uint32 precedence = 75;
    // TCP flags operator
    string tcp_flags_operator = 76;
    // TCP flags
    uint32 tcp_flags = 77;
    // TCP flags mask
    uint32 tcp_flags_mask = 78;
    // Fragments
    uint32 fragments = 79;
    // Port length operator
    string port_length_operator = 80;
    // Port length 1
    uint32 port_length1 = 81;
    // Port length 2
    uint32 port_length2 = 82;
    // TTL operator
    string ttl_operator = 83;
    // TTL 1
    uint32 ttl1 = 84;
    // TTL 2
    uint32 ttl2 = 85;
    // No stats
    bool no_stats = 86;
    // Number of hits
    uint64 hits = 87;
    // True if ICMP off
    bool is_icmp_off = 88;
    // Next hop type
    string next_hop_type = 89;
    // Next hop info
    repeated ipv4_acl_bag_nh_info next_hop_info = 90;
    // HW Next hop info
    ipv4_acl_bag_hw_nh_info hw_next_hop_info = 91;
    // Remark String
    string remark = 92;
    // Is dynamic ACE
    bool dynamic = 93;
    // Source prefix object-group
    string source_prefix_group = 94;
    // Destination prefix object-group
    string destination_prefix_group = 95;
    // Source port object-group
    string source_port_group = 96;
    // Destination port object-group
    string destination_port_group = 97;
    // ACL Name
    string acl_name = 98;
    // Sequence String
    string sequence_str = 99;
}

// NH_Info structure
message ipv4_acl_bag_nh_info {
    // The next hop
    string next_hop = 1;
    // Track name
    string track_name = 2;
    // The next hop status
    string status = 3;
    // The next hop at status
    string at_status = 4;
    // The nexthop exist
    bool is_acl_next_hop_exist = 5;
}

// HW_NH_Info structure
message ipv4_acl_bag_hw_nh_info {
    // The Next Hop
    uint32 next_hop = 1;
    // the next-hop type
    string type = 2;
    // VRF name
    string vrf_name = 3;
}

