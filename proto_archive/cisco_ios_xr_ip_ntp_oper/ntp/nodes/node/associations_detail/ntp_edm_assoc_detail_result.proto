// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_ntp_oper.ntp.nodes.node.associations_detail;

// The NTP association detail result
message ntp_edm_assoc_detail_result_KEYS {
    string node = 1;
}

message ntp_edm_assoc_detail_result {
    // Is NTP enabled
    bool is_ntp_enabled = 50;
    // Leap
    string sys_leap = 51;
    // Peer info
    repeated ntp_edm_peer_detail_info peer_detail_info = 52;
}

message edm_ul_i {
    // Integer format in NTP reference code
    uint32 int = 1;
}

message edm_ul_f {
    // Fractional format in NTP reference code
    uint32 frac = 1;
}

message edm_l_fp {
    // Second part in 64-bit NTP timestamp
    edm_ul_i sec = 1;
    // Fractional part in 64-bit NTP timestamp
    edm_ul_f frac_secs = 2;
}

// Sub part of peer info
message filter_details {
    string filter_delay = 1;
    string filter_offset = 2;
    string filter_disp = 3;
}

// Peer common info
message ntp_edm_peer_info_common {
    // Association mode with this peer
    string host_mode = 1;
    // Is configured
    bool is_configured = 2;
    // Peer Address
    string address = 3;
    // Peer reference ID
    string reference_id = 4;
    // Host poll
    uint32 host_poll = 5;
    // Reachability
    uint32 reachability = 6;
    // Peer stratum
    uint32 stratum = 7;
    // Peer status
    string status = 8;
    // Peer delay
    string delay = 9;
    // Peer offset
    string offset = 10;
    // Peer dispersion
    string dispersion = 11;
    // Indicates whether this is syspeer
    bool is_sys_peer = 12;
}

// Peer Detail Information
message ntp_edm_peer_detail_info {
    // Common peer info
    ntp_edm_peer_info_common peer_info_common = 1;
    // Leap
    string leap = 2;
    // Peer's association mode
    string peer_mode = 3;
    // Peer poll interval
    uint32 poll_interval = 4;
    // Is refclock
    bool is_ref_clock = 5;
    // Is authenticated
    bool is_authenticated = 6;
    // Root delay
    string root_delay = 7;
    // Root dispersion
    string root_dispersion = 8;
    // Synch distance
    string synch_distance = 9;
    // Reference time
    edm_l_fp ref_time = 10;
    // Precision
    sint32 precision = 11;
    // NTP version
    uint32 version = 12;
    // Originate timestamp
    edm_l_fp originate_time = 13;
    // Receive timestamp
    edm_l_fp receive_time = 14;
    // Transmit timestamp
    edm_l_fp transmit_time = 15;
    // Index into filter shift register
    uint32 filter_index = 16;
    // Filter Details
    repeated filter_details filter_details = 17;
}

