// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.session.detail_sessions.detail_session;

// Detailed SSO/NSR information about a TCP connection
message tcp_nsr_pcb_detailed_bag_KEYS {
    string id = 1;
    uint32 id_1 = 2;
}

message tcp_nsr_pcb_detailed_bag {
    // Address family
    string address_family = 50;
    // PCB Address
    uint64 pcb = 51;
    // SSCB Address
    uint64 sscb = 52;
    // Local address
    repeated bytes local_address = 53;
    // Foreign address
    repeated bytes foreign_address = 54;
    // Local port
    uint32 local_port = 55;
    // Foreign port
    uint32 foreign_port = 56;
    // VRF Id
    uint32 vrf_id = 57;
    // Is NSR administratively configured?
    bool is_admin_configured_up = 58;
    // Is Upstream NSR operational?
    string is_us_operational_up = 59;
    // Is Downstream NSR operational?
    string is_ds_operational_up = 60;
    // Is replication limited to receive-path only
    bool is_only_receive_path_replication = 61;
    // Cookie provided by active APP
    uint64 cookie = 62;
    // Sesson-set information
    tcp_nsr_sscb_brief_bag set_information = 63;
    // Has the session been replicated to standby?
    bool is_session_replicated = 64;
    // Has the session completed initial-sync?
    bool is_session_synced = 65;
    // If initial sync is completed, then the FSSN - First Standby Sequence Number
    uint32 fist_standby_sequence_number = 66;
    // Offset of FSSN in input stream
    uint32 fssn_offset = 67;
    // If NSR is not up, the reason for it.
    string nsr_down_reason = 68;
    // Time at which NSR went down
    uint32 nsr_down_time = 69;
    // ID of the Initial sync operation
    uint32 sequence_number_of_init_sync = 70;
    // Is initial-sync currently in progress?
    bool is_init_sync_in_progress = 71;
    // Is initial sync in the second phase?
    bool is_init_sync_second_phase = 72;
    // Initial sync failure reason, if any
    repeated sint32 init_sync_error = 73;
    // Initial sync failed due to a local error or remote stack
    bool is_init_sync_error_local = 74;
    // Time at which the initial sync operation was started (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_start_time = 75;
    // Time at which the initial sync operation was ended (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_end_time = 76;
    // Init Sync flags for the session
    uint32 init_sync_flags = 77;
    // ID of the Initial sync operation
    uint32 sequence_number_of_init_sync_up_stream = 78;
    // Peer NCD endp handle
    uint64 peer_endp_hdl_up_stream = 79;
    // Time at which the initial sync operation was started (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_start_time_up_stream = 80;
    // Time at which the initial sync operation was ended (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_end_time_up_stream = 81;
    // FSSN for the upstream partner
    uint32 fist_standby_sequence_number_up_stream = 82;
    // The reason NSR is not up towards the upstream partner
    string nsr_down_reason_up_stream = 83;
    // Time at which NSR went down
    uint32 nsr_down_time_up_stream = 84;
    // ID of the Initial sync operation
    uint32 sequence_number_of_init_sync_down_stream = 85;
    // Peer NCD endp handle
    uint64 peer_endp_hdl_down_stream = 86;
    // Time at which the initial sync operation was started (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_start_time_down_stream = 87;
    // Time at which the initial sync operation was ended (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_end_time_down_stream = 88;
    // FSSN for the upstream partner
    uint32 fist_standby_sequence_number_down_stream = 89;
    // The reason NSR is not up towards the upstream partner
    string nsr_down_reason_down_stream = 90;
    // Time at which NSR went down
    uint32 nsr_down_time_down_stream = 91;
    // Sequence Number and datalength of each node in hold_pakqueue
    repeated tcp_nsr_hold_queue_node packet_hold_queue = 92;
    // Max number of incoming packets have been held
    sint32 max_number_of_held_packet = 93;
    // Max number of held incoming packets reaches at
    uint32 max_number_of_held_packet_reach_time = 94;
    // Sequence Number and datalength of each node in hold_iackqueue
    repeated tcp_nsr_hold_queue_node internal_ack_hold_queue = 95;
    // Max number of internal acks have been held
    sint32 max_number_of_held_internal_ack = 96;
    // Max number of held internal acks reaches at
    uint32 max_number_of_held_internal_ack_reach_time = 97;
}

// Summary Information about an SSO/NSR Session-set
message tcp_nsr_sscb_brief_bag {
    // Address of the Session Set Control Block
    uint64 sscb = 1;
    // PID of the Client that owns this Session-set
    uint32 pid = 2;
    // the name of Clinet that owns this Session-set
    repeated sint32 client_name = 3;
    // Instance of the Client that owns this Session-set
    uint32 client_instance = 4;
    // ID of this Session-set
    uint32 set_id = 5;
    // TCP role for this set?
    uint32 sso_role = 6;
    // Session-set mode
    uint32 mode = 7;
    // Address Family of the sessions in this set
    string address_family = 8;
    // Well Known Port of the client
    uint32 well_known_port = 9;
    // Local node of this set
    string local_node = 10;
    // Instance of the client application on the local node
    uint32 local_instance = 11;
    // The node protecting this set
    string protect_node = 12;
    // Instance of the client application on the protection node
    uint32 protect_instance = 13;
    // Number of Sessions in the set
    uint32 number_of_sessions = 14;
    // How many sessions are synced with upstream partner
    uint32 number_of_synced_sessions_up_stream = 15;
    // How many sessions are synced with downstream partner
    uint32 number_of_synced_sessions_down_stream = 16;
    // Is an initial sync in progress currently?
    bool is_init_sync_in_progress = 17;
    // Is the SSCB ready for another initial sync?
    bool is_sscb_init_sync_ready = 18;
}

// Info about the Packet or iACK held
message tcp_nsr_hold_queue_node {
    // Sequence Number
    uint32 sequence_number = 1;
    // Data Length
    uint32 data_length = 2;
    // Ack Number
    uint32 acknoledgement_number = 3;
}

