// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.session_set.detail_sets.detail_set;

// Detailed Information about an SSO/NSR Session-set
message tcp_nsr_sscb_detailed_bag_KEYS {
    string id = 1;
    uint32 id_1 = 2;
}

message tcp_nsr_sscb_detailed_bag {
    // Address of the Session Set Control Block
    uint64 sscb = 50;
    // PID of the Client that owns this Session-set
    uint32 pid = 51;
    // ID of this Session-set
    uint32 set_id = 52;
    // TCP role for this set?
    uint32 sso_role = 53;
    // Session-set mode
    uint32 mode = 54;
    // Address Family of the sessions in this set
    string address_family = 55;
    // Well Known Port of the client
    uint32 well_known_port = 56;
    // Local node of this set
    string local_node = 57;
    // Instance of the client application on the local node
    uint32 local_instance = 58;
    // The node protecting this set
    string protect_node = 59;
    // Instance of the client application on the protection node
    uint32 protect_instance = 60;
    // Number of Sessions in the set
    uint32 number_of_sessions = 61;
    // How many sessions are synced with upstream partner
    uint32 number_of_synced_sessions_up_stream = 62;
    // How many sessions are synced with downstream partner
    uint32 number_of_synced_sessions_down_stream = 63;
    // Is an initial sync in progress currently?
    bool is_init_sync_in_progress = 64;
    // Is initial sync in the second phase?
    bool is_init_sync_second_phase = 65;
    // ID of the current or the last initial sync operation
    uint32 sequence_number_of_init_sync = 66;
    // Time left on the initial sync timer
    uint32 init_sync_timer = 67;
    // Number of sessions being synced as part of the current initial sync operation
    uint32 total_number_of_init_sync_sessions = 68;
    // Number of sessions that are synced as part of the current initial sync operation
    uint32 number_of_init_synced_sessions = 69;
    // Number of sessions that failed to sync as part of the current initial sync operation
    uint32 number_of_sessions_init_sync_failed = 70;
    // Initial sync failure reason, if any
    repeated sint32 init_sync_error = 71;
    // Initial sync failed due to a local error or remote stack
    bool is_init_sync_error_local = 72;
    // Time at which last or current initial sync operation was started (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_start_time = 73;
    // Time at which the last initial sync operation was ended (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_end_time = 74;
    // Is the SSCB ready for another initial sync?
    bool is_sscb_init_sync_ready = 75;
    // Time at which the session was ready for initial sync last (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_ready_start_time = 76;
    // Time at which the session set last went not-ready for initial sync (in seconds since 1st Jan 1970 00:00:00)
    uint32 init_sync_ready_end_time = 77;
    // Time at which NSR was last reset on the session set (in seconds since 1st Jan 1970 00:00:00)
    uint32 nsr_reset_time = 78;
    // Is an audit in progress currently?
    bool is_audit_in_progress = 79;
    // ID of the current or the last audit operation
    uint32 audit_seq_number = 80;
    // Time at which last or current audit operation was started (in seconds since 1st Jan 1970 00:00:00)
    uint32 audit_start_time = 81;
    // Time at which the last audit operation was ended (in seconds since 1st Jan 1970 00:00:00)
    uint32 audit_end_time = 82;
}

