// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.statistic_sessions.statistic_session;

// SSO/NSR statistics of a TCP connection
message tcp_nsr_pcb_stats_bag_KEYS {
    string id = 1;
    uint32 id_1 = 2;
}

message tcp_nsr_pcb_stats_bag {
    // PCB Address
    uint64 pcb = 50;
    // no. of times nsr went up
    uint32 number_of_times_nsr_up = 51;
    // no. of times nsr went down
    uint32 number_of_timers_nsr_down = 52;
    // no. of times nsr was disabled
    uint32 number_of_times_nsr_disabled = 53;
    // no. of times fail-over occured
    uint32 number_of_times_nsr_fail_over = 54;
    // Number of iACKs dropped because session is not replicated
    uint64 internal_ack_drops_not_replicated = 55;
    // Number of iACKs dropped because 1st phase of init-sync is in progress
    uint64 internal_ack_drops_initsync_first_phase = 56;
    // Number of stale iACKs dropped
    uint64 internal_ack_drops_stale = 57;
    // Number of iACKs not held because of an immediate match
    uint64 internal_ack_drops_immediate_match = 58;
    // Send path counters for the PCB
    tcp_nsr_snd_counters_node snd_counters = 59;
    // Time of last clear (in seconds since 1st Jan 1970 00:00:00)
    uint32 last_cleared_time = 60;
}

// Send path counters
message tcp_nsr_snd_counters_node {
    // Number of successful DATA transfers
    uint32 data_xfer_send = 1;
    // Amount of data transferred
    uint64 data_xfer_send_total = 2;
    // Number of failed DATA transfers
    uint32 data_xfer_send_drop = 3;
    // Number of data transfer msgs., that required new IOV's to be allocated
    uint32 data_xfer_send_iov_alloc = 4;
    // Number of received DATA transfers
    uint32 data_xfer_rcv = 5;
    // Number of successfully received DATA transfers
    uint32 data_xfer_rcv_success = 6;
    // Number of received DATA transfers that had buffer trim failures
    uint32 data_xfer_rcv_fail_buffer_trim = 7;
    // Number of received DATA transfers that had failures because the send path was out of sync
    uint32 data_xfer_rcv_fail_snd_una_out_of_sync = 8;
    // Number of successful Segmentation instruction messages
    uint32 seg_instr_send = 9;
    // Number of segement units transferred via the successful Segmentation instruction messages
    uint32 seg_instr_send_units = 10;
    // Number of failed Segmentation instruction messages
    uint32 seg_instr_send_drop = 11;
    // Number of received Segmentation instruction messages
    uint32 seg_instr_rcv = 12;
    // Number of successfully received Segmentation instruction messages
    uint32 seg_instr_rcv_success = 13;
    // Number of received Segmentation instructions that had buffer trim failures
    uint32 seg_instr_rcv_fail_buffer_trim = 14;
    // Number of received Segmentation instructions that had failures during TCP processing
    uint32 seg_instr_rcv_fail_tcp_process = 15;
    // Number of successful NACK messages
    uint32 nack_send = 16;
    // Number of failed NACK messages
    uint32 nack_send_drop = 17;
    // Number of received NACK messages
    uint32 nack_rcv = 18;
    // Number of successfully received NACK messages
    uint32 nack_rcv_success = 19;
    // Number of received NACK messages that had failures when sending data in response to the NACK
    uint32 nack_rcv_fail_data_send = 20;
    // Number of successful Cleanup messages
    uint32 cleanup_send = 21;
    // Number of failed Cleanup messages
    uint32 cleanup_send_drop = 22;
    // Number of received Cleanup messages
    uint32 cleanup_rcv = 23;
    // Number of successfully received Cleanup messages
    uint32 cleanup_rcv_success = 24;
    // Number of Cleanup messages that had trim failures
    uint32 cleanup_rcv_fail_buffer_trim = 25;
}

