// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_tcp_oper.tcp_nsr.nodes.node.statistics.summary;

// Summary SSO/NSR statistics
message tcp_nsr_summary_stats_bag_KEYS {
    string id = 1;
}

message tcp_nsr_summary_stats_bag {
    // Time of last clear (in seconds since 1st Jan 1970 00:00:00)
    uint32 last_cleared_time = 50;
    // Various types of notification stats
    repeated tss_notif_stats notification_statistics = 51;
    // Number of disconnected clients
    uint32 number_of_connected_clients = 52;
    // Number of disconnected clients
    uint32 number_of_disconnected_clients = 53;
    // Number of current  clients
    uint32 number_of_current_clients = 54;
    // Number of created session sets
    uint32 number_of_created_session_sets = 55;
    // Number of destroyed session sets
    uint32 number_of_destroyed_session_sets = 56;
    // Number of current session sets
    uint32 number_of_current_session_sets = 57;
    // Number of added sessions
    uint32 number_of_added_sessions = 58;
    // Number of deleted sessions
    uint32 number_of_deleted_sessions = 59;
    // Number of current sessions
    uint32 number_of_current_sessions = 60;
    //  Number of Parner Nodes
    uint32 number_of_partner_node = 61;
    // no. of initial-sync attempts
    uint32 number_of_attempted_init_sync = 62;
    // no. of initial-sync successes
    uint32 number_of_succeeded_init_sync = 63;
    // no. of initial-sync fails
    uint32 number_of_failed_init_sync = 64;
    // Number of Packets held by Active TCP
    uint32 number_of_held_packets = 65;
    // Number of held packets dropped by Active TCP
    uint32 number_of_held_but_dropped_packets = 66;
    // Number of Internal Acks held by Active TCP
    uint32 number_of_held_internal_acks = 67;
    // Number of held Internal Acks dropped by Active TCP
    uint32 number_of_held_but_dropped_internal_acks = 68;
    // Number of Internal Acks sent to Active TCP by Standby TCP
    uint32 number_of_sent_internal_acks = 69;
    // Number of Internal Acks received by Active TCP
    uint32 number_of_received_internal_acks = 70;
    // Number of dropped messages from partner TCP stack(s)
    uint32 number_of_qad_receive_messages_drops = 71;
    // Number of unknown messages from partner TCP stack(s)
    uint32 number_of_qad_receive_messages_unknowns = 72;
    // Number of messages accepted from partner TCP stack(s)
    uint32 number_of_qad_receive_messages_accepts = 73;
    // Number of dropped messages from partner TCP stack(s) because they were out-of-order
    uint32 number_of_qad_stale_receive_messages_drops = 74;
    // Number of messages sent to partner TCP stack(s)
    uint32 number_of_qad_transfer_message_sent = 75;
    // Number of messages failed to be sent to partner TCP stack(s)
    uint32 number_of_qad_transfer_message_drops = 76;
    // Number of iACKs dropped because there is no PCB
    uint32 number_of_internal_ack_drops_no_pcb = 77;
    // Number of iACKs dropped because there is no datapath SCB
    uint32 number_of_internal_ack_drops_no_scbdp = 78;
    // Number of iACKs dropped because session is not replicated
    uint32 internal_ack_drops_not_replicated = 79;
    // Number of iACKs dropped because init-sync is in 1st phase
    uint32 internal_ack_drops_initsync_first_phase = 80;
    // Number of stale iACKs dropped
    uint32 internal_ack_drops_stale = 81;
    // Number of iACKs not held because of an immediate match
    uint32 internal_ack_drops_immediate_match = 82;
    // Number of held packets dropped because of errors
    uint32 held_packet_drops = 83;
    // Aggregate Send path counters
    tcp_nsr_snd_counters_aggr_node snd_counters = 84;
    // Aggregate Audit counters
    tcp_nsr_audit_counters_aggr_node audit_counters = 85;
}

// notif stats structure used in ccb stats bag
message tss_notif_stats {
    // how many were queued
    uint32 queued_count = 1;
    // Errors while queuing the notifs
    uint32 failed_count = 2;
    // How many were picked up by app?
    uint32 delivered_count = 3;
    // How many were dropped because of timeout
    uint32 dropped_count = 4;
}

// Send path counters
message tcp_nsr_snd_counters_node {
    // Number of successful DATA transfers
    uint32 data_xfer_send = 1;
    // Amount of data transferred
    uint64 data_xfer_send_total = 2;
    // Number of failed DATA transfers
    uint32 data_xfer_send_drop = 3;
    // Number of data transfer msgs., that required new IOV's to be allocated
    uint32 data_xfer_send_iov_alloc = 4;
    // Number of received DATA transfers
    uint32 data_xfer_rcv = 5;
    // Number of successfully received DATA transfers
    uint32 data_xfer_rcv_success = 6;
    // Number of received DATA transfers that had buffer trim failures
    uint32 data_xfer_rcv_fail_buffer_trim = 7;
    // Number of received DATA transfers that had failures because the send path was out of sync
    uint32 data_xfer_rcv_fail_snd_una_out_of_sync = 8;
    // Number of successful Segmentation instruction messages
    uint32 seg_instr_send = 9;
    // Number of segement units transferred via the successful Segmentation instruction messages
    uint32 seg_instr_send_units = 10;
    // Number of failed Segmentation instruction messages
    uint32 seg_instr_send_drop = 11;
    // Number of received Segmentation instruction messages
    uint32 seg_instr_rcv = 12;
    // Number of successfully received Segmentation instruction messages
    uint32 seg_instr_rcv_success = 13;
    // Number of received Segmentation instructions that had buffer trim failures
    uint32 seg_instr_rcv_fail_buffer_trim = 14;
    // Number of received Segmentation instructions that had failures during TCP processing
    uint32 seg_instr_rcv_fail_tcp_process = 15;
    // Number of successful NACK messages
    uint32 nack_send = 16;
    // Number of failed NACK messages
    uint32 nack_send_drop = 17;
    // Number of received NACK messages
    uint32 nack_rcv = 18;
    // Number of successfully received NACK messages
    uint32 nack_rcv_success = 19;
    // Number of received NACK messages that had failures when sending data in response to the NACK
    uint32 nack_rcv_fail_data_send = 20;
    // Number of successful Cleanup messages
    uint32 cleanup_send = 21;
    // Number of failed Cleanup messages
    uint32 cleanup_send_drop = 22;
    // Number of received Cleanup messages
    uint32 cleanup_rcv = 23;
    // Number of successfully received Cleanup messages
    uint32 cleanup_rcv_success = 24;
    // Number of Cleanup messages that had trim failures
    uint32 cleanup_rcv_fail_buffer_trim = 25;
}

// Send path aggregate only counters
message tcp_nsr_snd_counters_aggr_only_node {
    // Number of Data transfer messages dropped because PCB wasn't found
    uint32 data_xfer_rcv_drop_no_pcb = 1;
    // Number of Data transfer messages dropped because SCB DP wasn't found
    uint32 data_xfer_rcv_drop_no_scb_dp = 2;
    // Number of Segmentation instruction messages dropped because PCB wasn't found
    uint32 seg_instr_rcv_drop_no_pcb = 3;
    // Number of Segmentation instruction messages dropped because SCB DP wasn't found
    uint32 seg_instr_rcv_drop_no_scb_dp = 4;
    // Number of NACK messages dropped because PCB wasn't found
    uint32 nack_rcv_drop_no_pcb = 5;
    // Number of NACK messages dropped because SCB DP wasn't found
    uint32 nack_rcv_drop_no_scb_dp = 6;
    // Number of Cleanup messages dropped because PCB wasn't found
    uint32 cleanup_rcv_drop_no_pcb = 7;
    // Number of Cleanup messages dropped because SCB DP wasn't found
    uint32 cleanup_rcv_drop_no_scb_dp = 8;
}

// Send path aggregate counters
message tcp_nsr_snd_counters_aggr_node {
    // Common send path counters
    tcp_nsr_snd_counters_node common = 1;
    // Aggregate only send path counters
    tcp_nsr_snd_counters_aggr_only_node aggr_only = 2;
}

// Audit counters
message tcp_nsr_audit_counters_node {
    // Number of successful session-set Mark's sent by active
    uint32 mark_session_set_send = 1;
    // Number of failed session-set Mark's
    uint32 mark_session_set_send_drop = 2;
    // Number of successful session-set Mark's received by standby
    uint32 mark_session_set_rcv = 3;
    // Number of session-set Mark's dropped by standby
    uint32 mark_session_set_rcv_drop = 4;
    // Number of successful session audits sent by active
    uint32 session_send = 5;
    // Number of session audits that couldn't be sent by active
    uint32 session_send_drop = 6;
    // Number of session audits received by standby
    uint32 session_rcv = 7;
    // Number of session audits dropped by standby
    uint32 session_rcv_drop = 8;
    // Number of successful session-set Sweep's sent by active
    uint32 sweep_session_set_send = 9;
    // Number of failed session-set Sweep's
    uint32 sweep_session_set_send_drop = 10;
    // Number of successful session-set Sweep's received by standby
    uint32 sweep_session_set_rcv = 11;
    // Number of session-set Sweep's dropped by standby
    uint32 sweep_session_set_rcv_drop = 12;
    // Number of successful audit responses sent by standby
    uint32 session_set_response_send = 13;
    // Number of audit responses that couldn't be sent by standby
    uint32 session_set_response_send_drop = 14;
    // Number of audit responses received by active
    uint32 session_set_response_rcv = 15;
    // Number of audit responses dropped by active
    uint32 session_set_response_rcv_drop = 16;
    // Number of successful audit mark acks sent by standby
    uint32 mark_session_set_ack_send = 17;
    // Number of audit mark acks that couldn't be sent by standby
    uint32 mark_session_set_ack_send_drop = 18;
    // Number of audit mark acks received by active
    uint32 mark_session_set_ack_rcv = 19;
    // Number of audit mark acks dropped by active
    uint32 mark_session_set_ack_rcv_drop = 20;
    // Number of successful audit mark nacks sent by standby
    uint32 mark_session_set_nack_send = 21;
    // Number of audit mark nacks that couldn't be sent by standby
    uint32 mark_session_set_nack_send_drop = 22;
    // Number of audit mark nacks received by active
    uint32 mark_session_set_nack_rcv = 23;
    // Number of audit mark nacks dropped by active
    uint32 mark_session_set_nack_rcv_drop = 24;
    // Number of times the active aborted an audit session
    uint32 abort = 25;
}

// Aggregate-only counters for NSR audit
message tcp_nsr_audit_counters_aggr_only_node {
    // Number of session-set Mark messages dropped by standby
    uint32 mark_session_set_rcv_drop_aggr = 1;
    // Number of session audit messages dropped by standby
    uint32 session_rcv_drop_aggr = 2;
    // Number of session-set Sweep messages dropped by standby
    uint32 sweep_session_set_rcv_drop_aggr = 3;
    // Number of session-set response messages dropped by active
    uint32 session_set_response_rcv_drop_aggr = 4;
    // Number of session-set mark ack messages dropped by active
    uint32 mark_session_set_ack_rcv_drop_aggr = 5;
    // Number of session-set mark nack messages dropped by active
    uint32 mark_session_set_nack_rcv_drop_aggr = 6;
}

// Aggregate counters for NSR audit
message tcp_nsr_audit_counters_aggr_node {
    // Common audit counters
    tcp_nsr_audit_counters_node common = 1;
    // Aggregate only audit counters
    tcp_nsr_audit_counters_aggr_only_node aggr_only = 2;
}

