//                                 Apache License
//                           Version 2.0, January 2004
//                        http://www.apache.org/licenses/
//
//   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//
//   1. Definitions.
//
//      "License" shall mean the terms and conditions for use, reproduction,
//      and distribution as defined by Sections 1 through 9 of this document.
//
//      "Licensor" shall mean the copyright owner or entity authorized by
//      the copyright owner that is granting the License.
//
//      "Legal Entity" shall mean the union of the acting entity and all
//      other entities that control, are controlled by, or are under common
//      control with that entity. For the purposes of this definition,
//      "control" means (i) the power, direct or indirect, to cause the
//      direction or management of such entity, whether by contract or
//      otherwise, or (ii) ownership of fifty percent (50%) or more of the
//      outstanding shares, or (iii) beneficial ownership of such entity.
//
//      "You" (or "Your") shall mean an individual or Legal Entity
//      exercising permissions granted by this License.
//
//      "Source" form shall mean the preferred form for making modifications,
//      including but not limited to software source code, documentation
//      source, and configuration files.
//
//      "Object" form shall mean any form resulting from mechanical
//      transformation or translation of a Source form, including but
//      not limited to compiled object code, generated documentation,
//      and conversions to other media types.
//
//      "Work" shall mean the work of authorship, whether in Source or
//      Object form, made available under the License, as indicated by a
//      copyright notice that is included in or attached to the work
//      (an example is provided in the Appendix below).
//
//      "Derivative Works" shall mean any work, whether in Source or Object
//      form, that is based on (or derived from) the Work and for which the
//      editorial revisions, annotations, elaborations, or other modifications
//      represent, as a whole, an original work of authorship. For the purposes
//      of this License, Derivative Works shall not include works that remain
//      separable from, or merely link (or bind by name) to the interfaces of,
//      the Work and Derivative Works thereof.
//
//      "Contribution" shall mean any work of authorship, including
//      the original version of the Work and any modifications or additions
//      to that Work or Derivative Works thereof, that is intentionally
//      submitted to Licensor for inclusion in the Work by the copyright owner
//      or by an individual or Legal Entity authorized to submit on behalf of
//      the copyright owner. For the purposes of this definition, "submitted"
//      means any form of electronic, verbal, or written communication sent
//      to the Licensor or its representatives, including but not limited to
//      communication on electronic mailing lists, source code control systems,
//      and issue tracking systems that are managed by, or on behalf of, the
//      Licensor for the purpose of discussing and improving the Work, but
//      excluding communication that is conspicuously marked or otherwise
//      designated in writing by the copyright owner as "Not a Contribution."
//
//      "Contributor" shall mean Licensor and any individual or Legal Entity
//      on behalf of whom a Contribution has been received by Licensor and
//      subsequently incorporated within the Work.
//
//   2. Grant of Copyright License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      copyright license to reproduce, prepare Derivative Works of,
//      publicly display, publicly perform, sublicense, and distribute the
//      Work and such Derivative Works in Source or Object form.
//
//   3. Grant of Patent License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      (except as stated in this section) patent license to make, have made,
//      use, offer to sell, sell, import, and otherwise transfer the Work,
//      where such license applies only to those patent claims licensable
//      by such Contributor that are necessarily infringed by their
//      Contribution(s) alone or by combination of their Contribution(s)
//      with the Work to which such Contribution(s) was submitted. If You
//      institute patent litigation against any entity (including a
//      cross-claim or counterclaim in a lawsuit) alleging that the Work
//      or a Contribution incorporated within the Work constitutes direct
//      or contributory patent infringement, then any patent licenses
//      granted to You under this License for that Work shall terminate
//      as of the date such litigation is filed.
//
//   4. Redistribution. You may reproduce and distribute copies of the
//      Work or Derivative Works thereof in any medium, with or without
//      modifications, and in Source or Object form, provided that You
//      meet the following conditions:
//
//      (a) You must give any other recipients of the Work or
//          Derivative Works a copy of this License; and
//
//      (b) You must cause any modified files to carry prominent notices
//          stating that You changed the files; and
//
//      (c) You must retain, in the Source form of any Derivative Works
//          that You distribute, all copyright, patent, trademark, and
//          attribution notices from the Source form of the Work,
//          excluding those notices that do not pertain to any part of
//          the Derivative Works; and
//
//      (d) If the Work includes a "NOTICE" text file as part of its
//          distribution, then any Derivative Works that You distribute must
//          include a readable copy of the attribution notices contained
//          within such NOTICE file, excluding those notices that do not
//          pertain to any part of the Derivative Works, in at least one
//          of the following places: within a NOTICE text file distributed
//          as part of the Derivative Works; within the Source form or
//          documentation, if provided along with the Derivative Works; or,
//          within a display generated by the Derivative Works, if and
//          wherever such third-party notices normally appear. The contents
//          of the NOTICE file are for informational purposes only and
//          do not modify the License. You may add Your own attribution
//          notices within Derivative Works that You distribute, alongside
//          or as an addendum to the NOTICE text from the Work, provided
//          that such additional attribution notices cannot be construed
//          as modifying the License.
//
//      You may add Your own copyright statement to Your modifications and
//      may provide additional or different license terms and conditions
//      for use, reproduction, or distribution of Your modifications, or
//      for any such Derivative Works as a whole, provided Your use,
//      reproduction, and distribution of the Work otherwise complies with
//      the conditions stated in this License.
//
//   5. Submission of Contributions. Unless You explicitly state otherwise,
//      any Contribution intentionally submitted for inclusion in the Work
//      by You to the Licensor shall be under the terms and conditions of
//      this License, without any additional terms or conditions.
//      Notwithstanding the above, nothing herein shall supersede or modify
//      the terms of any separate license agreement you may have executed
//      with Licensor regarding such Contributions.
//
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor,
//      except as required for reasonable and customary use in describing the
//      origin of the Work and reproducing the content of the NOTICE file.
//
//   7. Disclaimer of Warranty. Unless required by applicable law or
//      agreed to in writing, Licensor provides the Work (and each
//      Contributor provides its Contributions) on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//      implied, including, without limitation, any warranties or conditions
//      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
//      PARTICULAR PURPOSE. You are solely responsible for determining the
//      appropriateness of using or redistributing the Work and assume any
//      risks associated with Your exercise of permissions under this License.
//
//   8. Limitation of Liability. In no event and under no legal theory,
//      whether in tort (including negligence), contract, or otherwise,
//      unless required by applicable law (such as deliberate and grossly
//      negligent acts) or agreed to in writing, shall any Contributor be
//      liable to You for damages, including any direct, indirect, special,
//      incidental, or consequential damages of any character arising as a
//      result of this License or out of the use or inability to use the
//      Work (including but not limited to damages for loss of goodwill,
//      work stoppage, computer failure or malfunction, or any and all
//      other commercial damages or losses), even if such Contributor
//      has been advised of the possibility of such damages.
//
//   9. Accepting Warranty or Additional Liability. While redistributing
//      the Work or Derivative Works thereof, You may choose to offer,
//      and charge a fee for, acceptance of support, warranty, indemnity,
//      or other liability obligations and/or rights consistent with this
//      License. However, in accepting such obligations, You may act only
//      on Your own behalf and on Your sole responsibility, not on behalf
//      of any other Contributor, and only if You agree to indemnify,
//      defend, and hold each Contributor harmless for any liability
//      incurred by, or claims asserted against, such Contributor by reason
//      of your accepting any such warranty or additional liability.
//
//   END OF TERMS AND CONDITIONS
//
//   APPENDIX: How to apply the Apache License to your work.
//
//      To apply the Apache License to your work, attach the following
//      boilerplate notice, with the fields enclosed by brackets "{}"
//      replaced with your own identifying information. (Don't include
//      the brackets!)  The text should be enclosed in the appropriate
//      comment syntax for the file format. We also recommend that a
//      file or class name and description of purpose be included on the
//      same "printed page" as the copyright notice for easier
//      identification within third-party archives.
//
//   Copyright (c) 2017 Cisco
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

//Path: Cisco-IOS-XR-ip-tcp-oper:tcp-connection/nodes/node/detail-informations/detail-information

package cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information;

// Detailed information about a TCP connection
message tcp_sh_table_bag_KEYS {
    string id = 1;
    uint32 pcb_id = 2;
}

message tcp_sh_table_bag {
    // Address Family
    string address_family = 50;
    // PCB Address
    uint64 pcb = 51;
    // Socket Address
    uint64 so = 52;
    // TCPCB Address
    uint64 tcpcb = 53;
    // VRF Id
    uint32 vrf_id = 54;
    // Connection state
    string connection_state = 55;
    // Time at which connection is established
    uint32 established_time = 56;
    // Id of the local process
    uint32 local_pid = 57;
    // Local address
    tcp_address_type local_address = 58;
    // Foreign address
    tcp_address_type foreign_address = 59;
    // Local port
    uint32 local_port = 60;
    // Foreign port
    uint32 foreign_port = 61;
    // Priority given to packets on this socket
    string packet_priority = 62;
    // Type of Service value to be applied to transmistted packets
    uint32 packet_tos = 63;
    // TTL to be applied to transmited packets
    uint32 packet_ttl = 64;
    // Index of the Hash Bucket
    uint32 hash_index = 65;
    // Current receive queue size in bytes
    uint32 current_receive_queue_size = 66;
    // Max receive queue size in bytes
    uint32 max_receive_queue_size = 67;
    // Current send queue size in bytes
    uint32 current_send_queue_size = 68;
    // Max send queue size in bytes
    uint32 max_send_queue_size = 69;
    // Current receive queue size in packets
    uint32 current_receive_queue_packet_size = 70;
    // Max receive queue size in packets
    uint32 max_receive_queue_packet_size = 71;
    // Save queue (out-of seq data) size in bytes
    uint32 save_queue_size = 72;
    // Initial send sequence number
    uint32 send_initial_sequence_num = 73;
    // Sequence number of unacked data
    uint32 send_unack_sequence_num = 74;
    // Sequence number of next data to be sent
    uint32 send_next_sequence_num = 75;
    // Highest sequence number sent
    uint32 send_max_sequence_num = 76;
    // Send window size in bytes
    uint32 send_window_size = 77;
    // Send congestion window size in bytes
    uint32 send_congestion_window_size = 78;
    // Initial receive sequence number
    uint32 receive_initial_sequence_num = 79;
    // Next sequence number expected
    uint32 receive_next_sequence_num = 80;
    // Receive advertised window size in bytes
    uint32 receive_adv_window_size = 81;
    // Receive window size in bytes
    uint32 receive_window_size = 82;
    // Max segment size calculated in bytes
    uint32 mss = 83;
    // Max segment size offered by the peer in bytes
    uint32 peer_mss = 84;
    // Smoothed round trip time * 8 (msec)
    uint32 srtt = 85;
    // Round trip timeout (msec)
    uint32 rtto = 86;
    // Round trip time (karn algorithm) (msec)
    uint32 krtt = 87;
    // Smoothed round trip time variance * 4 (msec)
    uint32 srtv = 88;
    // Min RTT (msec)
    uint32 min_rtt = 89;
    // Max RTT (msec)
    uint32 max_rtt = 90;
    // Number of retries
    uint32 retries = 91;
    // ACK hold time (msec)
    uint32 ack_hold_time = 92;
    // Giveup time (msec)
    uint32 giveup_time = 93;
    // Keepalive time (msec)
    uint32 keep_alive_time = 94;
    // SYN wait time (msec)
    uint32 syn_wait_time = 95;
    // Timers
    repeated tcp_timer_bag_ timers = 96;
    // Socket option flags
    tcp_sock_options_bag_ socket_option_flags = 97;
    // Socket state flags
    tcp_sock_states_bag_ socket_state_flags = 98;
    // Connection feature flags
    tcp_conn_features_bag_ feature_flags = 99;
    // Connection state flags
    tcp_conn_states_bag_ state_flags = 100;
    // Connection request flags
    tcp_conn_features_bag_ request_flags = 101;
    // RX Syn acl name
    bytes rxsy_naclname = 102;
    // Error code from ICMP Notify
    sint32 soft_error = 103;
    // Socket error code
    sint32 sock_error = 104;
    // Retransimit forever?
    bool is_retrans_forever = 105;
    // Lowest MSS ever used
    uint32 min_mss = 106;
    // Highest MSS ever used
    uint32 max_mss = 107;
    // Number of times connect will be retried?
    uint32 connect_retries = 108;
    // Connect retry interval in seconds
    uint32 connect_retry_interval = 109;
    // Window scaling for receive window
    uint32 receive_window_scale = 110;
    // Window scaling for send window
    uint32 send_window_scale = 111;
    // Requested receive window scale
    uint32 request_receive_window_scale = 112;
    // Requested send window scale
    uint32 rqst_send_wnd_scale = 113;
    // Timestamp from remote host
    uint32 time_stamp_recent = 114;
    // Timestamp when last updated
    uint32 time_stamp_recent_age = 115;
    // ACK number of a sent segment
    uint32 last_ack_sent = 116;
    // Seq nos. of sack blocks
    repeated sackblk_bag_ sack_blks = 117;
    // Sorted list of sack holes
    repeated sackhole_bag_ send_sack_holes = 118;
    // Receive buffer state flags
    tcp_sockbuf_states_bag_ receive_buf_state_flags = 119;
    // Send buffer state flags
    tcp_sockbuf_states_bag_ send_buf_state_flags = 120;
    // Send buffer's low water mark
    uint32 sendbuf_lowwat = 121;
    // Receive buffer's low water mark
    uint32 recvbuf_lowwat = 122;
    // Send buffer's high water mark
    uint32 sendbuf_hiwat = 123;
    // Receive buffer's high water mark
    uint32 recvbuf_hiwat = 124;
    // Send buffer's notify threshold
    uint32 sendbuf_notify_thresh = 125;
    // Receive buffer's data size
    uint32 recvbuf_datasize = 126;
    // Incoming connection queue size
    uint32 queue_length = 127;
    // Incoming half-connection queue size
    uint32 queue_zero_length = 128;
    // Incoming connection queue limit
    uint32 queue_limit = 129;
    // Socket error status
    uint32 socket_error = 130;
    // Socket auto rearm state
    uint32 auto_rearm = 131;
    // # of PDU's in Send Buffer
    uint32 send_pdu_count = 132;
    // Cached Outgoing interface  handle
    uint32 output_ifhandle = 133;
    // Cached fib pd context size
    uint32 fib_pd_ctx_size = 134;
    // Cached fib pd context
    repeated uint32 fib_pd_ctx = 135;
    // Number of labels returned by fib lookup
    uint32 num_labels = 136;
    // Cached Label stack
    repeated uint32 fib_label_output = 137;
    // Instance number of the local process
    uint32 local_app_instance = 138;
}

message tcp_in6_addr_t {
    string value = 1;
}

message tcp_address_type {
    string af_name = 1;
    // IPv4 Address
    string ipv4_address = 2;
    // IPv6 Address
    tcp_in6_addr_t ipv6_address = 3;
}

message sackblk_bag_ {
    // Start seq no. of sack block
    uint32 start = 1;
    // End   seq no. of sack block
    uint32 end = 2;
}

message sackhole_bag_ {
    // Start seq no. of hole
    uint32 start = 1;
    // End   seq no. of hole
    uint32 end = 2;
    // Number of dup (s)acks for this hole
    uint32 duplicated_ack = 3;
    // Next seq. no in hole to be retransmitted
    uint32 retransmitted = 4;
}

message tcp_timer_bag_ {
    // Timer Type
    string timer_type = 1;
    // Count of timer activations
    uint32 timer_activations = 2;
    // Count of timer expirations
    uint32 timer_expirations = 3;
    // Timer next activation (msec)
    uint32 timer_next_activation = 4;
}

message tcp_sockbuf_states_bag_ {
    // Lock on data queue (so_rcv only)
    bool locked = 1;
    // Someone is waiting to lock
    bool waiting_for_lock = 2;
    // Someone is waiting for data/space
    bool waiting_for_data = 3;
    // Buffer is selected for INPUT
    bool input_select = 4;
    // Async I/O
    bool async_io = 5;
    // Not interruptible
    bool not_interruptible = 6;
    // Read/write timer set
    bool io_timer_set = 7;
    // Want delayed wakeups
    bool delayed_wakeup = 8;
    // Read/write wakeup pending
    bool wakeup = 9;
    // Connect wakeup pending
    bool connect_wakeup = 10;
    // Buffer is selected for OUTPUT
    bool output_select = 11;
    // Buffer is selected for OBAND
    bool out_of_band_select = 12;
}

message tcp_sock_states_bag_ {
    // No file descriptor ref
    bool no_file_descriptor_reference = 1;
    // Socket is connected to peer
    bool is_connected = 2;
    // Connecting in progress
    bool is_connecting = 3;
    // Disconnecting in progress
    bool is_disconnecting = 4;
    // Can't send more data to peer
    bool cant_send_more = 5;
    // Can't recv more data from peer
    bool cant_receive_more = 6;
    // At mark on input
    bool received_at_mark = 7;
    // Privileged for broadcast, raw...
    bool privileged = 8;
    // Close is blocked (i.e. socket is a replicated socket on a standby node
    bool block_close = 9;
    // Async i/o notify
    bool async_io_notify = 10;
    // Deciding to accept connection req
    bool is_confirming = 11;
    // Mutex acquired by solock()
    bool is_solock = 12;
    // PCB and socket are detached
    bool is_detached = 13;
    // Socket is blocked for receive - while going through SSO initial sync
    bool block_receive = 14;
    // Socket is blocked for send (if it is a replicated socket on a standby node)
    bool block_send = 15;
}

message tcp_sock_options_bag_ {
    // Turn on debugging info recording
    bool debug = 1;
    // Socket has had listen()
    bool accept_connection = 2;
    // Allow local address reuse
    bool reuse_address = 3;
    // Keep connections alive
    bool keep_alive = 4;
    // Just use interface addresses
    bool dont_route = 5;
    // Permit sending of broadcast msgs
    bool broadcast = 6;
    // Bypass hardware when possible
    bool use_loopback = 7;
    // Linger on close if data present
    bool linger = 8;
    // Leave received Out-of-band data inline
    bool out_of_band_inline = 9;
    // Allow local address & port reuse
    bool reuse_port = 10;
    // Nonblocking socket I/O operation
    bool nonblocking_io = 11;
}

message tcp_conn_features_bag_ {
    // Selective ack on?
    bool selective_ack = 1;
    // MD5 option on?
    bool md5 = 2;
    // Timestamps on?
    bool timestamps = 3;
    // Window-scaling on?
    bool window_scaling = 4;
    // Nagle algorithm on?
    bool nagle = 5;
    // Giveup timer is on?
    bool giveup_timer = 6;
    // Keepalive timer is on?
    bool connection_keep_alive_timer = 7;
    // Path MTU Discovery feature is on?
    bool path_mtu_discovery = 8;
    // tcp mss feature is on?
    bool mss_cisco = 9;
}

message tcp_conn_states_bag_ {
    // Nagle has delayed output
    bool nagle_wait = 1;
    // Send an ACK
    bool ack_needed = 2;
    // FIN has been sent
    bool fin_sent = 3;
    // Probing a closed window
    bool probing = 4;
    // Need to push data out
    bool need_push = 5;
    // A segment is pushed due to MSG_PUSH
    bool pushed = 6;
    // Connection is in SYN cache
    bool in_syn_cache = 7;
    // Path MTU aging timer is running
    bool path_mtu_ager = 8;
}

