// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.detail_informations.detail_information;

// Detailed information about a TCP connection
message tcp_sh_table_bag_KEYS {
    string id = 1;
    uint32 pcb_id = 2;
}

message tcp_sh_table_bag {
    // Address Family
    string address_family = 50;
    // PCB Address
    uint64 pcb = 51;
    // Socket Address
    uint64 so = 52;
    // TCPCB Address
    uint64 tcpcb = 53;
    // VRF Id
    uint32 vrf_id = 54;
    // Connection state
    string connection_state = 55;
    // Time at which connection is established
    uint32 established_time = 56;
    // Id of the local process
    uint32 local_pid = 57;
    // Local address
    tcp_address_type local_address = 58;
    // Foreign address
    tcp_address_type foreign_address = 59;
    // Local port
    uint32 local_port = 60;
    // Foreign port
    uint32 foreign_port = 61;
    // Priority given to packets on this socket
    string packet_priority = 62;
    // Type of Service value to be applied to transmistted packets
    uint32 packet_tos = 63;
    // TTL to be applied to transmited packets
    uint32 packet_ttl = 64;
    // Index of the Hash Bucket
    uint32 hash_index = 65;
    // Current receive queue size in bytes
    uint32 current_receive_queue_size = 66;
    // Max receive queue size in bytes
    uint32 max_receive_queue_size = 67;
    // Current send queue size in bytes
    uint32 current_send_queue_size = 68;
    // Max send queue size in bytes
    uint32 max_send_queue_size = 69;
    // Current receive queue size in packets
    uint32 current_receive_queue_packet_size = 70;
    // Max receive queue size in packets
    uint32 max_receive_queue_packet_size = 71;
    // Save queue (out-of seq data) size in bytes
    uint32 save_queue_size = 72;
    // Initial send sequence number
    uint32 send_initial_sequence_num = 73;
    // Sequence number of unacked data
    uint32 send_unack_sequence_num = 74;
    // Sequence number of next data to be sent
    uint32 send_next_sequence_num = 75;
    // Highest sequence number sent
    uint32 send_max_sequence_num = 76;
    // Send window size in bytes
    uint32 send_window_size = 77;
    // Send congestion window size in bytes
    uint32 send_congestion_window_size = 78;
    // Initial receive sequence number
    uint32 receive_initial_sequence_num = 79;
    // Next sequence number expected
    uint32 receive_next_sequence_num = 80;
    // Receive advertised window size in bytes
    uint32 receive_adv_window_size = 81;
    // Receive window size in bytes
    uint32 receive_window_size = 82;
    // Max segment size calculated in bytes
    uint32 mss = 83;
    // Max segment size offered by the peer in bytes
    uint32 peer_mss = 84;
    // Smoothed round trip time * 8 (msec)
    uint32 srtt = 85;
    // Round trip timeout (msec)
    uint32 rtto = 86;
    // Round trip time (karn algorithm) (msec)
    uint32 krtt = 87;
    // Smoothed round trip time variance * 4 (msec)
    uint32 srtv = 88;
    // Min RTT (msec)
    uint32 min_rtt = 89;
    // Max RTT (msec)
    uint32 max_rtt = 90;
    // Number of retries
    uint32 retries = 91;
    // ACK hold time (msec)
    uint32 ack_hold_time = 92;
    // Giveup time (msec)
    uint32 giveup_time = 93;
    // Keepalive time (msec)
    uint32 keep_alive_time = 94;
    // SYN wait time (msec)
    uint32 syn_wait_time = 95;
    // Timers
    repeated tcp_timer_bag_ timers = 96;
    // Socket option flags
    tcp_sock_options_bag_ socket_option_flags = 97;
    // Socket state flags
    tcp_sock_states_bag_ socket_state_flags = 98;
    // Connection feature flags
    tcp_conn_features_bag_ feature_flags = 99;
    // Connection state flags
    tcp_conn_states_bag_ state_flags = 100;
    // Connection request flags
    tcp_conn_features_bag_ request_flags = 101;
    // RX Syn acl name
    bytes rxsy_naclname = 102;
    // Error code from ICMP Notify
    sint32 soft_error = 103;
    // Socket error code
    sint32 sock_error = 104;
    // Retransimit forever?
    bool is_retrans_forever = 105;
    // Lowest MSS ever used
    uint32 min_mss = 106;
    // Highest MSS ever used
    uint32 max_mss = 107;
    // Number of times connect will be retried?
    uint32 connect_retries = 108;
    // Connect retry interval in seconds
    uint32 connect_retry_interval = 109;
    // Window scaling for receive window
    uint32 receive_window_scale = 110;
    // Window scaling for send window
    uint32 send_window_scale = 111;
    // Requested receive window scale
    uint32 request_receive_window_scale = 112;
    // Requested send window scale
    uint32 rqst_send_wnd_scale = 113;
    // Timestamp from remote host
    uint32 time_stamp_recent = 114;
    // Timestamp when last updated
    uint32 time_stamp_recent_age = 115;
    // ACK number of a sent segment
    uint32 last_ack_sent = 116;
    // Seq nos. of sack blocks
    repeated sackblk_bag_ sack_blks = 117;
    // Sorted list of sack holes
    repeated sackhole_bag_ send_sack_holes = 118;
    // Receive buffer state flags
    tcp_sockbuf_states_bag_ receive_buf_state_flags = 119;
    // Send buffer state flags
    tcp_sockbuf_states_bag_ send_buf_state_flags = 120;
    // Send buffer's low water mark
    uint32 sendbuf_lowwat = 121;
    // Receive buffer's low water mark
    uint32 recvbuf_lowwat = 122;
    // Send buffer's high water mark
    uint32 sendbuf_hiwat = 123;
    // Receive buffer's high water mark
    uint32 recvbuf_hiwat = 124;
    // Send buffer's notify threshold
    uint32 sendbuf_notify_thresh = 125;
    // # of PDU's in Send Buffer
    uint32 send_pdu_count = 126;
    // Cached Outgoing interface  handle
    uint32 output_ifhandle = 127;
    // Cached fib pd context size
    uint32 fib_pd_ctx_size = 128;
    // Cached fib pd context
    repeated uint32 fib_pd_ctx = 129;
    // Number of labels returned by fib lookup
    uint32 num_labels = 130;
    // Cached Label stack
    repeated uint32 fib_label_output = 131;
}

message tcp_in6_addr_t {
    string value = 1;
}

message tcp_address_type {
    string af_name = 1;
    // IPv4 Address
    string ipv4_address = 2;
    // IPv6 Address
    tcp_in6_addr_t ipv6_address = 3;
}

message sackblk_bag_ {
    // Start seq no. of sack block
    uint32 start = 1;
    // End   seq no. of sack block
    uint32 end = 2;
}

message sackhole_bag_ {
    // Start seq no. of hole
    uint32 start = 1;
    // End   seq no. of hole
    uint32 end = 2;
    // Number of dup (s)acks for this hole
    uint32 duplicated_ack = 3;
    // Next seq. no in hole to be retransmitted
    uint32 retransmitted = 4;
}

message tcp_timer_bag_ {
    // Timer Type
    string timer_type = 1;
    // Count of timer activations
    uint32 timer_activations = 2;
    // Count of timer expirations
    uint32 timer_expirations = 3;
    // Timer next activation (msec)
    uint32 timer_next_activation = 4;
}

message tcp_sockbuf_states_bag_ {
    // Lock on data queue (so_rcv only)
    bool locked = 1;
    // Someone is waiting to lock
    bool waiting_for_lock = 2;
    // Someone is waiting for data/space
    bool waiting_for_data = 3;
    // Buffer is selected for INPUT
    bool input_select = 4;
    // Async I/O
    bool async_io = 5;
    // Not interruptible
    bool not_interruptible = 6;
    // Read/write timer set
    bool io_timer_set = 7;
    // Want delayed wakeups
    bool delayed_wakeup = 8;
    // Read/write wakeup pending
    bool wakeup = 9;
    // Connect wakeup pending
    bool connect_wakeup = 10;
    // Buffer is selected for OUTPUT
    bool output_select = 11;
    // Buffer is selected for OBAND
    bool out_of_band_select = 12;
}

message tcp_sock_states_bag_ {
    // No file descriptor ref
    bool no_file_descriptor_reference = 1;
    // Socket is connected to peer
    bool is_connected = 2;
    // Connecting in progress
    bool is_connecting = 3;
    // Disconnecting in progress
    bool is_disconnecting = 4;
    // Can't send more data to peer
    bool cant_send_more = 5;
    // Can't recv more data from peer
    bool cant_receive_more = 6;
    // At mark on input
    bool received_at_mark = 7;
    // Privileged for broadcast, raw...
    bool privileged = 8;
    // Close is blocked (i.e. socket is a replicated socket on a standby node
    bool block_close = 9;
    // Async i/o notify
    bool async_io_notify = 10;
    // Deciding to accept connection req
    bool is_confirming = 11;
    // Mutex acquired by solock()
    bool is_solock = 12;
    // PCB and socket are detached
    bool is_detached = 13;
    // Socket is blocked for receive - while going through SSO initial sync
    bool block_receive = 14;
    // Socket is blocked for send (if it is a replicated socket on a standby node)
    bool block_send = 15;
}

message tcp_sock_options_bag_ {
    // Turn on debugging info recording
    bool debug = 1;
    // Socket has had listen()
    bool accept_connection = 2;
    // Allow local address reuse
    bool reuse_address = 3;
    // Keep connections alive
    bool keep_alive = 4;
    // Just use interface addresses
    bool dont_route = 5;
    // Permit sending of broadcast msgs
    bool broadcast = 6;
    // Bypass hardware when possible
    bool use_loopback = 7;
    // Linger on close if data present
    bool linger = 8;
    // Leave received Out-of-band data inline
    bool out_of_band_inline = 9;
    // Allow local address & port reuse
    bool reuse_port = 10;
    // Nonblocking socket I/O operation
    bool nonblocking_io = 11;
}

message tcp_conn_features_bag_ {
    // Selective ack on?
    bool selective_ack = 1;
    // MD5 option on?
    bool md5 = 2;
    // Timestamps on?
    bool timestamps = 3;
    // Window-scaling on?
    bool window_scaling = 4;
    // Nagle algorithm on?
    bool nagle = 5;
    // Giveup timer is on?
    bool giveup_timer = 6;
    // Keepalive timer is on?
    bool connection_keep_alive_timer = 7;
    // Path MTU Discovery feature is on?
    bool path_mtu_discovery = 8;
    // tcp mss feature is on?
    bool mss_cisco = 9;
}

message tcp_conn_states_bag_ {
    // Nagle has delayed output
    bool nagle_wait = 1;
    // Send an ACK
    bool ack_needed = 2;
    // FIN has been sent
    bool fin_sent = 3;
    // Probing a closed window
    bool probing = 4;
    // Need to push data out
    bool need_push = 5;
    // A segment is pushed due to MSG_PUSH
    bool pushed = 6;
    // Connection is in SYN cache
    bool in_syn_cache = 7;
    // Path MTU aging timer is running
    bool path_mtu_ager = 8;
}

