// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.statistics.pcbs.pcb;

// TCP PCB Statistics
message tcp_sh_pcb_stats_bag_KEYS {
    string id = 1;
    uint32 id_1 = 2;
}

message tcp_sh_pcb_stats_bag {
    // PCB Address
    uint64 pcb = 50;
    // VRF Id
    uint32 vrf_id = 51;
    // Packets received from application
    uint64 packets_sent = 52;
    // XIPC pulses received from application
    uint64 xipc_pulse_received = 53;
    // Segment Instruction received from partner node
    uint32 segment_instruction_received = 54;
    // Packets queued to v4/v6 IO
    uint64 send_packets_queued = 55;
    // Packets queued to NetIO
    uint64 send_packets_queued_net_io = 56;
    // Packets failed to be queued to v4/v6 IO
    uint32 send_queue_failed = 57;
    // Packets failed to be queued to NetIO
    uint32 send_queue_net_io_failed = 58;
    // Packets received from network
    uint64 packets_received = 59;
    // Received packets failed to be queued to application
    uint32 receive_queue_failed = 60;
    // Received packets queued to application
    uint64 received_packets_queued = 61;
    // No. of times send window shrinkage by peer was ignored
    uint32 send_window_shrink_ignored = 62;
    // PAW or non-PAW socket?
    bool is_paw_socket = 63;
    // Read  I/O counts
    tcp_io_counts_bag read_io_counts = 64;
    // Write I/O counts
    tcp_io_counts_bag write_io_counts = 65;
    // Time at which receive buffer was last read from
    uint32 read_io_time = 66;
    // Time at which send buffer was last written to
    uint32 write_io_time = 67;
    // Statistics of Async TCP Sessions
    tcp_async_session_stats_bag async_session_stats = 68;
}

// TCP Async Session Statistic
message tcp_async_session_stats_bag {
    // Flag of async session
    bool async_session = 1;
    // Number of successful data write to XIPC
    repeated uint32 data_write_success_num = 2;
    // Number of successful data read from XIPC
    repeated uint32 data_read_success_num = 3;
    // Number of failed data write to XIPC
    repeated uint32 data_write_error_num = 4;
    // Number of failed data read from XIPC
    repeated uint32 data_read_error_num = 5;
    // Number of successful control write to XIPC
    repeated uint32 control_write_success_num = 6;
    // Number of successful control read to XIPC
    repeated uint32 control_read_success_num = 7;
    // Number of failed control write to XIPC
    repeated uint32 control_write_error_num = 8;
    // Number of failed control read from XIPC
    repeated uint32 control_read_error_num = 9;
    // Number of bytes data has been written
    repeated uint64 data_write_bytes = 10;
    // Number of bytes data has been read
    repeated uint64 data_read_bytes = 11;
}

// Counts of I/O events
message tcp_io_counts_bag {
    // Number of I/O operations done by application
    uint32 io_count = 1;
    // How many times socket was armed by application
    uint32 arm_count = 2;
    // How many times socket was unarmed by application
    uint32 unarm_count = 3;
    // How many times socket was auto-armed by TCP
    uint32 autoarm_count = 4;
}

