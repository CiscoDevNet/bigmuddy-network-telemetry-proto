// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_tcp_oper.tcp_connection.nodes.node.statistics.summary;

// TCP Statistics
message tcp_sh_stats_bag_KEYS {
    string id = 1;
}

message tcp_sh_stats_bag {
    // Current number of SYN cache entries
    uint32 syn_cache_count = 50;
    // Number of Open sockets
    uint32 num_open_sockets = 51;
    // Total packets sent
    uint32 total_pakets_sent = 52;
    // Total transmit packets dropped due to general failures
    uint32 send_packets_dropped = 53;
    // Total transmit packets dropped due to authentication failures
    uint32 send_auth_packets_dropped = 54;
    // Data packets sent
    uint32 data_pakets_sent = 55;
    // Data bytes sent
    uint32 data_bytes_sent = 56;
    // Data packets retransmitted
    uint32 packets_retransmitted = 57;
    // Data bytes retransmitted
    uint32 bytes_retransmitted = 58;
    // Ack only packets sent (incl. delay)
    uint32 ack_only_packets_sent = 59;
    // Delay ack packets sent
    uint32 delay_ack_packets_sent = 60;
    // Urgent only packets sent
    uint32 urgent_only_packets_sent = 61;
    // Window probe packets sent
    uint32 window_probe_packets_sent = 62;
    // Window update packets sent
    uint32 window_update_packets_sent = 63;
    // Control (SYN|FIN|RST) packets sent
    uint32 control_packets_sent = 64;
    // RST packets sent
    uint32 rst_packets_sent = 65;
    // Total packets received
    uint32 total_packets_received = 66;
    // Received packets dropped due to general failures
    uint32 received_packets_dropped = 67;
    // Received packets dropped due to ACL DENY on SYN pkts
    uint32 synacl_match_pkts_dropped = 68;
    // Received packets dropped due to stale cached header
    uint32 received_packets_dropped_stale_c_hdr = 69;
    // Received packets dropped due to authentication failures
    uint32 received_auth_packets_dropped = 70;
    // Ack packets received
    uint32 ack_packets_received = 71;
    // Bytes acked by ack packets
    uint32 ack_bytes_received = 72;
    // Duplicate ack packets
    uint32 duplicated_ack_packets_received = 73;
    // Ack packets for unsent data
    uint32 ack_packets_for_unsent_received = 74;
    // Data packets received in sequence
    uint32 data_packets_received_in_sequence = 75;
    // Data bytes received in sequence
    uint32 data_bytes_received_in_sequence = 76;
    // Duplicate packets received
    uint32 duplicate_packets_received = 77;
    // Duplicate bytes received
    uint32 duplicate_bytes_received = 78;
    // Packets with partial dup data
    uint32 partial_duplicate_ack_received = 79;
    // Bytes with partial dup data
    uint32 partial_duplicate_bytes_received = 80;
    // Out-of-order packets received
    uint32 out_of_order_packets_received = 81;
    // Out-of-order bytes received
    uint32 out_of_order_bytes_received = 82;
    // After-window packets received
    uint32 after_window_packets_received = 83;
    // After-window bytes received
    uint32 after_window_bytes_received = 84;
    // Window probe packets received
    uint32 window_probe_packets_received = 85;
    // Window update packets received
    uint32 window_update_packets_received = 86;
    // Packets received after close
    uint32 packets_received_after_close_packet = 87;
    // Packets received with bad checksum
    uint32 bad_checksum_packets_received = 88;
    // Packets received with too short size
    uint32 too_short_packets_received = 89;
    // Packets received with malformed header
    uint32 malformed_packets_received = 90;
    // Packets rcceived with no wild listener
    uint32 no_port_packets_received = 91;
    // Connection requests sent
    uint32 connections_requested = 92;
    // Connection requests accepted
    uint32 connections_accepted = 93;
    // Connections established
    uint32 connections_established = 94;
    // Connections forcibly closed
    uint32 connections_forcibly_closed = 95;
    // connections closed (incl. drops)
    uint32 connections_closed = 96;
    // connections dropped
    uint32 connections_dropped = 97;
    // Embryonic connections dropped
    uint32 embryonic_connection_dropped = 98;
    // Connections failed
    uint32 connections_failed = 99;
    // Established connections reset
    uint32 established_connections_reset = 100;
    // Retransmit timeouts (incl. data packets)
    uint32 retransmit_timeouts = 101;
    // Connection drops during retransmit timeouts
    uint32 retransmit_dropped = 102;
    // Keepalive timeouts
    uint32 keep_alive_timeouts = 103;
    // Connection drops due to keepalive timeouts
    uint32 keep_alive_dropped = 104;
    // Keepalive probes sent
    uint32 keep_alive_probes = 105;
    // Segments dropped due to PAWS
    uint32 paws_dropped = 106;
    // Segments dropped due to window probe
    uint32 persist_dropped = 107;
    // Segments dropped due to trylock fail
    uint32 try_lock_dropped = 108;
    // Connections rate-limited
    uint32 connection_rate_limited = 109;
    // SYN Cache entries added
    uint32 syn_cache_added = 110;
    // SYN Cache connections completed
    uint32 syn_cache_completed = 111;
    // SYN Cache entries timed out
    uint32 syn_cache_timed_out = 112;
    // SYN Cache entries dropped due to overflow
    uint32 syn_cache_overflow = 113;
    // SYN Cache entries dropped due to RST
    uint32 syn_cache_reset = 114;
    // SYN Cache entries dropped due to ICMP unreach
    uint32 syn_cache_unreach = 115;
    // SYN Cache entries dropped due to bucket overflow
    uint32 syn_cache_bucket_oflow = 116;
    // SYN Cache entries aborted (no mem)
    uint32 syn_cache_aborted = 117;
    // SYN Cache duplicate SYNs received
    uint32 syn_cache_duplicate_sy_ns = 118;
    // SYN Cache entries dropped (no route/mem)
    uint32 syn_cache_dropped = 119;
    // Punt (down to ip) failures
    uint32 pulse_errors = 120;
    // Packets owned by the socket layer
    uint32 socket_layer_packets = 121;
    // Packets owned by TCP reassembly
    uint32 reassembly_packets = 122;
    // Packets freed after starvation
    uint32 recovered_packets = 123;
    // Packet allocation errors
    uint32 packet_failures = 124;
    // Number of times MSS was increased
    uint32 mss_up = 125;
    // Number of times MSS was decreased
    uint32 mss_down = 126;
    // Segments truncated due to insufficient Write I/O vectors
    uint32 truncated_write_iov = 127;
    // Number of times throttle mode was off
    uint32 no_throttle = 128;
    // Number of times low water mark throttle was on
    uint32 low_water_mark_throttle = 129;
    // Number of times high water mark throttle was on
    uint32 high_water_mark_throttle = 130;
    // Number of times a stalled tcp timer was tickled
    uint32 stalled_timer_tickle_count = 131;
    // Last timestamp when a stalled tcp timer was tickled
    uint32 stalled_timer_tickle_time = 132;
    // Number of write attempts from socket-lib into an IQ
    uint32 iq_sock_writes = 133;
    // Number of retried write attempts
    uint32 iq_sock_retries = 134;
    // Number of aborted socket-lib writes
    uint32 iq_sock_aborts = 135;
}

