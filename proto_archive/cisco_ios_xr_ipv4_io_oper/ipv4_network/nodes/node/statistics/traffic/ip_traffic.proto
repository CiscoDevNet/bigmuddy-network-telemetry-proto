// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_io_oper.ipv4_network.nodes.node.statistics.traffic;

// IP and ICMP Traffic Information
message ip_traffic_KEYS {
    string node_name = 1;
}

message ip_traffic {
    // IPv4 Network Stats
    ipv4_io_traffic ipv4_stats = 50;
    // ICMP Stats
    ipv4_io_icmp_traffic icmp_stats = 51;
}

// IP Traffic Information
message ipv4_io_traffic {
    // Input Packets
    uint32 input_packets = 1;
    // Received Packets
    uint32 received_packets = 2;
    // Format Errors
    uint32 format_errors = 3;
    // Bad Hop Count
    uint32 bad_hop_count = 4;
    // Bad Source Address
    uint32 bad_source_address = 5;
    // Bad Header
    uint32 bad_header = 6;
    // No Protocol
    uint32 no_protocol = 7;
    // No Gateway
    uint32 no_gateway = 8;
    // RaInput
    uint32 reassemble_input = 9;
    // Reassembled
    uint32 reassembled = 10;
    // Reassembly Timeout
    uint32 reassemble_timeout = 11;
    // Reassembly Max Drop
    uint32 reassemble_max_drop = 12;
    // Reassembly Failed
    uint32 reassemble_failed = 13;
    // IP Options Present
    uint32 options_present = 14;
    // Bad Option
    uint32 bad_option = 15;
    // Unknown Option
    uint32 unknown_option = 16;
    // Bad Security Option
    uint32 bad_security_option = 17;
    // Basic Security Option
    uint32 basic_security_option = 18;
    // Extended Security Option
    uint32 extended_security_option = 19;
    // Cipso Option
    uint32 cipso_option = 20;
    // Strict Source Route Option
    uint32 strict_source_route_option = 21;
    // Loose Source Route Option
    uint32 loose_source_route_option = 22;
    // Record Route Option
    uint32 record_route_option = 23;
    // SID Option
    uint32 sid_option = 24;
    // Timestamp Option
    uint32 timestamp_option = 25;
    // Router Alert Option
    uint32 router_alert_option = 26;
    // Noop Option
    uint32 noop_option = 27;
    // End Option
    uint32 end_option = 28;
    // Packets Output
    uint32 packets_output = 29;
    // Packets Forwarded
    uint32 packets_forwarded = 30;
    // Packets Fragmented
    uint32 packets_fragmented = 31;
    // Fragment Count
    uint32 fragment_count = 32;
    // Encapsulation Failed
    uint32 encapsulation_failed = 33;
    // No Router
    uint32 no_router = 34;
    // Packet Too Big
    uint32 packet_too_big = 35;
    // Multicast In
    uint32 multicast_in = 36;
    // Multicast Out
    uint32 multicast_out = 37;
    // Broadcast In
    uint32 broadcast_in = 38;
    // Broadcast Out
    uint32 broadcast_out = 39;
    // Lisp IPv4 encapped packets
    uint32 lisp_v4_encap = 40;
    // Lisp IPv4 decapped packets
    uint32 lisp_v4_decap = 41;
    // Lisp IPv6 encapped packets
    uint32 lisp_v6_encap = 42;
    // Lisp IPv6 decapped packets
    uint32 lisp_v6_decap = 43;
    // Lisp encap errors
    uint32 lisp_encap_error = 44;
    // Lisp decap errors
    uint32 lisp_decap_error = 45;
}

// ICMP Traffic Information
message ipv4_io_icmp_traffic {
    // ICMP Received
    uint32 received = 1;
    // ICMP Checksum Errors
    uint32 checksum_error = 2;
    // ICMP Unknown
    uint32 unknown = 3;
    // ICMP Transmitted
    uint32 output = 4;
    // ICMP Admin Unreachable Sent
    uint32 admin_unreachable_sent = 5;
    // ICMP Network Unreachable Sent
    uint32 network_unreachable_sent = 6;
    // ICMP Host Unreachable Sent
    uint32 host_unreachable_sent = 7;
    // ICMP Protocol Unreachable Sent
    uint32 protocol_unreachable_sent = 8;
    // ICMP Port Unreachable Sent
    uint32 port_unreachable_sent = 9;
    // ICMP Fragment Unreachable Sent
    uint32 fragment_unreachable_sent = 10;
    // ICMP Admin Unreachable Received
    uint32 admin_unreachable_received = 11;
    // ICMP Network Unreachable Received
    uint32 network_unreachable_received = 12;
    // ICMP Host Unreachable Received
    uint32 host_unreachable_received = 13;
    // ICMP Protocol Unreachable Received
    uint32 protocol_unreachable_received = 14;
    // ICMP Port Unreachable Received
    uint32 port_unreachable_received = 15;
    // ICMP Fragment Unreachable Received
    uint32 fragment_unreachable_received = 16;
    // ICMP Hopcount Sent
    uint32 hopcount_sent = 17;
    // ICMP Reassembly Sent
    uint32 reassembly_sent = 18;
    // ICMP Hopcount Received
    uint32 hopcount_received = 19;
    // ICMP Reassembly Received
    uint32 reassebly_received = 20;
    // ICMP Parameter Error Received
    uint32 param_error_received = 21;
    // ICMP Parameter Error Sent
    uint32 param_error_send = 22;
    // ICMP Echo Request Sent
    uint32 echo_request_sent = 23;
    // ICMP Echo Request Sent
    uint32 echo_request_received = 24;
    // ICMP Echo Reply Sent
    uint32 echo_reply_sent = 25;
    // ICMP Echo Reply Received
    uint32 echo_reply_received = 26;
    // ICMP Mask Sent
    uint32 mask_request_sent = 27;
    // ICMP Mask Received
    uint32 mask_request_received = 28;
    // ICMP Mask Sent
    uint32 mask_reply_sent = 29;
    // ICMP Mask Received
    uint32 mask_reply_received = 30;
    // ICMP Source Quench
    uint32 source_quench_received = 31;
    // ICMP Redirect Received
    uint32 redirect_received = 32;
    // ICMP Redirect Sent
    uint32 redirect_send = 33;
    // ICMP Timestamp Received
    uint32 timestamp_received = 34;
    // ICMP Timestamp Reply Received
    uint32 timestamp_reply_received = 35;
    // ICMP Router Advertisement Received
    uint32 router_advert_received = 36;
    // ICMP Router Solicited Received
    uint32 router_solicit_received = 37;
}

