// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_bfd_oper.bfd.session_details.session_detail;

// BFD Detailed Session Information
message bfd_mgmt_session_detail_KEYS {
    string interface_name = 1;
    string destination_address = 2;
    string location = 3;
}

message bfd_mgmt_session_detail {
    // Session status information
    bfd_mgmt_session_status_information status_information = 50;
    // Client applications owning the session
    repeated bfd_mgmt_session_owner_information owner_information = 51;
    // Association session information
    repeated bfd_mgmt_session_association_information association_information = 52;
    // MP Dowload State
    bfd_mgmt_mp_download_state_info mp_download_state = 53;
    // LSP Ping Info
    bfd_mgmt_lsp_ping_info_t lsp_ping_info = 54;
}

message bfd_in6_addr_t {
    string value = 1;
}

message ip_addr_t_union {
    string afi = 1;
    // No Address
    uint32 dummy = 2;
    // IPv4 address type
    string ipv4 = 3;
    // IPv6 address type
    bfd_in6_addr_t ipv6 = 4;
}

// BFD Agent Interval between packets Information
message bfd_mgmt_interval_statistics {
    // Number of Interval Samples between Packets sent/received
    uint32 number = 1;
    // Minimum of Transmit/Receive Interval (in milli-seconds)
    uint32 minimum = 2;
    // Maximum of Transmit/Receive Interval (in milli-seconds)
    uint32 maximum = 3;
    // Average of Transmit/Receive Interval (in milli-seconds)
    uint32 average = 4;
    // Time since last Transmit/Receive (in milli-seconds)
    uint32 last = 5;
}

// BFD Agent Echo Interval and Detection Multiplier Information
message bfd_mgmt_echo_interval_multiplier_information {
    // Negotiated transmit interval in micro-seconds
    uint32 negotiated_transmit_interval = 1;
    // Detection time in micro-seconds
    uint32 detection_time = 2;
    // Detection Multiplier
    uint32 detection_multiplier = 3;
}

// BFD Agent Async Interval and Detection Multiplier Information
message bfd_mgmt_async_interval_multiplier_information {
    // Negotiated remote transmit interval in micro-seconds
    uint32 negotiated_remote_transmit_interval = 1;
    // Negotiated local transmit interval in micro-seconds
    uint32 negotiated_local_transmit_interval = 2;
    // Detection time in micro-seconds
    uint32 detection_time = 3;
    // Detection Multiplier
    uint32 detection_multiplier = 4;
}

// BFD Session State Transition Time Information
message bfd_mgmt_session_state_time {
    // Number of days since last session state transition
    uint32 days = 1;
    // Number of hours since last session state transition
    uint32 hours = 2;
    // Number of mins since last session state transition
    uint32 minutes = 3;
    // Number of seconds since last session state transition
    uint32 seconds = 4;
}

// BFD Control Packet
message bfd_mgmt_control_packet {
    // Version
    uint32 version = 1;
    // Diagnostic
    string diagnostic = 2;
    // I Hear You (v0)
    sint32 i_hear_you = 3;
    // State (v1)
    string state = 4;
    // Demand mode
    sint32 demand = 5;
    // Poll bit
    sint32 poll = 6;
    // Final bit
    sint32 final = 7;
    // BFD implementation does not share fate with its control plane
    sint32 control_plane_independent = 8;
    // Requesting authentication for the session
    sint32 authentication_present = 9;
    // Detection Multiplier
    uint32 detection_multiplier = 10;
    // Length
    uint32 length = 11;
    // My Discriminator
    uint32 my_discriminator = 12;
    // Your Discriminator
    uint32 your_discriminator = 13;
    // Desired minimum transmit interval in micro-seconds
    uint32 desired_minimum_transmit_interval = 14;
    // Required receive interval in micro-seconds
    uint32 required_minimum_receive_interval = 15;
    // Required echo receive interval in micro-seconds
    uint32 required_minimum_echo_receive_interval = 16;
}

// BFD Agent Hardware Session Information
message bfd_mgmt_session_offload_info {
    // Opaque for PD detailed info 
    bytes hardware_info = 1;
    sint32 is_session_offloaded = 2;
    sint32 is_offloaded_session_echo_enabled = 3;
    sint32 is_offloaded_session_created = 4;
    bytes npu_nodename = 5;
    uint64 async_tx_count = 6;
    uint64 async_rx_count = 7;
    uint64 echo_tx_count = 8;
    uint64 echo_rx_count = 9;
    uint32 error_code = 10;
    uint32 error_event_type = 11;
    uint32 error_change_type = 12;
    uint32 error_tx_interval = 13;
    uint32 error_rx_interval = 14;
    uint32 retry_timer_count = 15;
    uint32 rc = 16;
    sint32 session_recreate = 17;
}

// BFD Session Status Brief Information 
message bfd_mgmt_session_status_information_brief {
    // Async Interval and Detect Multiplier Information
    bfd_mgmt_async_interval_multiplier_information async_interval_multiplier = 1;
    // Echo Interval and Detect Multiplier Information
    bfd_mgmt_echo_interval_multiplier_information echo_interval_multiplier = 2;
}

// BFD Agent detailed Session Information
message bfd_mgmt_session_status_information {
    // Session type
    string sessiontype = 1;
    // Session subtype
    string session_subtype = 2;
    // State
    string state = 3;
    // Session's Local discriminator
    uint32 local_discriminator = 4;
    // Session's Remote discriminator
    uint32 remote_discriminator = 5;
    // Source address
    ip_addr_t_union source_address = 6;
    // Time since last state change
    bfd_mgmt_session_state_time last_state_change = 7;
    // Number of times session state went to UP
    uint32 to_up_state_count = 8;
    // Transmit Packet
    bfd_mgmt_control_packet transmit_packet = 9;
    // Receive Packet
    bfd_mgmt_control_packet receive_packet = 10;
    // Brief Status Information
    bfd_mgmt_session_status_information_brief status_brief_information = 11;
    // Desired minimum echo transmit interval in milli-seconds
    uint32 desired_minimum_echo_transmit_interval = 12;
    // Statistics of Interval between Async Packets Transmitted (in milli-seconds)
    bfd_mgmt_interval_statistics async_transmit_statistics = 13;
    // Statistics of Interval between Async Packets Received (in milli-seconds)
    bfd_mgmt_interval_statistics async_receive_statistics = 14;
    // Statistics of Interval between Echo Packets Transmitted (in milli-seconds)
    bfd_mgmt_interval_statistics echo_transmit_statistics = 15;
    // Statistics of Interval between Echo Packets Received (in milli-seconds)
    bfd_mgmt_interval_statistics echo_received_statistics = 16;
    // Remote Negotiated Interval in milli-seconds
    uint32 remote_negotiated_interval = 17;
    // Number of Latency Samples. Time between Transmit and Receive
    uint32 latency_number = 18;
    // Minimum value of Latency (in micro-seconds)
    uint32 latency_minimum = 19;
    // Maximum value of Latency (in micro-seconds)
    uint32 latency_maximum = 20;
    // Average value of Latency (in micro-seconds)
    uint32 latency_average = 21;
    // Location where session is housed
    string node_id = 22;
    // Internal Label
    uint32 internal_label = 23;
}

message bfd_timespec {
    // seconds
    uint64 seconds = 1;
    // nanoseconds
    uint32 nanoseconds = 2;
}

// A sub-LSP FEC
message te_s2l_fec_t {
    // sub-LSP subgroup ID
    uint32 s2_l_fec_subgroup_id = 1;
    // LSP ID
    uint32 s2_l_fec_lsp_id = 2;
    // Tunnel ID
    uint32 s2_l_fec_tunnel_id = 3;
    // Extended tunnel ID
    string s2_l_fec_extended_tunnel_id = 4;
    // LSP source address
    string s2_l_fec_source = 5;
    // sub-LSP destination address
    string s2_l_fec_dest = 6;
    // P2MP ID
    uint32 s2_l_fec_p2_mp_id = 7;
    // Subgroup Originator
    string s2_l_fec_subgroup_originator = 8;
    // Session identifier (ctype)
    string s2_l_fec_c_type = 9;
    // VRF; currently only for GMPLS tunnels
    string s2_l_fec_vrf = 10;
}

message bfd_fec_dummy_t {
    bytes dummy = 1;
}

message bfd_fec_union {
    string bfdfec_type = 1;
    bfd_fec_dummy_t dummy = 2;
    te_s2l_fec_t te_s2l_fec = 3;
}

// BFD Session Owner Information
message bfd_mgmt_session_owner_information {
    // Client specified minimum transmit interval in micro-seconds
    uint32 interval = 1;
    // Client specified detection multiplier to compute detection time
    uint32 detection_multiplier = 2;
    // Adjusted minimum transmit interval in milli-seconds
    uint32 adjusted_interval = 3;
    // Adjusted detection multiplier to compute detection time
    uint32 adjusted_detection_multiplier = 4;
    // Client process name
    string name = 5;
}

// BFD Universal Session Key
message bfd_mgmt_session_key {
    // Session Key Type
    uint32 session_key_type = 1;
    // Session Interface Name
    string interface_name = 2;
    // Session VRF Name
    string vrf_name = 3;
    // Incoming Label
    uint32 incoming_label = 4;
    // IPv4/v6 dest address
    ip_addr_t_union ip_destination_address = 5;
    // IPv4/v6 source address
    ip_addr_t_union ip_source_address = 6;
    // Union of FECs
    bfd_fec_union bfdfec = 7;
    // SBFD enable flag
    sint32 sbfd_enabled = 8;
    // SBFD target type
    uint32 sbfd_target_type = 9;
    // sbfd target address
    ip_addr_t_union target_address = 10;
}

// BFD Session Association Information
message bfd_mgmt_session_association_information {
    // Session Key
    bfd_mgmt_session_key session_key = 1;
    // Session type
    string sessiontype = 2;
    // Client applications owning the session
    repeated bfd_mgmt_session_owner_information owner_information = 3;
    // Session's Local discriminator
    uint32 local_discriminator = 4;
}

// BFD Download State
message bfd_mgmt_mp_download_state_info {
    // MP Download State
    string mp_download_state = 1;
    // Change time
    bfd_timespec change_time = 2;
}

// BFD LSP Ping info
message bfd_mgmt_lsp_ping_info_t {
    // LSP Ping Tx count
    uint32 lsp_ping_tx_count = 1;
    // LSP Ping Tx error count
    uint32 lsp_ping_tx_error_count = 2;
    // LSP Ping last sent time
    bfd_timespec lsp_ping_tx_last_time = 3;
    // LSP Ping Tx last result
    string lsp_ping_tx_last_rc = 4;
    // LSP Ping last error time
    bfd_timespec lsp_ping_tx_last_error_time = 5;
    // LSP Ping Tx last error
    string lsp_ping_tx_last_error_rc = 6;
    // LSP Ping Rx last received discriminator
    uint32 lsp_ping_rx_last_discr = 7;
    // LSP Ping numer of times received
    uint32 lsp_ping_rx_count = 8;
    // LSP Ping last received time
    bfd_timespec lsp_ping_rx_last_time = 9;
    // LSP Ping Rx Last Code
    uint32 lsp_ping_rx_last_code = 10;
    // LSP Ping Rx Last Subcode
    uint32 lsp_ping_rx_last_subcode = 11;
    // LSP Ping Rx Last Output
    string lsp_ping_rx_last_output = 12;
}

