// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.interface_infos.interface_info.interfaces.interface;

// FIB per interface information
message fib_sh_int_KEYS {
    string node_name = 1;
    string protocol_name = 2;
    string vrf_name = 3;
    string link_type = 4;
    string interface_name = 5;
}

message fib_sh_int {
    // Interface handle
    string per_interface = 50;
    // FIB Interface type
    uint32 fib_interface_type = 51;
    // Pointer to fibidb
    uint32 fib_id_pointer = 52;
    // Flags on fibidb
    uint32 fib_id_flags = 53;
    // Pointer to fibidb extension
    uint32 fib_id_extension_pointer = 54;
    // Flags on fibidb extension
    uint32 fib_id_extension_flags = 55;
    // Number of dependent nhinfo's
    uint32 number_of_dependent_next_hop_information = 56;
    // Vrf local cef info ptr
    uint32 vrf_local_cef_information_pointer = 57;
    // Reference count
    uint32 reference_count = 58;
    // Time last modified
    uint32 last_modified_time = 59;
    // Last Oper
    string last_operation = 60;
    // Is the protocol configured?
    bool protocol_enabled = 61;
    // Detailed FIB interface information
    fib_sh_int_det detail_fib_int_information = 62;
    // Reference count for the protocol
    uint32 referance_count_for_protocol = 63;
    // Number of input packets
    uint64 number_of_input_packets = 64;
    // Number of input bytes
    uint64 number_of_input_bytes = 65;
    // Number of output packets
    uint64 number_of_output_packets = 66;
    // Number of output bytes
    uint64 number_of_output_bytes = 67;
    // Interface up flag
    bool interface_up_flag = 68;
    // Per packet loadbalancing flag
    bool per_packet_load_balancing_flag = 69;
    // P2P interface flag
    bool p2_p_interface_flag = 70;
    // Loopback interface flag
    bool loopback_interface_flag = 71;
    // Null interface flag
    bool null_interface_flag = 72;
    // Tunnel interface flag
    bool tunnel_interface_flag = 73;
    // GRE Tunnel interface flag
    bool gre_tunnel_interface_flag = 74;
    // Punt packets from FIB switching flag
    bool punt_packets_from_fib_switching_flag = 75;
    // Drop packets while FIB switching flag
    bool drop_packets_while_fib_switching_flag = 76;
    // Punt packets from linecard flag
    bool punt_packets_from_linecard_flag = 77;
    // Pimary local v4 address for the interface
    string primary_ipv4_address = 78;
    // Pimary local v6 address for the interface
    string primary_ipv6_address = 79;
    // Internal Information
    fib_sh_int_internal si_internal = 80;
}

// Event history Entry
message evt_hist_entry {
    // The timestamp of the event
    string evt_timestamp = 1;
    // Event name
    string evt_name = 2;
    // Event type
    uint32 evt_type = 3;
    // Multiple instance flag
    bool evt_many = 4;
    // Sticky flag
    bool evt_sticky = 5;
    // Optional data
    repeated uint32 evt_data = 6;
}

// Per object event history
message evt_hist_info {
    // Class name string
    string evt_class_name = 1;
    // Array of event entries
    repeated evt_hist_entry evt_entry = 2;
}

// FIB per interface detail information
message fib_sh_int_det {
    // Interface Protocol MTU
    uint32 interface_mtu = 1;
    // Forwarding enabled/disabled flag
    bool forwarding_flag = 2;
    // RPF configured flag
    bool rpf_configured_flag = 3;
    // RPF mode
    string rpf_mode = 4;
    // Allow default route with RPF
    bool default_route_with_rpf = 5;
    // Allow selfping with RPF
    bool self_ping_with_rpf = 6;
    // BGP PA configured flag
    bool bgp_pa_input_configured_flag = 7;
    // src BGP PA configured flag
    bool source_bgp_pa_input_configured_flag = 8;
    // dst BGP PA configured flag
    bool destination_bgp_pa_input_configured_flag = 9;
    // BGP PA configured flag
    bool bgp_pa_output_configured_flag = 10;
    // src BGP PA configured flag
    bool source_bgp_pa_output_configured_flag = 11;
    // dst BGP PA configured flag
    bool destination_bgp_pa_output_configured_flag = 12;
    // ICMP  configured flag
    uint32 icmp_flag = 13;
    // Drop packets with multiple-label-stack if set
    bool multi_label_drop_flag = 14;
}

// FIB per interface internal information
message fib_sh_int_internal {
    // Event History for IDB
    evt_hist_info fib_idb_hist = 1;
    // Event History for Srtehead
    evt_hist_info fib_srte_head_hist = 2;
}

