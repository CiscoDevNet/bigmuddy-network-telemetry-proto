// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail;

// Basic FIB table information
message fib_sh_tbl_fib_KEYS {
    string node_name = 1;
    string protocol_name = 2;
    string vrf_name = 3;
    string prefix = 4;
    uint32 prefix_length = 5;
}

message fib_sh_tbl_fib {
    // Proto type for this entry
    uint32 protocol_type_fib_entry = 50;
    // Detailed FIB entry information
    fib_sh_tbl_fib_det detail_fib_entry_information = 51;
    // FIB entry path details
    fib_sh_tbl_path fib_entry_path = 52;
    // Platform Hardware info
    bytes platform_hardware = 53;
    // Number of references to the pathlist
    uint32 number_of_referances_to_path_list = 54;
    // The pathlist flags
    uint32 path_list_flags = 55;
    // The pathlist source
    uint32 path_list_source = 56;
    // Number of references to the LDI
    uint32 number_of_referances_to_ldi = 57;
    // The LDI flags
    uint32 ldi_flags = 58;
    // The flags of ext assocaited with LDI 
    uint32 flags_external_ldi = 59;
    // exact-route result
    bool exact_route_result = 60;
    // Prefix is static or connected
    bool prefix_is_static_or_connected = 61;
    // Packet should always be received
    bool packet_should_recieve = 62;
    // Prefix is connected
    bool prefix_connected = 63;
    // Prefix is for an adjacency
    bool prefix_for_adjancency = 64;
    // Prefix is for a PIC nexthop
    bool prefix_for_pic_next_hop = 65;
    // Purgable after the purge interval
    bool purgable_after_purge_interval = 66;
    // Broadcast receive flag
    bool broadcast_recive_flag = 67;
    // Broadcast forward flag
    bool broadcast_forward_flag = 68;
    // 0/0 route added as default route
    bool zero_by_zero_route_as_default = 69;
    // External switch function triggered
    bool external_switch_triggered = 70;
    // Route attributes summary flag
    bool route_attribute_flag = 71;
    // Dummy real zero route
    bool dummy_real_zero_route = 72;
    // The LDI LW flags
    uint32 ldi_lw_flag = 73;
    // The refcounter of LDI LW LDI
    uint32 ref_counter_of_ldi_lw_ldi = 74;
    // The type of LDI LW LDI
    uint32 type_of_ldi_lw_ldi = 75;
    // The LSPA flags
    uint32 lspa_flags = 76;
    // The version of the route
    uint64 version_of_route = 77;
    // Priority at which the route was downloaded
    uint32 fib_route_download_priority = 78;
    // The time of last update in msec
    uint64 time_of_last_update_in_msec = 79;
    // Is L2 Subscriber route
    bool l2_subscriber_route = 80;
    // XConnect-id associated with L2 subscriber
    uint32 l2_subscriber_x_connect_id = 81;
    // IP protocol associated with L2 subscriber
    uint32 l2_subscriber_ip_protocol = 82;
    // L2TPv3 cookie length for L2 subscriber
    uint32 l2_tpv3_cookie_length_bits = 83;
    // Route destined for Line Card that support External Reach only
    bool route_for_external_reach_linecard_flag = 84;
}

// FIB address
message fib_addr_str {
    // address
    string address = 1;
}

// mpls label stack information for FIB table entries
message fib_sh_tbl_mpls_label_stack {
    uint32 number_of_labels = 1;
    repeated uint32 l_stack = 2;
    string out_interface = 3;
    string nh_address = 4;
}

// mpls path information for FIB table entries
message fib_sh_tbl_path_mpls_info {
    uint32 local_lable = 1;
    bool recursive_fwd_chain = 2;
    bool recursive_out_label_valid = 3;
    uint32 recursive_out_lable = 4;
    uint32 number_of_igp_paths = 5;
    // RemoteBackupPath
    bool remote_backup = 6;
    repeated fib_sh_tbl_mpls_label_stack igp_label_stack_array = 7;
}

// Detailed IP Encap Header Description
message fib_sh_ipencap_hdr_det {
    // Header Type
    string ip_encap_hdr_type = 1;
    // Static Header
    bytes ip_encap_hdrp = 2;
    // Dynamic Header Fields
    uint32 ip_encap_hdr_dyn = 3;
}

// Detailed IP Encap Description
message fib_sh_ipencap_det {
    // Header Count
    uint32 ip_encap_hdr_count = 1;
    // IPEncap Object Locks
    uint32 ip_encap_locks = 2;
    // Transport Table
    uint32 ip_encap_transport_tbl = 3;
    // Transport VRF name
    string ipe_transport_vrf_name = 4;
    // Transport AF
    uint32 ip_encap_transport_af = 5;
    // Payload AF
    uint32 ip_encap_payload_af = 6;
    // Payload MTU
    uint32 ip_encap_payload_mtu = 7;
    // Pointer to parent
    uint32 ip_encap_parent = 8;
    // Parent type enumeration
    uint32 ip_encap_parent_type = 9;
    // Headers
    repeated fib_sh_ipencap_hdr_det ip_encap_hdrs = 10;
}

// Detailed path information for FIB table entries
message fib_sh_tbl_path_det {
    // IP address to recurse to
    string ip_address_to_recurse = 1;
    // Local label to recurse over
    uint32 label_to_recurse = 2;
    // Next hop prefix
    string detail_next_hop_prefix = 3;
    // Next hop mask length
    uint32 next_hop_mask_length = 4;
    // Interface associated with this path
    string interface_associated_path = 5;
    // Next hop interface
    string next_hop_interface = 6;
    // Next hop VRF
    bytes next_hop_vrf = 7;
    // Tunnel endpoint id
    uint32 tunnle_endpoint_id = 8;
    // LISP RLOC ID
    uint32 lisprlocid = 9;
    // No. of dependents for this path
    uint32 number_of_dependencies_this_path = 10;
    // Round robin reset value
    uint32 robin_reset_value = 11;
    // Is recursion object a leaf?
    bool recurse_prefix_object = 12;
    // Next prefix recursion in the path
    bytes next_prefix_recursion = 13;
    // Next prefix length
    uint32 next_prefix_length = 14;
    // Recursion has two leaves (e.g. implicit-null path)
    bool recurse_prefix_object2 = 15;
    // Next prefix2 recursion in the path
    bytes next_prefix_recursion2 = 16;
    // Next prefix2 length
    uint32 next_prefix_length2 = 17;
    // FIB entry adjacency type
    string detail_fib_adjacency_type = 18;
    // Current path flag
    bool current_path_flag = 19;
    // Recursive path information is available
    bool recursive_path_information = 20;
    // Path is an external adjacency
    bool external_adjacency = 21;
    // FIB Nhinfo type
    string fib_path_nh_information_type = 22;
    // FIB Nhinfo type special
    string fib_path_nh_information_type_special = 23;
    // Weight of the path
    uint32 weight_of_path = 24;
    // Tunnel class of the path
    uint32 tunnel_class = 25;
    // IP Encap
    repeated fib_sh_ipencap_det spd_ipencap = 26;
    // Tunnel is forward class
    bool tunnel_is_forward_class = 27;
}

// Brief path information for FIB table entries
message fib_sh_tbl_path {
    // Next entry in the path
    repeated fib_sh_tbl_path_item fib_sh_tbl_path = 1;
}

message fib_sh_tbl_path_item {
    // More detail about this path entry
    fib_sh_tbl_path_det more_detail_about_path = 1;
    // mpls info for this path entry
    fib_sh_tbl_path_mpls_info mpls_information_for_path = 2;
    // Hardware info
    bytes hardware_information = 3;
    // Interface handle
    string brief_interface_handle = 4;
    // Next hop prefix
    string brief_next_hop_prefix = 5;
    // Local label to recurse over
    uint32 via_label_to_recurse = 6;
    // P-node address
    string brief_pnode_address = 7;
    // Q-node address
    string brief_qnode_address = 8;
    // Resolved path
    bool resolved_path = 9;
    // Recursive path
    bool recursive_path = 10;
    // Packets received on this path
    bool packets_received_path = 11;
    // Attached path
    bool attached_path = 12;
    // Backup path
    bool backup_path = 13;
    // Best external path
    bool best_external_path = 14;
    // Is protection ignored
    bool protect_ignore = 15;
    // Is this the path used for DLB
    bool path_dlb = 16;
    // Path flags
    uint32 path_flags = 17;
    // Path Info flags
    uint32 path_info_flags = 18;
    // Path index
    uint32 path_index = 19;
    // Backup path index
    uint32 backup_index = 20;
    // Next Hop Index
    uint32 next_hop_index = 21;
    // Parent Interface Handle
    string parent_interface_handle = 22;
    // recursion via /N constraint
    uint32 recursion_via_len = 23;
}

// Internal load sharing information arrays for FIB table entries
message fib_sh_tbl_loadinfo_int {
    // level of ldis
    uint32 level_ofldis = 1;
    // no. of ldis
    uint32 number_of_ldis = 2;
    // Maximum index of the arrays
    uint32 maximum_index_arrays = 3;
    // Path indices
    bytes path_indices = 4;
    // Path indices
    bytes path_ldi_numbers = 5;
    // Sanity flag
    repeated bool sanity_flag = 6;
    // Adjacency address
    repeated fib_addr_str adjacency_address = 7;
    // Interface handle
    repeated string interface_handle = 8;
    // Maximum slots
    uint32 maximum_slots = 9;
    // Weights of paths
    repeated uint32 weights_of_paths = 10;
    // Normalized weights
    bytes normalized_weights = 11;
    // Tunnel class value
    bytes tunnel_class_value = 12;
    // PBTS info valid flag
    bool is_pbts_info_valid = 13;
    // PBTS class offset
    bytes pbts_class_offset = 14;
    // PBTS class num paths
    bytes pbts_class_num_paths = 15;
    // Does PBTS class fall back to drop or any class
    repeated bool pbts_class_is_fallback_mapped = 16;
    // PBTS class falls back to class
    bytes pbts_fallback_mapped_class = 17;
    // PBTS class falls back to drop
    repeated bool pbts_fallback_to_drop = 18;
    // Round Robin Disable
    bool round_robin_disable = 19;
    // Number of LDI next hop buckets
    uint32 ldi_next_hop_buckets = 20;
    // Platform Hardware info
    bytes platform_hardware_information = 21;
    // Tunnel is forward class
    repeated bool tunnel_is_forward_class = 22;
}

// Detailed load sharing information for FIB table entries
message fib_sh_tbl_loadinfo_det {
    // Packets through this loadinfo
    uint64 packets_through_load_information = 1;
    // Bytes through this loadinfo
    uint64 bytes_through_load_information = 2;
    // Total packets through this loadinfo
    uint64 total_packets_through_load_information = 3;
    // Total bytes through this loadinfo
    uint64 total_bytes_through_load_information = 4;
    // Prefix of the owner
    uint32 prefix_of_owner = 5;
    // Mask length of the owner
    uint32 mask_length_of_owner = 6;
    // Loadinfo reference count
    uint32 load_information_reference_count = 7;
    // Per destination load sharing flag
    bool per_dest_load_sharing_flag = 8;
    // Loadinfo owner deleted flag
    bool load_information_owner_deleted_flag = 9;
    // Loadinfo sanity flag
    bool loadinfo_sanity_flag = 10;
    // Owner flag
    bool is_owner = 11;
    // Loadinfo internal data
    fib_sh_tbl_loadinfo_int load_informtion_internal_data = 12;
}

// Detailed FIB table entry information
message fib_sh_tbl_fib_det {
    // FIB entry version number
    uint32 fib_entry_version = 1;
    // Per Prefix Accounting
    uint32 per_prefix_accounting = 2;
    // Load sharing type
    string load_sharing_type = 3;
    // FIB entry adjacency type
    string fib_entry_adjacency_type = 4;
    // FIB Protocol type
    uint32 fib_protocol_type = 5;
    // AFI FIB protocol type
    uint32 afi_fib_protocol_type = 6;
    // AIB L3 Address
    bytes aib_l3_address = 7;
    // ADJ ADDR LEN
    uint32 adjacency_address_length = 8;
    // ADJ IFH
    uint32 adjacency_interface = 9;
    // FIB Special NHINFO Type
    uint32 fib_special_nh_information_type = 10;
    // FIB entry adj address
    bytes fib_entry_adjacency_address = 11;
    // FIB entry adjacency interface
    uint32 fib_entry_adjacency_interface = 12;
    // Packets through this FIB entry
    uint64 packets_through_fib_entry = 13;
    // Bytes through this FIB entry
    uint64 bytes_through_fib_entry = 14;
    // Prefix length
    uint32 detailed_prefix_length = 15;
    // Prefix protocol
    uint32 prefix_protocol = 16;
    // Precedence for packets to this entry
    uint32 precedence_forpackets = 17;
    // Traffic index for packets to this entry
    uint32 traffic_index_for_packets = 18;
    // Switch function compontent ID
    uint32 switch_compontent_id = 19;
    // Fast adjacency flag
    bool fast_adjacency_flag = 20;
    // Illegal fast adjacency flag
    bool illegal_fast_adjacency_flag = 21;
    // Remote adjacency flag
    bool remote_adjacency_flag = 22;
    // Detailed Loadshare info
    fib_sh_tbl_loadinfo_det loadshare_information = 23;
    // BGP attribute id
    uint32 bgp_attribute_id = 24;
    // BGP local attribute id
    uint32 bgp_local_attribute_id = 25;
    // BGP attribute origin as
    uint32 bgp_attribute_origin_as = 26;
    // BGP attribute next hop as
    uint32 bgp_attribute_next_hop_as = 27;
    // As path string
    bytes path_string = 28;
    // extcom st
    bytes extcom_string = 29;
    // com st
    bytes com_string = 30;
    // extended community
    uint32 extended_community = 31;
    // qos group
    uint32 qos_group = 32;
    // mpls fec
    uint32 mpls_fec = 33;
    // qppb QOS group and IP precedence
    uint32 qppb_qos_group_and_ip_precedence = 34;
    // PBR flow-tag
    uint32 flow_tag = 35;
    // SPP forwarding class ID
    uint32 forward_class = 36;
    // The time of last update for PL in msec
    uint64 pl_time_of_last_update_in_msec = 37;
    // The time of last update for LDI in msec
    uint64 ldi_time_of_last_update_in_msec = 38;
    // The time of last update for LW-LDI in msec
    uint64 lwldi_time_of_last_update_in_msec = 39;
    // The type of time-stamp on PL
    uint32 pl_time_stamp_type = 40;
}

