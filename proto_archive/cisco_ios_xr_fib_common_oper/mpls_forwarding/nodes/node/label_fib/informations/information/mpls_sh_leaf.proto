// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_fib_common_oper.mpls_forwarding.nodes.node.label_fib.informations.information;

// Information about label leaf
message mpls_sh_leaf_KEYS {
    string node_name = 1;
    uint32 label_value = 2;
    string eos = 3;
}

message mpls_sh_leaf {
    // Local label
    uint32 leaf_local_label = 50;
    // EOS bit
    uint32 eos_bit = 51;
    // Label-infos in FIB leaf
    repeated mpls_adj_info label_information = 52;
    // LDI-info in FIB leaf
    mpls_ldi_info ldi_information = 53;
    // Hardware info
    bytes hardware_information = 54;
    // Number of references to the leaf
    uint32 leaf_referance_count = 55;
    // The leaf flags
    uint32 leaf_flags = 56;
    // Number of references to the pathlist
    uint32 path_list_referance_count = 57;
    // The pathlist flags
    uint32 path_list_flags = 58;
    // Number of references to the LDI
    uint32 ldi_referance_count = 59;
    // The LDI flags
    uint32 ldi_flags = 60;
    // The LDI type
    uint32 ldi_type = 61;
    // The pointer to the LDI
    uint32 ldi_pointer = 62;
    // The LW-LDI type
    uint32 lw_ldi_type = 63;
    // The pointer to the LW-LDI
    uint32 lw_ldi_pointer = 64;
    // The LW-LDI refcounter
    uint32 lw_ldi_refernace_count = 65;
    // The pointer to the shared LDI in LW-LDI
    uint32 lw_shared_ldi_pointer = 66;
    // The LSPA flags
    uint32 lspa_flags = 67;
    // The AFI table ID
    uint32 afi_table_id = 68;
    // The unicast or multicast label
    bool multicast_label = 69;
    // The multicast info
    mpls_mcast_info multicast_information = 70;
    // The time of last update in msec
    uint64 leaf_time_in_milli_seconds = 71;
}

message mpls_fwd_info {
    // L3 MTU
    uint32 l3_mtu = 1;
    // Total encapsulation size: L2 + MPLS
    uint32 total_encapsulation_size = 2;
    // Length of L2 encapsulation
    uint32 mac_size = 3;
    // Label stack
    repeated uint32 label_stack = 4;
    // Number of packets switched
    uint64 transmit_number_of_packets_switched = 5;
    // Number of Bytes switched
    uint64 transmit_number_of_bytes_switched = 6;
    // Status
    sint32 status = 7;
    // Next hop interface
    string next_hop_interface = 8;
    // The address family (V4/V6) 
    string next_hop_protocol = 9;
    // Next hop address in string format
    string next_hop_string = 10;
}

message mpls_adj_info {
    // Label-Info type
    uint32 label_information_type = 1;
    // Local label
    uint32 local_label = 2;
    // Outgoing label
    uint32 outgoing_label = 3;
    // MPLS Adjacency flags
    uint32 mpls_adjacency_flags = 4;
    // Tunnel id present?
    bool tunnel_id_present = 5;
    // Outgoing interface
    string outgoing_interface = 6;
    // Outgoing Physical Interface
    string outgoing_physical_interface = 7;
    // Tunnel Interface
    string tunnel_interface = 8;
    // Detail label info
    mpls_fwd_info label_information_detail = 9;
    uint32 label_information_path_index = 10;
    // NHinfo Type
    string label_information_next_hop_type = 11;
    // The address family (v4/v6) 
    string label_information_next_hop_protocol = 12;
    // Bytes transmitted per LSP
    uint64 tx_bytes = 13;
    // Packets transmitted per LSP
    uint64 tx_packets = 14;
    // Output Interface in string format
    string outgoing_interface_string = 15;
    // Output Label in string format
    string outgoing_label_string = 16;
    // Prefix Or ID
    string prefix_or_id = 17;
    // Next hop address in string format
    string label_information_next_hop_string = 18;
    // The version of the route
    uint64 label_information_route_version = 19;
    // The time of last update in msec
    uint64 label_information_time_in_milli_seconds = 20;
}

// Detailed load sharing information for mpls table entries
message mpls_ldi_info {
    // Hardware info
    bytes ldi_hardware_information = 1;
}

// Information for mpls multicast entries
message mpls_mcast_info {
    // MOL base flags
    uint32 multicast_mol_base_flags = 1;
    // MOL flags
    uint32 multicast_mol_flags = 2;
    // MOL refcount
    uint32 multicast_mol_referance_count = 3;
    // multicast mpls tunnel
    string multicast_tunnel_interface_handler = 4;
    // multicast mpls P2MP-TE tunnel id or MLDP Tunnel LSMID on all nodes
    uint32 multicast_tunnel_id = 5;
    // multicast nhinfo for p2mp TE Head
    uint32 multicast_tunnel_next_hop_information = 6;
    // multicast LSPVIF for MLDP Tunnels
    uint32 multicast_tunnel_lspvif = 7;
    // num multicast mpls output paths 
    uint32 multicast_mpls_output_paths = 8;
    // num multicast mpls prot output paths 
    uint32 multicast_mpls_protocol_output_paths = 9;
    // num multicast mpls local output paths
    uint32 multicast_mpls_local_output_paths = 10;
    // The multicast RPF-ID 
    uint32 multicast_rpf_id = 11;
    // The multicast ENCAP-ID 
    uint32 multicast_encap_id = 12;
    // The multicast platform data len
    uint32 multicast_platform_data_length = 13;
    // The multicast platform data
    bytes multicast_platform_data = 14;
}

