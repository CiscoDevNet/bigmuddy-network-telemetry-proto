// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.topology_levels.topology_level.ipv4_link_topologies.ipv4_link_topology;

// IPv4 IS Link Topology Entry
message isis_sh_ipv4_topo_entry_KEYS {
    string instance_name = 1;
    string af_name = 2;
    string saf_name = 3;
    string topology_name = 4;
    string level = 5;
    string system_id = 6;
}

message isis_sh_ipv4_topo_entry {
    // Source Address
    string source_address = 50;
    // Does the IS participate in the topology?
    bool is_participant = 51;
    // Is the IS overloaded?
    bool is_overloaded = 52;
    // Is the IS attached?
    bool is_attached = 53;
    // Is the IS reachable, and, if so, its status within the SPT
    isis_sh_ipv4_topo_reachable_status reachability_status = 54;
    // Per-priority counts of prefix items advertised by the IS
    isis_per_priority_counts advertised_prefix_item_counts = 55;
}

message isis_node_id_type {
    string value = 1;
}

message isis_snpa_type {
    string value = 1;
}

// Per-priority counts
message isis_per_priority_counts {
    // Critical priority
    uint32 critical = 1;
    // High priority
    uint32 high = 2;
    // Medium priority
    uint32 medium = 3;
    // Low priority
    uint32 low = 4;
}

// OSPF Repair Element
message isis_sh_rep_el {
    // RepairElementNodeID
    string repair_element_node_id = 1;
    // RepairIPv4Addr
    string repair_ipv4_addr = 2;
    // RepairIPv6Addr
    string repair_ipv6_addr = 3;
    // Repair Label
    uint32 repair_label = 4;
    // Repair Element Type
    uint32 repair_element_type = 5;
}

// FRR backup path
message isis_sh_ipv4_frr_backup {
    // Next hop neighbor ID
    string neighbor_id = 1;
    // Interface to send the packet out of
    string egress_interface = 2;
    // Next hop neighbor's forwarding address
    string neighbor_address = 3;
    // Tunnel Interface to send the packet out of
    string tunnel_egress_interface = 4;
    // Next hop neighbor's SNPA
    isis_snpa_type neighbor_snpa = 5;
    // Remote LFA PQ Node's ID
    string remote_lfa_system_id = 6;
    // Remote LFA Router ID
    string remote_lfa_router_id = 7;
    // Remote LFA PQ Node's ID
    string remote_lfa_system_pid = 8;
    // Remote LFA Router ID
    string remote_lfa_router_pid = 9;
    // Distance to the network via this backup path
    uint32 total_backup_distance = 10;
    // Segment routing sid value received from first hop
    uint32 segment_routing_sid_value = 11;
    // Number of SIDs in TI-LFA/rLFA
    uint32 num_sid = 12;
    // Segment routing sid values for TI-LFA/rLFA
    repeated uint32 segment_routing_sid_values = 13;
    // Backup Repair List Size
    uint32 backup_repair_list_size = 14;
    // Ti LFA computation which provided backup path
    string tilfa_computation = 15;
    // Backup Repair List
    repeated isis_sh_rep_el backup_repair_list = 16;
    // Is the backup path via downstream node?
    bool is_downstream = 17;
    // Is the backup path line card disjoint with primary?
    bool is_lc_disjoint = 18;
    // Is the backup path node protecting?
    bool is_node_protecting = 19;
    // Is the backup path an ECMP to the network?
    bool is_primary_path = 20;
    // Is the backup path SRLG disjoint with primary?
    bool is_srlg_disjoint = 21;
    // Is the backup path via a Remote LFA?
    bool is_remote_lfa = 22;
    // Is the backup path via a TI-LFA?
    bool is_epcfrr_lfa = 23;
    // Is SR TE tunnel requested
    bool is_tunnel_requested = 24;
    // Weight configured on the interface
    uint32 weight = 25;
}

// IPv4 path to a destination
message isis_sh_ipv4_path {
    // Next hop neighbor ID
    string neighbor_id = 1;
    // Interface to send the packet out of
    string egress_interface = 2;
    // Next hop neighbor's forwarding address
    string neighbor_address = 3;
    // Next hop neighbor's SNPA
    isis_snpa_type neighbor_snpa = 4;
    // Tag associated with the path
    uint32 tag = 5;
    // FRR backup for this path
    isis_sh_ipv4_frr_backup frr_backup = 6;
    // Uloop Explicit List
    repeated isis_sh_rep_el uloop_explicit_list = 7;
    // Explicit path tunnel interface
    string tunnel_interface = 8;
    // Segment routing sid value received from first hop
    uint32 segment_routing_sid_value = 9;
    // Weight configured on the interface
    uint32 weight = 10;
}

// SPT Neighbor
message isis_sh_topo_neighbor {
    // Neighbor ID
    string neighbor_id = 1;
    // Pseudonode between system and its neighbor
    isis_node_id_type intermediate_pseudonode = 2;
}

// Status of a reachable IPv4 IS
message isis_sh_ipv4_topo_reachable_details {
    // Distance to the IS
    uint32 root_distance = 1;
    // Distance to the IS
    uint32 multicast_root_distance = 2;
    // First hops towards the IS
    repeated isis_sh_ipv4_path paths = 3;
    // Multicast intact first hops towards the IS
    repeated isis_sh_ipv4_path multicast_paths = 4;
    // Parents of the IS within the SPT
    repeated isis_sh_topo_neighbor parents = 5;
    // Children of the IS within the SPT
    repeated isis_sh_topo_neighbor children = 6;
}

// Reachability status of an IPv4 IS
message isis_sh_ipv4_topo_reachable_status {
    string reachable_status = 1;
    // Status of the IS within the SPT
    isis_sh_ipv4_topo_reachable_details reachable_details = 2;
}

