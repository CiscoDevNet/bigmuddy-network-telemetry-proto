// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status;

// IS-IS process NSR status
message isis_sh_nsr_status_global_KEYS {
    string instance_name = 1;
}

message isis_sh_nsr_status_global {
    // ISIS VM STATE
    uint32 isis_vm_state = 50;
    // ISIS NSR PEER STATUS
    nsr_status_gbl_type isis_nsr_peer = 51;
    // ISIS NSR Infra
    nsr_status_infra_type isis_nsr_infra = 52;
}

// Timestamp for an event
message isis_sh_timestamp_type {
    // Timestamp value (seconds)
    uint32 seconds = 1;
    // Timestamp value (nanoseconds)
    uint32 nano_seconds = 2;
}

message nsr_status_gen {
    uint32 my_nodeid = 1;
    uint32 my_process_id = 2;
    uint32 pm_issu_role = 3;
    uint32 pm_ha_role = 4;
    uint32 sysmgr_ha_role = 5;
    uint32 nsr_send_ready = 6;
    uint32 nsr_send_unready = 7;
    uint32 nsr_send_err = 8;
    uint32 nsr_recv_err = 9;
    uint32 retry_flag = 10;
    bool nsr_enabled = 11;
    bool nsr_configured = 12;
    bool nsf_configured = 13;
    bool failover = 14;
    bool lanid_req_needed = 15;
}

message nsr_status_ncd {
    uint32 vm_idx = 1;
    bool conn_up = 2;
    uint32 endp_hdl = 3;
    uint32 chksum = 4;
    uint32 send_seqnum = 5;
    uint32 recv_cnt = 6;
}

message nsr_status_pm {
    uint32 reg = 1;
    uint32 conn_cb = 2;
    uint32 disconn_cb = 3;
    bool conn_status = 4;
}

message nsr_status_ism {
    uint32 conn = 1;
    uint32 conn_cb = 2;
    uint32 disconn = 3;
    uint32 disconn_cb = 4;
    uint32 ha_opt = 5;
    uint32 ha_opt_cb = 6;
    uint32 wait_ready = 7;
    uint32 send_ready = 8;
    uint32 evt_rsp_cb = 9;
    uint32 reg_rsp_cb = 10;
    bool conn_status = 11;
}

message nsr_status_ds {
    uint32 conn = 1;
    isis_sh_timestamp_type conn_ts = 2;
    uint32 conn_cb = 3;
    isis_sh_timestamp_type conn_cb_ts = 4;
    uint32 pub = 5;
    isis_sh_timestamp_type pub_ts = 6;
    uint32 pub_cb = 7;
    isis_sh_timestamp_type pub_cb_ts = 8;
    uint32 reg = 9;
    isis_sh_timestamp_type reg_ts = 10;
    uint32 reg_cb = 11;
    isis_sh_timestamp_type reg_cb_ts = 12;
    uint32 unreg = 13;
    isis_sh_timestamp_type unreg_ts = 14;
    uint32 unreg_cb = 15;
    isis_sh_timestamp_type unreg_cb_ts = 16;
    uint32 disconn_cb = 17;
    isis_sh_timestamp_type disconn_cb_ts = 18;
    uint32 notify_cb = 19;
    isis_sh_timestamp_type notify_cb_ts = 20;
    bytes notify_peer = 21;
    repeated isis_sh_timestamp_type notify_peer_ts = 22;
    uint32 del_cb = 23;
    isis_sh_timestamp_type del_cb_ts = 24;
    uint32 remove_srv = 25;
    isis_sh_timestamp_type remove_srv_ts = 26;
    bool conn_status = 27;
    isis_sh_timestamp_type conn_status_ts = 28;
}

message nsr_status_nii_intf {
    bool exist = 1;
    bool brought_up = 2;
    bool retry_timer = 3;
    bool running = 4;
    bool has_adj = 5;
}

message nsr_status_te {
    uint32 enabled = 1;
    uint32 conn_up = 2;
    uint32 te_link_cb = 3;
    uint32 te_tunnel_cb = 4;
    uint32 adv_sync_data = 5;
    uint32 link_purge_time_on = 6;
    uint32 tunnel_purge_time_on = 7;
    uint32 has_info_from_te = 8;
}

message nsr_status_infra_type {
    nsr_status_gen gen = 1;
    repeated nsr_status_ncd ncd = 2;
    nsr_status_pm pm = 3;
    nsr_status_ism ism = 4;
    nsr_status_ds ds = 5;
    nsr_status_te te = 6;
    repeated nsr_status_nii_intf nii_idb = 7;
}

message nsr_status_gbl_type {
    repeated uint32 full_sync_achieved = 1;
    repeated uint32 man_sync_count = 2;
    repeated uint32 nsr_chg_count = 3;
    repeated bool uptime_valid = 4;
    repeated uint32 uptime = 5;
}

