// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_manageability_object_tracking_oper.object_tracking.track_type_ipv4_route;

message track_info___KEYS {
}

message track_info__ {
    repeated track_info___item track_info__ = 50;
}

message track_info___item {
    // Track Name
    string tracke_name = 1;
    // Track type
    string type = 2;
    // Track state
    bool track_state = 3;
    // State Change Counter
    uint32 state_change_counter = 4;
    // Seconds Last Change
    uint64 seconds_last_change = 5;
    // Track type information
    track_type_info_union track_type_info = 6;
    // boolean objects
    bool_track_info__ bool_tracks = 7;
    // Threshold objects
    threshold_track_info__ threshold_tracks = 8;
    // User specified threshold upper limit
    uint32 threshold_up = 9;
    // User specified threshold lower limit
    uint32 threshold_down = 10;
    // Tracking Interfaces
    interface_tracking_info__ tracking_interaces = 11;
    // Is the state change delay counter in progress
    delayed_state_status__ delayed = 12;
}

message bool_track_info__ {
    repeated bool_track_info___item bool_track_info__ = 1;
}

message bool_track_info___item {
    // Object Name
    string object_name = 1;
    // Track state
    bool track_state = 2;
    // Track object with Not
    bool with_not = 3;
}

message threshold_track_info__ {
    repeated threshold_track_info___item threshold_track_info__ = 1;
}

message threshold_track_info___item {
    // Object name
    string object_name = 1;
    // Track state. True means track is up; False means track is down.
    bool track_state = 2;
    // Weight is the number assigned to a track object. In case of a type threshold weight( i.e. weighted sum list), weight is asigned by User at the time of configuration. In case of a type threshold percentage (i.e. percentage based list), weight is internally computed by (1/N)x100, where N is the number of objects in the list.
    uint32 weight = 3;
}

message route_track_info__ {
    // Prefix
    uint32 prefix = 1;
    // Prefix Length
    uint32 prefix_length = 2;
    // VRF Name
    string vrf = 3;
    // Next Hop
    string next_hop = 4;
}

message intf_track_info__ {
    // Interface Name
    string interface_name = 1;
}

message interface_tracking_info__ {
    repeated interface_tracking_info___item interface_tracking_info__ = 1;
}

message interface_tracking_info___item {
    // Interface Name
    string interface_name = 1;
}

message rtr_track_info__ {
    // Op Id
    uint32 ipsla_op_id = 1;
    // Latest RTT
    uint32 rtt = 2;
    // Latest Return Code
    uint32 return_code = 3;
}

message bfdrtr_track_info__ {
    // Interface Name
    string interface_name = 1;
    // Destination Address
    uint32 destination_address = 2;
    // Rate
    uint32 rate = 3;
    // Debounce Count
    uint32 debounce_count = 4;
}

message track_type_info_union {
    string discriminant = 1;
    // track type interface info
    intf_track_info__ interface_tracks = 2;
    // track type route info
    route_track_info__ route_tracks = 3;
    // track type rtr info
    rtr_track_info__ ipsla_tracks = 4;
    // track type bfdrtr info
    bfdrtr_track_info__ bfd_tracks = 5;
}

message delayed_state_status__ {
    // The time remaining in seconds for the counter to trigger state change
    uint32 time_remaining = 1;
    // State the track will transition to. Track state. True means track is up; False means track is down.
    bool track_state = 2;
}

