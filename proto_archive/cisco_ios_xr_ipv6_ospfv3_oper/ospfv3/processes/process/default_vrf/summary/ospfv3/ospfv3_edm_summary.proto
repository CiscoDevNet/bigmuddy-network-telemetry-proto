// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.summary.ospfv3;

// OSPFv3 summary
message ospfv3_edm_summary_KEYS {
    string process_name = 1;
}

message ospfv3_edm_summary {
    // Router ID
    string router_id = 50;
    // If true, the process is running as stanby role
    bool is_role_standby = 51;
    // Role, V1/V2 Active/Standby
    uint32 role = 52;
    // If true, NSR is enabled
    bool is_nsr_enabled = 53;
    // Trigger RP Switchover on detectable process restart
    bool is_nsr_switchover_on_restart = 54;
    // Stalled Router ID 
    bool is_router_id_stalled = 55;
    // Opaque LSA capable 
    bool is_opaque_capable = 56;
    // If true, is an area border router
    bool is_area_border_router = 57;
    // If true, is an AS border router
    bool is_as_border_router = 58;
    // Redistribution metric 
    uint32 metric = 59;
    // If true, origin is by default 
    bool is_default_originated = 60;
    // If true, default always 
    bool is_default_always = 61;
    // Default metric 
    uint32 default_metric = 62;
    // Default metric type 
    string default_metric_type = 63;
    // Default tag 
    uint32 default_tag = 64;
    // If true, is a default policy 
    bool is_default_policy = 65;
    // Default policy name 
    string default_policy_name = 66;
    // Scheduling delay for SPF (ms)
    uint32 spf_start_time = 67;
    // Minimum delay time between SPF runs (ms)
    uint32 spf_hold_time = 68;
    // Maximum delay time between SPF runs (ms)
    uint32 spf_maximum_time = 69;
    // Initial LSA throttle delay (ms)
    uint32 lsa_start_time = 70;
    // Second delay before generating next LSA (ms)
    uint32 lsa_hold_time = 71;
    // Maximum delay before generating an LSA (ms)
    uint32 lsa_maximum_time = 72;
    // Minimum time between LSA regeneration (ms)
    uint32 minimum_lsa_interval = 73;
    // LSA refresh interval (sec)
    uint32 lsa_group_interval = 74;
    // LSA flood pacing timer (ms)
    uint32 lsa_flood_pacing_interval = 75;
    // LSA retransmission pacing timer (ms)
    uint32 lsa_retransmission_pacing_interval = 76;
    // Number of AS scope LSAs
    uint32 as_ls_as = 77;
    // Number of opaque LSAs
    uint32 opaque_ls_as = 78;
    // Sum of opaque LSA checksum
    uint32 opaque_lsa_checksum = 79;
    // Number of external and AS opaque LSAs with demand circut bit not set
    uint32 as_dc_bitless_ls_as = 80;
    // Number of external and AS opaque LSAs with do not age set 
    uint32 as_do_not_age_ls_as = 81;
    // Number of areas
    uint32 areas = 82;
    // Number of normal areas
    uint32 normal_areas = 83;
    // Number of stub and total stub areas
    uint32 stub_areas = 84;
    // Number of NSSA areas
    uint32 nssa_areas = 85;
    // Length of AS LSAs flood list
    uint32 as_lsa_flood_list_length = 86;
    // If true, grace restart is enabled 
    bool is_grace_restart_enabled = 87;
    //  Length of time since the last NSF (s)
    uint32 last_nsf_time = 88;
    // Grace time to resync 
    uint32 grace_resync_time = 89;
    // Maximum number of interfaces
    uint32 maximum_interfaces = 90;
    // Maximum number of paths
    uint32 maximum_paths = 91;
    // The number of redistributed prefixes allowed
    uint32 redistribution_limit = 92;
    // When the number of redistributed prefixes reaches this threshold, a warning message is issued 
    uint32 redistribution_threshold = 93;
    // If true, auto cost is enabled
    bool is_auto_cost = 94;
    // Reference Bandwdith
    uint32 reference_bandwidth = 95;
    // Domain ID information
    ospfv3_sh_domain_id domain_id = 96;
    // Stub Router Information
    repeated ospfv3_sh_stub_router stub_router = 97;
    // IPFRR-Tiebreakers list
    repeated ospf_sh_ipfrr_tb ipfrr_tiebreakers_list = 98;
    // Context name
    string context_name = 99;
    // If true, snmp trap is enabled
    bool snmp_trap_enabled = 100;
    // Graceful shutdown state
    string graceful_shutdown_state = 101;
}

// OSPFv3 time stamp
message ospfv3_edm_time {
    // Seconds 
    uint32 second = 1;
    // Nano seconds 
    uint32 nanosecond = 2;
}

// OSPFv3 Redistribution Information
message ospfv3_edm_redist {
    // Protocol name 
    string protocol_name = 1;
    // Process ID 
    string process_id = 2;
    bool red_metric_flag = 3;
    uint32 red_metric = 4;
    bool red_mtype_flag = 5;
    uint32 red_metric_type = 6;
    uint32 red_tag = 7;
    // Route policy name 
    string policy_name = 8;
}

// OSPF Domain ID
message ospfv3_sh_domain_id_entry {
    // Domain ID Type
    uint32 domain_id_type = 1;
    // Domain ID value
    bytes domain_id_value = 2;
}

// OSPF Domain ID entries
message ospfv3_sh_domain_id {
    // Primary Domain ID
    ospfv3_sh_domain_id_entry primary_domain_id = 1;
    // List of secondary domain IDs
    repeated ospfv3_sh_domain_id_entry secondary_domain_id_list = 2;
}

// OSPFv3 stub router trigger information
message ospfv3_sh_stub_router_trigger {
    // Stub Router Trigger type
    string trigger = 1;
    // If true, stub router is terminated when BGP converges
    bool wait_for_bgp = 2;
    // Reason for clearing stub router condition
    string unset_reason = 3;
    // Time (in seconds) to stay in stub router mode
    uint32 time = 4;
    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was cleared
    ospfv3_edm_time unset_time = 5;
    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated
    ospfv3_edm_time start_time = 6;
}

// OSPFv3 Stub Router Information
message ospfv3_sh_stub_router {
    // Stub router mode
    string mode = 1;
    // If true, stub router mode is active
    bool active = 2;
    // Remaining time (in seconds) in stub router mode
    uint32 remaining_time = 3;
    // Reason for entering stub router mode
    string set_reason = 4;
    // Reason for clearing stub router condition
    string unset_reason = 5;
    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was cleared
    ospfv3_edm_time unset_time = 6;
    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated
    ospfv3_edm_time start_time = 7;
    // If true, advertise maximum metric for stub links
    bool include_stub_links = 8;
    // Metric for summary LSAs in max-metric mode
    uint32 summary_lsa_metric = 9;
    // Metric for external LSAs in max-metric mode
    uint32 external_lsa_metric = 10;
    // Triggers for entering stub router mode
    repeated ospfv3_sh_stub_router_trigger triggers = 11;
    // Timestamp (relative to 1970/1/1 00:00) when ABR duties were resumed
    ospfv3_edm_time abr_resume_time = 12;
    // Reason for being in ABR off mode
    string abr_off_reason = 13;
}

// OSPF IPFRR Tiebreakers
message ospf_sh_ipfrr_tb {
    // Tiebreaker Type
    string tiebreaker_type = 1;
    // Tiebreaker Index
    uint32 tiebreaker_index = 2;
}

