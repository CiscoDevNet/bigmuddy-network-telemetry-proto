// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.default_vrf.areas.area.interface_table.interface;

// OSPFv3 interface information
message ospfv3_edm_interface_KEYS {
    string process_name = 1;
    uint32 area_id = 2;
    string interface_name = 3;
}

message ospfv3_edm_interface {
    // Interface state
    string interface_state = 50;
    // If true, line protocol is up 
    bool is_interface_line_up = 51;
    // If true, interface IP security is required 
    bool is_interface_ip_security_required = 52;
    // If true, interface IP security is active 
    bool is_interface_ip_security_active = 53;
    // Interface IPv6 address
    string interface_address = 54;
    // Interface number 
    uint32 interface_number = 55;
    // Interface router ID 
    string interface_router_id = 56;
    // Network type
    string network_type = 57;
    // Interface link cost
    uint32 interface_link_cost = 58;
    // If true, interface flood reduction is active 
    bool is_interface_flood_reduction = 59;
    // If true, configured as demand circuit 
    bool is_demand_circuit_configured = 60;
    // If true, interface running as demand circuit
    bool is_interface_demand_circuit = 61;
    // Number of LSAs with demand circuit bit not set for the area in which the interface is running
    uint32 interface_dc_bitless_ls_as = 62;
    // Interface transmission delay (sec)
    uint32 transmission_delay = 63;
    // Interface state
    string ospf_interface_state = 64;
    // Interface priority
    uint32 interface_priority = 65;
    // If true, designated router
    bool is_designated_router = 66;
    // Designated router ID
    string designated_router_id = 67;
    // Designated router interface address
    string designated_router_address = 68;
    // Backup designated router ID
    string backup_designated_router_id = 69;
    // Backup designated router interface address
    string backup_designated_router_address = 70;
    // The amount of time in seconds before flush timer for old network LSA expires 
    uint32 network_lsa_flush_timer = 71;
    // Filter is configured for out going LSAs 
    bool is_interface_lsa_filtered = 72;
    // Configured hello interval (s)
    uint32 hello_interval = 73;
    // Configured dead interval (s) 
    uint32 dead_interval = 74;
    // Configured wait interval (s) 
    uint32 wait_interval = 75;
    // Configured retransmit interval (s) 
    uint32 interface_retransmission_interval = 76;
    // Time until next Hello (s) 
    uint32 next_hello_time = 77;
    // Interface authentication spi 
    uint32 interface_authentication_spi = 78;
    // Interface authentication transmit 
    uint32 interface_authentication_transmit = 79;
    // If true, interface encryption is enabled 
    bool is_interface_encryption_enabled = 80;
    // If true prefix suppression is enabled
    bool is_prefix_suppress = 81;
    // Interface encryption spi
    uint32 interface_encryption_spi = 82;
    // Interface encryption transmitted 
    uint32 interface_encryption_transmitted = 83;
    // Interface encrypted authentication transmitted 
    uint32 interface_encrypted_authentication_transmitted = 84;
    // Information for neighbors on the interface
    repeated ospfv3_edm_interface_nbr interface_neighbor_list = 85;
    // Number of adjacent neighbors
    uint32 adjacent_neighbor = 86;
    // Active interface details 
    ospfv3_edm_interface_up active_interface = 87;
    // BFD information 
    ospfv3_edm_interface_bfd interface_bfd = 88;
    // Interface reference count 
    uint32 interface_references = 89;
    // If true, configured as LDP sync
    bool configured_ldp_sync = 90;
    // If true, interface LDP sync is achieved
    bool interface_ldp_sync = 91;
}

// OSPFv3 interface neighbor information
message ospfv3_edm_interface_nbr {
    // Neighbor router ID 
    string interface_neighbor_id = 1;
    // Cost of link to neighbor
    uint32 interface_neighbor_cost = 2;
    // If true, designated router is found 
    bool is_neighbor_dr = 3;
    // If true, backup designated router is found 
    bool is_neighbor_bdr = 4;
    // If true, hello is suppressed 
    bool is_hello_suppressed = 5;
}

// OSPFv3 interface up-only information
message ospfv3_edm_interface_up {
    // Wait time for DR/BDR selection (s)
    uint32 wait_time = 1;
    // Area scope LSAs flood index
    uint32 interface_area_flood_index = 2;
    // AS scope LSAs flood index 
    uint32 interface_as_flood_index = 3;
    // Interface flood link index 
    uint32 interface_link_flood_index = 4;
    // Flood queue length
    uint32 flood_queue_length = 5;
    // Next LSA to flood (Area scope)
    uint32 interface_area_next_flood = 6;
    // Index of next LSA to flood (Area scope) 
    uint32 interface_area_next_flood_index = 7;
    // Next LSA to flood (AS scope)
    uint32 interface_as_next_flood = 8;
    // Index of next LSA to flood (AS scope)
    uint32 interface_as_next_flood_index = 9;
    // Interface link next flood information 
    uint32 interface_link_next_flood = 10;
    // Interface link next information index 
    uint32 interface_link_next_index = 11;
    // Last flood scan length 
    uint32 flood_scan_length = 12;
    // Maximum flood length 
    uint32 maximum_flood_length = 13;
    // Last flood scan time (ms)
    uint32 last_flood_time = 14;
    // Maximum flood time (ms) 
    uint32 maximum_flood_time = 15;
    // Time until next flood pacing timer (ms) 
    uint32 interface_flood_pacing_timer = 16;
    // Total number of neighbors 
    uint32 interface_neighbors = 17;
    // Number of neighbors for which hellos are suppressed 
    uint32 suppressed_hellos = 18;
}

// Interface BFD information
message ospfv3_edm_interface_bfd {
    // BFD Enable Mode on the interface - Default/Strict
    uint32 bfd_intf_enable_mode = 1;
    // BFD interval (ms) 
    uint32 bfd_interval = 2;
    // BFD detection multiplier 
    uint32 bfd_detection_multiplier = 3;
}

