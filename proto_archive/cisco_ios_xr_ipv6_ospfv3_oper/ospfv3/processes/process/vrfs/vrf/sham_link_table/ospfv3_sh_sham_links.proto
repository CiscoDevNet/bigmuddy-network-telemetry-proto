// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.sham_link_table;

// OSPFv3 Sham Link
message ospfv3_sh_sham_links_KEYS {
    string process_name = 1;
    string vrf_name = 2;
}

message ospfv3_sh_sham_links {
    // Neighbor on other end of this sham link
    string sham_link_neighbor_id = 50;
    // Sham-link source
    string sham_link_source_address = 51;
    // Sham-link dest
    string sham_link_dest_address = 52;
    // OSPF interface state for the sham link
    string sham_link_state = 53;
    // If true, the link runs as demand circuit
    bool sham_link_demand_circuit = 54;
    // Number of LSA's with demand circuit bit not set
    uint32 sham_link_dc_bitless_lsa = 55;
    // Sham-link ifindex
    uint32 sham_link_ifindex = 56;
    // Area id
    string sham_link_area = 57;
    // Cost of the sham link
    uint32 sham_link_cost = 58;
    // Transmission delay in seconds
    uint32 sham_link_transmission_delay = 59;
    // Hello interval (s)
    uint32 sham_link_hello_interval = 60;
    // Dead interval (s)
    uint32 sham_link_dead_interval = 61;
    // Wait interval (s)
    uint32 sham_link_wait_interval = 62;
    // Retransmission interval (s)
    uint32 sham_link_retransmission_interval = 63;
    // Time until next hello (s)
    uint32 sham_link_next_hello = 64;
    // If true, interface is passive
    bool sham_link_passive = 65;
    // If true, sham link IP security is required 
    bool is_sham_link_ip_security_required = 66;
    // If true, Sham link IP security is active 
    bool is_sham_link_ip_security_active = 67;
    // If true, sham link authentication is enabled 
    bool is_sham_link_authentication_enabled = 68;
    // Sham link authentication spi 
    uint32 virtual_link_authentication_spi = 69;
    // Sham link authentication transmit 
    uint32 sham_link_authentication_transmit = 70;
    // If true, sham link encryption is enabled 
    bool is_sham_link_encryption_enabled = 71;
    // Sham link encryption spi
    uint32 sham_link_encryption_spi = 72;
    // Sham link encryption transmitted 
    uint32 sham_link_encryption_transmitted = 73;
    // Sham link encrypted authentication transmitted 
    uint32 sham_link_encrypted_authentication_transmitted = 74;
    // If true,  enabled
    bool sham_link_gr_enabled = 75;
    // If true, Gracefule restart in progress
    bool sham_link_gr = 76;
    // Time in seconds since last GR
    uint32 sham_link_last_gr = 77;
    // Neighbor information
    ospfv3_sh_slink_neighbor sham_link_neighbor = 78;
}

// OSPFv3 neighbor retransmission information
message ospfv3_edm_neighbor_retrans {
    // Number of database descriptor retransmissions during last exchange
    uint32 database_descriptor_retransmissions = 1;
    // Area scope LSA's flood index
    uint32 area_flood_index = 2;
    // AS scope LSA's flood index
    uint32 as_flood_index = 3;
    // Link flood index
    uint32 link_flood_index = 4;
    // Number of neighbor retransmissions 
    uint32 neighbor_retransmissions = 5;
    // Number of retransmissions for this neighbor
    uint32 retransmissions = 6;
    // First flood item for area scope LSAs
    uint32 area_first_flood = 7;
    // Index of the first flood item for area scope LSAs
    uint32 area_first_flood_index = 8;
    // First flood item for AS scope LSAs
    uint32 as_first_flood = 9;
    // Index for first flood item for AS scope LSAs
    uint32 as_first_flood_index = 10;
    // Link first flood information 
    uint32 link_first_flood = 11;
    // Link first flood information index
    uint32 link_first_flood_index = 12;
    // Next flood item for area scope LSAs
    uint32 area_next_flood = 13;
    // Index of next flood item for Area scope LSAs
    uint32 area_next_flood_index = 14;
    // Next flood item for AS scope LSAs
    uint32 as_next_flood = 15;
    // Index of next flood item for AS scope LSAs
    uint32 as_next_flood_index = 16;
    // Link next flood information 
    uint32 link_next_flood = 17;
    // Link next flood information index 
    uint32 link_next_flood_index = 18;
    // Number of LSAs sent in last retransmission
    uint32 last_retransmission_length = 19;
    // Maximum number of LSAs sent in a retransmission
    uint32 maximum_retransmission_length = 20;
    // Last retransmission scan time (ms)
    uint32 last_retransmission_time = 21;
    // Maximum retransmission scan time (ms)
    uint32 maximum_retransmission_time = 22;
    // Time until next LSA retransmission (ms)
    uint32 lsa_retransmission_timer = 23;
}

// Sham Link Neighbor Information
message ospfv3_sh_slink_neighbor {
    // If true Hellos suppressed
    bool sham_link_suppress_hello = 1;
    // Adjacency state
    string sham_link_state = 2;
    // Neighbor retransmission info
    ospfv3_edm_neighbor_retrans sham_link_retransmission = 3;
}

