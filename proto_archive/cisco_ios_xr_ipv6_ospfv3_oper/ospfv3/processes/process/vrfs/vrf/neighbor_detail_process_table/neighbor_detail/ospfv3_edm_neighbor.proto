// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.neighbor_detail_process_table.neighbor_detail;

// OSPFv3 neighbor summary information
message ospfv3_edm_neighbor_KEYS {
    string process_name = 1;
    string vrf_name = 2;
    string interface_name = 3;
    string neighbor_address = 4;
}

message ospfv3_edm_neighbor {
    // Neighbor IP Address
    string neighbor_address = 50;
    // Neighbor interface ID
    uint32 neighbor_interface_id = 51;
    // Neighbor's DR priority
    uint32 neighbor_dr_priority = 52;
    // Neighbor's state
    string neighbor_state = 53;
    // Designated router 
    string neighbor_designated_router = 54;
    // Time until neighbor's dead timer expires (seconds)
    uint32 neighbor_dead_timer = 55;
    // Amount of time since the adjacency is up (seconds)
    uint32 neighbor_up_time = 56;
    // Neighbor virtual link id 
    uint32 neighbor_virtual_link_id = 57;
    // If true, neighbor is on a virtual link 
    bool is_neighbor_virtual_link = 58;
    // Neighbor sham link id 
    uint32 neighbor_sham_link_id = 59;
    // If true, neighbor is on a sham link 
    bool is_neighbor_sham_link = 60;
    // Detailed OSPFv3 neighbor information 
    ospfv3_edm_neighbor_detail neighbor_detail = 61;
    // Neighbor BFD information
    ospfv3_edm_neighbor_bfd neighbor_bfd_info = 62;
}

// OSPFv3 neighbor retransmission information
message ospfv3_edm_neighbor_retrans {
    // Number of database descriptor retransmissions during last exchange
    uint32 database_descriptor_retransmissions = 1;
    // Area scope LSA's flood index
    uint32 area_flood_index = 2;
    // AS scope LSA's flood index
    uint32 as_flood_index = 3;
    // Link flood index
    uint32 link_flood_index = 4;
    // Number of neighbor retransmissions 
    uint32 neighbor_retransmissions = 5;
    // Number of retransmissions for this neighbor
    uint32 retransmissions = 6;
    // First flood item for area scope LSAs
    uint32 area_first_flood = 7;
    // Index of the first flood item for area scope LSAs
    uint32 area_first_flood_index = 8;
    // First flood item for AS scope LSAs
    uint32 as_first_flood = 9;
    // Index for first flood item for AS scope LSAs
    uint32 as_first_flood_index = 10;
    // Link first flood information 
    uint32 link_first_flood = 11;
    // Link first flood information index
    uint32 link_first_flood_index = 12;
    // Next flood item for area scope LSAs
    uint32 area_next_flood = 13;
    // Index of next flood item for Area scope LSAs
    uint32 area_next_flood_index = 14;
    // Next flood item for AS scope LSAs
    uint32 as_next_flood = 15;
    // Index of next flood item for AS scope LSAs
    uint32 as_next_flood_index = 16;
    // Link next flood information 
    uint32 link_next_flood = 17;
    // Link next flood information index 
    uint32 link_next_flood_index = 18;
    // Number of LSAs sent in last retransmission
    uint32 last_retransmission_length = 19;
    // Maximum number of LSAs sent in a retransmission
    uint32 maximum_retransmission_length = 20;
    // Last retransmission scan time (ms)
    uint32 last_retransmission_time = 21;
    // Maximum retransmission scan time (ms)
    uint32 maximum_retransmission_time = 22;
    // Time until next LSA retransmission (ms)
    uint32 lsa_retransmission_timer = 23;
}

// OSPFv3 Neighbor BFD information
message ospfv3_edm_neighbor_bfd {
    // BFD enable mode - Default/Strict
    uint32 bfd_intf_enable_mode = 1;
    // Status of the BFD Session
    uint32 bfd_status_flag = 2;
}

// Detailed OSPFv3 neighbor information
message ospfv3_edm_neighbor_detail {
    // Number of state changes 
    uint32 state_changes = 1;
    // Cost of path to this neighbor 
    uint32 neighbor_cost = 2;
    // If true, filter outgoing LSAs 
    bool is_neighbor_filtered = 3;
    // Address of designated router
    string neighbor_designated_router_address = 4;
    // Address of backup designated router
    string neighbor_backup_designated_router_address = 5;
    // Interface type
    string interface_type = 6;
    // Poll interval (s)
    uint32 poll_interval = 7;
    // For NBMA networks, amount of time remaining in seconds before the next poll interval expires and Hello is sent (s)
    uint32 next_poll_interval = 8;
    // Remaining time when ignore timer is running 
    uint32 neighbor_ignore_timer = 9;
    //  This is bitmask of neighbor's option field received 
    uint32 neighbor_option = 10;
    // Number of pending events 
    uint32 pending_events = 11;
    // Retransmission information with this neighbor
    ospfv3_edm_neighbor_retrans neighbor_retransmission = 12;
}

