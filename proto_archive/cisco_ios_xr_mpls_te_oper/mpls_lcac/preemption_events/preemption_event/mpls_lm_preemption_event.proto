// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_lcac.preemption_events.preemption_event;

// Preemption event info
message mpls_lm_preemption_event_KEYS {
    uint32 event_index = 1;
}

message mpls_lm_preemption_event {
    // Tunnel ID
    uint32 tunnel_id = 50;
    // LSP ID
    uint32 lsp_id = 51;
    // Source
    string source_address = 52;
    // Destination
    string destination_address = 53;
    // The path's requested bandwidth
    uint64 requested_bandwidth = 54;
    // The path's setup priority
    uint32 setup_priority = 55;
    // The path's hold priority
    uint32 hold_priority = 56;
    // The path's bandwidth type; 0:CT0, 1:CT1, so on
    uint32 bandwidth_type = 57;
    // Old BW for BC0
    uint64 old_bandwidth_bc0 = 58;
    // Old BW for BC1
    uint64 old_bandwidth_bc1 = 59;
    // New BW for BC0
    uint64 new_bandwidth_bc0 = 60;
    // New BW for BC1
    uint64 new_bandwidth_bc1 = 61;
    // BW Overshoot for BC0
    uint64 bandwidth_overshoot0 = 62;
    // BW Overshoot for BC1
    uint64 bandwidth_overshoot1 = 63;
    // Interface name
    string interface_name = 64;
    // Event time; seconds elapsed since January 1, 1970
    uint32 event_time = 65;
    // Number of LSPs (not all may be present in the list)
    uint32 ls_ps = 66;
    // Number of LSPs softly preempted
    uint32 soft_preempted_ls_ps = 67;
    // Number of LSPs softly preempted with traffic switched to backup
    uint32 soft_preempted_ls_ps_fr_rrewrite = 68;
    // Number of LSPs hardly preempted
    uint32 hard_preempted_ls_ps = 69;
    // Total amount of preempted class 0 bandwidth
    uint64 total_preempted_bandwidth_bc0 = 70;
    // Total amount of preempted class 1 bandwidth
    uint64 total_preempted_bandwidth_bc1 = 71;
    // Amount of softly preempted class 0 bandwidth
    uint64 softly_preempted_bandwidth_bc0 = 72;
    // Amount of softly preempted class 1 bandwidth
    uint64 softly_preempted_bandwidth_bc1 = 73;
    // Amount of softly preempted FRR RW class 0 bandwidth
    uint64 soft_preempted_fr_rrewrite_bandwidth_bc0 = 74;
    // Amount of softly preempted FRR RW class 1 bandwidth
    uint64 soft_preempted_fr_rrewrite_bandwidth_bc1 = 75;
    // Amount of hard preempted class 0 bandwidth
    uint64 hard_preempted_bandwidth_bc0 = 76;
    // Amount of hard preempted class 1 bandwidth
    uint64 hard_preempted_bandwidth_bc1 = 77;
    // List of preempted LSPs
    repeated mpls_lm_preempted_lsp lsp_list = 78;
    // Number of Tunnels
    uint32 tunnels = 79;
    // Number of Tunnels softly preempted
    uint32 soft_preempted_tunnels = 80;
    // Number of Tunnels softly preempted with traffic switched to backup
    uint32 soft_preempted_tunnels_fr_rrewrite = 81;
    // Number of Tunnels hardly preempted
    uint32 hard_preempted_tunnels = 82;
}

// HASI ID Event
message hasi_id_event {
    // LocalID
    uint64 local_id = 1;
    // RemoteID
    uint64 remore_id = 2;
    // Time
    uint32 time = 3;
    // Count
    uint64 count = 4;
}

// HASI Slave Object ID events
message hasi_s_obj_id_events {
    // Create
    hasi_id_event create = 1;
    // Updates
    hasi_id_event updates = 2;
    // ApplicationSyncs
    hasi_id_event application_syncs = 3;
    // ApplicationNaks
    hasi_id_event application_naks = 4;
    // SummaryReplaySyncs
    hasi_id_event summary_replay_syncs = 5;
    // SummaryReplayNaks
    hasi_id_event summary_replay_naks = 6;
    // CacheNakRetries
    hasi_id_event cache_nak_retries = 7;
}

// HASI Slave Object Context
message hasi_s_object_ctx {
    // ObjectSyncID
    uint64 object_sync_id = 1;
    // ObjectType
    uint32 object_type = 2;
    // ObjectIdEvents
    hasi_s_obj_id_events object_id_events = 3;
}

// HASI Master Slave ID Events
message hasi_m_id_events {
    // ApplicationSyncs
    hasi_id_event application_syncs = 1;
    // ImplicitDeletes
    hasi_id_event implicit_deletes = 2;
    // ApplicationNaks
    hasi_id_event application_naks = 3;
    // SummaryReplaySyncs
    hasi_id_event summary_replay_syncs = 4;
    // SummaryReplayNaks
    hasi_id_event summary_replay_naks = 5;
}

// HASI Master Object Client Info
message hasi_m_object_slave_info {
    // SlaveId
    uint32 slave_id = 1;
    // IdEvents
    hasi_m_id_events id_events = 2;
}

// HASI Master Object Context
message hasi_m_object_ctx {
    // ObjectSyncID
    uint64 object_sync_id = 1;
    // ObjectType
    uint32 object_type = 2;
    // Queue
    uint32 queue = 3;
    // CreateID
    uint64 create_id = 4;
    // CreateTime
    uint32 create_time = 5;
    // UpdateTime
    uint32 update_time = 6;
    // DeleteTime
    uint32 delete_time = 7;
    // DeleteContextLength
    uint32 delete_ctx_lenght = 8;
    // SlaveInformation
    repeated hasi_m_object_slave_info slave_information = 9;
    // HasHistory
    bool has_history = 10;
    // PreActiveHistory
    hasi_s_obj_id_events pre_active_history = 11;
}

// Preempted LSP info
message mpls_lm_preempted_lsp {
    // Tunnel ID
    uint32 tunnel_id = 1;
    // LSP ID
    uint32 lsp_id = 2;
    // Source
    string source_address = 3;
    // Destination
    string destination_address = 4;
    // The path's requested bandwidth
    uint64 requested_bandwidth = 5;
    // The path's setup priority
    uint32 setup_priority = 6;
    // The path's hold priority
    uint32 hold_priority = 7;
    // The path's bandwidth type; 0:BC0, 1:BC1, so on
    uint32 bandwidth_type = 8;
    // TRUE is the preemption is a soft preemption
    bool soft_preempted = 9;
    // If the soft preemption is underway, this value indicates the number of seconds before hard preemption is triggered
    uint32 soft_preemption_timeout = 10;
    // LSPs bandwidth is already preempted
    bool bandwidth_preempted = 11;
    // FRR-rewrite is done during soft preemption
    bool soft_preempted_fr_rrewrite = 12;
}

