// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.tunnel_flex_lsps.tunnel_flex_lsp;

// MPLS TE Flex LSP Information
message mpls_te_flex_lsp_KEYS {
    string c_type = 1;
    uint32 tunnel_id = 2;
    string tunnel_name = 3;
}

message mpls_te_flex_lsp {
    // Tunnel UP
    bool is_tunnel_up = 50;
    // Tunnel ID
    uint32 tun_id = 51;
    // Source
    string source_address = 52;
    // Destination
    string destination_address = 53;
    // Extended Tunnel ID
    string extended_tunnel_id = 54;
    //  Working LSP info
    mpls_te_flex_lsp_lsp working_lsp = 55;
    //  Protect LSP info
    mpls_te_flex_lsp_lsp protect_lsp = 56;
}

// RSVP ERO IPV4 subobject
message rsvp_mgmt_ero_ipv4_subobj {
    // ERO Entry Is Strict
    bool is_strict_route = 1;
    // The ERO IPV4 Address
    string ero_address = 2;
    // ERO Prefix Length
    uint32 prefix_length = 3;
}

// RSVP ERO UNNUM subobject
message rsvp_mgmt_ero_unnum_subobj {
    // ERO Entry Is Strict
    bool is_strict_route = 1;
    // The Interface ID in ERO
    uint32 ero_interface_id = 2;
    // The Router ID in ERO
    string ero_router_id = 3;
    // Status of ERO
    string status = 4;
}

// Union of the different RSVP ERO types
message rsvp_mgmt_ero_subobj {
    string ero_type = 1;
    // IPV4 ERO Sub Object
    rsvp_mgmt_ero_ipv4_subobj ipv4_ero_sub_object = 2;
    // Unnumbered ERO Sub Object
    rsvp_mgmt_ero_unnum_subobj unnumbered_ero_sub_object = 3;
}

// A sub-LSP FEC
message te_s2l_fec_t {
    // sub-LSP subgroup ID
    uint32 s2_l_fec_subgroup_id = 1;
    // LSP ID
    uint32 s2_l_fec_lsp_id = 2;
    // Tunnel ID
    uint32 s2_l_fec_tunnel_id = 3;
    // Extended tunnel ID
    string s2_l_fec_extended_tunnel_id = 4;
    // LSP source address
    string s2_l_fec_source = 5;
    // sub-LSP destination address
    string s2_l_fec_dest = 6;
    // P2MP ID
    uint32 s2_l_fec_p2_mp_id = 7;
    // Subgroup Originator
    string s2_l_fec_subgroup_originator = 8;
    // Session identifier (ctype)
    string s2_l_fec_c_type = 9;
    // VRF; currently only for GMPLS tunnels
    string s2_l_fec_vrf = 10;
}

// C-type-specific LSP FEC data
message te_lsp_fec_ctype_data_t {
    string fec_c_type = 1;
    // P2P LSP destination
    string p2_p_lsp_destination = 2;
    // P2MP ID
    uint32 fec_destination_p2_mp_id = 3;
}

// A LSP FEC
message te_lsp_fec_t {
    // LSP ID
    uint32 fec_lsp_id = 1;
    // Tunnel ID
    uint32 fec_tunnel_id = 2;
    // Extended tunnel ID
    string fec_extended_tunnel_id = 3;
    // Tunnel source address
    string fec_source = 4;
    // Destination or P2MP ID
    te_lsp_fec_ctype_data_t fec_destination_info = 5;
    // VRF; currently only for GMPLS tunnels
    string fec_vrf = 6;
}

// TE Association Object
message mpls_te_s2l_association_object {
    // S2L Association Type (draft-ietf-ccamp-mpls-tp-rsvpte-ext-associated-lsp)
    uint32 s2_l_association_type = 1;
    // S2L Association Tie Role
    string s2_l_association_tie_role = 2;
    // S2L Association ID
    uint32 s2_l_association_id = 3;
    // S2L Association Source
    string s2_l_association_source = 4;
    // S2L Global Source
    uint32 s2_l_global_source = 5;
    // S2L Extended ID Array
    repeated uint32 s2_l_extended_id = 6;
}

// TE Protection Object
message mpls_te_s2l_protection_object {
    //  S2L Protection Secondary Bit
    bool s2_l_secondary = 1;
    //  S2L Protection Protecting Bit
    bool s2_l_protecting = 2;
    //  S2L Protection Notification Bit
    bool s2_l_notification = 3;
    //  S2L Protection Operational Bit
    bool s2_l_operational = 4;
    // Indicates Enhanced Protection Scheme
    bool enhanced = 5;
    // Dedicated 1+1 Protection
    bool ded1_plus1 = 6;
    // Dedicated 1:1 Protection
    bool ded1_to1 = 7;
    // Shared Link Layer Protection
    bool shared = 8;
    // LSP should not use any Link Layer Protection
    bool link_unprotected = 9;
    // LSP should use Links that are protecting other (primary) traffic
    bool extra_traffic = 10;
    // Any
    bool any = 11;
    // Full Rerouting
    bool rerouting = 12;
    // Rerouting Without Extra-Traffic
    bool rerouting_no_et = 13;
    // 1:N Protection with Extra-Traffic
    bool one_to_n_protection_et = 14;
    // 1+1 Unidirectional Protection
    bool one_plus_one_uni = 15;
    // 1+1 Bidirectional Protection
    bool one_plus_one_bi = 16;
    // LSP Flags Unprotected
    bool lsp_unprotected = 17;
}

// Information about flex LSP lockout info for the link
message flex_lockout_t {
    // True if s2l is locked out
    bool is_lockout = 1;
    // Flex LSP Lockout Origination Source
    string origination = 2;
    // The timestamp when the lockout is set
    uint32 lockout_timestamp = 3;
}

// TE Per-S2L FlexLSP Information
message mpls_te_s2l_flex_info {
    // FlexLSP Entry Exists
    bool entry_exists = 1;
    // In Label
    uint32 in_label = 2;
    // GAL BFD Session Created
    bool bfd_created = 3;
    // GAL BFD Session Up
    bool bfd_up = 4;
    // OAM Entry Created
    bool oam_created = 5;
    // FEC for the FlexLSP Entry
    te_s2l_fec_t flex_fec = 6;
    // BFD Next Hop
    string bfd_next_hop = 7;
    // BFD Tunnel Interface Handle
    string bfd_tun_ifh = 8;
    // BFD Out Interface Handle
    string bfd_out_ifh = 9;
    // BFD Internal Label
    uint32 bfd_int_label = 10;
    // BFD Egress Label
    uint32 bfd_egress_label = 11;
    // Fault LDI Lockout
    bool fault_ldi_lockout = 12;
    // Fault LDI
    bool fault_ldi = 13;
    // Fault LKR
    bool fault_lkr = 14;
    // Fault AIS
    bool fault_ais = 15;
    // Fault Time
    uint32 fault_time = 16;
    // Flex LSP Lockout Info
    flex_lockout_t lockout = 17;
}

// MPLS TE Flex LSP Reverse LSP information
message mpls_te_flex_lsp_rev_lsp {
    // Reverse Associated Bidir LSP Present
    bool reverse_lsp_present = 1;
    // Reverse Associated Bidir LSP Connected
    bool reverse_lsp_connected = 2;
    // Reverse Associated Bidir LSP FEC
    te_lsp_fec_t reverse_lsp_fec = 3;
    // Association Object
    mpls_te_s2l_association_object association = 4;
    // Protection Object
    mpls_te_s2l_protection_object protection = 5;
}

// MPLS TE FLEX LSP Information
message mpls_te_flex_lsp_lsp {
    // Operational
    bool is_operational = 1;
    // LSP Uptime
    uint32 lsp_uptime = 2;
    // LSP ID 
    uint32 path_protection_lsp_id = 3;
    // LSP mode
    string lsp_mode = 4;
    // Local label 
    uint32 lsp_local_label = 5;
    // Output interface of LSP
    string lsp_output_interface = 6;
    // Output label of the LSP
    uint32 lsp_output_label = 7;
    // Path used by LSP
    repeated rsvp_mgmt_ero_subobj lsp_hop = 8;
    // LSP State
    string lsp_state = 9;
    // Flex Info
    mpls_te_s2l_flex_info flex_info = 10;
    // Association Object
    mpls_te_s2l_association_object association = 11;
    // Protection Object
    mpls_te_s2l_protection_object protection = 12;
    // Reverse LSP information
    mpls_te_flex_lsp_rev_lsp reverse_lsp = 13;
}

