//                                 Apache License
//                           Version 2.0, January 2004
//                        http://www.apache.org/licenses/
//
//   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//
//   1. Definitions.
//
//      "License" shall mean the terms and conditions for use, reproduction,
//      and distribution as defined by Sections 1 through 9 of this document.
//
//      "Licensor" shall mean the copyright owner or entity authorized by
//      the copyright owner that is granting the License.
//
//      "Legal Entity" shall mean the union of the acting entity and all
//      other entities that control, are controlled by, or are under common
//      control with that entity. For the purposes of this definition,
//      "control" means (i) the power, direct or indirect, to cause the
//      direction or management of such entity, whether by contract or
//      otherwise, or (ii) ownership of fifty percent (50%) or more of the
//      outstanding shares, or (iii) beneficial ownership of such entity.
//
//      "You" (or "Your") shall mean an individual or Legal Entity
//      exercising permissions granted by this License.
//
//      "Source" form shall mean the preferred form for making modifications,
//      including but not limited to software source code, documentation
//      source, and configuration files.
//
//      "Object" form shall mean any form resulting from mechanical
//      transformation or translation of a Source form, including but
//      not limited to compiled object code, generated documentation,
//      and conversions to other media types.
//
//      "Work" shall mean the work of authorship, whether in Source or
//      Object form, made available under the License, as indicated by a
//      copyright notice that is included in or attached to the work
//      (an example is provided in the Appendix below).
//
//      "Derivative Works" shall mean any work, whether in Source or Object
//      form, that is based on (or derived from) the Work and for which the
//      editorial revisions, annotations, elaborations, or other modifications
//      represent, as a whole, an original work of authorship. For the purposes
//      of this License, Derivative Works shall not include works that remain
//      separable from, or merely link (or bind by name) to the interfaces of,
//      the Work and Derivative Works thereof.
//
//      "Contribution" shall mean any work of authorship, including
//      the original version of the Work and any modifications or additions
//      to that Work or Derivative Works thereof, that is intentionally
//      submitted to Licensor for inclusion in the Work by the copyright owner
//      or by an individual or Legal Entity authorized to submit on behalf of
//      the copyright owner. For the purposes of this definition, "submitted"
//      means any form of electronic, verbal, or written communication sent
//      to the Licensor or its representatives, including but not limited to
//      communication on electronic mailing lists, source code control systems,
//      and issue tracking systems that are managed by, or on behalf of, the
//      Licensor for the purpose of discussing and improving the Work, but
//      excluding communication that is conspicuously marked or otherwise
//      designated in writing by the copyright owner as "Not a Contribution."
//
//      "Contributor" shall mean Licensor and any individual or Legal Entity
//      on behalf of whom a Contribution has been received by Licensor and
//      subsequently incorporated within the Work.
//
//   2. Grant of Copyright License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      copyright license to reproduce, prepare Derivative Works of,
//      publicly display, publicly perform, sublicense, and distribute the
//      Work and such Derivative Works in Source or Object form.
//
//   3. Grant of Patent License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      (except as stated in this section) patent license to make, have made,
//      use, offer to sell, sell, import, and otherwise transfer the Work,
//      where such license applies only to those patent claims licensable
//      by such Contributor that are necessarily infringed by their
//      Contribution(s) alone or by combination of their Contribution(s)
//      with the Work to which such Contribution(s) was submitted. If You
//      institute patent litigation against any entity (including a
//      cross-claim or counterclaim in a lawsuit) alleging that the Work
//      or a Contribution incorporated within the Work constitutes direct
//      or contributory patent infringement, then any patent licenses
//      granted to You under this License for that Work shall terminate
//      as of the date such litigation is filed.
//
//   4. Redistribution. You may reproduce and distribute copies of the
//      Work or Derivative Works thereof in any medium, with or without
//      modifications, and in Source or Object form, provided that You
//      meet the following conditions:
//
//      (a) You must give any other recipients of the Work or
//          Derivative Works a copy of this License; and
//
//      (b) You must cause any modified files to carry prominent notices
//          stating that You changed the files; and
//
//      (c) You must retain, in the Source form of any Derivative Works
//          that You distribute, all copyright, patent, trademark, and
//          attribution notices from the Source form of the Work,
//          excluding those notices that do not pertain to any part of
//          the Derivative Works; and
//
//      (d) If the Work includes a "NOTICE" text file as part of its
//          distribution, then any Derivative Works that You distribute must
//          include a readable copy of the attribution notices contained
//          within such NOTICE file, excluding those notices that do not
//          pertain to any part of the Derivative Works, in at least one
//          of the following places: within a NOTICE text file distributed
//          as part of the Derivative Works; within the Source form or
//          documentation, if provided along with the Derivative Works; or,
//          within a display generated by the Derivative Works, if and
//          wherever such third-party notices normally appear. The contents
//          of the NOTICE file are for informational purposes only and
//          do not modify the License. You may add Your own attribution
//          notices within Derivative Works that You distribute, alongside
//          or as an addendum to the NOTICE text from the Work, provided
//          that such additional attribution notices cannot be construed
//          as modifying the License.
//
//      You may add Your own copyright statement to Your modifications and
//      may provide additional or different license terms and conditions
//      for use, reproduction, or distribution of Your modifications, or
//      for any such Derivative Works as a whole, provided Your use,
//      reproduction, and distribution of the Work otherwise complies with
//      the conditions stated in this License.
//
//   5. Submission of Contributions. Unless You explicitly state otherwise,
//      any Contribution intentionally submitted for inclusion in the Work
//      by You to the Licensor shall be under the terms and conditions of
//      this License, without any additional terms or conditions.
//      Notwithstanding the above, nothing herein shall supersede or modify
//      the terms of any separate license agreement you may have executed
//      with Licensor regarding such Contributions.
//
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor,
//      except as required for reasonable and customary use in describing the
//      origin of the Work and reproducing the content of the NOTICE file.
//
//   7. Disclaimer of Warranty. Unless required by applicable law or
//      agreed to in writing, Licensor provides the Work (and each
//      Contributor provides its Contributions) on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//      implied, including, without limitation, any warranties or conditions
//      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
//      PARTICULAR PURPOSE. You are solely responsible for determining the
//      appropriateness of using or redistributing the Work and assume any
//      risks associated with Your exercise of permissions under this License.
//
//   8. Limitation of Liability. In no event and under no legal theory,
//      whether in tort (including negligence), contract, or otherwise,
//      unless required by applicable law (such as deliberate and grossly
//      negligent acts) or agreed to in writing, shall any Contributor be
//      liable to You for damages, including any direct, indirect, special,
//      incidental, or consequential damages of any character arising as a
//      result of this License or out of the use or inability to use the
//      Work (including but not limited to damages for loss of goodwill,
//      work stoppage, computer failure or malfunction, or any and all
//      other commercial damages or losses), even if such Contributor
//      has been advised of the possibility of such damages.
//
//   9. Accepting Warranty or Additional Liability. While redistributing
//      the Work or Derivative Works thereof, You may choose to offer,
//      and charge a fee for, acceptance of support, warranty, indemnity,
//      or other liability obligations and/or rights consistent with this
//      License. However, in accepting such obligations, You may act only
//      on Your own behalf and on Your sole responsibility, not on behalf
//      of any other Contributor, and only if You agree to indemnify,
//      defend, and hold each Contributor harmless for any liability
//      incurred by, or claims asserted against, such Contributor by reason
//      of your accepting any such warranty or additional liability.
//
//   END OF TERMS AND CONDITIONS
//
//   APPENDIX: How to apply the Apache License to your work.
//
//      To apply the Apache License to your work, attach the following
//      boilerplate notice, with the fields enclosed by brackets "{}"
//      replaced with your own identifying information. (Don't include
//      the brackets!)  The text should be enclosed in the appropriate
//      comment syntax for the file format. We also recommend that a
//      file or class name and description of purpose be included on the
//      same "printed page" as the copyright notice for easier
//      identification within third-party archives.
//
//   Copyright (c) 2017 Cisco
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

//Path: Cisco-IOS-XR-mpls-te-oper:mpls-te-standby/tunnels/summary

package cisco_ios_xr_mpls_te_oper.mpls_te_standby.tunnels.summary;

// MPLS TE Tunnel Summary Information
message mpls_te_tunnels_summary_info_bag_KEYS {
}

message mpls_te_tunnels_summary_info_bag {
    // PCALC tiebreaker type
    string pcalc_tie_breaker_type = 50;
    // Deprecated - replaced by PCALCTiebreakerType
    uint32 pcalc_tiebreaker = 51;
    // Describes how the path selection tiebreaker was specified:default, or globally set
    string tiebreaker_qualifier = 52;
    // Status of te_control
    string te_process_status = 53;
    // Status of rsvp
    bool is_rsvp_process_enabled = 54;
    // TRUE if forwarding is enabled
    bool is_forwarding_enabled = 55;
    // Total tunnel heads activated
    uint32 activated_heads = 56;
    // Total tunnel heads deactivated
    uint32 deactivated_heads = 57;
    // Number of heads recovered
    uint32 recovered_heads = 58;
    // TRUE if periodic reoptimization is on
    bool is_periodic_reoptimization_on = 59;
    // Reoptimization period in seconds
    uint32 reoptimization_period = 60;
    // Time left till next reoptimization (seconds)
    uint32 next_reoptimization_timer = 61;
    // Counter with number of auto-bw enabled tunnels
    uint32 auto_bandwidth_tunnels = 62;
    // Collection period in minutes
    uint32 auto_bandwidth_collection_period = 63;
    // TRUE if periodic frr promotion is on
    bool is_promotion_on = 64;
    // FRR promotion period in seconds
    uint32 promotion_period = 65;
    // Time left till next FRR promotion (seconds)
    uint32 next_promotion_timer = 66;
    // Tunnel head check period (seconds)
    uint32 tunnel_check_period = 67;
    // Time left till next FRR promotion (seconds)
    uint32 next_check_time = 68;
    // Tunnel head verify period (seconds)
    uint32 tunnel_verify_period = 69;
    // Time left till next FRR promotion (seconds)
    uint32 next_verify_timer = 70;
    // FRR tunnels in Up state at head end
    uint32 frr_head_tunnels = 71;
    // FRR protected tunnels in Up state at head end
    uint32 protected_head_tunnels = 72;
    // FRR rerouted tunnels in Up state at head end
    uint32 rerouted_head_tunnels = 73;
    // FRR tunnels at mid point
    uint32 frr_mid_point_tunnels = 74;
    // FRR protected tunnels at mid point
    uint32 protected_mid_point_tunnels = 75;
    // FRR rerouted tunnels at mid point
    uint32 rerouted_mid_point_tunnels = 76;
    // FRR link protected tunnels
    uint32 link_protected_tunnels = 77;
    // FRR node protected tunnels
    uint32 node_protected_tunnels = 78;
    // FRR BW protected tunnels
    uint32 bw_protected_tunnels = 79;
    // P2P FRR tunnels in Up state at head end
    uint32 frr_p2_p_head_tunnels = 80;
    // P2P FRR protected tunnels in Up state at head end
    uint32 protected_p2_p_head_tunnels = 81;
    // P2P FRR rerouted tunnels in Up state at head end
    uint32 rerouted_p2_p_head_tunnels = 82;
    // P2P FRR tunnels at mid point
    uint32 frr_p2_p_mid_point_tunnels = 83;
    // P2P FRR protected tunnels at mid point
    uint32 protected_p2_p_mid_point_tunnels = 84;
    // P2P FRR rerouted tunnels at mid point
    uint32 rerouted_p2_p_mid_point_tunnels = 85;
    // P2P FRR link protected tunnels
    uint32 link_protected_p2_p_tunnels = 86;
    // P2P FRR node protected tunnels
    uint32 node_protected_p2_p_tunnels = 87;
    // P2P FRR BW protected tunnels
    uint32 bw_protected_p2_p_tunnels = 88;
    // FRR backup tunnels in Up state
    uint32 backup_tunnels = 89;
    // FRR backup tunnels assigned
    uint32 backups_assigned = 90;
    // FRR Protected Interfaces
    uint32 frr_protected_interfaces = 91;
    // FRR Rerouted Interfaces
    uint32 rerouted_interfaces = 92;
    // p2p Tunnel interfaces
    uint32 p2_p_head_tunnels = 93;
    // p2p Tunnel interfaces in Up state
    uint32 up_p2_p_head_tunnels = 94;
    // p2p Tunnel up via a dynamic path
    uint32 dynamic_up_p2_p_head_tunnels = 95;
    // p2p Tunnel interfaces with FRR configuration
    uint32 frr_config_p2_p_head_tunnels = 96;
    // p2p Destinations at Head
    uint32 p2_p_head_destinations = 97;
    // p2p Destinations in Up state at Head
    uint32 p2_p_head_destinations_up = 98;
    // p2p S2Ls BW Protected
    uint32 bw_protected_p2_p_s2_ls = 99;
    // p2p S2Ls Link Protected
    uint32 link_protected_p2_p_s2_ls = 100;
    // p2p S2Ls in Up state at Head
    uint32 up_p2_p_head_s2_ls = 101;
    // p2p S2Ls in signalling-proceeding state at Head
    uint32 proceeding_p2_p_head_s2_ls = 102;
    // p2p S2Ls recovering at Head
    uint32 recovering_p2_p_head_s2_ls = 103;
    // p2p S2Ls with FRR requested at Head
    uint32 frr_p2_p_head_s2_ls = 104;
    // p2p S2Ls FRR Protected at Head
    uint32 protected_p2_p_head_s2_ls = 105;
    // p2p S2Ls FRR Rerouted at Head
    uint32 rerouted_p2_p_head_s2_ls = 106;
    // p2p S2Ls at Mid
    uint32 p2_p_mid_point_s2_ls = 107;
    // p2p S2Ls in Up state at Mid
    uint32 up_p2_p_mid_point_s2_ls = 108;
    // p2p S2Ls in signalling=proceeding state at Mid
    uint32 proceeding_p2_p_mid_point_s2_ls = 109;
    // p2p S2Ls with FRR requested at Mid
    uint32 frr_p2_p_mid_point_s2_ls = 110;
    // p2p S2Ls FRR Protected at Mid
    uint32 protected_p2_p_mid_point_s2_ls = 111;
    // p2p S2Ls FRR Rerouted at Mid
    uint32 rerouted_p2_p_mid_point_s2_ls = 112;
    // p2p S2Ls at Tail
    uint32 p2_p_tail_s2_ls = 113;
    // p2p S2Ls in Up state at Tail
    uint32 up_p2_p_tail_s2_ls = 114;
    // p2p Tunnel tail interfaces
    uint32 p2_p_tail_tunnels = 115;
    // Tunnels configured with Path Protect
    uint32 path_protect_configured_tunnels = 116;
    // Path Protect configured tunnels connected/up
    uint32 path_protect_configured_tunnels_up = 117;
    // Tunnels with standby LSP up
    uint32 path_protect_configured_tunnels_standby_up = 118;
    // Link diverse paths
    uint32 link_diverse_paths = 119;
    // Node diverse paths
    uint32 node_diverse_paths = 120;
    // Link and Node diverse paths
    uint32 link_and_node_diverse_paths = 121;
    // User defined paths
    uint32 user_defined_paths = 122;
    // P2MP Tunnel interfaces
    uint32 p2_mp_head_tunnels = 123;
    // P2MP Tunnel interfaces in Up state
    uint32 up_p2_mp_head_tunnels = 124;
    // P2MP Tunnel interfaces with FRR configuration
    uint32 frr_config_p2_mp_head_tunnels = 125;
    // P2MP Destinations at Head
    uint32 p2_mp_head_destinations = 126;
    // P2MP Destinations in Up state at Head
    uint32 up_p2_mp_head_destinations = 127;
    // P2MP S2Ls BW Protected
    uint32 bw_protected_p2_mp_s2_ls = 128;
    // P2MP S2Ls Link Protected
    uint32 link_protected_p2_mp_s2_ls = 129;
    // P2MP S2Ls in Up state at Head
    uint32 up_p2_mp_head_s2_ls = 130;
    // P2MP S2Ls in signalling-proceeding state at Head
    uint32 proceeding_p2_mp_head_s2_ls = 131;
    // P2MP S2Ls with FRR requested at Head
    uint32 frr_p2_mp_head_s2_ls = 132;
    // P2MP S2Ls FRR Protected at Head
    uint32 protected_p2_mp_head_s2_ls = 133;
    // P2MP S2Ls FRR Rerouted at Head
    uint32 rerouted_p2_mp_head_s2_ls = 134;
    // P2MP S2Ls at Mid
    uint32 p2_mp_mid_point_s2_ls = 135;
    // P2MP S2Ls in Up state at Mid
    uint32 up_p2_mp_mid_point_s2_ls = 136;
    // P2MP S2Ls in signalling=proceeding state at Mid
    uint32 proceeding_p2_mp_mid_point_s2_ls = 137;
    // P2MP S2Ls with FRR requested at Mid
    uint32 frr_p2_mp_mid_point_s2_ls = 138;
    // P2MP S2Ls FRR Protected at Mid
    uint32 protected_p2_mp_mid_point_s2_ls = 139;
    // P2MP S2Ls FRR Rerouted at Mid
    uint32 rerouted_p2_mp_mid_point_s2_ls = 140;
    // P2MP S2Ls at Tail
    uint32 p2_mp_tail_s2_ls = 141;
    // P2MP S2Ls in Up state at Tail
    uint32 up_p2_mp_tail_s2_ls = 142;
    // Bidirectional Head Tunnel interfaces
    uint32 bidir_head_tunnels = 143;
    // Connected Bidirectional Head Tunnel interfaces
    uint32 bidir_head_tunnels_up = 144;
    // Associated Bidirectional Head Tunnels
    uint32 bidir_head_tunnels_associated = 145;
    // Corouted Bidirectional Head Tunnels
    uint32 bidir_head_tunnels_corouted = 146;
    // Connected Bidirectional Head Tunnel interfaces
    uint32 bidir_head_ls_ps_up = 147;
    // Proceeding Bidirectional Head LSPs
    uint32 bidir_head_ls_ps_proceeding = 148;
    // Associated Bidirectional Head LSPs
    uint32 bidir_head_ls_ps_associated = 149;
    // Standby Bidirectional Head LSPs
    uint32 bidir_head_ls_ps_standby = 150;
    // Bidirectional Mid Tunnel interfaces
    uint32 bidir_mid_tunnels = 151;
    // Connected Bidirectional Mid Tunnel interfaces
    uint32 bidir_mid_tunnels_up = 152;
    // Proceeding Bidirectional Mid LSPs
    uint32 bidir_mid_ls_ps_proceeding = 153;
    // Associated Bidirectional Mid LSPs
    uint32 bidir_mid_ls_ps_associated = 154;
    // Standby Bidirectional Mid LSPs
    uint32 bidir_mid_ls_ps_standby = 155;
    // Bidirectional Tail LSPs
    uint32 bidir_tail_ls_ps = 156;
    // Connected Bidirectional Tail LSPs
    uint32 bidir_tail_ls_ps_up = 157;
    // Proceeding Bidirectional Tail LSPs
    uint32 bidir_tail_ls_ps_proceeding = 158;
    // Associated Bidirectional Tail LSPs
    uint32 bidir_tail_ls_ps_associated = 159;
    // Standby Bidirectional Tail LSPs
    uint32 bidir_tail_ls_ps_standby = 160;
    // Corouted Bidirectional Tail LSPs
    uint32 bidir_tail_ls_ps_corouted = 161;
    // Autobackup summary
    mpls_te_autotun_backup_summary_info autobackup_summary = 162;
    // Automesh summary
    mpls_te_autotun_mesh_summary_info auto_mesh_summary = 163;
    // Automesh Onehop summary
    mpls_te_autotun_mesh_onehop_summary_info auto_mesh_one_hop_summary = 164;
    // GMPLS-UNI summary
    mpls_te_gmpls_uni_summary_info gmpls_uni_summary = 165;
    // GMPLS-NNI summary
    mpls_te_gmpls_nni_summary_info gmpls_nni_summary = 166;
    // Current Tunnel convergemce summary information
    te_conv_tbl_summary_bag current_tunnel_convergence_summary = 167;
    // Last Tunnel convergemce summary information
    te_conv_tbl_summary_bag last_tunnel_convergence_summary = 168;
    // Auto-tunnel server tunnel summary
    mpls_te_autotun_svr_summary_info auto_tun_server_summary = 169;
}

// P2MP auto-tunnel summary per client information
message mpls_te_autotun_p2mp_info {
    // Total number of client P2MP auto-tunnels
    uint32 auto_p2_mp_tunnel = 1;
    // Total number of client P2MP auto-tunnel destinations
    uint32 auto_p2_mp_destinations = 2;
    // Total number of client P2MP auto-tunnel destinations that are up
    uint32 up_auto_p2_mp_destinations = 3;
    // Total number of client P2MP auto-tunnel destinations that are down
    uint32 down_auto_p2_mp_destinations = 4;
    // Total number of client P2MP auto-tunnels that are up
    uint32 up_auto_p2_mp_tunnels = 5;
    // Total number of client P2MP auto-tunnels that are down
    uint32 down_auto_p2_mp_tunnels = 6;
    // Total number of client P2MP auto-tunnels that are FRR enabled
    uint32 frr_auto_p2_mp_tunnels = 7;
}

// P2P auto-tunnel summary per client information
message mpls_te_autotun_p2p_info {
    // Total number of client P2P auto-tunnels
    uint32 auto_p2_p_tunnel = 1;
    // Total number of client P2P auto-tunnels that are up
    uint32 up_auto_p2_p_tunnels = 2;
    // Total number of client P2P auto-tunnels that are down
    uint32 down_auto_p2_p_tunnels = 3;
}

// Auto-tunnel server client summary
message mpls_te_autotun_svr_info {
    // P2MP info for a client
    mpls_te_autotun_p2mp_info p2_mp_info = 1;
    // P2P info for a client
    mpls_te_autotun_p2p_info p2_p_info = 2;
    // Client's protocol type
    string protocol_type = 3;
    // Client Instance name
    string client_instance_name = 4;
    // Client ID
    uint32 client_id = 5;
}

// Auto-tunnel server summary information
message mpls_te_autotun_svr_summary_info {
    // List of auto-tunnel server clients
    repeated mpls_te_autotun_svr_info clients_summary = 1;
    // Total number of P2MP auto-tunnels
    mpls_te_autotun_p2mp_info total_auto_p2_mp_tunnels = 2;
    // Total number of P2P auto-tunnels
    mpls_te_autotun_p2p_info total_auto_p2_p_tunnels = 3;
}

// Autotunnel backup summary information
message mpls_te_autotun_backup_summary_info {
    // Total number of autobackup tunnels
    uint32 autobackups = 1;
    // Total number of autobackup tunnels that are up
    uint32 up_autobackups = 2;
    // Total number of autobackup tunnels that are down
    uint32 down_autobackups = 3;
    // Total number of autobackup tunnels that are unused
    uint32 unused_autobackups = 4;
    // Total number of autobackup tunnels that are NHOP
    uint32 next_hop_autobackups = 5;
    // Total number of autobackup tunnels that are NNHOP
    uint32 next_next_hop_autobackups = 6;
    // Total number of autobackup tunnels that are using SRLG strict
    uint32 srlg_strict_autobackups = 7;
    // Total number of autobackup tunnels that are using SRLG preferred
    uint32 srlg_preferred_autobackups = 8;
    // Total number of autobackup tunnels that are using weighted SRLG
    uint32 srlg_weighted_autobackups = 9;
    // Total number of autobackup protected LSPs with NHOP and no SRLG
    uint32 next_hop_autobackup_protected_ls_ps = 10;
    // Total number of autobackup protected LSPs with NNHOP and no SRLG
    uint32 next_next_hop_autobackup_protected_ls_ps = 11;
    // Total number of autobackup protected LSPs with NHOP and SRLG
    uint32 next_hop_srlg_autobackup_protected_ls_ps = 12;
    // Total number of autobackup protected LSPs with NNHOP and SRLG
    uint32 next_next_hop_srlg_autobackup_protected_ls_ps = 13;
    // Total number of autobackup protected S2L Families with NHOP and no SRLG
    uint32 next_hop_autobackup_protected_s2_l_families = 14;
    // Total number of autobackup protected S2L Families with NNHOP and no SRLG
    uint32 next_next_hop_autobackup_protected_s2_l_families = 15;
    // Total number of autobackup protected S2L Families with NHOP and SRLG
    uint32 next_hop_srlg_autobackup_protected_s2_l_families = 16;
    // Total number of autobackup protected S2L Families with NNHOP and SRLG
    uint32 next_next_hop_srlg_autobackup_protected_s2_l_families = 17;
    // Total number of autobackup protected S2Ls with NHOP and no SRLG
    uint32 next_hop_autobackup_protected_s2_ls = 18;
    // Total number of autobackup protected S2Ls with NNHOP and no SRLG
    uint32 next_next_hop_autobackup_protected_s2_ls = 19;
    // Total number of autobackup protected S2Ls with NHOP and SRLG
    uint32 next_hop_srlg_autobackup_protected_s2_ls = 20;
    // Total number of autobackup protected S2Ls with NNHOP and SRLG
    uint32 next_next_hop_srlg_autobackup_protected_s2_ls = 21;
}

// Autotunnel mesh summary information
message mpls_te_autotun_mesh_summary_info {
    // Total number of automesh tunnels
    uint32 auto_mesh_tunnels = 1;
    // Total number of automesh tunnels that are up
    uint32 up_auto_mesh_tunnels = 2;
    // Total number of automesh tunnels that are down
    uint32 down_auto_mesh_tunnels = 3;
    // Total number of automesh tunnels that are FRR enabled
    uint32 frr_auto_mesh_tunnels = 4;
    // Total number of automesh mesh-groups
    uint32 auto_mesh_groups = 5;
    // Total number of automesh destinations
    uint32 auto_mesh_destinations = 6;
}

// Autotunnel mesh onehop summary information
message mpls_te_autotun_mesh_onehop_summary_info {
    // Total number of automesh onehop tunnels
    uint32 auto_mesh_one_hop_tunnels = 1;
    // Total number of automesh onehop tunnels that are up
    uint32 up_auto_mesh_one_hop_tunnels = 2;
    // Total number of automesh onehop tunnels that are down
    uint32 down_auto_mesh_one_hop_tunnels = 3;
    // Total number of automesh onehop tunnels that are FRR enabled
    uint32 frr_auto_mesh_tunnels = 4;
    // Total number of automesh onehop mesh-groups
    uint32 auto_mesh_one_hop_groups = 5;
    // Total number of automesh onehop destinations
    uint32 auto_mesh_one_hop_destinations = 6;
}

// TE LSP datapoint information
message te_lsp_datapoint_info {
}

// Convergence table bag entry
message te_table_datapoint_info {
}

// TE tunnels convergence summary information bag
message te_conv_tbl_summary_bag {
    // FRR active Tunnel count
    uint32 tunnel_frr_active_count = 1;
    // FRR triggered Tunnel count
    uint32 tunnel_frr_total_count = 2;
    // Tunnel converged count
    uint32 tunnel_converged_count = 3;
    // Tunnel convergence complete timestamp (clocktime in nsecs)
    uint64 tunnel_total_convergence_complete_time = 4;
    // Table path-out entry
    te_table_datapoint_info table_path_out = 5;
    // Table resv-in entry
    te_table_datapoint_info table_resv_in = 6;
    // Table label rewrite entry
    te_table_datapoint_info table_label_rewrite = 7;
    // Table PCALC entry
    te_table_datapoint_info table_pcalc = 8;
    // Table Tunnel rewrite entry
    te_table_datapoint_info table_tunnel_rewrite = 9;
    // Table FRR trigger entry
    te_table_datapoint_info table_frr_trigger = 10;
}

// GMPLS-UNI summary information
message mpls_te_gmpls_uni_summary_info {
    // Tunnel heads in up state
    uint32 heads_up = 1;
    // Tunnel heads in down state
    uint32 heads_down = 2;
    // Tunnel tails in up state
    uint32 tails_up = 3;
    // Tunnel tails in down state
    uint32 tails_down = 4;
}

// GMPLS-NNI summary information
message mpls_te_gmpls_nni_summary_info {
    // Tunnel heads in up state
    uint32 heads_up = 1;
    // Tunnel heads in down state
    uint32 heads_down = 2;
    // Tunnel mids in up state
    uint32 mids_up = 3;
    // Tunnel mids in down state
    uint32 mids_down = 4;
    // Tunnel tails in up state
    uint32 tails_up = 5;
    // Tunnel tails in down state
    uint32 tails_down = 6;
}

