// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.soft_preemptions.soft_preemption;

// Soft Preemption Info per Link
message mpls_lm_soft_preemption_link_info_KEYS {
    string interface_name = 1;
}

message mpls_lm_soft_preemption_link_info {
    // The link's IPv4 address
    string link_address = 50;
    // The total BC0 BW that is softly preempted: this is the sum of bandwidth for all the LSPs that were soft preempted
    uint64 total_soft_preempted_bandwidth_bc0 = 51;
    // The total BC1 BW that is softly preempted: this is the sum of bandwidth for all the LSPs that were soft preempted
    uint64 total_soft_preempted_bandwidth_bc1 = 52;
    // The current BC0 BW that is softly preempted: this is the sum of bandwidth for the LSPs that are soft preempted and have not been torn down yet
    uint64 current_soft_preempted_bandwidth_bc0 = 53;
    // The current BC1 BW that is softly preempted: this is the sum of bandwidth for the LSPs that are soft preempted and have not been torn down yet
    uint64 current_soft_preempted_bandwidth_bc1 = 54;
    // The total released BC0 BW that is softly preempted: this is the sum of bandwidth for the LSPs that are soft preempted and are torn down
    uint64 release_soft_preempted_bandwidth_bc0 = 55;
    // The total released BC1 BW that is softly preempted: this is the sum of bandwidth for the LSPs that are soft preempted and are torn down
    uint64 release_soft_preempted_bandwidth_bc1 = 56;
    // The BC0 bandwidth that is over subscribed on this link: this is the difference between the maximum available BC0 BW on the link and the sum of the currently reserved BC0 bandwidth and the currently soft preempted BC0 BW
    uint64 current_over_subscribed_bandwidth_bc0 = 57;
    // The BC1 bandwidth that is over subscribed on this link: this is the difference between the maximum available BC1 BW on the link and the sum of the currently reserved BC1 bandwidth and the currently soft preempted BC1 BW
    uint64 current_over_subscribed_bandwidth_bc1 = 58;
    // List of the soft preempted LSPs that are not yet cleaned up
    repeated mpls_lm_preempted_lsp current_soft_preemption_ls_ps = 59;
}

// Preempted LSP info
message mpls_lm_preempted_lsp {
    // Tunnel ID
    uint32 tunnel_id = 1;
    // LSP ID
    uint32 lsp_id = 2;
    // Source
    string source_address = 3;
    // Destination
    string destination_address = 4;
    // The path's requested bandwidth
    uint64 requested_bandwidth = 5;
    // The path's setup priority
    uint32 setup_priority = 6;
    // The path's hold priority
    uint32 hold_priority = 7;
    // The path's bandwidth type; 0:BC0, 1:BC1, so on
    uint32 bandwidth_type = 8;
    // TRUE is the preemption is a soft preemption
    bool soft_preempted = 9;
    // If the soft preemption is underway, this value indicates the number of seconds before hard preemption is triggered
    uint32 soft_preemption_timeout = 10;
    // LSPs bandwidth is already preempted
    bool bandwidth_preempted = 11;
    // FRR-rewrite is done during soft preemption
    bool soft_preempted_fr_rrewrite = 12;
}

