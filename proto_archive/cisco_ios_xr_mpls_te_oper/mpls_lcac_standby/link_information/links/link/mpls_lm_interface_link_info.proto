// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.link_information.links.link;

// IGP and area information of a link
message mpls_lm_interface_link_info_KEYS {
    string interface_name = 1;
}

message mpls_lm_interface_link_info {
    // The link's common info
    mpls_lm_common_link_info link_common = 50;
    // Reason why link is not flooded (area-independent)
    string reason_not_flooded = 51;
    // The link's maximum reservable BW in RDM
    uint64 maximum_reservation_bandwidth_rdm = 52;
    // The link's reservable pool0 BW in RDM
    uint64 reservable_pool0_bandwidth_rdm = 53;
    // The link's reservable pool1 BW in RDM
    uint64 reservable_pool1_bandwidth_rdm = 54;
    // The link's maximum reservable BW in MAM
    uint64 maximum_reservation_bandwidth_mam = 55;
    // The link's reservable pool0 BW in MAM
    uint64 reservable_pool0_bandwidth_mam = 56;
    // The link's reservable pool1 BW in MAM
    uint64 reservable_pool1_bandwidth_mam = 57;
    // Deprecated
    uint32 link_attributes = 58;
    // The link's extended attribute bit map
    repeated uint32 link_extended_attributes = 59;
    // Reference bits for undefined affinity names
    repeated uint32 link_forwad_ref_value = 60;
    // Affinity map array
    repeated mpls_te_affinity_map_info affinity_map = 61;
    // TRUE if one or more affinity definition(s) is/are unknown
    bool is_attribute_incomplete = 62;
    // TRUE, if name based attribute style is in effect
    bool is_name_based_attribute = 63;
    // The link's TE metric
    uint32 te_metric = 64;
    // Flag to indicate whether the link's TE metric is a valid value
    bool is_te_metric_valid = 65;
    // Per-area data
    repeated mpls_lm_interface_link_area_info areas = 66;
    // Flex LSP Lockout info
    repeated mpls_lm_interface_lockout_info lockout = 67;
    // The link's NPU OOR info. This field is NULL for platforms that do not support HW-OOR notifications
    mpls_lm_interface_hw_oor_info hw_oor = 68;
}

// Affinity Map
message mpls_te_affinity_map_info {
    // Affinity name
    string affinity_name = 1;
    // Affinity value
    uint32 affinity_value = 2;
    // EAG value
    repeated uint32 affinity_extended_value = 3;
    // Affinity bit position
    uint32 affinity_bit_position = 4;
    // Affinity table id
    string affinity_table_id = 5;
}

// Information about the Shared Risk Link Group
message mpls_srlg_info {
    // SRLG number
    uint32 shared_risk_group = 1;
    // SRLG name
    string srlg_name = 2;
}

// HW OOR statistics
message te_hw_oor_stats {
    // The HW-OOR state that these statistics belong to
    string hw_oor_state = 1;
    // Number of transitions to this state
    uint32 transitions = 2;
    // Number of times this OOR state disabled node protection assignment
    uint32 node_protection_disable_number = 3;
    // Number of LSPs that were rejected in this state
    uint32 rejected_ls_ps_number = 4;
    // Number of LSPs that were accepted in this state
    uint32 accepted_ls_ps_number = 5;
    // Number of Reoptimize LSPs that were accepted in this state
    uint32 accepted_reopt_ls_ps_number = 6;
    // Number of Reoptimize LSPs that were rejected in this state
    uint32 rejected_reopt_ls_ps_number = 7;
}

// Information about the Interface Switching Capability Descriptor (IXCD)
message mpls_lm_intf_switching_cap_info {
    // The switching capability descriptor key
    uint32 key = 1;
    // The switching capability
    uint32 switching_capability = 2;
    // The link encoding type
    uint32 encoding = 3;
}

// Link properties
message mpls_lm_link_flags {
    // Deprecated - TRUE if the link is a TE-Link
    bool is_mpls_te_on = 1;
    // Deprecated - Signaling agent
    string signaling_agent = 2;
    // TRUE if the link is admin up
    bool is_admin_up = 3;
}

// Information for the flooded area
message mpls_lm_flooded_area {
    // The flooded area information
    string flooded_area = 1;
}

// Link information
message mpls_lm_common_link_info {
    // The link's id
    string link_id = 1;
    // The link's ip address
    string link_address = 2;
    // TRUE if the link is unnumbered
    bool is_unnumbered = 3;
    // TRUE if the link is protected
    bool has_protection = 4;
    // The link's protection capability
    uint32 capability = 5;
    // The link's working priority
    uint32 working_priority = 6;
    // The link's shared risk link groups
    repeated mpls_srlg_info shared_risk_link_groups = 7;
    // The link's switching capability descriptor
    repeated mpls_lm_intf_switching_cap_info interface_switching_capability_descriptor = 8;
    // The link's resource provider
    string resource_provider = 9;
    // TRUE if the resource provider is installed
    bool is_resource_provider_installed = 10;
    // The bandwidth units
    string bandwidth_units = 11;
    // The link's physical bandwidth
    uint64 physical_bandwidth = 12;
    // Bandwidth Constraints Model ID
    uint32 bcm_id = 13;
    // The link's maximum reservable BW
    uint64 maximum_reservable_bandwidth = 14;
    // Incoming reserved BW in %
    uint32 incoming_reservable_bandwidth_percentage = 15;
    // Outgoing reserved BW in %
    uint32 outgoing_reservable_bandwidth_percentage = 16;
    // The link's maximum reservable pool0 BW
    uint64 maximum_reservable_pool0_bandwidth = 17;
    // Incoming reserved pool0 BW in %
    uint32 incoming_reservable_pool0_bandwidth_percentage = 18;
    // Outgoing reserved pool0 BW in %
    uint32 outgoing_reservable_pool0_bandwidth_percentage = 19;
    // The link's maximum reservable pool1 BW
    uint64 maximum_reservable_pool1_bandwidth = 20;
    // Incoming reserved pool1 BW in %
    uint32 incoming_reservable_pool1_bandwidth_percentage = 21;
    // Outgoing reserved pool1 BW in %
    uint32 outgoing_reservable_pool1_bandwidth_percentage = 22;
    // The link's flags
    mpls_lm_link_flags link_flags = 23;
    // Deprecated
    string inbound_admission_method = 24;
    // Deprecated
    string outbound_admission_method = 25;
    // The link's neighbor count
    uint32 igp_neighbors = 26;
    // List of areas into which the link is flooded
    repeated mpls_lm_flooded_area flooded_areas = 27;
}

// Information about an area to which the link belongs
message mpls_lm_interface_link_area_info {
    // Area id
    string area_id = 1;
    // The interface neighbor id
    string neighbor_id = 2;
    // The interface's neighbor's ip address
    string neighbor_address = 3;
    // TRUE if the neighbor is up
    bool is_neighbor_up = 4;
    // The link's IGP metric
    uint32 igp_metric = 5;
}

// Information about flex LSP lockout info for the link
message mpls_lm_interface_lockout_info {
    // True if link is locked out
    bool is_lockout = 1;
    // Timestamp when the lockout is set
    uint32 lockout_on_timestamp = 2;
    // Timestamp when the lockout is cleared
    uint32 lockout_off_timestamp = 3;
}

// Information about NPU Resources state for the link
message mpls_lm_interface_hw_oor_info {
    // The NPU (Network Processor Unit) HW resource state
    string hw_oor_state = 1;
    // Timestamp when the OOR state last changed
    uint32 hw_oor_timestamp = 2;
    // Time Remaining in Green Recovery State (seconds)
    uint32 hw_oor_green_recovery_time = 3;
    // HW OOR statistics for the link
    repeated te_hw_oor_stats hw_oor_link_statistics = 4;
}

