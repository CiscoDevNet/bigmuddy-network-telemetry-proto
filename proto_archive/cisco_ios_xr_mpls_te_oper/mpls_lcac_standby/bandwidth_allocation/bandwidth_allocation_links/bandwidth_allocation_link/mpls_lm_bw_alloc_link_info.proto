// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.bandwidth_allocation.bandwidth_allocation_links.bandwidth_allocation_link;

// Bandwidth allocation information for a given link
message mpls_lm_bw_alloc_link_info_KEYS {
    string interface_name = 1;
}

message mpls_lm_bw_alloc_link_info {
    // The link's common info
    mpls_lm_common_link_info link_common = 50;
    // Number of total BW descriptors
    uint32 total_bandwidth_descriptors = 51;
    // Number of BW descriptor for the given pool
    uint32 bandwidth_descriptors = 52;
    // type of the BW pool
    string bandwidth_pool = 53;
    // BW info in the upstream direction
    mpls_lm_bw_link_dir_bw_info upstream_bandwidth = 54;
    // BW info in the dnstream direction
    mpls_lm_bw_link_dir_bw_info downstream_bandwidth = 55;
    // Flooding up-thresholds
    repeated uint32 flooding_up_thresholds = 56;
    // TRUE if the up-threshold are default
    bool flooding_up_thresholds_are_default = 57;
    // Flooding down-thresholds
    repeated uint32 flooding_down_thresholds = 58;
    // TRUE if the down-threshold are default
    bool flooding_down_thresholds_are_default = 59;
    // TRUE if the up-threshold are global
    bool flooding_up_thresholds_are_global = 60;
    // TRUE if the down-threshold are global
    bool flooding_down_thresholds_are_global = 61;
}

// Information about the Shared Risk Link Group
message mpls_srlg_info {
    // SRLG number
    uint32 shared_risk_group = 1;
    // SRLG name
    string srlg_name = 2;
}

// Information about the Interface Switching Capability Descriptor (IXCD)
message mpls_lm_intf_switching_cap_info {
    // The switching capability descriptor key
    uint32 key = 1;
    // The switching capability
    uint32 switching_capability = 2;
    // The link encoding type
    uint32 encoding = 3;
}

// Link properties
message mpls_lm_link_flags {
    // Deprecated - TRUE if the link is a TE-Link
    bool is_mpls_te_on = 1;
    // Deprecated - Signaling agent
    string signaling_agent = 2;
    // TRUE if the link is admin up
    bool is_admin_up = 3;
}

// Information for the flooded area
message mpls_lm_flooded_area {
    // The flooded area information
    string flooded_area = 1;
}

// Link information
message mpls_lm_common_link_info {
    // The link's id
    string link_id = 1;
    // The link's ip address
    string link_address = 2;
    // TRUE if the link is unnumbered
    bool is_unnumbered = 3;
    // TRUE if the link is protected
    bool has_protection = 4;
    // The link's protection capability
    uint32 capability = 5;
    // The link's working priority
    uint32 working_priority = 6;
    // The link's shared risk link groups
    repeated mpls_srlg_info shared_risk_link_groups = 7;
    // The link's switching capability descriptor
    repeated mpls_lm_intf_switching_cap_info interface_switching_capability_descriptor = 8;
    // The link's resource provider
    string resource_provider = 9;
    // TRUE if the resource provider is installed
    bool is_resource_provider_installed = 10;
    // The bandwidth units
    string bandwidth_units = 11;
    // The link's physical bandwidth
    uint64 physical_bandwidth = 12;
    // Bandwidth Constraints Model ID
    uint32 bcm_id = 13;
    // The link's maximum reservable BW
    uint64 maximum_reservable_bandwidth = 14;
    // Incoming reserved BW in %
    uint32 incoming_reservable_bandwidth_percentage = 15;
    // Outgoing reserved BW in %
    uint32 outgoing_reservable_bandwidth_percentage = 16;
    // The link's maximum reservable pool0 BW
    uint64 maximum_reservable_pool0_bandwidth = 17;
    // Incoming reserved pool0 BW in %
    uint32 incoming_reservable_pool0_bandwidth_percentage = 18;
    // Outgoing reserved pool0 BW in %
    uint32 outgoing_reservable_pool0_bandwidth_percentage = 19;
    // The link's maximum reservable pool1 BW
    uint64 maximum_reservable_pool1_bandwidth = 20;
    // Incoming reserved pool1 BW in %
    uint32 incoming_reservable_pool1_bandwidth_percentage = 21;
    // Outgoing reserved pool1 BW in %
    uint32 outgoing_reservable_pool1_bandwidth_percentage = 22;
    // The link's flags
    mpls_lm_link_flags link_flags = 23;
    // Deprecated
    string inbound_admission_method = 24;
    // Deprecated
    string outbound_admission_method = 25;
    // The link's neighbor count
    uint32 igp_neighbors = 26;
    // List of areas into which the link is flooded
    repeated mpls_lm_flooded_area flooded_areas = 27;
}

// Information about the bandwidth of a given pool and priority
message mpls_lm_bw_link_bw_pool_info {
    // The BW priority
    uint32 hold_priority = 1;
    // The held bandwidth
    uint32 held_amount = 2;
    // The total held bandwidth
    uint32 total_held_amount = 3;
    // The locked bandwidth
    uint32 locked_amount = 4;
    // The total locked bandwidth
    uint32 total_locked_amount = 5;
}

// Information about the bandwidth of a given  link.
message mpls_lm_bw_link_dir_bw_info {
    // BW Direction
    string bandwidth_direction = 1;
    // True if the link's admit method is based on Allocated BW
    bool is_admission_method_allocated_bandwidth = 2;
    // Bandwidth units
    string bandwidth_units = 3;
    // Pool0 BW info for the different priority levels
    repeated mpls_lm_bw_link_bw_pool_info bandwidth_pool0 = 4;
    // Pool1 BW info for the different priority levels
    repeated mpls_lm_bw_link_bw_pool_info bandwidth_pool1 = 5;
}

