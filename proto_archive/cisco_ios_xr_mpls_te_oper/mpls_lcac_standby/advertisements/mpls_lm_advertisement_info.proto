// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_lcac_standby.advertisements;

// Information about all the advertized areas
message mpls_lm_advertisement_info_KEYS {
}

message mpls_lm_advertisement_info {
    // Flooding status: ready or reason
    string flooding_status_message = 50;
    // Time elapsed since last flooding in seconds
    uint32 last_flooding_time = 51;
    // Trigger for last flooding
    string last_flooding_trigger = 52;
    // Time remained for next flooding in seconds
    uint32 next_flooding_time = 53;
    // DS-TE Mode
    string ds_te_mode = 54;
    // Advertising info for all the IGP areas
    repeated mpls_lm_adv_configured_area advertized_areas = 55;
}

// Information about the Shared Risk Link Group
message mpls_srlg_info {
    // SRLG number
    uint32 shared_risk_group = 1;
    // SRLG name
    string srlg_name = 2;
}

// odu capability for flex  ODUs
message odu_capability_flex {
    // Max kbps Bandwidth of this level possible on this link
    uint32 max_bandwidth = 1;
    // Unreserved kbps Bandwidth of this level possible on this link
    uint32 unreserved_bandwidth = 2;
    // Per LSP Max kbps Bandwidth of this level possible on this link
    uint32 max_lsp_bandwidth = 3;
}

// odu capability for fixed ODUs 
message odu_capability_fixed {
    // Maximum Number of ODUs of this level possible on this link
    uint32 maximum_od_us = 1;
    // Maximum Number of ODUs of this level possible on this link
    uint32 unreserved_od_us = 2;
}

// ODU capability Union for bandwidth
message odu_cap_bw {
    string type = 1;
    // ODU capability for Fixed ODUs
    odu_capability_fixed fixed = 2;
    // ODU capability for Flex ODUs
    odu_capability_flex flex = 3;
}

// Odu capability at a level of multiplex tree for an ODU type
message odu_capability {
    // Signal Type
    string signal_type = 1;
    // ODU Type at stage 1, Not Set for HO ODU
    string stage1 = 2;
    // ODU Type at stage 2, Not Set for single stage mulitplexing
    string stage2 = 3;
    // ODU Type at stage 3, Not set up to two levels of multiplexing
    string stage3 = 4;
    // ODU Type at stage 4, Not set up to three levels of multiplexing
    string stage4 = 5;
    // True if link is terminable for this ODU level
    bool terminable = 6;
    // True if link is switchable for this ODU level
    bool switchable = 7;
    // True if link supports 1.25G TSG for this ODU level
    bool tsg1_p25 = 8;
    // True if link supports 2.5G TSG for this ODU level
    bool tsg2_p5 = 9;
    // True if link VCAT capable for this ODU level
    bool vcat_capable = 10;
    // True if link LCAS capable for this ODU level
    bool lcas_capable = 11;
    // Bandwidth related info for this ODU level
    odu_cap_bw bandwidth_info = 12;
}

// Link ODU Capabilities
message odu_link_capabilities {
    // Max LSP Bandwidth per priority in kbit/s
    repeated uint32 max_lsp_bandwidth = 1;
    // ODU Capabilities of Link
    repeated odu_capability odu_capabilities = 2;
}

// Information about a link bandwidth
message mpls_lm_adv_link_resv_bw {
    // The priority level of this bandwidth
    uint32 priority = 1;
    // The reservable pool0 BW at this priority
    uint32 pool0_bandwidth = 2;
    // The reservable pool1 BW at this priority
    uint32 pool1_bandwidth = 3;
}

// Information about a flooded link
message mpls_lm_adv_flooded_link {
    // The link's id
    uint32 link_id = 1;
    // The link's interface name
    string interface_name = 2;
    // The link's IPv4 address
    string link_address = 3;
    // The link's subnet type
    string subnet_type = 4;
    // The link's outgoing interface's id
    uint32 outgoing_interface_id = 5;
    // TRUE if the link belongs to a desig. router
    bool is_designated_router = 6;
    // IGP id of the designated router
    string designated_router_igp_id = 7;
    // The neighbor's IGP id
    string neighbor_igp_id = 8;
    // The neighbor's ip address
    string igp_neighbor_address = 9;
    // The link's incoming interface's id
    uint32 incoming_interface_id = 10;
    // The link's TE metric
    uint32 te_metric = 11;
    // The link's IGP metric
    uint32 igp_metric = 12;
    // Unidirectional Link Delay in micro-sec
    uint32 uni_link_delay = 13;
    // The link's bandwidth units
    string bandwidth_units = 14;
    // The link's physical BW
    uint32 physical_bandwidth = 15;
    // Bandwidth Constraints Model ID
    uint32 bcm_id = 16;
    // The link's maximum reservable BW
    uint32 link_maximum_reservable_bandwidth = 17;
    // The link's reservable pool0 BW
    uint32 reservable_pool0_bandwidth = 18;
    // The link's reservable pool1 BW
    uint32 reservable_pool1_bandwidth = 19;
    // The link's shared risk link groups
    repeated mpls_srlg_info shared_risk_link_groups = 20;
    // TRUE if receiving reservable BW is enabled
    bool is_receiving_reservable_bandwidth_enabled = 21;
    // Upstream or Downstream
    string receiving_direction = 22;
    // Receiving reservable BW at each priority level(priority 0 to priority 7)
    repeated mpls_lm_adv_link_resv_bw receiving_reservable_bandwidth = 23;
    // TRUE if transmitting reservable BW is enabled
    bool is_transmitting_reservable_bandwidth_enabled = 24;
    // Upstream or Downstream
    string transmitting_direction = 25;
    // Transmitting reservable BW at each priority level (priority 0 to priority 7)
    repeated mpls_lm_adv_link_resv_bw transmitting_reservable_bandwidth = 26;
    // ODU Link Capabilities
    odu_link_capabilities odu_link_capabilities = 27;
    // Deprecated
    uint32 affinity_attribute_flags = 28;
    // The link's extended affinity bits
    repeated uint32 extended_affinity_attribute_flags = 29;
}

// The information about an advertized area
message mpls_lm_adv_configured_area {
    // The area id
    string igp_area_id = 1;
    // The IGP protocol running over this area
    string protocol = 2;
    // The node's system id
    string system_id = 3;
    // The node's router ID
    string router_id = 4;
    // The array of flooded links in this area
    repeated mpls_lm_adv_flooded_link flooded_links = 5;
}

