// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_te.tunnels.tunnel_path_protections.tunnel_path_protection;

// MPLS TE Path Protected Information
message mpls_te_path_protection_KEYS {
    string c_type = 1;
    uint32 tunnel_id = 2;
    string tunnel_name = 3;
}

message mpls_te_path_protection {
    // Tunnel UP
    bool is_tunnel_up = 50;
    // Source
    string source_address = 51;
    // Destination
    string destination_address = 52;
    // Extended Tunnel ID
    string extended_tunnel_id = 53;
    // Path Protect Info
    mpls_te_pp_info path_protection = 54;
    //  Current LSP info
    mpls_te_path_protection_lsp current_lsp = 55;
    //  Standby LSP info
    mpls_te_path_protection_lsp standby_lsp = 56;
}

// RSVP ERO IPV4 subobject
message rsvp_mgmt_ero_ipv4_subobj {
    // ERO Entry Is Strict
    bool is_strict_route = 1;
    // The ERO IPV4 Address
    string ero_address = 2;
    // ERO Prefix Length
    uint32 prefix_length = 3;
}

// RSVP ERO UNNUM subobject
message rsvp_mgmt_ero_unnum_subobj {
    // ERO Entry Is Strict
    bool is_strict_route = 1;
    // The Interface ID in ERO
    uint32 ero_interface_id = 2;
    // The Router ID in ERO
    string ero_router_id = 3;
    // Status of ERO
    string status = 4;
}

// Union of the different RSVP ERO types
message rsvp_mgmt_ero_subobj {
    string ero_type = 1;
    // IPV4 ERO Sub Object
    rsvp_mgmt_ero_ipv4_subobj ipv4_ero_sub_object = 2;
    // Unnumbered ERO Sub Object
    rsvp_mgmt_ero_unnum_subobj unnumbered_ero_sub_object = 3;
}

// Path protection log entry
message te_pp_sw_log_entry_bag {
    // The index number of the path protection switch over event
    uint32 path_protection_switchover_event_index = 1;
    // The ID of the tunnel that experienced switchover
    uint32 path_protection_tunnel_id = 2;
    // The LSP ID from which the traffic was switched over
    uint32 from_lsp_id = 3;
    // The LSP ID to which the traffic was switched over
    uint32 to_lsp_id = 4;
    // The date when the error that caused the switchover was detected. This date is the number of seconds since Jan 1st 1970
    uint32 date_of_error_detection = 5;
    // The milliseconds offset of the date when the error that caused  the switchover was detected.
    uint32 date_of_error_detection_millisec = 6;
    // The time in milliseconds between the detection of the error and switching the traffic
    uint32 switchover_duration_millisec = 7;
    // The reason that caused the path protection switchover
    string path_protection_switchover_reason = 8;
}

// MPLS TE Path Protected Switchover Information
message mpls_te_pp_info {
    // The date when the switchover was completed. This date is the number of seconds since Jan 1st 1970
    uint32 time_of_switchover_sec = 1;
    // Number of times switchover occurred
    uint32 switchover_total = 2;
    // Total times, Standby LSP ready for use
    uint32 switchover_ready = 3;
    // Number of times the standby LSP was reoptimized
    uint32 standby_reoptimized_number = 4;
    // Reason for last switchover
    uint32 switchover_reason = 5;
    // Standby path diversity type
    string diversity_type = 6;
    // Is Path Protection Configured
    bool is_path_protect_configured = 7;
    // The path option ID (level/index) of the configured explicit protecting path
    uint32 path_protection_protected_by_id = 8;
    // Flag to indicate whether tunnel has a path-option which is valid for path-protection
    bool valid_path_protection_path_option_exists = 9;
    // Is Switchover Underway
    bool is_path_protect_switch_over_underway = 10;
    // Path Protected Switchover Information
    te_pp_sw_log_entry_bag switchover = 11;
    // Remaining time until path protection reoptimization (seconds)
    uint32 reoptimization_time_remaining = 12;
}

// Segment-routing outgoing fowarding info
message mpls_te_s2l_sr_outgoing_fwd_info {
    // Output interface of LSP
    string lsp_output_interface = 1;
    // Output label of the LSP
    uint32 lsp_output_label = 2;
}

// MPLS TE Path Protected LSP Information
message mpls_te_path_protection_lsp {
    // LSP Uptime
    uint32 lsp_uptime = 1;
    // LSP ID 
    uint32 path_protection_lsp_id = 2;
    // Local label 
    uint32 lsp_local_label = 3;
    // Segment-routing iutgoing info of LSP
    repeated mpls_te_s2l_sr_outgoing_fwd_info srlsp_outgoing_info = 4;
    // Output interface of LSP
    string lsp_output_interface = 5;
    // Output label of the LSP
    uint32 lsp_output_label = 6;
    // Path used by LSP
    repeated rsvp_mgmt_ero_subobj lsp_hop = 7;
    // LSP State
    string lsp_state = 8;
}

