// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_te.topology_nodes.topology_node;

// A node in the MPLS TE topology
message mpls_te_topology_node_KEYS {
    string protocol = 1;
    string igp_id = 2;
    uint32 area = 3;
    string topology_node_type = 4;
    string igp_node_id = 5;
}

message mpls_te_topology_node {
    // The node's TE router-id. Not set for network nodes
    string topology_node_te_router_id = 50;
    // Flag to indicate whether this node is overloaded
    bool topology_node_overloaded = 51;
    // This node's link information
    repeated mpls_te_topology_link topology_node_links = 52;
    // This node's SID and SRBG information
    te_sr_node_info topology_node_sid_and_srbg = 53;
}

// Information about the Shared Risk Link Group
message mpls_srlg_info {
    // SRLG number
    uint32 shared_risk_group = 1;
    // SRLG name
    string srlg_name = 2;
}

// odu capability for flex  ODUs
message odu_capability_flex {
    // Max kbps Bandwidth of this level possible on this link
    uint32 max_bandwidth = 1;
    // Unreserved kbps Bandwidth of this level possible on this link
    uint32 unreserved_bandwidth = 2;
    // Per LSP Max kbps Bandwidth of this level possible on this link
    uint32 max_lsp_bandwidth = 3;
}

// odu capability for fixed ODUs 
message odu_capability_fixed {
    // Maximum Number of ODUs of this level possible on this link
    uint32 maximum_od_us = 1;
    // Maximum Number of ODUs of this level possible on this link
    uint32 unreserved_od_us = 2;
}

// ODU capability Union for bandwidth
message odu_cap_bw {
    string type = 1;
    // ODU capability for Fixed ODUs
    odu_capability_fixed fixed = 2;
    // ODU capability for Flex ODUs
    odu_capability_flex flex = 3;
}

// Odu capability at a level of multiplex tree for an ODU type
message odu_capability {
    // Signal Type
    string signal_type = 1;
    // ODU Type at stage 1, Not Set for HO ODU
    string stage1 = 2;
    // ODU Type at stage 2, Not Set for single stage mulitplexing
    string stage2 = 3;
    // ODU Type at stage 3, Not set up to two levels of multiplexing
    string stage3 = 4;
    // ODU Type at stage 4, Not set up to three levels of multiplexing
    string stage4 = 5;
    // True if link is terminable for this ODU level
    bool terminable = 6;
    // True if link is switchable for this ODU level
    bool switchable = 7;
    // True if link supports 1.25G TSG for this ODU level
    bool tsg1_p25 = 8;
    // True if link supports 2.5G TSG for this ODU level
    bool tsg2_p5 = 9;
    // True if link VCAT capable for this ODU level
    bool vcat_capable = 10;
    // True if link LCAS capable for this ODU level
    bool lcas_capable = 11;
    // Bandwidth related info for this ODU level
    odu_cap_bw bandwidth_info = 12;
}

// Link ODU Capabilities
message odu_link_capabilities {
    // Max LSP Bandwidth per priority in kbit/s
    repeated uint32 max_lsp_bandwidth = 1;
    // ODU Capabilities of Link
    repeated odu_capability odu_capabilities = 2;
}

// A link's Segment-Routing Adjacency information
message te_sr_adj_sid {
    // The adjacency SID assigned for the topology node
    uint32 adjacency_sid = 1;
    // Link Type
    string link_type = 2;
    // Local Address
    string local_addr = 3;
    // Remote Address
    string remote_addr = 4;
    // The neighbor node's IGP ID
    string nbr_node_igpid = 5;
    // The neigbor node's TE router-id
    string nbr_node_te_router_id = 6;
    // IGP Flag F
    bool flag_f = 7;
    // IGP Flag B
    bool flag_b = 8;
    // IGP Flag V
    bool flag_v = 9;
    // IGP Flag L
    bool flag_l = 10;
    // IGP Flag S
    bool flag_s = 11;
}

// MPLS TE Node's Segment-Routing Information
message te_sr_node_info {
    // Segment-Routing Node-SID
    uint32 segment_id = 1;
    // Node-SID local absolute value
    uint32 segment_id_local_absolute_value = 2;
    // Segment-Routring global block start value
    uint32 srgb_start = 3;
    // Segment-Routing global block size
    uint32 srgb_size = 4;
}

// Detailed pre-standard bandwidth information for a link
message mpls_te_topology_link_bw_prestd_detail {
    // Link's allocated bandwidth at priority levels (priority 0 to priority 7)
    repeated uint32 topology_link_prestandard_bandwidth_allocated = 1;
    // Link's available global-pool bandwidth at priority levels (priority 0 to priority 7)
    repeated uint32 topology_link_prestandard_bandwidth_available_global = 2;
    // Link's available sub-pool bandwidth at priority levels (priority 0 to priority 7)
    repeated uint32 topology_link_prestandard_bandwidth_available_subpool = 3;
}

// Pre-standard bandwidth information for a link belonging to a node in the MPLS TE topology
message mpls_te_topology_link_bw_prestd {
    // The link's physical bandwidth
    uint32 topology_link_prestandard_bandwidth_physical = 1;
    // The link's reservable global bandwidth
    uint32 topology_link_prestandard_bandwidth_reservation_global = 2;
    // The link's reservable subpool bandwidth
    uint32 topology_link_prestandard_bandwidth_reservation_subpool = 3;
    // Detailed bandwidth information for this link
    mpls_te_topology_link_bw_prestd_detail topology_link_prestandard_bandwidth_detail = 4;
}

// Detailed DSTE bandwidth information for a link
message mpls_te_topology_link_bw_std_detail {
    // Link's allocated bandwidth per class
    repeated uint32 topo_link_std_bw_allocated = 1;
    // Link's available bandwidth per class
    repeated uint32 topo_link_std_bw_available = 2;
}

// IETF_standard bandwidth information for a link belonging to a node in the MPLS TE topology
message mpls_te_topology_link_bw_std {
    // The link's physical bandwidth
    uint32 topo_link_std_bw_physical = 1;
    // The link's maximum reservable bandwidth
    uint32 topo_link_std_bw_res_max = 2;
    // The link's reservable BC0 bandwidth
    uint32 topo_link_std_bw_res_pool0 = 3;
    // The link's reservable BC1 bandwidth
    uint32 topo_link_std_bw_res_pool1 = 4;
    // Detailed bandwidth information for this link
    mpls_te_topology_link_bw_std_detail topo_link_std_bw_detail = 5;
}

// Bandwidth information for a link
message mpls_te_topology_link_bw {
    string bandwidth_migration_mode = 1;
    // Pre-standard bandwidth information for this link
    mpls_te_topology_link_bw_prestd topology_link_bandwidth_prestandard = 2;
    // IETF-standard bandwidth information for this link
    mpls_te_topology_link_bw_std topology_link_bandwidth_standard = 3;
}

// A link belonging to a node in the MPLS TE topology
message mpls_te_topology_link {
    // Link type
    string topology_link_type = 1;
    // Link's local interface address
    string topology_link_interface_address = 2;
    // Link's local interface ID
    uint32 topology_link_interface_id = 3;
    // Link's neighbor interface address
    string topology_link_neighbor_address = 4;
    // Link's neighbor interface ID
    uint32 topology_link_neighbor_id = 5;
    // System id of neighbor
    string topology_link_neighbor_system_id = 6;
    // Node id of neighbor
    uint32 topology_link_neighbor_node_id = 7;
    // Neighbor's link version counter
    uint32 topology_link_neighbor_generation = 8;
    // Neighbor's link version counter
    uint32 topology_link_fragment_id = 9;
    // The link's TE metric
    uint32 topology_link_te_metric = 10;
    // The link's IGP metric
    uint32 topology_link_igp_metric = 11;
    // Unidirectional Link Delay in micro-sec
    uint32 topology_link_uni_delay = 12;
    // Deprecated
    uint32 topology_link_affinity_bits = 13;
    // The link's affinity bits (colors)
    repeated uint32 topology_link_extended_affinity_bits = 14;
    // The link's switching capability
    uint32 topology_link_switching_capability = 15;
    // The link's encoding
    uint32 topology_link_encoding = 16;
    // The link's shared risk link groups
    repeated mpls_srlg_info shared_risk_link_groups = 17;
    // The link's topology bandwidth model
    string topology_link_bandwidth_model = 18;
    // Bandwidth information for this link
    mpls_te_topology_link_bw topology_link_bandwidth = 19;
    // ODU Link Capabilities
    odu_link_capabilities odu_link_capabilities = 20;
    // Adjacency SIDs assigned for adjacency nodes
    repeated te_sr_adj_sid adjacency_si_ds = 21;
}

