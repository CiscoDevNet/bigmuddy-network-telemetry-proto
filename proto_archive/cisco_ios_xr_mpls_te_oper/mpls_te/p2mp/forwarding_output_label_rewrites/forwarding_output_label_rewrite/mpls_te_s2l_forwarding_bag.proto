// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_te.p2mp.forwarding_output_label_rewrites.forwarding_output_label_rewrite;

// Output label forwarding details for S2Ls
message mpls_te_s2l_forwarding_bag_KEYS {
    uint32 tunnel_id = 1;
    uint32 lsp_id = 2;
    string extended_tunnel_id = 3;
    string source_address = 4;
    uint32 p2_mp_id = 5;
    string destination_address = 6;
    string next_hop_address = 7;
    string previous_hop_address = 8;
    string c_type = 9;
}

message mpls_te_s2l_forwarding_bag {
    // Output rewrite shared between S2Ls
    mpls_te_s2l_output_rw_bag s2_l_output_rewrite = 50;
    // Input interface of the S2Ls
    string original_input_interface = 51;
    // The output interface of the S2Ls
    string output_interface_name = 52;
    // Backup tunnel name
    string backup_tunnel_name = 53;
    // Unique identifiers for the S2L sharing the rewrite
    repeated mpls_te_s2l_forwarding_s2l_id_bag s2_l = 54;
    // TRUE if the s2l path is Segment-Routing
    bool is_segment_routing = 55;
    // Segment-Routing Paths
    repeated mpls_te_sr_s2l_path_bag s2_lsr_paths = 56;
}

// C-type-specific LSP FEC data
message te_lsp_fec_ctype_data_t {
    string fec_c_type = 1;
    // P2P LSP destination
    string p2_p_lsp_destination = 2;
    // P2MP ID
    uint32 fec_destination_p2_mp_id = 3;
}

// A LSP FEC
message te_lsp_fec_t {
    // LSP ID
    uint32 fec_lsp_id = 1;
    // Tunnel ID
    uint32 fec_tunnel_id = 2;
    // Extended tunnel ID
    string fec_extended_tunnel_id = 3;
    // Tunnel source address
    string fec_source = 4;
    // Destination or P2MP ID
    te_lsp_fec_ctype_data_t fec_destination_info = 5;
    // VRF; currently only for GMPLS tunnels
    string fec_vrf = 6;
}

// LMRIB S2L Output label rewrite FEC subfamily
message te_s2l_output_rw_fec_subfamily_bag {
    // LSP FEC
    te_lsp_fec_t lsp_fec = 1;
    // Next hop address
    string next_hop_address = 2;
    // Previous hop address
    string previous_hop_address = 3;
}

// Output rewrite tunnel information
message te_s2l_output_rw_output_info_bag {
    // Physical interface associated with the entry
    string physica_interface_name = 1;
    // Interface handle of the associated tunnel
    string tunnel_interface_name = 2;
    // Interface name of the parent intf
    string parent_interface_name = 3;
    // Next hop address associated with the entry
    string next_hop_address = 4;
    // Output label associated with the entry
    uint32 out_label = 5;
    // Segment-Routing labels stack
    repeated uint32 sr_label_stack = 6;
}

// An entry of output label rewrite data
message te_s2l_output_rw_fields_bag {
    // Time stamp of the entry (secs since 1/1/70)
    uint32 timestamp = 1;
    // Role of the associated S2L
    string out_rewrite_role = 2;
    // Local label of the rewrite
    uint32 label = 3;
    // Properties of the S2L rewrite
    te_s2l_output_rw_output_info_bag primary_s2_l = 4;
    // Properties of the S2L's backup tunnel rewrite
    te_s2l_output_rw_output_info_bag backup_tunnel_rewrite = 5;
    // Backup is active
    bool backup_active = 6;
    // Source of the S2L
    string s2_l_source = 7;
    // Imposition of explicit NULL
    string explicit_null = 8;
    // Protocol transported in the S2L
    uint32 protocol_transported = 9;
}

// S2L output rewrite
message mpls_te_s2l_output_rw_bag {
    // Subfamily identifiers
    te_s2l_output_rw_fec_subfamily_bag subfamily = 1;
    // Successful rewrite details
    te_s2l_output_rw_fields_bag successful_rewrite = 2;
    // Failed rewrite details
    te_s2l_output_rw_fields_bag failed_rewrite = 3;
    // Pending rewrite details
    te_s2l_output_rw_fields_bag pending_rewrite = 4;
}

// S2L Forwarding identifiers
message mpls_te_s2l_forwarding_s2l_id_bag {
    // Destination
    string destination_address = 1;
    // S2L Sub-Group ID
    uint32 sub_group_id = 2;
    // S2L Sub-Group Originator ID
    string sub_group_original_id = 3;
}

// Segment-Routing S2L path
message mpls_te_sr_s2l_path_bag {
    // True if path is primary
    bool is_primary = 1;
    // True if path is backup
    bool is_backup = 2;
    // Outgoing Interface Name
    string outgoing_interface = 3;
    // Path Identifier
    uint32 path_id = 4;
    // Backup Path Identifier
    uint32 backup_path_id = 5;
    // Outgoing Labels Stack
    repeated uint32 outgoing_labels_stack = 6;
    // Next hop
    string next_hop = 7;
}

