// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_te_oper.mpls_pce_stdby.peers.peer;

// PCE Neighbor Information
message pce_neighbor_bag_KEYS {
    string peer_address = 1;
}

message pce_neighbor_bag {
    // Error (for display only)
    string error = 50;
    // PCE State
    string pce_state = 51;
    // PCE Precedence
    uint32 precedence = 52;
    // Stateful
    bool stateful = 53;
    // Update capability
    bool capability_update = 54;
    // Instantiation capability
    bool capability_instantiate = 55;
    // Segment Routing capability
    bool capability_segment_routing = 56;
    // Triggered Synchronization capability
    bool triggered_sync_capability = 57;
    // DB version capability
    bool capability_db_version = 58;
    // Delta Synchronization capability
    bool delta_sync_capability = 59;
    // PCEP Up Time
    uint32 pcep_up_time = 60;
    // Keepalive count
    uint32 keepalives = 61;
    // Candidate
    bool candidate = 62;
    // Statically Configured
    bool statically_configured = 63;
    // MD5 Authentication Enabled
    bool md5_enabled = 64;
    // Keychain based Authentication Enabled
    bool keychain_enabled = 65;
    // IGPs
    repeated pce_peer_igp_bag ig_ps = 66;
    // Negotiated KA
    uint32 negotiated_keepalive = 67;
    // Negotiated DT
    uint32 negotated_dead_time = 68;
    // PCEReq Rx
    uint32 pce_req_rx = 69;
    // PCEReq Tx
    uint32 pce_req_tx = 70;
    // PCERep Rx
    uint32 pce_rep_rx = 71;
    // PCERep Tx
    uint32 pce_rep_tx = 72;
    // PCEErr Rx
    uint32 pce_err_rx = 73;
    // PCEErr Tx
    uint32 pce_err_tx = 74;
    // PCEOpen Tx
    uint32 pce_open_tx = 75;
    // PCEOpen Rx
    uint32 pce_open_rx = 76;
    // PCERpt Rx
    uint32 pce_rpt_rx = 77;
    // PCERpt Tx
    uint32 pce_rpt_tx = 78;
    // PCEUpd Rx
    uint32 pce_upd_rx = 79;
    // PCEUpd Tx
    uint32 pce_upd_tx = 80;
    // PCEInit Rx
    uint32 pce_init_rx = 81;
    // PCEInit_Tx
    uint32 pce_init_tx = 82;
    // PCE Keepalive Tx
    uint64 pce_keepalive_tx = 83;
    // PCE Keepalive Rx
    uint64 pce_keepalive_rx = 84;
    // Mininum reply time from peer in ms
    uint64 req_reply_min = 85;
    // Maximum reply time from peer in ms
    uint64 req_reply_max = 86;
    // Average reply time from peer in ms
    uint64 req_reply_avg = 87;
    // Request timeout count
    uint64 request_timeouts = 88;
    // Last sent PCEErr
    pceerr_bag last_tx_pce_err = 89;
    // Last received PCEErr
    pceerr_bag last_rx_pce_err = 90;
    // Local PCEP session ID
    uint32 local_sid = 91;
    // Remote PCEP session ID
    uint32 remote_sid = 92;
    // Minimum keepalive interval for the peer
    uint32 min_keepalive_interval = 93;
    // Maximum dead interval for the peer
    uint32 max_dead_interval = 94;
}

// PCE Error information
message pceerr_bag {
    // PCE Error Type
    uint32 pce_err_type = 1;
    // PCE Error Value
    uint32 pce_err_value = 2;
    // Has Open object
    bool has_open_object = 3;
    // Open Version
    uint32 open_version = 4;
    // Open Keepalive (seconds)
    uint32 open_keepalive = 5;
    // Open Deadtime (seconds)
    uint32 open_dead_time = 6;
    // Has RP object
    bool has_rp_object = 7;
    // RP request ID
    uint32 rp_request_id = 8;
}

// PCE IGP information
message pce_peer_igp_bag {
    // Type
    string igp_type = 1;
    // Instance ID
    string igp_instance_id = 2;
}

