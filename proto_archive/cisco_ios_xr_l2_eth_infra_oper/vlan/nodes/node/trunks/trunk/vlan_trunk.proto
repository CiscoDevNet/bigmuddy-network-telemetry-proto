// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.trunks.trunk;

// VLAN trunk interface information
message vlan_trunk_KEYS {
    string node_id = 1;
    string interface = 2;
}

message vlan_trunk {
    // Interface name
    string interface = 50;
    // Interface state
    string state = 51;
    // L2 MTU
    uint32 mtu = 52;
    // Layer 2 Transport Subinterfaces
    vlan_trunk_l2_sub_intfs layer2_sub_interfaces = 53;
    // Layer 3 Terminated Subinterfaces
    vlan_trunk_l3_sub_intfs layer3_sub_interfaces = 54;
    // QinQ Outer Tag Ether Type
    string qin_q_outer_ether_type = 55;
    // Number of subinterfaces with 802.1ad outer tag
    uint32 dot1ad_count = 56;
    // Interface/Sub-interface handling untagged frames
    string untagged_interface = 57;
    // IEEE 802.1Q/802.1ad multicast MAC address filtering
    string mac_filtering = 58;
}

// Subinterface counters
message vlan_trunk_sub_intf_state_counters {
    // Number of subinterfaces which are up
    uint32 up = 1;
    // Number of subinterfaces which are down
    uint32 down = 2;
    // Number of subinterfaces which are administrativelyshutdown
    uint32 admin_down = 3;
}

// Layer 3 Terminated Subinterfaces
message vlan_trunk_l3_sub_intfs {
    // Total number of Layer 3 subinterfaces configured
    uint32 total_count = 1;
    // Number of single tagged subinterfaces
    uint32 dot1_q_count = 2;
    // Number of double tagged subinterfaces
    uint32 q_in_q_count = 3;
    // Number of subinterfaces without VLAN tag configuration
    uint32 untagged_count = 4;
    // Numbers of subinterfaces up, down or administratively shut down
    vlan_trunk_sub_intf_state_counters state_counters = 5;
    // Native VLAN ID configured on trunk
    uint32 native_vlan = 6;
}

// Layer 2 Transport Subinterfaces
message vlan_trunk_l2_sub_intfs {
    // Total number of Layer 2 subinterfaces configured
    uint32 total_count = 1;
    // Number of single tagged subinterfaces
    uint32 dot1_q_count = 2;
    // Number of double tagged subinterfaces with explicit inner tag
    uint32 q_in_q_count = 3;
    // Number of double tagged subinterfaces with wildcarded inner tag
    uint32 q_in_any_count = 4;
    // Number of subinterfaces without VLAN tag configuration
    uint32 untagged_count = 5;
    // Numbers of subinterfaces up, down or administratively shut down
    vlan_trunk_sub_intf_state_counters state_counters = 6;
}

