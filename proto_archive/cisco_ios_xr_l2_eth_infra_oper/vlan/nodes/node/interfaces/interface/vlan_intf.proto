// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_l2_eth_infra_oper.vlan.nodes.node.interfaces.interface;

// VLAN Interface information
message vlan_intf_KEYS {
    string node_id = 1;
    string interface = 2;
}

message vlan_intf {
    // Interface
    string interface = 50;
    // Parent interface
    string parent_interface = 51;
    // Encapsulation type and tag stack
    vlan_tag_stack_type encapsulation_details = 52;
    // Service type
    string service = 53;
    // Interface state
    string state = 54;
    // L2 MTU
    uint32 mtu = 55;
    // L2 switched MTU
    uint32 switched_mtu = 56;
}

// VLAN double tag stack
message vlan_double_tag_stack {
    // Outer tag value
    uint32 outer_tag = 1;
    // Second tag value
    uint32 second_tag = 2;
}

message efp_range {
    uint32 vlan_id_low = 1;
    uint32 vlan_id_high = 2;
}

message efp_tag_match {
    string ethertype = 1;
    repeated efp_range vlan_ranges = 2;
    string priority = 3;
}

message efp_vlan_tag {
    string ethertype = 1;
    uint32 vlan_id = 2;
}

message efp_tag_local_traffic_stack {
    repeated efp_vlan_tag local_traffic_tags = 1;
}

message MacAddressType {
    string value = 1;
}

message efp_description {
    repeated efp_tag_match tags_to_match = 1;
    string payload_ethertype = 2;
    uint32 tags_popped = 3;
    repeated efp_vlan_tag pushes = 4;
    efp_tag_local_traffic_stack local_traffic_stack = 5;
    bool is_exact_match = 6;
    bool is_native_vlan = 7;
    bool is_native_preserving = 8;
    MacAddressType source_mac_match = 9;
    MacAddressType destination_mac_match = 10;
}

message efp_description_p_type {
    efp_description value = 1;
}

// VLAN encapsulation and tag stack
message vlan_tag_stack_type {
    string vlan_encapsulation = 1;
    // Tag value
    uint32 tag = 2;
    // Stack value
    vlan_double_tag_stack stack = 3;
    // Outer tag value
    uint32 outer_tag = 4;
    // Native tag value
    uint32 native_tag = 5;
    // 802.1ad tag value
    uint32 dot1ad_tag = 6;
    // 802.1ad native tag value
    uint32 dot1ad_native_tag = 7;
    // Service Instance encapsulation
    efp_description_p_type service_instance_details = 8;
    // 802.1ad 802.1Q stack value
    vlan_double_tag_stack dot1ad_dot1q_stack = 9;
    // 802.1ad Outer tag value
    uint32 dot1ad_outer_tag = 10;
}

