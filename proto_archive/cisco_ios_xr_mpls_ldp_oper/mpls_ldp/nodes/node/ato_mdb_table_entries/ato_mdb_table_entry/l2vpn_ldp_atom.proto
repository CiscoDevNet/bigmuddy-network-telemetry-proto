// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_ldp_oper.mpls_ldp.nodes.node.ato_mdb_table_entries.ato_mdb_table_entry;

// L2VPN AToM-DB information
message l2vpn_ldp_atom_KEYS {
    string node_name = 1;
    string peer_id = 2;
    uint32 fec_type = 3;
    uint32 pw_id = 4;
    uint32 agi_type = 5;
    uint32 agi = 6;
    uint32 saii_type = 7;
    string saii_local_id = 8;
    uint32 saii_global_id = 9;
    uint32 saii_prefix = 10;
    uint32 saii_ac_id = 11;
    uint32 taii_type = 12;
    string taii_local_id = 13;
    uint32 taii_global_id = 14;
    uint32 taii_prefix = 15;
    uint32 taii_ac_id = 16;
}

message l2vpn_ldp_atom {
    // Peer ID
    string peer_id = 50;
    // Pseudowire FEC information
    l2vpn_ldp_pw_fec_info fec_info = 51;
    // TLV Count from Label Mapping Message
    uint32 mapping_tlv_count = 52;
    // TLV Count from Notification Message
    uint32 notification_tlv_count = 53;
}

// Generic L2VPN Database event item
message infra_db_evt_entry {
    // The timestamp of the event
    string event_timestamp = 1;
    // Event name
    string event_name = 2;
    // Event type
    uint32 event_type = 3;
    // Multiple instance flag
    bool event_many = 4;
    // Sticky flag
    bool event_sticky = 5;
    // base flag object
    repeated uint32 event_flags = 6;
}

// Generic L2VPN database event history
message infra_db_evt_history {
    // number of item in the array
    uint32 event_number_entry = 1;
    repeated infra_db_evt_entry event_entry = 2;
}

// Base information (shared between l2fib and l2vpn)
message infra_db_base_info {
}

message l2vpn_ldp_pw_aii1_t {
    // Local Identifier
    string local_id = 1;
}

message l2vpn_ldp_pw_aii2_t {
    // Global ID
    uint32 gobal_id = 1;
    // Prefix
    uint32 prefix = 2;
    // AC ID
    uint32 ac_id = 3;
}

message l2vpn_ldp_pw_aii {
    string aii_type = 1;
    l2vpn_ldp_pw_aii1_t aii1 = 2;
    l2vpn_ldp_pw_aii2_t aii2 = 3;
}

message l2vpn_ldp_pw_agi1_t {
    // Route Distinguisher
    uint64 rd = 1;
}

message l2vpn_ldp_pw_agi {
    string agi_type = 1;
    l2vpn_ldp_pw_agi1_t agi1 = 2;
}

message l2vpn_ldp_pw_fec_128_t {
    // Pseudowire ID
    uint32 pseudowire_id = 1;
}

message l2vpn_ldp_pw_fec_129_t {
    // AGI
    l2vpn_ldp_pw_agi agi = 1;
    // Source Attachment Individual Identifier
    l2vpn_ldp_pw_aii saii = 2;
    // Target Attachment Individual Identifier
    l2vpn_ldp_pw_aii taii = 3;
}

message l2vpn_ldp_pw_fec_130_t {
    // AGI
    l2vpn_ldp_pw_agi agi = 1;
    // Source Attachment Individual Identifier
    l2vpn_ldp_pw_aii saii = 2;
}

message l2vpn_ldp_pw_fec_info {
    string fec_type = 1;
    l2vpn_ldp_pw_fec_128_t fec128 = 2;
    l2vpn_ldp_pw_fec_129_t fec129 = 3;
    l2vpn_ldp_pw_fec_130_t fec130 = 4;
}

