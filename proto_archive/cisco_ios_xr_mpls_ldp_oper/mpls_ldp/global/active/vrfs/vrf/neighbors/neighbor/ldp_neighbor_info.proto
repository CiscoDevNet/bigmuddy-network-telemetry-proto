// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_ldp_oper.mpls_ldp.global.active.vrfs.vrf.neighbors.neighbor;

// MPLS LDP Neighbor Information
message ldp_neighbor_info_KEYS {
    string vrf_name = 1;
    string lsr_id = 2;
    uint32 label_space_id = 3;
}

message ldp_neighbor_info {
    // Protocol Information
    ldp_ptcl_adj_info protocol_information = 50;
    // TCP Information
    ldp_tcp_info tcp_information = 51;
    // Neighbor IPv4 Address Info
    repeated ldp_nbr_addr_info ldp_nbr_bound_ipv4_address_info = 52;
    // Neighbor IPv6 Address Info
    repeated ldp_nbr_addr_info ldp_nbr_bound_ipv6_address_info = 53;
    // Neighbor's IPv4 Adjacency Information
    repeated ldp_nbr_adj_info ldp_nbr_ipv4_adj_info = 54;
    // Neighbor's IPv6 Adjacency Information
    repeated ldp_nbr_adj_info ldp_nbr_ipv6_adj_info = 55;
    // Detailed information with regards to holdtime, KA, inbound filtering, and Session protection
    ldp_nbr_detailed_info detailed_information = 56;
}

message ldp_in6_addr_t {
    string value = 1;
}

message ldp_ip_addr_t_union {
    string afi = 1;
    // No Address
    uint32 dummy = 2;
    // IPv4 address type
    string ipv4 = 3;
    // IPv6 address type
    ldp_in6_addr_t ipv6 = 4;
}

// MPLS LDP Neighbor Bound Address Information
message ldp_nbr_addr_info {
    // Neighbor Address
    ldp_ip_addr_t_union address = 1;
}

// MPLS LDP Neighbor TCP Information
message ldp_tcp_info {
    // Foreign host address
    ldp_ip_addr_t_union foreign_host = 1;
    // Foreign port number
    uint32 foreign_port = 2;
    // Local host address
    ldp_ip_addr_t_union local_host = 3;
    // Local port number
    uint32 local_port = 4;
    // Is MD5 Digest on
    bool is_md5_on = 5;
}

// MPLS LDP Neighbor Graceful Restart Adjacency Information
message ldp_gr_adj_info {
    // Is graceful restartable
    bool is_graceful_restartable = 1;
    // Reconnect timeout
    uint32 reconnect_timeout = 2;
    // Recovery time
    uint32 recovery_time = 3;
}

// MPLS LDP PTCL Adjacency Information
message ldp_ptcl_adj_info {
    // Session holdtime in sec
    uint32 ta_holdtime = 1;
    // State
    string ta_state = 2;
    // Number of pies sent
    uint32 ta_pies_sent = 3;
    // Number of pies received
    uint32 ta_pies_rcvd = 4;
    // Up time in seconds
    uint32 ta_up_time_seconds = 5;
    // Graceful restart information
    ldp_gr_adj_info ta_graceful_restart_adjacency = 6;
    // Is Label advertisment mode in Downstream On Demand mode or Not
    bool downstream_on_demand = 7;
}

// MPLS LDP Link Hello Information
message link_hello {
    // Interface name
    string interface = 1;
    // Interface name
    string interface_name = 2;
}

// MPLS LDP Targeted Hello Information
message targeted_hello {
    // Local Address
    ldp_ip_addr_t_union local_address = 1;
    // Target Address
    ldp_ip_addr_t_union target_address = 2;
    // State
    string state = 3;
}

message ldp_adj_union {
    string hello_type = 1;
    // Link hello
    link_hello link_hello_data = 2;
    // Target Hello
    targeted_hello target_hello_data = 3;
}

// MPLS LDP Neighbor Adjacency Information
message ldp_nbr_adj_info {
    // Adjacency group
    ldp_adj_union adjacency_group = 1;
}

// MPLS LDP Session client Information
message ldp_nbr_clients_info {
    // Client's name
    string name = 1;
}

// MPLS LDP Capability Description
message ldp_cap_desc {
    // Capability type (IANA assigned)
    uint32 type = 1;
    // Capability description
    string description = 2;
    // Capability data length
    uint32 capability_data_length = 3;
    // Capability data
    string capability_data = 4;
}

// MPLS LDP Neighbor Capability Information
message ldp_nbr_cap_info {
    // List of sent capabilities
    repeated ldp_cap_desc sent = 1;
    // List of received capabilities
    repeated ldp_cap_desc received = 2;
}

// MPLS LDP Neighbor Detailed Information
message ldp_nbr_detailed_info {
    // Session holdtime value in seconds from the peer
    uint32 peer_holdtime = 1;
    // Session keepalive interval in seconds
    uint32 keep_alive_interval = 2;
    // Peer state
    string peer_state = 3;
    // Targeted Session clients
    repeated ldp_nbr_clients_info clients = 4;
    // IPv4 Inbound label filtering present
    bool has_ipv4_inbound = 5;
    // IPv4 Inbound accept ACL
    string inbound_ipv4_acl = 6;
    // IPv6 Inbound label filtering present
    bool has_ipv6_inbound = 7;
    // IPv6 Inbound accept ACL
    string inbound_ipv6_acl = 8;
    // IPv4 Outbound label filtering present
    bool has_ipv4_outbound = 9;
    // IPv4 Outbound advertise ACL
    string outbound_ipv4_acl = 10;
    // IPv6 Outbound label filtering present
    bool has_ipv6_outbound = 11;
    // IPv6 Outbound advertise ACL
    string outbound_ipv6_acl = 12;
    // Session Protection enabled
    bool has_sp = 13;
    // Session Protection state
    string sp_state = 14;
    // Session protection ACL is present
    bool sp_has_acl = 15;
    // Session Protection ACL
    string spacl = 16;
    // Session Protection has non-default duration
    bool sp_has_duration = 17;
    // Session protection holdup time duration in seconds
    uint32 sp_duration = 18;
    // Session Protection holdup timer is running
    bool spht_running = 19;
    // Session Protection holdup time remaining value in seconds
    uint32 spht_remaining = 20;
    // NSR Sync State
    string nsr_sync_state = 21;
    // Last NSR sync error
    string nsr_last_sync_error = 22;
    // Last NSR sync NACK reaston
    string nsr_last_sync_nack_reason = 23;
    // Capabilities sent to and received from neighbor
    ldp_nbr_cap_info capabilities = 24;
    // BGP labelled prefixes advertisement state
    string bgp_advertisement_state = 25;
    // Duplicate IPv4 address bound to this peer
    repeated ldp_nbr_addr_info ipv4_duplicate_addresses = 26;
    // Duplicate IPv6 address bound to this peer
    repeated ldp_nbr_addr_info ipv6_duplicate_addresses = 27;
    // Is BGP labelled prefixes advertised to the neighbor
    bool advertise_bgp_prefixes = 28;
}

