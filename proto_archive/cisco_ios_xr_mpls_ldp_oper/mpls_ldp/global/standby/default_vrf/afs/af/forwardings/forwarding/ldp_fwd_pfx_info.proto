// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_mpls_ldp_oper.mpls_ldp.global.standby.default_vrf.afs.af.forwardings.forwarding;

// MPLS LDP Forwarding Prefix Information
message ldp_fwd_pfx_info_KEYS {
    string af_name = 1;
    string prefix = 2;
}

message ldp_fwd_pfx_info {
    // VRF information
    ldp_vrf_info vrf = 50;
    // Table ID associated with IP prefix
    uint32 table_id = 51;
    // IP Prefix
    ldp_ip_addr_t_union prefix = 52;
    // Prefix length
    uint32 prefix_length = 53;
    // Route
    ldp_fwd_route_info route = 54;
    // Paths
    repeated ldp_fwd_path_info paths = 55;
}

message ldp_in6_addr_t {
    string value = 1;
}

message ldp_ip_addr_t_union {
    string afi = 1;
    // No Address
    uint32 dummy = 2;
    // IPv4 address type
    string ipv4 = 3;
    // IPv6 address type
    ldp_in6_addr_t ipv6 = 4;
}

// MPLS LDP Identifier Information
message ldp_ldpid_info {
    // LSR identifier
    string lsr_id = 1;
    // Label space identifier
    uint32 label_space_id = 2;
    // LDP identifier
    string ldp_id = 3;
}

// MPLS LDP VRF information
message ldp_vrf_info {
    // VRF Name
    string name = 1;
    // VRF Id
    uint32 id = 2;
}

// Forwarding Path MPLS nexthop info
message ldp_fwd_path_mpls_nh_info {
    // Nexthop LDP peer
    ldp_ldpid_info nexthop_peer_ldp_ident = 1;
    // Outgoing label
    uint32 out_label = 2;
    // Outgoing label reason
    string out_label_rsn = 3;
    // Outgoing Label Type
    string out_label_type = 4;
    // Outgoing label owner
    string out_label_owner = 5;
    // Is from a GR neighbor
    bool is_from_graceful_restartable_neighbor = 6;
    // Is the entry stale
    bool is_stale = 7;
}

// MPLS LDP Forwarding Path Remote LFA-FRR backup routing info
message ldp_fwd_path_rlfa_routing_info {
    // Whether path has remote LFA backup
    bool has_remote_lfa_bkup = 1;
    // Whether TLDP is needed with remote PQ node
    bool needs_tldp = 2;
    // Remote/P node address
    ldp_ip_addr_t_union remote_p_node_id = 3;
    // Whether remote LFA path has a Q node associated
    bool has_q_node = 4;
    // Remote/Q node address
    ldp_ip_addr_t_union remote_q_node_id = 5;
}

// MPLS LDP Forwarding Path Remote LFA-FRR backup MPLS MOI info
message ldp_fwd_path_rlfa_moi_info {
    // Inner label stack info
    repeated ldp_fwd_path_mpls_nh_info stack = 1;
}

// MPLS LDP Forwarding Path Remote LFA-FRR backup MPLS info
message ldp_fwd_path_rlfa_mpls_info {
    // Whether path has remote LFA backup
    bool has_remote_lfa_bkup = 1;
    // Remote LFA MPLS nexthop(s_ info
    ldp_fwd_path_rlfa_moi_info mpls_outgoing_info = 2;
}

// MPLS LDP Forwarding Path IP Routing information
message ldp_fwd_path_routing_info {
    // Interface name
    string interface = 1;
    // Interface Name
    string interface_name = 2;
    // Next Hop
    ldp_ip_addr_t_union next_hop = 3;
    // Nexthop is overriden by LDP
    bool nh_is_overriden = 4;
    // Nexthop Identifier
    uint32 nexthop_id = 5;
    // Table ID for nexthop address
    uint32 next_hop_table_id = 6;
    // Route path flags
    uint32 flags = 7;
    // Path's load metric for load balancing
    uint32 load_metric = 8;
    // path Id
    uint32 path_id = 9;
    // Backup path Id
    uint32 bkup_path_id = 10;
    // Routing path flags decoded
    string path_flags = 11;
    // Remote LFA-FRR backup info
    ldp_fwd_path_rlfa_routing_info remote_lfa = 12;
}

// MPLS LDP Forwarding Path MPLS information
message ldp_fwd_path_mpls_info {
    // MPLS nexthop info
    ldp_fwd_path_mpls_nh_info mpls_outgoing_info = 1;
    // Remote LFA-FRR backup info
    ldp_fwd_path_rlfa_mpls_info remote_lfa = 2;
}

// MPLS LDP Forwarding Route IP Routing information
message ldp_fwd_route_routing_info {
    // Route RIB ersion
    uint32 version = 1;
    // Route priority
    uint32 priority = 2;
    // Route source protol Id
    uint32 source = 3;
    // Route type
    uint32 type = 4;
    // Route RIB flags
    uint32 flags = 5;
    // Route metric
    uint32 metric = 6;
    // Is route leaked across local VRFs?
    bool is_local_vrf_leaked = 7;
    // Number of routing updates
    uint32 routing_update_count = 8;
    // Last Routing update nanosec timestamp
    uint64 routing_update_timestamp = 9;
    // Last Routing update nanosec age
    uint64 routing_update_age = 10;
}

// MPLS LDP Forwarding Route LDP information
message ldp_fwd_route_mpls_info {
    // Local label
    uint32 local_label = 1;
    // Number of forwarding updates
    uint32 forwarding_update_count = 2;
    // Last Forwarding update nanosec timestamp
    uint64 forwarding_update_timestamp = 3;
    // Last Forwarding update nanosec age
    uint64 forwarding_update_age = 4;
}

// MPLS LDP Forwarding Route information
message ldp_fwd_route_info {
    // IP routing information
    ldp_fwd_route_routing_info routing = 1;
    // MPLS information
    ldp_fwd_route_mpls_info mpls = 2;
}

// MPLS LDP Forwarding Path info
message ldp_fwd_path_info {
    // IP routing information
    ldp_fwd_path_routing_info routing = 1;
    // MPLS information
    ldp_fwd_path_mpls_info mpls = 2;
}

