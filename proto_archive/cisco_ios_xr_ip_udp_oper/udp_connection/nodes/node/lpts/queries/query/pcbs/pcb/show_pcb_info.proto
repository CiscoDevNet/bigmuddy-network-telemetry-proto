// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_udp_oper.udp_connection.nodes.node.lpts.queries.query.pcbs.pcb;

// PCB information to display
message show_pcb_info_KEYS {
    string node_name = 1;
    string query_name = 2;
    uint32 pcb_address = 3;
}

message show_pcb_info {
    // Layer 4 protocol
    uint32 l4_protocol = 50;
    // Local port
    uint32 local_port = 51;
    // Remote port
    uint32 foreign_port = 52;
    // Local IP address
    ipAddr local_address = 53;
    // Remote IP address
    ipAddr foreign_address = 54;
    // Common PCB information
    common_pcb_info common = 55;
}

message lpts_ipv6_address_type {
    string value = 1;
}

// IP Address
message ipAddr {
    string af_name = 1;
    // IPv4 address
    string ipv4_address = 2;
    // IPv6 address
    lpts_ipv6_address_type ipv6_address = 3;
}

message pkt_type_en {
    string type = 1;
    // ICMP message type
    string icmp_message_type = 2;
    // ICMPv6 message type
    string icm_pv6_message_type = 3;
    // IGMP message type
    string igmp_message_type = 4;
    // Message type in number
    uint32 message_id = 5;
}

// LPTS Interface Filter
message lptsRxFilter {
    // Interface name
    string interface_name = 1;
    // Protocol-specific packet type
    pkt_type_en packet_type = 2;
    // Remote address
    ipAddr remote_address = 3;
    // Local address
    ipAddr local_address = 4;
    // Remote address length
    uint32 remote_length = 5;
    // Local address length
    uint32 local_length = 6;
    // Receive Remote port
    uint32 receive_remote_port = 7;
    // Receive Local port
    uint32 receive_local_port = 8;
    // Priority
    uint32 priority = 9;
    // Minimum TTL
    uint32 ttl = 10;
    // flow information
    uint32 flow_types_info = 11;
}

// LPTS flags
message lpts_flags {
    // PCB bound
    bool is_pcb_bound = 1;
    // Sent drop packets
    bool is_local_address_ignore = 2;
    // Ignore VRF Filter
    bool is_ignore_vrf_filter = 3;
}

// LPTS accept mask
message lpts_accept_mask {
    // Set interface
    bool is_interface = 1;
    // Set packet type
    bool is_packet_type = 2;
    // Set Remote address
    bool is_remote_address = 3;
    // Set Remote Port
    bool is_remote_port = 4;
    // Set Local Address
    bool is_local_address = 5;
    // Set Local Port
    bool is_local_port = 6;
}

// LPTS options
message lpts_options {
    // Receive filter enabled
    bool is_receive_filter = 1;
    // IP SLA
    bool is_ip_sla = 2;
}

// LPTS PCB information block
message lpts_pcb {
    // Receive options
    lpts_options options = 1;
    // LPTS flags
    lpts_flags lpts_flags = 2;
    // AcceptMask
    lpts_accept_mask accept_mask = 3;
    // Interface Filters
    repeated lptsRxFilter filters = 4;
    // Minimum TTL
    uint32 ttl = 5;
    // flow information
    uint32 flow_types_info = 6;
}

// Common information for all PCB types
message common_pcb_info {
    // Address Family
    string af_name = 1;
    // LPTS PCB information
    lpts_pcb lpts_pcb = 2;
}

