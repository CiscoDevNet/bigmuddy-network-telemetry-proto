// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.mpls_te.mpls_te_fragments.mpls_te_fragment;

// OSPF MPLS-TE Information
message ospf_sh_mpls_KEYS {
    string process_name = 1;
    string vrf_name = 2;
    uint32 area_id = 3;
}

message ospf_sh_mpls {
    // OSPF MPLS-TE router ID
    string mpls_te_router_id = 50;
    // If true, MPLS-TE enabled in area
    bool mpls_te_enabled = 51;
    // If true, MPLS-TE initialized in the area
    bool mpls_te_initialized = 52;
    // Area ID string in decimal or dotted decimal format
    string mpls_te_area_id = 53;
    // Area information instance
    uint32 mpls_te_area_instance = 54;
    // MPLS-TE router address
    string mpls_te_router_address = 55;
    // MPLS-TE links in the area
    repeated ospf_sh_mpls_link mpls_te_links = 56;
    // Next MPLS-TE fragment ID
    uint32 mpls_te_next_fragment_id = 57;
    // If true, fragment has space for next link
    bool spacious_fragment = 58;
    // MPLS TE fragments in the area
    repeated ospf_sh_mpls_fragment mpls_te_fragment = 59;
}

// Link switching capability
message ospf_sh_mpls_ixcd_cap {
    // Link Switching Capability
    uint32 link_switching_capability = 1;
    // Link Encoding
    uint32 link_encoding = 2;
    // Maximum LSP bandwidth for each priority (bytes/s)
    repeated uint64 maximum_lsp_bw_per_priority = 3;
    // Minimum LSP bandwidth (bytes/s)
    uint64 minimum_lsp_bw = 4;
    // Link MTU size (bytes)
    uint32 link_mtu = 5;
}

// Link protocol and priority capability
message ospf_sh_mpls_link_protoprio {
    // Link protocol capability
    uint32 link_protocol_capability = 1;
    // Link protocol priority
    uint32 link_protocol_priority = 2;
}

// Available bandwidth for each priority level
message ospf_sh_mpls_bw {
    // Unreserved bandwidth for each priority (bytes/s)
    repeated uint64 bw_per_priority = 1;
}

// EXTENDED administrative group TLVs
message ospf_sh_mpls_eag {
    // Size of the extended admin group
    uint32 extended_admin_size = 1;
    // Value of Extended Admin Group
    repeated uint32 ext_admin_data = 2;
}

// MPLS TE Link Optional TLV BC Data
message mpls_tel_opt_bc_val {
    // Allocation Model ID
    uint32 model_id = 1;
    // Value of BC TLV
    repeated uint64 mplste_link_bc_bandwidth = 2;
    // Number of BC TLVs
    uint32 num_b_cs = 3;
}

// MPLS TE Link Optional TLV SRLG Data
message mpls_tel_opt_srlg_val {
    // Length of SRLG TLV
    uint32 srlg_len = 1;
    // Number of SRLG TLVs
    uint32 num_srl_gs = 2;
    // Value of SRLG TLV
    repeated uint32 mplste_link_srlg_data = 3;
}

// Common values in both Fixed and Flex Sub TLV
message bw_sub_tlv_value_common {
    // Signal Type
    uint32 signal_type = 1;
    // Number of stages
    uint32 num_stages = 2;
    // T Bit
    uint32 t_bit = 3;
    // S Bit
    uint32 s_bit = 4;
    // TSG
    uint32 tsg = 5;
    // Res
    uint32 res = 6;
    // Priority 0
    uint32 priority_bit0 = 7;
    // Priority 1
    uint32 priority_bit1 = 8;
    // Priority 2
    uint32 priority_bit2 = 9;
    // Priority 3
    uint32 priority_bit3 = 10;
    // Priority 4
    uint32 priority_bit4 = 11;
    // Priority 5
    uint32 priority_bit5 = 12;
    // Priority 6
    uint32 priority_bit6 = 13;
    // Priority 7
    uint32 priority_bit7 = 14;
    // Array of Stages
    bytes stage = 15;
}

// Value of Fixed Sub TLV
message bw_fixed_subtlv_value {
    // Value of Fixed Sub TLV
    bw_sub_tlv_value_common fixed_sub_tlv_value = 1;
    // Array of Unres Oduj Prio
    repeated uint32 unres_oduj_prio = 2;
}

// Value of Flex Sub TLV
message bw_flex_subtlv_value {
    // Flex Sub TLV Value
    bw_sub_tlv_value_common flex_sub_tlv_value_common = 1;
    // Array of Unres LSP BW
    repeated uint64 unres_lspbw = 2;
    // Max LSP BW Array
    repeated uint64 max_lspbw = 3;
}

// Sub Tlv values for IXCD Bandwidth
message ixcd_bw_sub_tlv_value_union {
    uint32 ixcdbw_sub_tlv_type = 1;
    // Value of Fixed Sub TLV
    bw_fixed_subtlv_value fixed_bw_sub_tlv_value = 2;
    // Value of Flex Sub TLV
    bw_flex_subtlv_value flex_bw_sub_tlv_value = 3;
}

// IXCD BW sub tlv
message ixcd_bw_sub_tlv {
    // Type of Sub TLV
    uint32 bw_sub_tlv_type = 1;
    // Length of BW Sub TLV
    uint32 bw_sub_tlv_length = 2;
    // Value of BW Sub TLV
    ixcd_bw_sub_tlv_value_union bw_sub_tlv_value = 3;
}

// IXCD LE PSC information
message ixcd_le_psc_info {
    // Min LSP bandwidth
    uint64 min_lsp_bandwidth = 1;
    //  Interface MTU
    uint32 psc_interface_mtu = 2;
}

// Array of BW Sub TLVs
message ixcd_bw_sub_tlv_arr {
    // Array of sub tlvs
    repeated ixcd_bw_sub_tlv arr_bw_sub_tl_vs = 1;
}

// Switching Cap values
message ixcd_tlv_switchingcap_value_union {
    uint32 switching_cap_type = 1;
    // IXCD PSC information
    ixcd_le_psc_info ixcdpsc_info = 2;
    // Sub-TLVs
    ixcd_bw_sub_tlv_arr ixcdbw_sub_tlv = 3;
}

// MPLS TE Link Optional TLV IXCD Data
message mpls_tel_opt_ixcd_val {
    // SCap
    uint32 switching_cap = 1;
    // Rile LenCode
    uint32 rile_len_code = 2;
    // Max LSP bandwidth array
    repeated sint64 max_lspbw = 3;
    // Fixed SCSI count
    uint32 fixed_scsi_count = 4;
    // Flexible SCSI count
    uint32 flex_scsi_count = 5;
    // Switching Cap type
    ixcd_tlv_switchingcap_value_union ixcd_switching_cap_type = 6;
}

// MPLS TE Link Optional TLV IXCD Data
message mpls_tel_opt_unid_val {
    // Uni Dir Delay
    uint32 uni_dir_delay = 1;
}

// Value of TLVs
message mplstel_tlv_value_union {
    string opaque_tlv_type = 1;
    // Value of Bandwidth Constraints TLV
    mpls_tel_opt_bc_val bctlv_value = 2;
    // Value of SRLG TLV
    mpls_tel_opt_srlg_val srlgtlv_value = 3;
    // Value of IXCD TLV
    mpls_tel_opt_ixcd_val ixcdtlv_value = 4;
    // Value of Uni Delay TLV
    mpls_tel_opt_unid_val unidtlv_value = 5;
}

// MPLS TE Link Optional TLVs
message ospf_sh_mpls_tel_opt_tlv {
    // Type of Opt TLV
    string mplste_link_opt_tlv_type = 1;
    // Length of Opt TLV
    uint32 mplste_link_opt_tlv_len = 2;
    // Value of Opt TLV
    repeated mplstel_tlv_value_union mplste_link_opt_tlv_value = 3;
}

// OSPF MPLS-TE link Information
message ospf_sh_mpls_link {
    // If true, Link is new
    bool new_link = 1;
    // Fragment ID for this link
    uint32 fragment_id = 2;
    // Link instance
    uint32 mpls_link_instance = 3;
    // Type of link
    string mpls_link_type = 4;
    // Neighbor system ID
    string neighbor_system_id = 5;
    // The local interface address
    string link_address = 6;
    // Neighbor IP address.
    string neighbor_ip_address = 7;
    // Link IGP metric
    uint32 igp_metric = 8;
    // Link TE metric
    uint32 te_metric = 9;
    // Maximum link bandwidth (bytes/s)
    uint32 maximum_link_bw = 10;
    // Maximum link global pool reservable bandwidth (bytes/s)
    uint32 maximum_link_reservable_bw = 11;
    // Maximum link subpool reservable bandwidth (bytes/s)
    uint32 maximum_link_sub_reservable_bw = 12;
    // Number of priorities.
    sint32 priority_count = 13;
    // Global pool unreserved bandwidth for each priority (bytes/s)
    ospf_sh_mpls_bw global_unreserve_bw_per_priority = 14;
    // Sub pool unreserved bandwidth for each priority (bytes/s)
    ospf_sh_mpls_bw sub_pool_unreserve_bw_per_priority = 15;
    // Affinity
    uint32 affinity = 16;
    // Output interface ID
    uint32 output_interface_id = 17;
    // Input interface ID
    uint32 input_interface_id = 18;
    // Link protocol and protocol priority capability
    ospf_sh_mpls_link_protoprio link_protocol_priority_capability = 19;
    // Link switching capability
    ospf_sh_mpls_ixcd_cap link_sw_capability = 20;
    // A DS-TE Allocation Model in use
    bool dste_in_use = 21;
    // DS-TE Allocation Model ID
    string dste_allocation_model_id = 22;
    // Number of Optional TLVs
    uint32 number_of_optional_tl_vs = 23;
    // List of Optional TLVs
    repeated ospf_sh_mpls_tel_opt_tlv mplste_link_opt_tlv = 24;
    // Extended Admin Group
    ospf_sh_mpls_eag extended_admin_group_list = 25;
}

// OSPF MPLS-TE Fragment Information
message ospf_sh_mpls_fragment {
    // Fragment instance
    uint32 fragment_instance = 1;
    // Fragment ID
    uint32 fragment_id = 2;
    // DS-TE Allocation Model ID
    uint32 dste_model_id = 3;
    // Number of fragment links which haven't changed since the last update
    uint32 same_fragment_count = 4;
    // List of fragment links
    repeated ospf_sh_mpls_link mpls_te_links = 5;
}

