// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.process_information.process_areas.process_area;

// OSPF Area Summary Information
message ospf_sh_area_KEYS {
    string process_name = 1;
    string vrf_name = 2;
    uint32 area_id = 3;
    string address = 4;
}

message ospf_sh_area {
    // Area ID string
    string area_id_string = 50;
    // If true, Backbone area is active
    bool backbone_area_active = 51;
    // Number of interfaces in the area
    uint32 area_interface_count = 52;
    // If true, stub area
    bool area_stub = 53;
    // If true, totally stubby area
    bool area_total_stub = 54;
    // Default cost for Stub or NSSA area
    uint32 stub_default_cost = 55;
    // If true, area is a NSSA
    bool area_nssa = 56;
    // If true, No redistribution into this NSSA area
    bool nssa_no_redistribution = 57;
    // If true, perform 7/5 translation
    bool nssa_translate = 58;
    // If true, generate NSSA default route
    bool nssa_default = 59;
    // If true, MPLS-TE enabled
    bool te_enabled = 60;
    // TE area topology version number
    uint32 te_topology_version = 61;
    // If true, advertise intra-area prefixes as external
    bool external_out = 62;
    // If true, advertise redistributedprefixes as summary
    bool summary_in = 63;
    // If true, Segment Routing enabled
    uint32 segment_routing = 64;
    // If true, All routers in Area are SR Strict-SPF Capable
    bool sr_strict_spf_cap = 65;
    // If true, All routers in Area have SR Strict-SPF SIDs
    bool sr_strict_spfsi_ds_available = 66;
    // Authentication type
    string authentication_type = 67;
    // Number of SPF calculations run
    uint32 spf_count = 68;
    // If true, inbound policy is configured
    bool area_policy_in = 69;
    // Inbound summary lsa filtering policy
    string area_policy_in_name = 70;
    // If true, outbound policy is configured
    bool area_policy_out = 71;
    // Outbound summary lsa filtering policy
    string area_policy_out_name = 72;
    // List of ranges to summarize
    repeated ospf_sh_area_range area_range_list = 73;
    // Number of LSAs in the Area
    uint32 area_lsa_count = 74;
    // Sum of all area LSAs checksum
    uint32 area_lsa_checksum = 75;
    // Number of Opaque LSAs in the Area
    uint32 area_opaque_lsa_count = 76;
    // Sum of opaque LSA checksums
    uint32 area_opaque_lsa_checksum = 77;
    // Number of LSA with demand circuit bit not set
    uint32 area_dc_bitless_lsa_count = 78;
    // Number of indication LSAs
    uint32 indication_lsa_count = 79;
    // Number of DoNotAge LSAs
    uint32 dna_lsa_count = 80;
    // Number of LSAs which need to be flooded
    uint32 flood_list_length = 81;
    // Number of LFA enabled interfaces
    uint32 area_lfa_interface_count = 82;
    // Number of Per Prefix LFA enabled interfaces
    uint32 area_per_prefix_lfa_interface_count = 83;
    // Area LFA revision
    uint32 area_lfa_revision = 84;
    // Num of nbrs currently forming
    uint32 area_adj_stag_num_nbr_forming = 85;
    // Num of full nbrs in area
    uint32 area_num_nbr_full = 86;
}

// OSPF Area Range Information
message ospf_sh_area_range {
    // IP prefix for summarization
    string range_prefix = 1;
    // Network mask
    string range_mask = 2;
    // Cost
    uint32 cost = 3;
    // Whether to advertise Summary LSAs for this range
    bool advertise_flag = 4;
}

