// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

//Path: Cisco_IOS_XR_pmengine_oper:performance_management_history/global/periodic/ethernet_history/ethernet_port_histories/ethernet_port_history/ethernet_hour24_history/ethernet_hour24_ether_histories/ethernet_hour24_ether_history/ethernet_hour24_ether_time_line_instances/ethernet_hour24_ether_time_line_instance

package cisco_ios_xr_pmengine_oper.performance_management_history.global.periodic.ethernet_history.ethernet_port_histories.ethernet_port_history.ethernet_hour24_history.ethernet_hour24_ether_histories.ethernet_hour24_ether_history.ethernet_hour24_ether_time_line_instances.ethernet_hour24_ether_time_line_instance;

// all paras in ether
message pm_ethernet_paras_KEYS {
    string name = 1;
    uint32 number = 2;
    uint32 number_1 = 3;
}

message pm_ethernet_paras {
    // index
    uint32 index = 50;
    // valid
    bool valid = 51;
    // timestamp
    string timestamp = 52;
    // last clear time
    string last_clear_time = 53;
    // last clear time
    string last_clear30_sec_time = 54;
    // last clear time
    string last_clear15_min_time = 55;
    // last clear time
    string last_clear24_hr_time = 56;
    // 30 sec support
    bool sec30_support = 57;
    // RX_PKT
    pm_ether_param rx_pkt = 58;
    // STAT_PKT
    pm_ether_param stat_pkt = 59;
    // OCTET_STAT
    pm_ether_param octet_stat = 60;
    // OVERSIZE_PKT
    pm_ether_param oversize_pkt_stat = 61;
    // FCS_ERR
    pm_ether_param fcs_errors_stat = 62;
    // LONG_FRAMES
    pm_ether_param long_frames_stat = 63;
    // JABBER_STATS
    pm_ether_param jabber_stat = 64;
    // SIXTY_FOUR_OCTET
    pm_ether_param ether64_octets = 65;
    // OCTET
    pm_ether_param ether65127_octet = 66;
    // TFF_OCTET
    pm_ether_param ether128255_octet = 67;
    // FOO_OCTET
    pm_ether_param ether256511_octet = 68;
    // OZTT_OCTET
    pm_ether_param ether5121023_octet = 69;
    // OFO_OCTET
    pm_ether_param ether10241518_octet = 70;
    // IN_UCAST
    pm_ether_param in_ucast_pkt = 71;
    // IN_MCAST
    pm_ether_param in_mcast_pkt = 72;
    // IN_BCAST
    pm_ether_param in_bcast_pkt = 73;
    // OUT_UCAST
    pm_ether_param out_ucast_pkt = 74;
    // OUT_BCAST
    pm_ether_param out_bcast_pkt = 75;
    // OUT_MCAST
    pm_ether_param out_mcast_pkt = 76;
    // TX_PKT
    pm_ether_param tx_pkt = 77;
    // IFIN_ERRORS
    pm_ether_param if_in_errors = 78;
    // IFIN_OCTETS
    pm_ether_param if_in_octets = 79;
    // ETHER_STAT_MULTICAST_PKT
    pm_ether_param ether_stat_multicast_pkt = 80;
    // ETHER_STAT_BROADCAST_PKT
    pm_ether_param ether_stat_broadcast_pkt = 81;
    // ETHER_STAT_UNDERSIZED_PKT
    pm_ether_param ether_stat_undersized_pkt = 82;
    // OUT_OCTET
    pm_ether_param out_octets = 83;
    // INPUT_PAUSE_FRAME
    pm_ether_param in_pause_frame = 84;
    // INPUT_GOOD_BYTES
    pm_ether_param in_good_bytes = 85;
    // INPUT_802_1Q_FRAMES
    pm_ether_param in8021_q_frames = 86;
    // INPUT_PKTS_1519MAX_OCTETS
    pm_ether_param in_pkts1519_max_octets = 87;
    // INPUT_GOOD_PKTS
    pm_ether_param in_good_pkts = 88;
    // INPUT_DROP_OVERRUN
    pm_ether_param in_drop_overrun = 89;
    // INPUT_DROP_ABORT
    pm_ether_param in_drop_abort = 90;
    // INPUT_DROP_INVALID_VLAN
    pm_ether_param in_drop_invalid_vlan = 91;
    // INPUT_DROP_INVALID_DMAC
    pm_ether_param in_drop_invalid_dmac = 92;
    // INPUT_DROP_INVALID_ENCAP
    pm_ether_param in_drop_invalid_encap = 93;
    // INPUT_DROP_OTHER
    pm_ether_param in_drop_other = 94;
    // INPUT_MIB_GIANT
    pm_ether_param in_mib_giant = 95;
    // INPUT_MIB_JABBER
    pm_ether_param in_mib_jabber = 96;
    // IN_MIB_CRC
    pm_ether_param in_mibcrc = 97;
    // IN_ERROR_COLLISIONS
    pm_ether_param in_error_collisions = 98;
    // IN_ERROR_SYMBOL
    pm_ether_param in_error_symbol = 99;
    // OUT_GOOD_BYTES
    pm_ether_param out_good_bytes = 100;
    // OUT_802_1Q_FRAMES
    pm_ether_param out8021_q_frames = 101;
    // OUT_PAUSE_FRAMES
    pm_ether_param out_pause_frames = 102;
    // OUT_PKTS_1519_MAX_OCTETS
    pm_ether_param out_pkts1519_max_octets = 103;
    // OUT_GOOD_PKTS
    pm_ether_param out_good_pkts = 104;
    // OUT_DROP_UNDERRUN
    pm_ether_param out_drop_underrun = 105;
    // OUT_DROP_ABORT
    pm_ether_param out_drop_abort = 106;
    // OUT_DROP_OTHER
    pm_ether_param out_drop_other = 107;
    // OUT_ERROR_OTHER
    pm_ether_param out_error_other = 108;
    // IN_ERROR_GIANT
    pm_ether_param in_error_giant = 109;
    // IN_ERROR_RUNT
    pm_ether_param in_error_runt = 110;
    // IN_ERROR_JABBERS
    pm_ether_param in_error_jabbers = 111;
    // IN_ERROR_FRAGMENTS
    pm_ether_param in_error_fragments = 112;
    // IN_ERROR_OTHER
    pm_ether_param in_error_other = 113;
    // IN_PKT_64_OCTET
    pm_ether_param in_pkt64_octet = 114;
    // IN_PKTS_65_127OCTETS
    pm_ether_param in_pkts65_to127_octets = 115;
    // IN_PKTS_128_255_OCTETS
    pm_ether_param in_pkts128_to255_octets = 116;
    // IN_PKTS_256_511_OCTETS
    pm_ether_param in_pkts256_to511_octets = 117;
    // IN_PKTS_512_1023_OCTETS
    pm_ether_param in_pkts512_to1023_octets = 118;
    // IN_PKTS_1024_1518_OCTETS
    pm_ether_param in_pkts1024_to1518_octets = 119;
    // OUT_PKT_64_OCTET
    pm_ether_param outpkt64octet = 120;
    // OUT_PKTS_65_127OCTETS
    pm_ether_param out_pkts65127_octets = 121;
    // OUT_PKTS_128_255_OCTETS
    pm_ether_param out_pkts128255_octets = 122;
    // OUT_PKTS_256_511_OCTETS
    pm_ether_param out_pkts256511_octets = 123;
    // OUT_PKTS_512_1023_OCTETS
    pm_ether_param out_pkts5121023_octets = 124;
    // OUT_PKTS_1024_1518_OCTETS
    pm_ether_param out_pkts10241518_octets = 125;
    // Rx Utilization in Percent
    pm_ether_param_string rx_util = 126;
    // Tx Utilization in Percent
    pm_ether_param_string tx_util = 127;
    // TX_Undersized_Pkt
    pm_ether_param tx_undersized_pkt = 128;
    // TX_Oversized_Pkt
    pm_ether_param tx_oversized_pkt = 129;
    // TX_Fragments
    pm_ether_param tx_fragments = 130;
    // TX_Jabber
    pm_ether_param tx_jabber = 131;
    // TX_Bad_Fcs
    pm_ether_param tx_bad_fcs = 132;
}

message pm_ether_param {
    // the number in the interval
    uint64 data = 1;
    // the threshold users set
    uint64 threshold = 2;
    // enable/disable to report TCA
    bool tca_report = 3;
    // valid
    bool valid = 4;
}

message pm_ether_param_string {
    // the number in the interval
    string data = 1;
    // the threshold users set
    string threshold = 2;
    // enable/disable to report TCA
    bool tca_report = 3;
    // valid
    bool valid = 4;
}

message pm_ethernet_paras_COMBINED {
    string name = 1;
    uint32 number = 2;
    uint32 number_1 = 3;
    // index
    uint32 index = 50;
    // valid
    bool valid = 51;
    // timestamp
    string timestamp = 52;
    // last clear time
    string last_clear_time = 53;
    // last clear time
    string last_clear30_sec_time = 54;
    // last clear time
    string last_clear15_min_time = 55;
    // last clear time
    string last_clear24_hr_time = 56;
    // 30 sec support
    bool sec30_support = 57;
    // RX_PKT
    pm_ether_param rx_pkt = 58;
    // STAT_PKT
    pm_ether_param stat_pkt = 59;
    // OCTET_STAT
    pm_ether_param octet_stat = 60;
    // OVERSIZE_PKT
    pm_ether_param oversize_pkt_stat = 61;
    // FCS_ERR
    pm_ether_param fcs_errors_stat = 62;
    // LONG_FRAMES
    pm_ether_param long_frames_stat = 63;
    // JABBER_STATS
    pm_ether_param jabber_stat = 64;
    // SIXTY_FOUR_OCTET
    pm_ether_param ether64_octets = 65;
    // OCTET
    pm_ether_param ether65127_octet = 66;
    // TFF_OCTET
    pm_ether_param ether128255_octet = 67;
    // FOO_OCTET
    pm_ether_param ether256511_octet = 68;
    // OZTT_OCTET
    pm_ether_param ether5121023_octet = 69;
    // OFO_OCTET
    pm_ether_param ether10241518_octet = 70;
    // IN_UCAST
    pm_ether_param in_ucast_pkt = 71;
    // IN_MCAST
    pm_ether_param in_mcast_pkt = 72;
    // IN_BCAST
    pm_ether_param in_bcast_pkt = 73;
    // OUT_UCAST
    pm_ether_param out_ucast_pkt = 74;
    // OUT_BCAST
    pm_ether_param out_bcast_pkt = 75;
    // OUT_MCAST
    pm_ether_param out_mcast_pkt = 76;
    // TX_PKT
    pm_ether_param tx_pkt = 77;
    // IFIN_ERRORS
    pm_ether_param if_in_errors = 78;
    // IFIN_OCTETS
    pm_ether_param if_in_octets = 79;
    // ETHER_STAT_MULTICAST_PKT
    pm_ether_param ether_stat_multicast_pkt = 80;
    // ETHER_STAT_BROADCAST_PKT
    pm_ether_param ether_stat_broadcast_pkt = 81;
    // ETHER_STAT_UNDERSIZED_PKT
    pm_ether_param ether_stat_undersized_pkt = 82;
    // OUT_OCTET
    pm_ether_param out_octets = 83;
    // INPUT_PAUSE_FRAME
    pm_ether_param in_pause_frame = 84;
    // INPUT_GOOD_BYTES
    pm_ether_param in_good_bytes = 85;
    // INPUT_802_1Q_FRAMES
    pm_ether_param in8021_q_frames = 86;
    // INPUT_PKTS_1519MAX_OCTETS
    pm_ether_param in_pkts1519_max_octets = 87;
    // INPUT_GOOD_PKTS
    pm_ether_param in_good_pkts = 88;
    // INPUT_DROP_OVERRUN
    pm_ether_param in_drop_overrun = 89;
    // INPUT_DROP_ABORT
    pm_ether_param in_drop_abort = 90;
    // INPUT_DROP_INVALID_VLAN
    pm_ether_param in_drop_invalid_vlan = 91;
    // INPUT_DROP_INVALID_DMAC
    pm_ether_param in_drop_invalid_dmac = 92;
    // INPUT_DROP_INVALID_ENCAP
    pm_ether_param in_drop_invalid_encap = 93;
    // INPUT_DROP_OTHER
    pm_ether_param in_drop_other = 94;
    // INPUT_MIB_GIANT
    pm_ether_param in_mib_giant = 95;
    // INPUT_MIB_JABBER
    pm_ether_param in_mib_jabber = 96;
    // IN_MIB_CRC
    pm_ether_param in_mibcrc = 97;
    // IN_ERROR_COLLISIONS
    pm_ether_param in_error_collisions = 98;
    // IN_ERROR_SYMBOL
    pm_ether_param in_error_symbol = 99;
    // OUT_GOOD_BYTES
    pm_ether_param out_good_bytes = 100;
    // OUT_802_1Q_FRAMES
    pm_ether_param out8021_q_frames = 101;
    // OUT_PAUSE_FRAMES
    pm_ether_param out_pause_frames = 102;
    // OUT_PKTS_1519_MAX_OCTETS
    pm_ether_param out_pkts1519_max_octets = 103;
    // OUT_GOOD_PKTS
    pm_ether_param out_good_pkts = 104;
    // OUT_DROP_UNDERRUN
    pm_ether_param out_drop_underrun = 105;
    // OUT_DROP_ABORT
    pm_ether_param out_drop_abort = 106;
    // OUT_DROP_OTHER
    pm_ether_param out_drop_other = 107;
    // OUT_ERROR_OTHER
    pm_ether_param out_error_other = 108;
    // IN_ERROR_GIANT
    pm_ether_param in_error_giant = 109;
    // IN_ERROR_RUNT
    pm_ether_param in_error_runt = 110;
    // IN_ERROR_JABBERS
    pm_ether_param in_error_jabbers = 111;
    // IN_ERROR_FRAGMENTS
    pm_ether_param in_error_fragments = 112;
    // IN_ERROR_OTHER
    pm_ether_param in_error_other = 113;
    // IN_PKT_64_OCTET
    pm_ether_param in_pkt64_octet = 114;
    // IN_PKTS_65_127OCTETS
    pm_ether_param in_pkts65_to127_octets = 115;
    // IN_PKTS_128_255_OCTETS
    pm_ether_param in_pkts128_to255_octets = 116;
    // IN_PKTS_256_511_OCTETS
    pm_ether_param in_pkts256_to511_octets = 117;
    // IN_PKTS_512_1023_OCTETS
    pm_ether_param in_pkts512_to1023_octets = 118;
    // IN_PKTS_1024_1518_OCTETS
    pm_ether_param in_pkts1024_to1518_octets = 119;
    // OUT_PKT_64_OCTET
    pm_ether_param outpkt64octet = 120;
    // OUT_PKTS_65_127OCTETS
    pm_ether_param out_pkts65127_octets = 121;
    // OUT_PKTS_128_255_OCTETS
    pm_ether_param out_pkts128255_octets = 122;
    // OUT_PKTS_256_511_OCTETS
    pm_ether_param out_pkts256511_octets = 123;
    // OUT_PKTS_512_1023_OCTETS
    pm_ether_param out_pkts5121023_octets = 124;
    // OUT_PKTS_1024_1518_OCTETS
    pm_ether_param out_pkts10241518_octets = 125;
    // Rx Utilization in Percent
    pm_ether_param_string rx_util = 126;
    // Tx Utilization in Percent
    pm_ether_param_string tx_util = 127;
    // TX_Undersized_Pkt
    pm_ether_param tx_undersized_pkt = 128;
    // TX_Oversized_Pkt
    pm_ether_param tx_oversized_pkt = 129;
    // TX_Fragments
    pm_ether_param tx_fragments = 130;
    // TX_Jabber
    pm_ether_param tx_jabber = 131;
    // TX_Bad_Fcs
    pm_ether_param tx_bad_fcs = 132;
}

