// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

//Path: Cisco_IOS_XR_pmengine_oper:performance_management_history/global/periodic/stm_history/stm_port_histories/stm_port_history/stm_hour24_history/stm_hour24stm_histories/stm_hour24stm_history/stm_hour24stm_time_line_instances/stm_hour24stm_time_line_instance

package cisco_ios_xr_pmengine_oper.performance_management_history.global.periodic.stm_history.stm_port_histories.stm_port_history.stm_hour24_history.stm_hour24stm_histories.stm_hour24stm_history.stm_hour24stm_time_line_instances.stm_hour24stm_time_line_instance;

// all paras in stm
message pm_stm_paras_KEYS {
    string name = 1;
    uint32 number = 2;
    uint32 number_1 = 3;
}

message pm_stm_paras {
    // index
    uint32 index = 50;
    // valid
    bool valid = 51;
    // timestamp
    bytes timestamp = 52;
    // last clear time
    bytes last_clear_time = 53;
    // last clear time
    bytes last_clear15_min_time = 54;
    // last clear time
    bytes last_clear24_hr_time = 55;
    // SECTION
    stmSectionEntry section = 56;
    // LINE
    stmLineEntry line = 57;
    // FarEnd LINE
    stmFarEndLineEntry feline = 58;
}

// pm one parameter
message pm_stm_parameter {
    // the number in the interval
    uint32 data = 1;
    // the threshold users set
    uint32 threshold = 2;
    // enable/disable to report TCA
    bool tca_report = 3;
}

// pm one parameter
message pm_stm_parameter_ratio {
    // the number in the interval
    string data = 1;
    // the threshold users set
    string threshold = 2;
    // enable/disable to report TCA
    bool tca_report = 3;
}

message stmSectionEntry {
    //  status of the interface
    sint32 section_status = 1;
    // The number of Errored Seconds
    pm_stm_parameter section_e_ss = 2;
    // The number of Errored Seconds Ratio
    pm_stm_parameter_ratio section_es_rs = 3;
    // The number of Background Block Errors
    pm_stm_parameter section_bb_es = 4;
    // The number of Background Block Errors
    pm_stm_parameter_ratio section_bbe_rs = 5;
    // The number of Severely Errored Second
    pm_stm_parameter section_se_ss = 6;
    // The number of Severely Errored Second Ratio
    pm_stm_parameter_ratio section_ses_rs = 7;
    // The number of Unavailable Second
    pm_stm_parameter section_ua_ss = 8;
    // The number of Errored Block Second
    pm_stm_parameter section_e_bs = 9;
}

message stmLineEntry {
    //  status of the interface
    sint32 line_status = 1;
    // The number of Errored Seconds
    pm_stm_parameter line_e_ss = 2;
    // The number of Errored Seconds Ratio
    pm_stm_parameter_ratio line_es_rs = 3;
    // The number of Background Block Errors
    pm_stm_parameter line_bb_es = 4;
    // The number of Background Block Errors
    pm_stm_parameter_ratio line_bbe_rs = 5;
    // The number of Severely Errored Second
    pm_stm_parameter line_se_ss = 6;
    // The number of Severely Errored Second Ratio
    pm_stm_parameter_ratio line_ses_rs = 7;
    // The number of Unavailable Second
    pm_stm_parameter line_ua_ss = 8;
    // The number of Errored Block Second
    pm_stm_parameter line_e_bs = 9;
}

message stmFarEndLineEntry {
    // The number of Errored Seconds
    pm_stm_parameter far_end_line_e_ss = 1;
    // The number of Errored Seconds Ratio
    pm_stm_parameter_ratio far_end_line_es_rs = 2;
    // The number of Background Block Errors
    pm_stm_parameter far_end_line_ebb_es = 3;
    // The number of Background Block Errors
    pm_stm_parameter_ratio far_end_line_bbe_rs = 4;
    // The number of Severely Errored Second
    pm_stm_parameter far_end_line_se_ss = 5;
    // The number of Severely Errored Second Ratio
    pm_stm_parameter_ratio far_end_line_ses_rs = 6;
    // The number of Unavailable Second
    pm_stm_parameter far_end_line_ua_ss = 7;
    // The number of Errored Block Second
    pm_stm_parameter far_end_line_e_bs = 8;
}

message pm_stm_paras_COMBINED {
    string name = 1;
    uint32 number = 2;
    uint32 number_1 = 3;
    // index
    uint32 index = 50;
    // valid
    bool valid = 51;
    // timestamp
    bytes timestamp = 52;
    // last clear time
    bytes last_clear_time = 53;
    // last clear time
    bytes last_clear15_min_time = 54;
    // last clear time
    bytes last_clear24_hr_time = 55;
    // SECTION
    stmSectionEntry section = 56;
    // LINE
    stmLineEntry line = 57;
    // FarEnd LINE
    stmFarEndLineEntry feline = 58;
}

