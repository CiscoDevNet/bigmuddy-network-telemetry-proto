// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_infra_rcmd_oper.rcmd.isis.instances.instance.spf_run_offlines.spf_run_offline;

// ISIS SPF run information
message rcmd_isis_spf_run_KEYS {
    string instance_name = 1;
    uint32 spf_run_number = 2;
}

message rcmd_isis_spf_run {
    // SPF summary information
    rcmd_isis_spf_run_summary spf_summary = 50;
    // Start time (offset from event trigger time in ss.msec)
    string start_time = 51;
    // Wait time applied at SPF schedule (in msec)
    uint32 wait_time = 52;
    // Trigger reasons for SPF run. Example: pr^ - periodic, cr^ - clear (Check the documentation for the entire list)
    string reason = 53;
    // Trigger LSP
    repeated rcmd_lsp_info trigger_lsp = 54;
    // SPF Node statistics
    rcmd_stat node_statistics = 55;
    // Convergence information on per-priority basis
    repeated rcmd_priority priority = 56;
    // List of LSP changes processed
    repeated rcmd_lsp_info lsp_processed = 57;
    // List of LSP regenerated
    repeated rcmd_regen_lsp_info lsp_regenerated = 58;
}

// Time range
message rcmd_timestamp {
    // Minimum time(in seconds.milliseconds)
    string minimum_time = 1;
    // Maximum time(in seconds.milliseconds)
    string maximum_time = 2;
    // Linecard node name which took the maximum time
    string slowest_node_name = 3;
    // Linecard node name which took the minimum time
    string fastest_node_name = 4;
}

// The timestamps for each module
message rcmd_time {
    // First route process time relative to event trigger time (in ss.msec)
    string start_time = 1;
    // Last route process time relative to event trigger time (in ss.msec)
    string end_time = 2;
    // Duration of processing (in ss.msec)
    string duration = 3;
}

// Statistics
message rcmd_stat {
    // Added
    uint32 adds = 1;
    // Deleted
    uint32 deletes = 2;
    // Modified
    uint32 modifies = 3;
    // Reachable
    uint32 reachables = 4;
    // Unreachable
    uint32 unreachables = 5;
    // Touched
    uint32 touches = 6;
}

// Linecard timeline details
message rcmd_lc_info {
    // Linecard node name
    string node_name = 1;
    // Relative convergence speed
    string speed = 2;
    // Completion point of FIB
    rcmd_time fib_complete = 3;
}

// Network
message rcmd_network {
    // IP address
    string address = 1;
    // Mask
    uint32 net_mask = 2;
}

// Timeline information details at each component level
message rcmd_timeline {
    // Route origin (routing protocol)
    rcmd_time route_origin = 1;
    // Entry point of IPv4 RIB
    rcmd_time ri_bv4_enter = 2;
    // Exit point from IPv4 RIB to FIBs
    rcmd_time ri_bv4_exit = 3;
    // Route Redistribute point from IPv4 RIB to LDP
    rcmd_time ri_bv4_redistribute = 4;
    // Entry point of LDP
    rcmd_time ldp_enter = 5;
    // Exit point of LDP to LSD
    rcmd_time ldp_exit = 6;
    // Entry point of LSD
    rcmd_time lsd_enter = 7;
    // Exit point of LSD to FIBs
    rcmd_time lsd_exit = 8;
    // List of Linecards' completion point for IP routes
    repeated rcmd_lc_info lc_ip = 9;
    // List of Linecards' completion point for MPLS labels
    repeated rcmd_lc_info lc_mpls = 10;
}

// Priority Summary for Frr Statistics
message rcmd_show_frr_stat {
    // Total Number of Routes
    uint32 total_routes = 1;
    // Fully Protected Routes
    uint32 fully_protected_routes = 2;
    // Partially Protected Routes
    uint32 partially_protected_routes = 3;
    // Coverage in percentage
    string coverage = 4;
}

// Summary of convergence information for a priority
message rcmd_priority_summary {
    // Critical, High, Medium or Low
    string level = 1;
    // Threshold exceeded
    bool threshold_exceeded = 2;
    // Route statistics
    rcmd_stat route_statistics = 3;
    // Fast Re-Route Statistics
    repeated rcmd_show_frr_stat frr_statistics = 4;
    // Convergence time for IP route programming
    rcmd_timestamp ip_convergence_time = 5;
    // Convergence time for MPLS label programming
    rcmd_timestamp mpls_convergence_time = 6;
}

// Convergence information for a priority
message rcmd_priority {
    // Summary of the priority
    rcmd_priority_summary priority_summary = 1;
    // Convergence timeline details
    repeated rcmd_timeline convergence_timeline = 2;
    // List of Leaf Networks Added
    repeated rcmd_network leaf_networks_added = 3;
    // List of Leaf Networks Deleted
    repeated rcmd_network leaf_networks_deleted = 4;
}

// LSP information
message rcmd_lsp_info {
    // LSP ID
    string lsp_id = 1;
    // Sequence Number
    uint32 sequence_number = 2;
    // Add, Delete, Modify
    string change_type = 3;
    // Reception Time on router (in hh:mm:ss.msec)
    string reception_time = 4;
}

// Regenerated LSP information
message rcmd_regen_lsp_info {
    // Serial Number of the session event
    uint32 serial_number = 1;
    // LSP ID
    string lsp_id = 2;
    // Sequence Number
    uint32 sequence_number = 3;
    // Reception Time on router (in hh:mm:ss.msec)
    string reception_time = 4;
    // ISIS Level
    string isis_level = 5;
    // SPF Run Number
    uint32 spf_run_number = 6;
    // Trigger reasons for LSP regeneration. Example: pr^ - periodic, cr^ - clear (Check the documentation for the entire list)
    string reason = 7;
}

// SPF summary information
message rcmd_isis_spf_run_summary {
    // Topology index (multi-topology)
    uint32 topology = 1;
    // ISIS Level
    string isis_level = 2;
    // Type of SPF
    string type = 3;
    // Threshold exceeded
    bool threshold_exceeded = 4;
    // SPF state
    string state = 5;
    // Whether the event has all information
    bool is_data_complete = 6;
    // Trigger time (in hh:mm:ss.msec)
    string trigger_time = 7;
    // Duration of SPF calculation (in ss.msec)
    string duration = 8;
    // Total number of LSP changes processed
    uint32 total_lsp_changes = 9;
    // Convergence information summary on per-priority basis
    repeated rcmd_priority_summary priority_summary = 10;
}

