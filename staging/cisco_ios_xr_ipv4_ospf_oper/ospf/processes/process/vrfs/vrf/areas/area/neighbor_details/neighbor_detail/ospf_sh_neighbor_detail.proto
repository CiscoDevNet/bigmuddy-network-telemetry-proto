// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.areas.area.neighbor_details.neighbor_detail;

// OSPF Neighbor Detailed Information
message ospf_sh_neighbor_detail_KEYS {
    string process_name = 1;
    string vrf_name = 2;
    uint32 area_id = 3;
    string interface_name = 4;
    string neighbor_address = 5;
}

message ospf_sh_neighbor_detail {
    // Neighbor summary information
    ospf_sh_neighbor neighbor_summary = 50;
    // Area ID string in decimal or dotted-decimal format
    string neighbor_area_id = 51;
    // Number of state changes
    uint32 state_change_count = 52;
    // Cost of path to this neighbor
    uint32 neighbor_cost = 53;
    // If true, filter outgoing LSAs
    bool neighbor_filter = 54;
    // Address of designated router
    string neighbor_designated_router_address = 55;
    // Address of backup designated router
    string neighbor_backup_designated_router_address = 56;
    // Interface type
    string interface_type = 57;
    // Poll interval (s)
    uint32 poll_interval = 58;
    // For NBMA networks, amount of time remaining in seconds before the next poll interval expires and Hello is sent (s)
    uint32 next_poll_interval = 59;
    //  This is bitmaks of neighbor's option field received
    uint32 neighbor_option = 60;
    // Number of pending events
    uint32 pending_events = 61;
    // This is a bitmask of Link Local signalling options received from the neighbor
    uint32 neighbor_lls_option = 62;
    // Out-Of-Bound resynchronization in progress
    bool oob_resynchronization = 63;
    // For cisco NSF, the router is either Requester or Receiver
    string nsf_router_state = 64;
    // The amount of time in seconds since last time Out-Of-Band resynchronization was done with this neighbor
    uint32 last_oob_time = 65;
    // Neighbor BFD information
    ospf_sh_neighbor_bfd neighbor_bfd_information = 66;
    // Retransmission information with this neighbor
    ospf_sh_neighbor_retrans neighbor_retransmission_information = 67;
    // LFA Interface
    string lfa_interface = 68;
    // LFA Next Hop
    string lfa_next_hop = 69;
    // LFA Neighbor ID
    string lfa_neighbor_id = 70;
    // LFA Neighbor Revision
    uint32 lfa_neighbor_revision = 71;
    // Ack List Count
    uint32 neighbor_ack_list_count = 72;
    // Ack List High Watermark
    uint32 neighbor_ack_list_high_watermark = 73;
    // SR Adjacency SID Label
    uint32 adjacency_sid_label = 74;
    // SR Adjacency SID Protected
    bool adjacency_sid_protected = 75;
    // SR Adjacency SID Unprotected Label
    uint32 adjacency_sid_unprotected_label = 76;
}

// OSPF Neighbor Retransmission Information
message ospf_sh_neighbor_retrans {
    // Number of DBD retransmissions during last exchange
    uint32 dbd_retransmission_count = 1;
    // Total number of DBD retransmissions for this neighbor
    uint32 dbd_retransmission_total_count = 2;
    // Area scope LSA's flood index
    uint32 area_flooding_index = 3;
    // AS scope LSA's flood index
    uint32 as_flood_index = 4;
    // Retransmission queue length
    uint32 neighbor_retransmission_count = 5;
    // Number of retransmissions for this neighbor
    uint32 number_of_retransmissions = 6;
    // First flood item for area scope LSAs
    uint32 area_first_flood_information = 7;
    // Index of the first flood item for area scope LSAs
    uint32 area_first_flood_information_index = 8;
    // First flood item for AS scope LSAs
    uint32 as_first_flood_information = 9;
    // Index for first flood item for AS scope LSAs
    uint32 as_first_flood_information_index = 10;
    // Next flood item for area scope LSAs
    uint32 area_next_flood_information = 11;
    // Index of next flood item for Area scope LSAs
    uint32 area_next_flood_information_index = 12;
    // Next flood item for AS scope LSAs
    uint32 as_next_flood_information = 13;
    // Index of next flood item for AS scope LSAs
    uint32 as_next_flood_information_index = 14;
    // Number of LSAs sent in last retransmission
    uint32 last_retransmission_length = 15;
    // Maximum number of LSAs sent in a retransmission
    uint32 maximum_retransmission_length = 16;
    // Last retransmission scan time (ms)
    uint32 last_retransmission_time = 17;
    // Maximum retransmission scan time (ms)
    uint32 maximum_retransmission_time = 18;
    // Time until next LSA retransmission (ms)
    uint32 lsa_retransmission_timer = 19;
}

// OSPF Neighbor BFD information
message ospf_sh_neighbor_bfd {
    // BFD enable mode - Default/Strict
    uint32 bfd_intf_enable_mode = 1;
    // Status of the BFD Session
    uint32 bfd_status_flag = 2;
}

// OSPF Neighbor Summary Information
message ospf_sh_neighbor {
    // Neighbor ID
    string neighbor_id = 1;
    // Neighbor IP Address
    string neighbor_address = 2;
    // Interface via which the neighbor is seen
    string neighbor_interface_name = 3;
    // Neighbor's DR priority
    uint32 neighbor_dr_priority = 4;
    // Neighbor's state
    string neighbor_state = 5;
    // Designated Router state
    string dr_bdr_state = 6;
    // Time until neighbor's dead timer expires (s)
    uint32 neighbor_dead_timer = 7;
    // Amount of time since the adjacency is up (s)
    uint32 neighbor_up_time = 8;
    // Interface is MADJ
    bool neighbor_madj_interface = 9;
    // Neighbor BFD information
    ospf_sh_neighbor_bfd neighbor_bfd_information = 10;
}

