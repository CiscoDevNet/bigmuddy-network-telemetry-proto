// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.vrfs.vrf.database.database_areas.database_area.lsas.lsa;

// OSPF Database Information
message ospf_sh_database_detail_KEYS {
    string process_name = 1;
    string vrf_name = 2;
    uint32 area_id = 3;
    uint32 area_id_1 = 4;
    string ls_type = 5;
    string ls_id = 6;
    string advertising_router = 7;
    string interface_name = 8;
}

message ospf_sh_database_detail {
    // Header information
    ospf_sh_db_header lsa_header = 50;
    // Detailed LSA Information
    ospf_sh_db_detail lsa_detail_data = 51;
    // Information pertaining to a specific LSA type
    ospf_lsa_internal_union lsa_internal_data = 52;
}

message ospf_sh_time {
    uint32 second = 1;
    uint32 nanosecond = 2;
}

// Reason why LSA is not deleted
message ospf_sh_db_not_delete {
    // The amount of time since the last check was made to free this LSA (s)
    uint32 free_time = 1;
    // If true, the reason not to delete this LSA is because delete flag not set on this LSA
    bool no_delete = 2;
    // If true, the reason  not to delete this LSA is because neighbor is in exchange state
    bool neighbor_exchange = 3;
    // If true, the reason  not to delete this LSA is because it has a contributing entry in the routing table
    bool routing_table = 4;
    // If true, the reason not to delete this LSA is because it's Acknowledgement list is not empty
    bool acknowledgement = 5;
    // If true, the reason not to delete this LSA is because it is in Maxage Queue
    bool maximum_age = 6;
    // If true, the reason not to delete this LSA is because it is in partial SPF queue
    bool partial_spf = 7;
    // If true, the reason not to delete this LSA is because waiting for flooding or retransmission
    bool flood_pending = 8;
    // If true, the reason not to delete this LSA is because waiting for next wait-interval to expire
    bool rate_limit = 9;
    // If true, the reason not to delete this LSA is because NSR ACK from standby is pending
    bool nsr_ack_pending = 10;
    // If true, the reason not to delete this LSA is because it is pending summary LSA originating
    bool sum_orig_pending = 11;
    // If true, the reason not to delete this LSA is because it is pending flooding on switchover
    bool nsr_flood_required = 12;
}

// OSPF LSA throttle timer table information
message ospf_sh_db_throttle_timer {
    // Timer table
    string timer_location = 1;
    // Timer type
    string timer_type = 2;
    // Second table index
    uint32 second_table_index = 3;
    // Minute table index
    uint32 minute_table_index = 4;
    // Last Second table index processed
    uint32 last_inst_second_table_index = 5;
    // Last Minute table index processed
    uint32 last_inst_minute_table_index = 6;
}

// OSPF LSA Database Header
message ospf_sh_db_header {
    // LSA type
    string ls_type = 1;
    // LS ID
    string lsid = 2;
    // Router ID of Advertising Router
    string advertising_router = 3;
    // Area ID in decimal or dotted-decimal format
    string lsa_area_id = 4;
    // LSA's Age (s)
    uint32 lsa_age = 5;
    // If true, Do Not Age this LSA
    bool dn_age_lsa = 6;
    // If true,  LSA received from neighbor during NSF
    bool nsf = 7;
    // Current Sequence number
    uint32 sequence_number = 8;
    // Checksum value
    uint32 checksum = 9;
}

// OSPF Detailed LSA Database Information
message ospf_sh_db_detail {
    // If true, type of service capable indicated by LSA's option field
    bool tos_capable = 1;
    // If true,  capable of type 7 to 5 translation indicated by LSA's option field
    bool nssa_translation = 2;
    // If true, capable of demand circuit as indicated by LSA's option field
    bool demand_circuit = 3;
    // if true, DN bit set on the summary LSA indicated by LSA's option field
    bool dn_bit = 4;
    // LSA throttle timer table information
    ospf_sh_db_throttle_timer lsa_throttle_timer = 5;
    // Time LSA was last updated
    ospf_sh_time lsa_last_updated_time = 6;
    // Current time stamp
    ospf_sh_time lsadb_base_time_stamp = 7;
    // Due time for rate-limit timer (ms)
    uint32 lsa_rate_limit_due_time = 8;
    // Clock stamp since boot
    uint64 lsadb_base_clock = 9;
    // If true, Routing Bit set on the LSA
    bool routing_bit = 10;
    // If true, Advertising Router is reachable
    bool advertising_router_reachable = 11;
    // Reason why LSA is not deleted
    ospf_sh_db_not_delete not_delete = 12;
    // Length of the LSA
    uint32 length = 13;
    // Summary Origin
    uint32 sum_origin = 14;
    // External Origin
    uint32 ase_origin = 15;
    // Not In Sync With Active
    uint32 in_sync = 16;
    // Current LSA prefix priority
    uint32 lsa_prefix_priority = 17;
    // New LSA prefix priority
    uint32 new_lsa_prefix_priority = 18;
    // LSA flood required after FO
    bool lsa_flood_required_post_fail_over = 19;
}

// OSPF External Type of service specific Information
message ospf_sh_lsa_ex_tos {
    // Cost of this route
    uint32 external_metric = 1;
    // External LSA metric type
    string external_metric_type = 2;
    // Type of Service
    uint32 external_tos = 3;
    // Forwarding Address
    string forwarding_address = 4;
    // Route Tag
    uint32 external_tag = 5;
}

// OSPF External LSA
message ospf_sh_lsa_external {
    // Prefix length
    uint32 external_prefix_length = 1;
    // If true, internal max-metric LSA
    bool internal_external_lsa = 2;
    // Type of service information
    repeated ospf_sh_lsa_ex_tos external_tos_metric = 3;
}

// OSPF Network LSA
message ospf_sh_lsa_network {
    // Network prefix length
    uint32 network_prefix_length = 1;
    // Neighbor router list
    repeated bytes neighbor_router_list = 2;
}

// OSPF Opaque LSA Sub-TLV Information
message ospf_sh_opq_subtlv {
    // Type of sub TLV
    string sub_tlv_type = 1;
    // Length of sub TLV
    uint32 sub_tlv_length = 2;
    // Value of sub TLV
    bytes sub_tlv_value = 3;
    // List of Sub-TLVs
    repeated ospf_sh_opq_subtlv sub_tlv_sub_tlv = 4;
}

// OSPF Opaque LSA TLV Information
message ospf_sh_opq_tlv {
    // Type of top-level TLV
    uint32 tlv_type = 1;
    // Length of top-level TLV
    uint32 tlv_length = 2;
    // MPLS-TE Router ID
    uint32 mpls_router_id = 3;
    // MPLS DS-TE supported
    bool mpls_dste_link = 4;
    // TLV direct data
    bytes tlv_data = 5;
    // List of Sub-TLVs
    repeated ospf_sh_opq_subtlv te_link_sub_tlv = 6;
}

// OSPF Opaque-link LSA Information
message ospf_sh_lsa_opq_link {
    // Interface on which the Opaque link LSA is received
    string opaque_interface_name = 1;
}

// OSPF Opaque-area type 1 MPLS-TE LSA Information
message ospf_sh_lsa_opq_rrr {
    // List of TLVs
    repeated ospf_sh_opq_tlv tlv_list = 1;
}

// OSPF Opaque-area type 128 ExtendedPrefix LSA Information
message ospf_sh_lsa_opq_epl {
    // List of TLVs
    repeated ospf_sh_opq_tlv tlv_list = 1;
}

// OSPF Opaque-area type 8 ExtendedLink LSA Information
message ospf_sh_lsa_opq_ell {
    // List of TLVs
    repeated ospf_sh_opq_tlv tlv_list = 1;
}

// OSPF Opaque Router Information TLV
message ospf_sh_opq_ri_unknown_tlv {
    // Type of TLV
    uint32 ri_gen_tlv_type = 1;
    // Length of TLV
    uint32 ri_gen_tlv_length = 2;
    // Data in TLV
    bytes ri_gen_value = 3;
}

// OSPF Router Capabilities TLV
message ospf_sh_opq_ri_rtrcap_tlv {
    // Length of TLV
    uint32 rtr_cap_tlv_length = 1;
    // Graceful Restart Capability
    bool rtr_cap_graceful_restart = 2;
    // Graceful Restart Helper Capability
    bool rtr_cap_graceful_restart_helper = 3;
    // Stub Router capability
    bool rtr_cap_stub_rtr = 4;
    // Traffic Engineering capability of area
    bool rtr_cap_area_te = 5;
    // P2P LAN Capability
    bool rtr_cap_p2_plan = 6;
    // TE Experimental bit
    bool rtr_cap_te_exp = 7;
    // All capability bits
    uint32 rtr_cap_all_bits = 8;
    // Additional Information in TLV
    bytes rtr_cap_additional_info = 9;
}

// PCE IPv4 Address SubTLV
message ospf_sh_opq_ri_pce_ipv4_addr_stlv {
    // PCE IPv4 Address
    string pce_ipv4_addr = 1;
}

// PCE IPv6 Address SubTLV
message ospf_sh_opq_ri_pce_ipv6_addr_stlv {
    // PCE IPv6 Address
    string pce_ipv6_addr = 1;
}

// OSPF PCE Address SubTLVs
message ospf_sh_opq_ri_pce_addr_stlvs_union {
    string pce_addr_type = 1;
    // Unknown PCE Addr TLV
    ospf_sh_opq_ri_unknown_tlv pce_addr_unknown_tlv = 2;
    // IPv4 PCE Address
    ospf_sh_opq_ri_pce_ipv4_addr_stlv ipv4_pce_addr = 3;
    // IPv6 PCE Address
    ospf_sh_opq_ri_pce_ipv6_addr_stlv ipv6_pce_addr = 4;
}

// OSPF PCE-Discovery PCE Scope SubTLV
message ospf_sh_opq_ri_pced_scope_stlv {
    // L Bit
    bool l_bit = 1;
    // R Bit
    bool r_bit = 2;
    // Rd Bit
    bool rd_bit = 3;
    // S Bit
    bool s_bit = 4;
    // Sd Bit
    bool sd_bit = 5;
    // Y Bit
    bool y_bit = 6;
    // Pref L
    uint32 pref_l = 7;
    // Pref R
    uint32 pref_r = 8;
    // Pref S
    uint32 pref_s = 9;
    // Pref Y
    uint32 pref_y = 10;
    // PCE Scope Information
    uint32 all_scope_info_bits = 11;
}

// OSPF PCE Discovery TLV
message ospf_sh_opq_ri_pced_tlv {
    // Length of TLV
    uint32 pcedtlv_length = 1;
    // PCE Address
    ospf_sh_opq_ri_pce_addr_stlvs_union pced_addr = 2;
    // PCE Scope Information
    ospf_sh_opq_ri_pced_scope_stlv pced_scope = 3;
}

// OSPF SR Algorithm TLV
message ospf_sh_opq_ri_sr_algo_tlv {
    // Length of TLV
    uint32 sr_algo_length = 1;
    // SR Algorithms
    bytes sr_algo_value = 2;
}

// OSPF PCE-Discovery PCE Scope SubTLV
message ospf_sh_sr_sid_stlv {
    // Length of sub-TLV
    uint32 sr_sid_length = 1;
    // SID Value
    uint32 sr_sid_value = 2;
}

// OSPF SR Range TLV
message ospf_sh_opq_ri_sr_range_tlv {
    // Length of TLV
    uint32 sr_range_length = 1;
    // SR Range Size
    uint32 sr_range_size = 2;
    // SID sub-TLV
    ospf_sh_sr_sid_stlv sidtlv = 3;
}

// OSPF Router Information TLVs
message ospf_sh_opq_ri_tlvs_union {
    string ritlv_internal_type = 1;
    // Unknown Rtr Info TLV
    ospf_sh_opq_ri_unknown_tlv unknown_tlv = 2;
    // Rtr Cap TLV
    ospf_sh_opq_ri_rtrcap_tlv rtr_cap_tlv = 3;
    // PCE Discovery TLV
    ospf_sh_opq_ri_pced_tlv pcedtlv = 4;
    // SR Algorithm TLV
    ospf_sh_opq_ri_sr_algo_tlv sr_algo_tlv = 5;
    // SR Range TLV
    ospf_sh_opq_ri_sr_range_tlv sr_range_tlv = 6;
}

// OSPF Router Information LSA
message ospf_sh_lsa_opq_ri {
    // Opaque LSA flooding scope, a.k.a., Opaque LSA Type
    string opaque_rilsa_scope = 1;
    // Interface on which this Link-Local Opaque link LSA is received
    string opaque_ri_interface_name = 2;
    // Router Information TLV
    repeated ospf_sh_opq_ri_tlvs_union opaque_ritlv = 3;
}

// OSPF Opaque-link type 3 grace LSA Information
message ospf_sh_lsa_opq_grace {
    // The amount of time the router's neighbor should advertise it fully adjacent (s)
    uint32 grace_period = 1;
    // Reason for router restart
    string grace_reason = 2;
    // IP interface address on the subnet associated with the grace LSA
    string ip_address = 3;
}

// OSPF Router LSA TOS Metric
message ospf_sh_tos_metric {
    // Type of Service
    uint32 router_tos = 1;
    // Type of service specific metric
    uint32 tos_cost = 2;
}

// OSPF Router LSA Links
message ospf_sh_link {
    // Link ID
    string link_id = 1;
    // Link Data
    string link_data = 2;
    // Type of link
    string link_type = 3;
    // Cost for using this link
    uint32 link_metric = 4;
    // List of type of service metrics
    repeated ospf_sh_tos_metric link_tos_list = 5;
}

// OSPF Router LSA
message ospf_sh_lsa_router {
    // If True, router is an Autonomous system Border Router
    bool router_asbr = 1;
    // If True, router is an Area Border Router
    bool router_abr = 2;
    // If true, internal LSA
    bool internal_lsa = 3;
    // List of links in this LSA
    repeated ospf_sh_link link_list = 4;
    // List of links for internal LSA
    repeated ospf_sh_link internal_links = 5;
}

// OSPF Summary LSA
message ospf_sh_lsa_summary {
    // Summary LSA prefix length
    uint32 summary_prefix_length = 1;
    // Metric
    repeated uint32 summary_lsa_metric = 2;
    // If true, internal max-metric LSA
    bool internal_sum_lsa = 3;
}

// LSA internal information for an LSA
message ospf_lsa_internal_union {
    string internal_lsa_type = 1;
    // Router LSA
    ospf_sh_lsa_router router_lsa_type = 2;
    // Network LSA
    ospf_sh_lsa_network network_lsa_type = 3;
    // Summary LSA
    ospf_sh_lsa_summary summary_lsa_type = 4;
    // External LSA
    ospf_sh_lsa_external external_lsa_type = 5;
    // Opaque-Link LSA
    ospf_sh_lsa_opq_link opaque_link_lsa_type = 6;
    // Opaque-Area, opaque type 1 LSA
    ospf_sh_lsa_opq_rrr opaque_mpls_te_lsa_type = 7;
    // Opaque-link, opaque type 3 Grace LSA
    ospf_sh_lsa_opq_grace opaque_grace_lsa = 8;
    // Opaque Router Information LSA
    ospf_sh_lsa_opq_ri opaque_router_info_lsa_type = 9;
    // Extende Prefix LSA type
    ospf_sh_lsa_opq_epl opaque_ep_lsa_type = 10;
    // Extended Link LSA type
    ospf_sh_lsa_opq_ell opaque_el_lsa_type = 11;
}

