// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_summary;

// OSPF Summary
message ospf_sh_summary_KEYS {
    string process_name = 1;
}

message ospf_sh_summary {
    // If true, Role is Standby, Active otherwise
    bool role_standby = 50;
    // Role, V1/V2 Active/Standby
    uint32 role = 51;
    // If true, NSR is enabled
    bool nsr_enabled = 52;
    // Trigger RP Switchover on detectable process restart
    bool nsr_switchover_on_restart = 53;
    // If true, running in IGP-Intact mode
    bool igp_intact_on = 54;
    // Router ID
    string router_id = 55;
    // Type of Service supported
    uint32 tos_options = 56;
    // Opaque LSA capable
    bool opaque_capable = 57;
    // If true, is an Area Border Router
    bool area_border_router = 58;
    // If true, is an AS Border Router
    bool as_border_router = 59;
    // If true, vrf lite is enabled
    bool vrf_lite_enabled = 60;
    // If true, originate Router LSA with maximum metric
    bool maximum_metric_start = 61;
    // Time remaining for hold down timer (s)
    uint32 maximum_metric_start_timer = 62;
    // Max-metric set reason
    string maximum_metric_set_reason = 63;
    // If true, ABR duties temporarily disabled
    bool maximum_metric_abr_off_mode = 64;
    // Reasons for ABR duties being temporarily disabled
    string maximum_metric_abr_off_reasons = 65;
    // Buffer time in seconds since last neighbor activity, to remain in max-metric ABR off state
    uint32 maximum_metric_abr_off_buffer_time = 66;
    // Max-metric list
    repeated ospf_sh_max_metric maximum_metric_list = 67;
    // Redistribution list
    repeated ospf_sh_redist redistribution_list = 68;
    // Scheduling delay for SPF (ms) This is valid if configured below 64k Deprecated by SPFStartTimeU32]
    uint32 spf_start_time = 69;
    // Minimum delay time between SPF runs (ms) This is valid if configured below 64k Deprecated by SPFHoldTimeU32]
    uint32 spf_hold_time = 70;
    // Maximum delay time between SPF runs (ms) This is valid if configured below 64k Deprecated by SPFMaximumTimeU32]
    uint32 spf_maximum_time = 71;
    // Scheduling delay for SPF (ms)
    uint32 spf_start_time_u32 = 72;
    // Minimum delay time between SPF runs (ms)
    uint32 spf_hold_time_u32 = 73;
    // Maximum delay time between SPF runs (ms)
    uint32 spf_maximum_time_u32 = 74;
    // If true, prefix-priority policy is configured
    bool spf_prefix_priority = 75;
    // SPF Prefix-priority route policy
    string spf_prefix_priority_route_policy = 76;
    // Inital LSA throttle delay (ms)
    sint32 lsa_start_time = 77;
    // Second delay before generating next LSA (ms)
    uint32 lsa_hold_time = 78;
    // Maximum delay before generating an LSA (ms)
    uint32 lsa_maximum_time = 79;
    // Minimum time between LSA regeneration (ms) Rel 4.0.1, deprecated by MinimumLSAIntervalU32]
    uint32 minimum_lsa_interval = 80;
    // Minimum time between LSA regeneration (ms)
    uint32 minimum_lsa_interval_u32 = 81;
    // LSA refresh interval (sec)
    uint32 lsa_refresh_interval = 82;
    // Minimum time between accepting LSAs (ms) Rel 4.0.1, deprecated by MinimumLSAArrivalIntervalU32]
    uint32 minimum_lsa_arrival_interval = 83;
    // Minimum time between accepting LSAs (ms)
    uint32 minimum_lsa_arrival_interval_u32 = 84;
    // Flood pacing timer (ms)
    uint32 if_flood_pacing_interval = 85;
    // Retransmission pacing timer (ms)
    uint32 if_retrans_pacing_interval = 86;
    // Num of nbrs brought up initially per area
    uint32 adj_stag_init_num_nbr = 87;
    // Max num of nbrs brought up simultaneously per OSPF instance
    uint32 adj_stag_max_num_nbr = 88;
    // If true, OSPF Adjacency Staggering is configured
    bool adj_stagger_enabled = 89;
    // Num of nbrs currently forming for OSPF instance
    uint32 adj_stag_num_nbr_forming = 90;
    // Num of full nbrs
    uint32 number_nbrs_full = 91;
    // Number of AS scope LSAs
    uint32 as_lsa_count = 92;
    // Sum of AS scope LSA checksum
    uint32 as_lsa_checksum = 93;
    // Number of Opaque LSAs
    uint32 opaque_lsa_count = 94;
    // Sum of opaque LSA checksum
    uint32 opaque_lsa_checksum = 95;
    // Number of External and AS Opaque LSAs with demand circut bit not set
    uint32 as_dc_bitless_lsa_count = 96;
    // Number of External and AS Opaque LSAs with DoNotAge set 
    uint32 as_dna_lsa_count = 97;
    // Number of areas
    uint32 area_count = 98;
    // Number of normal Areas
    uint32 normal_area_count = 99;
    // Number of Stub and Total Stub Areas
    uint32 stub_area_count = 100;
    // Number of NSSA Areas
    uint32 nssa_area_count = 101;
    // Maximum number of interfaces
    uint32 maximum_interfaces = 102;
    // Length of AS LSAs flood list
    uint32 as_lsa_flood_list_length = 103;
    // If true, NSF enabled
    bool nsf_enabled = 104;
    //  Length of time since the last NSF (s)
    uint32 last_nsf_time = 105;
    // Total time to complete NSF (s)
    uint32 nsf_time = 106;
    // The number of redistributed prefixes allowed
    uint32 redistribution_limit = 107;
    // When the number of redistributed prefixes reaches this threshold, a warning message is issued
    uint32 redistribution_threshold = 108;
    // If true, only a syslog message is printed when redistribution prefix limit is reached
    bool redistribution_limit_warn = 109;
    // Amount of time routes are retained after graceful shutdown (s)
    uint32 graceful_shutdown_retention_time = 110;
    // State of graceful shutdown
    string graceful_shutdown_state = 111;
    // Domain ID information
    ospf_sh_domain_id domain_id = 112;
    // If true, prefix limit for table has been  reached
    bool table_prefix_limit_reached = 113;
    // Non self-generated LSA count
    uint32 non_self_lsa_count = 114;
    // If true, max-lsa protection enabled
    bool max_lsa_enabled = 115;
    // Maximum allowed number of non self-generated LSAs
    uint32 max_lsa_limit = 116;
    // max-lsa protection warning threshold
    uint32 max_lsa_treshold = 117;
    // Warning only when max-lsa reached
    bool max_lsa_warning_only = 118;
    // Time ignoring new LSAs after max-lsa reached
    uint32 max_lsa_ignore_time = 119;
    // Time after which LSA protection counter is reset
    uint32 max_lsa_reset_time = 120;
    // Max allowed number of entering ignore state
    uint32 max_lsa_ignore_limit = 121;
    // How many times ignore state has been entered
    uint32 max_lsa_ignore_count = 122;
    // Remaining time when ignore timer is running
    uint32 max_lsa_ignore_timer = 123;
    // Remaining time when reset timer is running
    uint32 max_lsa_reset_timer = 124;
    // Context name
    string context_name = 125;
    // If true, snmp trap is enabled
    bool snmp_trap_enabled = 126;
    // If true, UCMP is enabled
    bool ucmp = 127;
    // UCMP Prefix-list
    string ucmp_prefix_list = 128;
    // UCMP Variance
    sint32 ucmp_variance = 129;
    // Delay between end of SPF and start of UCMP calculation (ms)
    uint32 ucmp_delay = 130;
    // True if connected to LSD
    bool lsd_connected = 131;
    // True if registered with LSD
    bool lsd_registered = 132;
    // True if bound to LSD
    bool lsd_bound = 133;
    // LSD Connection Revision
    uint32 lsd_connection_revision = 134;
    // True if Segment Routing Global Block configured
    bool srgb_configured = 135;
    // Segment Routing Global Block start label value
    uint32 srgb_start = 136;
    // Segment Routing Global Block end label value
    uint32 srgb_end = 137;
    // Segment Routing Global Block allocation status
    string srgb_status = 138;
    // True if Segment Routing Strict-SPF capable
    bool sr_strict_spf_cap = 139;
}

message ospf_sh_time {
    uint32 second = 1;
    uint32 nanosecond = 2;
}

message string_type {
    string value = 1;
}

// Redistributed protocol instance
message ospf_sh_redist_proto {
    string protocol_type = 1;
    // ISIS instance identifier
    string_type isis_instance_id = 2;
    // OSPF process identifier
    string_type ospf_process_id = 3;
    // BGP Autonomous System Number
    string_type bgp_as_number = 4;
    // Autonomous System Number
    string_type eigrp_as_number = 5;
    // Connected instance name
    string_type connected_instance = 6;
}

// OSPF Redistribution Information
message ospf_sh_redist {
    // Protocol Information
    ospf_sh_redist_proto redistribution_protocol = 1;
    // If true, Metric configured
    bool metric_flag = 2;
    // Route metric
    uint32 metric = 3;
    // Whether to use CIDR
    bool classless = 4;
    // To NSSA areas only
    bool nssa_only = 5;
}

// OSPF Domain ID
message ospf_sh_domain_id_entry {
    // Domain ID Type
    uint32 domain_id_type = 1;
    // Domain ID value
    bytes domain_id_value = 2;
}

// OSPF Domain ID entries
message ospf_sh_domain_id {
    // Primary Domain ID
    ospf_sh_domain_id_entry primary_domain_id = 1;
    // List of secondary domain IDs
    repeated ospf_sh_domain_id_entry secondary_domain_id_list = 2;
}

// OSPF Max-metric Information
message ospf_sh_max_metric {
    // Max-metric reason
    uint32 max_metric_reason = 1;
    // Max-metric enabled
    bool max_metric_enabled = 2;
    // If true, BGP is up, no maximum metric Router LSA
    bool unset_maximum_metric = 3;
    // Saved UnsetMaximumMetric
    bool saved_unset_maximum_metric = 4;
    // Time remaining until we will start using normal metrics (s)
    uint32 maximum_metric_start_time = 5;
    // Hold time configured (s)
    uint32 saved_startup_time = 6;
    // If true, set max-metric in stub links
    bool maximum_metric_include_stubs = 7;
    // If true, advertise max-metric in summary-LSAs
    bool maximum_metric_summary_lsa = 8;
    // Max-metric value to advertise in summary-LSAs
    uint32 maximum_metric_summary_lsa_metric = 9;
    // If true, advertise max-metric in external-LSAs
    bool maximum_metric_external_lsa = 10;
    // Max-metric value to advertise in external-LSAs
    uint32 maximum_metric_external_lsa_metric = 11;
    // Time max-metric was used for
    uint32 maximum_metric_originated_for = 12;
    // Time max-metric condition was cleared
    ospf_sh_time maximum_metric_time_unset = 13;
    // Max-metric unset reason
    string maximum_metric_unset_reason = 14;
}

