// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.interface_information.interfaces.interface;

// OSPF Interface Information
message ospf_sh_interface_KEYS {
    string process_name = 1;
    string interface_name = 2;
}

message ospf_sh_interface {
    // Interface
    string interface_name = 50;
    // Interface state
    string interface_state = 51;
    // If true, line protocol is up
    bool interface_line_state = 52;
    // Interface IP Address
    string interface_address = 53;
    // Interface IP Mask
    uint32 interface_mask = 54;
    // Area ID string in decimal or dotted-decimal format
    string interface_area = 55;
    // Interface SID
    uint32 interface_sid = 56;
    // SID PHP Off
    bool interface_sid_php_off = 57;
    // SID N-Flag Clear
    bool interface_sid_n_flag_clear = 58;
    // Interface Strict-SPF SID
    uint32 interface_strict_spf_sid = 59;
    // Strict-SPF SID PHP Off
    bool interface_strict_spf_sid_php_off = 60;
    // Strict-SPF SID N-Flag Clear
    bool interface_strict_spf_sid_n_flag_clear = 61;
    // Interface Router ID
    string interface_router_id = 62;
    // Network type
    string network_type = 63;
    // IP MTU
    uint32 ip_mtu = 64;
    // Maximum Packet Size
    uint32 maximum_packet_size = 65;
    // Interface tunnel flags
    uint32 interface_tunnel_flags = 66;
    // Interface link cost
    uint32 interface_link_cost = 67;
    // Interface bandwidth
    uint32 interface_bandwidth = 68;
    // If true, cost fallback is configured
    bool cfg_cost_fallback = 69;
    // Interface fallback cost
    uint32 interface_cost_fallback = 70;
    // If true, cost fallback is active
    bool cost_fallback_active = 71;
    // If true, configured as LDP sync
    bool configured_ldp_sync = 72;
    // If true, sync igp shortcuts
    bool configured_ldp_sync_igp_shortcuts = 73;
    // If true, interface LDP sync is achieved
    bool interface_ldp_sync = 74;
    // If true, configured as demand circuit
    bool configured_demand_circuit = 75;
    // If true, interface running as demand circuit
    bool interface_demand_circuit = 76;
    // Number of LSAs with demand circuit bit not set for the area in which the interface is running
    uint32 interface_dc_bitless_lsa_count = 77;
    // Interface Transmission delay
    uint32 transmission_delay = 78;
    // Interface OSPF state
    string ospf_interface_state = 79;
    // Interface priority
    uint32 interface_priority = 80;
    // If true, designated router
    bool designated_router = 81;
    // Designated router ID
    string designated_router_id = 82;
    // Designated router interface address
    string designated_router_address = 83;
    // If true, backup designated router
    bool backup_designated_router = 84;
    // Backup designated router ID
    string backup_designated_router_id = 85;
    // Backup designated router interface address
    string backup_designated_router_address = 86;
    // The amount of time in seconds before flush timer for old network LSA expires
    uint32 network_lsa_flush_timer = 87;
    // Filter is configured for out going LSAs
    bool interface_lsa_filter = 88;
    // Configured hello interval (s)
    uint32 hello_interval = 89;
    // Configured hello interval (ms)
    uint32 hello_interval_ms = 90;
    // Configured dead interval (s)
    uint32 dead_interval = 91;
    // Configured wait interval (s)
    uint32 wait_interval = 92;
    // Configured retransmit interval (s)
    uint32 interface_retransmission_interrval = 93;
    // If true, NSF is enabled
    bool interface_nsf_enabled = 94;
    // If true, NSF restart in progress on this interface
    bool interface_nsf = 95;
    // Time since last NSF restart (s)
    uint32 interface_last_nsf = 96;
    // If true, passive interface
    bool passive_interface = 97;
    // Time until next Hello (s)
    uint32 next_hello_time = 98;
    // Time until next Hello (ms)
    uint32 next_hello_time_ms = 99;
    // Information for neighbors on the interface
    repeated ospf_sh_interface_nbr interface_neighbor_list = 100;
    // BFD information
    ospf_sh_interface_bfd interface_bfd_information = 101;
    // TTL security enabled on the interface
    bool ttl_security_enabled = 102;
    // TTL security hop counts
    uint32 ttl_security_hop_count = 103;
    // Active interface details
    ospf_sh_interface_up active_interface = 104;
    // If true, interface is multi-area
    bool interfaceis_madj = 105;
    // Total number of multi-area
    uint32 interface_madj_count = 106;
    // Information for multi-area on the interface
    repeated ospf_sh_interface_madj interface_madj_list = 107;
    // Prefix Suppression for primary addresses
    bool prefix_suppress_primary_addresses = 108;
    // Prefix Suppression for secondary addresses
    bool prefix_suppress_secondary_addresses = 109;
    // If true, loopback interface is advertised as a stub network
    bool is_loopback_stub_network = 110;
    // Ack List Count
    uint32 interface_ack_list_count = 111;
    // Ack List High Watermark
    uint32 interface_ack_list_high_watermark = 112;
    // Registered for Link Down Fast Detection
    bool registered_for_link_down_fast_detection = 113;
    // Hold-down time in ms for fast-detect event
    uint32 fast_detect_hold_down_time = 114;
    // Link in hold-down state due to fast detect event
    bool interface_fast_detect_hold_down = 115;
    // Remaining hold down time in ms
    uint32 fast_detect_hold_down_time_remaining = 116;
    // IP Fast Reroute Type
    string fast_reroute_type = 117;
    // Topology Independent LFA
    bool fast_reroute_topology_independent_lfa = 118;
    // SRLG Values
    repeated uint32 srlg = 119;
    // IPFRR-Tiebreakers list
    repeated ospf_sh_ipfrr_tb ipfrr_tiebreakers_list = 120;
}

// OSPF IPFRR Tiebreakers
message ospf_sh_ipfrr_tb {
    // Tiebreaker Type
    string tiebreaker_type = 1;
    // Tiebreaker Index
    uint32 tiebreaker_index = 2;
}

// Interface BFD information
message ospf_sh_interface_bfd {
    // BFD enable mode - Default/Strict
    uint32 bfd_intf_enable_mode = 1;
    // BFD interval (ms)
    uint32 interval = 2;
    // BFD detection multiplier
    uint32 detection_multiplier = 3;
}

// OSPF Interface Neighbor Information
message ospf_sh_interface_nbr {
    // Neighbor Router ID
    string interface_neighbor_id = 1;
    // Cost of link to neighbor
    uint32 interface_neighbor_cost = 2;
    // If true, Designated router
    bool neighbor_dr = 3;
    // If true, Backup designated router
    bool neighbor_bdr = 4;
    // If true, hellos suppressed
    bool suppress_hello = 5;
}

// OSPF Interface Multi-Area Information
message ospf_sh_interface_madj {
    // Area ID string in decimal or dotted-decimal format
    string interface_area = 1;
    // Area ID
    uint32 madj_area_id = 2;
    // Number of Neighbors
    uint32 interface_neighbor_count = 3;
    // Total number of Adjacent Neighbors
    uint32 interface_adj_neighbor_count = 4;
    // Interface link cost
    uint32 interface_link_cost = 5;
    // Interface OSPF state
    string ospf_interface_state = 6;
}

// OSPF Interface Up-only Information
message ospf_sh_interface_up {
    // Wait time for DR/BDR selection (s)
    uint32 wait_time = 1;
    // Area scope LSAs flood index
    uint32 interface_area_flood_index = 2;
    // AS scope LSAs flood index
    uint32 interface_as_flood_index = 3;
    // Flood queue length
    uint32 interface_flood_length = 4;
    // Next LSA to flood (Area scope)
    uint32 interface_area_next_flood = 5;
    // Index of next LSA to flood (Area scope)
    uint32 interface_area_next_flood_index = 6;
    // Next LSA to flood (AS scope)
    uint32 interface_as_next_flood = 7;
    // Index of next LSA to flood (AS scope)
    uint32 interface_as_next_flood_index = 8;
    // Last flood scan length
    uint32 flood_scan_length = 9;
    // Maximum flood length
    uint32 maximum_flood_length = 10;
    // Last flood scan time (ms)
    uint32 last_flood_time = 11;
    // Maximum flood time (ms)
    uint32 maximum_flood_time = 12;
    // Time until next flood pacing timer (ms)
    uint32 interface_flood_pacing_timer = 13;
    // Total number of Neighbors
    uint32 interface_neighbor_count = 14;
    // Number of neighbors for which hellos are suppressed
    uint32 suppress_hello_count = 15;
    // Authentication type
    string interface_authentication_type = 16;
    // If true, MD key is configured
    bool youngest_md_key = 17;
    // Number of neighbors using the old key (if rollover in progress)
    uint32 old_md5_key_neighbor_count = 18;
    // Youngest MD key ID
    uint32 youngest_md_key_id = 19;
    // List of old MD keys
    repeated uint32 md_keys_list = 20;
    // Keychain ID
    uint64 keychain_id = 21;
}

