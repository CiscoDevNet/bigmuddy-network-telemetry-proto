// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv6_routes.ipv6_route;

// IS-IS IPv6 route
message isis_sh_ipv6_route_KEYS {
    string instance_name = 1;
    string af_name = 2;
    string saf_name = 3;
    string topology_name = 4;
    string prefix = 5;
    uint32 prefix_length = 6;
}

message isis_sh_ipv6_route {
    // Status of IS-IS directly connected routes to the prefix
    isis_sh_route_conn_status connected_status = 50;
    // Status of other protocols' routes redistributed into IS-IS
    isis_sh_route_redist_status redistributed_status = 51;
    // Status of native IS-IS routes to the prefix
    isis_sh_ipv6_route_native_status native_status = 52;
    // Per level details of how the local system advertises the prefix
    repeated isis_sh_ipv6_route_adv per_level_advertising_details = 53;
}

message isis_nodal_sid_type {
    uint32 sid_value = 1;
    uint32 rflag = 2;
    uint32 nflag = 3;
    uint32 pflag = 4;
    uint32 eflag = 5;
    uint32 vflag = 6;
    uint32 lflag = 7;
    uint32 algorithm = 8;
}

message isis_string_type {
    string value = 1;
}

// IPv4 address and prefix length
message isis_ipv6_prefix_type {
    // prefix
    string prefix = 1;
    // prefix length
    uint32 prefix_length = 2;
}

message isis_snpa_type {
    string value = 1;
}

message isis_sh_interface_name {
    string value = 1;
}

// OSPF Repair Element
message isis_sh_rep_el {
    // RepairElementNodeID
    string repair_element_node_id = 1;
    // RepairIPv4Addr
    string repair_ipv4_addr = 2;
    // RepairIPv6Addr
    string repair_ipv6_addr = 3;
    // Repair Label
    uint32 repair_label = 4;
    // Repair Element Type
    uint32 repair_element_type = 5;
}

// FRR backup path
message isis_sh_ipv6_frr_backup {
    // Next hop neighbor ID
    string neighbor_id = 1;
    // Interface to send the packet out of
    string egress_interface = 2;
    // Next hop neighbor's forwarding address
    string neighbor_address = 3;
    // Tunnel interface to send the packet out of
    string tunnel_egress_interface = 4;
    // Next hop neighbor's SNPA
    isis_snpa_type neighbor_snpa = 5;
    // Remote LFA PQ Node's ID
    string remote_lfa_system_id = 6;
    // Remote LFA Router ID
    string remote_lfa_router_id = 7;
    // Remote LFA PQ Node's ID
    string remote_lfa_system_pid = 8;
    // Remote LFA Router ID
    string remote_lfa_router_pid = 9;
    // Distance to the network via this backup path
    uint32 total_backup_distance = 10;
    // Segment routing sid value received from first hop
    uint32 segment_routing_sid_value = 11;
    // Number of SIDs in TI-LFA/rLFA
    uint32 num_sid = 12;
    // Segment routing sid values for TI-LFA/rLFA
    repeated uint32 segment_routing_sid_values = 13;
    // Backup Repair List Size
    uint32 backup_repair_list_size = 14;
    // Ti LFA computation which provided backup path
    string tilfa_computation = 15;
    // BAckup Repair List
    repeated isis_sh_rep_el backup_repair_list = 16;
    // Is the backup path via downstream node?
    bool is_downstream = 17;
    // Is the backup path line card disjoint with primary?
    bool is_lc_disjoint = 18;
    // Is the backup path node protecting?
    bool is_node_protecting = 19;
    // Is the backup path an ECMP to the network?
    bool is_primary_path = 20;
    // Is the backup path SRLG disjoint with primary?
    bool is_srlg_disjoint = 21;
    // Is the backup path via a Remote LFA?
    bool is_remote_lfa = 22;
    // Is the backup path via a TI-LFA?
    bool is_epcfrr_lfa = 23;
    // Is SR TE tunnel requested
    bool is_tunnel_requested = 24;
    // Weight configured on the interface
    uint32 weight = 25;
}

// IPv6 path to a destination
message isis_sh_ipv6_path {
    // Next hop neighbor ID
    string neighbor_id = 1;
    // Interface to send the packet out of
    string egress_interface = 2;
    // Next hop neighbor's forwarding address
    string neighbor_address = 3;
    // Next hop neighbor's SNPA
    isis_snpa_type neighbor_snpa = 4;
    // Tag associated with the path
    uint32 tag = 5;
    // FRR backup for this path
    isis_sh_ipv6_frr_backup frr_backup = 6;
    // Uloop Explicit List
    repeated isis_sh_rep_el uloop_explicit_list = 7;
    // Explicit path tunnel interface
    string tunnel_interface = 8;
    // Segment routing sid value received from first hop
    uint32 segment_routing_sid_value = 9;
    // Weight configured on the interface
    uint32 weight = 10;
}

// IPv6 path to a destination
message isis_sh_ipv6_ucmp_path {
    // Next hop neighbor ID
    string neighbor_id = 1;
    // Interface to send the packet out of
    string egress_interface = 2;
    // Next hop neighbor's forwarding address
    string neighbor_address = 3;
    // Next hop neighbor's SNPA
    isis_snpa_type neighbor_snpa = 4;
    // Tag associated with the path
    uint32 tag = 5;
    // Distance to the network via this UCMP next hop
    uint32 total_ucmp_distance = 6;
    // FRR backup for this path
    isis_sh_ipv6_frr_backup frr_backup = 7;
    // Segment routing sid value received from first hop
    uint32 segment_routing_sid_value = 8;
    // Weight configured on the interface
    uint32 weight = 9;
}

message isis_sh_redist_entry_proto {
    string protocol = 1;
    isis_string_type isis_instance_id = 2;
    isis_string_type ospf_process_id = 3;
    isis_string_type osp_fv3_process_id = 4;
    isis_string_type bgp_as_number = 5;
    isis_string_type eigrp_as_number = 6;
    isis_string_type application_name = 7;
}

// Details of an IS-IS directly connected prefix
message isis_sh_route_conn_details {
    // Interfaces
    repeated isis_sh_interface_name interfaces = 1;
}

// Status of an IS-IS directly connected prefix
message isis_sh_route_conn_status {
    string is_valid = 1;
    // Details of the directly connected prefix
    isis_sh_route_conn_details connected_details = 2;
}

message isis_sh_route_redist_level_details {
    string level = 1;
    isis_sh_redist_entry_proto owner = 2;
}

message isis_sh_route_redist_details {
    repeated isis_sh_route_redist_level_details value = 1;
}

// Status of redistributed routes to a prefix
message isis_sh_route_redist_status {
    string is_valid = 1;
    // Per level details of the redistributed route
    isis_sh_route_redist_details redistribution_details = 2;
}

// Source of a native route
message isis_sh_ipv6_route_native_source {
    // ID of the LSP advertising the prefix
    string source_lsp_id = 1;
    // Source address of the IS advertising the prefix
    string source_address = 2;
    // Tags associated with the prefix item
    repeated uint32 tags = 3;
    // Nodal SIDs with the prefix item
    repeated isis_nodal_sid_type nodal_sids = 4;
}

// Paths and sources for a native route at a particular preference
message isis_sh_ipv6_route_native_preference {
    // Origin of route
    string origin = 1;
    // Distance to network
    uint32 metric = 2;
    // Multicast-intact distance to network
    uint32 multicast_metric = 3;
    // Is the metric an external metric?
    bool is_external_metric = 4;
    // Administrative Distance
    uint32 administrative_distance = 5;
    // First hops toward the prefix
    repeated isis_sh_ipv6_path paths = 6;
    // UCMP first hops toward the prefix
    repeated isis_sh_ipv6_ucmp_path ucmp_next_hops = 7;
    // Multicast intact first hops toward the prefix
    repeated isis_sh_ipv6_path multicast_paths = 8;
    // SR-TE native first hops toward the prefix
    repeated isis_sh_ipv6_path s_rte_paths = 9;
    // SR microloop avoidance paths
    repeated isis_sh_ipv6_path explicit_paths = 10;
    // Sources advertising the prefix
    repeated isis_sh_ipv6_route_native_source sources = 11;
    // Multicast-intact sources advertising the prefix
    repeated isis_sh_ipv6_route_native_source multicast_sources = 12;
}

// Details of a native IS-IS route to a prefix
message isis_sh_ipv6_route_native_details {
    // Primary paths to prefix
    isis_sh_ipv6_route_native_preference primary = 1;
    // Backup paths to prefix
    repeated isis_sh_ipv6_route_native_preference backups = 2;
    // Relative importance of the prefix
    string priority = 3;
}

// Status of a native IS-IS route to a prefix
message isis_sh_ipv6_route_native_status {
    string is_valid = 1;
    // Details of the native route
    isis_sh_ipv6_route_native_details native_details = 2;
}

// Summarization status
message isis_sh_ipv6_route_summarization_status {
    string is_valid = 1;
    // Summarizing Prefix
    isis_ipv6_prefix_type summary_prefix = 2;
}

// How a prefix is advertised in a particular level
message isis_sh_ipv6_route_adv {
    // Level in which the prefix is advertised
    string level = 1;
    // The origin of the advertisement
    string advertising_origin = 2;
    // Metric with which the prefix is advertised
    uint32 metric = 3;
    // Has the prefix been propagated from another level?
    bool is_propagated = 4;
    // Is the metric an external metric?
    bool is_external_metric = 5;
    // Status of summarization for the prefix
    isis_sh_ipv6_route_summarization_status summarization_status = 6;
    // Is the prefix external to the IS-IS domain?
    bool is_external_reachability = 7;
    // Is the up/down bit set?
    bool is_interarea = 8;
    // Tags associated with the prefix
    repeated uint32 tags = 9;
    // Nodal SIDs with the prefix item
    repeated isis_nodal_sid_type nodal_sids = 10;
}

