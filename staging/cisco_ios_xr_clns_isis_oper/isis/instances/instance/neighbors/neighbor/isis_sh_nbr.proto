// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_clns_isis_oper.isis.instances.instance.neighbors.neighbor;

// A neighbor IS
message isis_sh_nbr_KEYS {
    string instance_name = 1;
    string system_id = 2;
    string interface_name = 3;
}

message isis_sh_nbr {
    // Neighbor system ID
    string neighbor_system_id = 50;
    // Neighbor SNPA
    string neighbor_snpa = 51;
    // Local interface
    string local_interface = 52;
    // Neighbor (adjacency) state
    string neighbor_state = 53;
    // Circuit type
    string neighbor_circuit_type = 54;
    // TRUE if neighbor is IETF-NSF capable
    uint32 neighbor_ietf_nsf_capable_flag = 55;
    // Link media type
    string neighbor_media_type = 56;
    // Time (s) until neighbor declared down if no IIH received
    uint32 neighbor_holdtime = 57;
    // Active area addresses
    repeated osi_area_address_type neighbor_active_area_addresses = 58;
    // TRUE if NeighborUptime is set
    bool neighbor_uptime_valid_flag = 59;
    // How long the neighbor has been up (s)
    uint32 neighbor_uptime = 60;
    // Topologies supported by both neighbor and local system
    repeated isis_topo_id_type topologies_supported = 61;
    // Per address-family data
    repeated isis_sh_adj_af neighbor_per_address_family_data = 62;
    // ISIS NSR STANDBY
    bool nsr_standby = 63;
}

message isis_ipv6_address_type {
    string value = 1;
}

// Identification of an IS-IS topology
message isis_topo_id_type {
    // AF name
    string af_name = 1;
    // Sub-AF name
    string saf_name = 2;
    // VRF Name
    string vrf_name = 3;
    // Topology Name
    string topology_name = 4;
}

message osi_area_address_type {
    string value = 1;
}

// IPv4 Adjacency SID backup information
message isis_ipv4_adj_sid_backup_info {
    // Number of labels in the backup path label stack
    uint32 backup_label_stack_size = 1;
    // Backup path label stack
    repeated uint32 backup_label_stack = 2;
    // Neighbor address used as adjacency backup target
    string backup_node_address = 3;
    // Backup path nexthop address
    string backup_nexthop = 4;
    // Backup path interface
    string backup_interface = 5;
}

// IPv4 Adjacency SID
message isis_ipv4_adj_sid {
    // Adjacency SID value
    uint32 adjacency_sid_value = 1;
    // Adjacency SID Backup Info
    isis_ipv4_adj_sid_backup_info adjacency_sid_backup = 2;
}

// IPv4 Adjacency SID backup information
message isis_ipv6_adj_sid_backup_info {
    // Number of labels in the backup path label stack
    uint32 backup_label_stack_size = 1;
    // Backup path label stack
    repeated uint32 backup_label_stack = 2;
    // Neighbor address used as adjacency backup target
    string backup_node_address = 3;
    // Backup path nexthop address
    string backup_nexthop = 4;
    // Backup path interface
    string backup_interface = 5;
}

// IPv6 Adjacency SID
message isis_ipv6_adj_sid {
    // Adjacency SID value
    uint32 adjacency_sid_value = 1;
    // Adjacency SID Backup Info
    isis_ipv6_adj_sid_backup_info adjacency_sid_backup = 2;
}

// IPv4 Specific Per-Adjacency Data
message isis_sh_adj_ipv4 {
    // Adjacency next hop
    string next_hop = 1;
    // Adjacency interface addresses
    repeated bytes interface_addresses = 2;
    // Adjacency SID
    isis_ipv4_adj_sid adjacency_sid = 3;
    // Adjacency SID not eligible for FRR protection
    isis_ipv4_adj_sid non_frr_adjacency_sid = 4;
    // Underlying interface list for bundle interfaces
    repeated string underlying_interface_list = 5;
    // Per bundle member Adjacency sid
    repeated uint32 underlying_adjacency_sid_list = 6;
}

// IPv6 Specific Per-Adjacency Data
message isis_sh_adj_ipv6 {
    // Adjacency next hop
    string next_hop = 1;
    // Adjacency interface addresses
    repeated isis_ipv6_address_type interface_addresses = 2;
    // Adjacency SID
    isis_ipv6_adj_sid adjacency_sid = 3;
    // Adjacency SID not eligible for FRR protection
    isis_ipv6_adj_sid non_frr_adjacency_sid = 4;
    // Underlying interface list for bundle interfaces
    repeated string underlying_interface_list = 5;
    // Per bundle member Adjacency sid
    repeated uint32 underlying_adjacency_sid_list = 6;
}

message isis_sh_adj_af {
    string af_name = 1;
    // IPV4 neighbor info
    isis_sh_adj_ipv4 ipv4 = 2;
    // IPV6 neighbor info
    isis_sh_adj_ipv6 ipv6 = 3;
}

