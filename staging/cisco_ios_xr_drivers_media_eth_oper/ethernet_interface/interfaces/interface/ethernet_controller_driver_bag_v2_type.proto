// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_drivers_media_eth_oper.ethernet_interface.interfaces.interface;

// Ethernet bag for driver state for the show controllers command
message ethernet_controller_driver_bag_v2_type_KEYS {
    string interface_name = 1;
}

message ethernet_controller_driver_bag_v2_type {
    // Port Administrative State
    string admin_state = 50;
    // Port Operational state - TRUE if up
    uint32 oper_state_up = 51;
    // PHY information
    eth_ctrlr_phy_info phy_info = 52;
    // Layer 1 information
    eth_ctrlr_l1_info layer1_info = 53;
    // MAC Layer information
    eth_ctrlr_mac_info mac_info = 54;
    // Transport state information
    eth_ctlr_transport_info transport_info = 55;
}

message ether_autoneg_ {
    // TRUE if autonegotiation is enabled
    sint32 autoneg_enabled = 1;
    // Validity mask: 0x1 speed, 0x2 duplex, 0x4 flowcontrol, 0x8 fec
    uint32 mask = 2;
    // Restricted speed (if relevant bit is set in mask)
    string speed = 3;
    // Restricted duplex (if relevant bit is set in mask)
    string duplex = 4;
    // Restricted flowcontrol (if relevant bit is set in mask)
    string flowcontrol = 5;
    // If true, configuration overrides negotiated settings.  If false, negotiated settings in effect
    sint32 config_override = 6;
    // Restricted FEC (if revelevant bit is set in mask)
    string fec = 7;
}

message mac_addr_type {
    string value = 1;
}

message ether_mcast_mac_type_ {
    // MAC address
    string mac_address = 1;
    // Mask for this MAC address
    string mask = 2;
}

message eth_ctrlr_phy_dom_lane_alarms {
    // Transmit Laser Power Alarm
    string transmit_laser_power = 1;
    // Received Optical Power Alarm
    string received_laser_power = 2;
    // Laser Bias Current Alarm
    string laser_bias_current = 3;
}

message eth_ctrlr_phy_lane_opt_mon_validity {
    // The wavelength 'per lane' field is valid
    sint32 wavelength_valid = 1;
    // The transmit power 'per lane' field is valid
    sint32 transmit_power_valid = 2;
    // The receive power 'per lane' field is valid
    sint32 receive_power_valid = 3;
    // The laser bias 'per lane' field is valid
    sint32 laser_bias_valid = 4;
}

message eth_ctrlr_phy_lane_opt_mon {
    // Center Wavelength (nm*1000)
    uint32 center_wavelength = 1;
    // Transmit Laser Power (dBm*1000)
    sint32 transmit_laser_power = 2;
    // Received Optical Power (dBm*1000)
    sint32 received_laser_power = 3;
    // Laser Bias Current (uAmps)
    uint32 laser_bias_current = 4;
    // Digital Optical Monitoring alarms
    eth_ctrlr_phy_dom_lane_alarms dig_opt_mon_alarm = 5;
}

message eth_ctrlr_phy_dom_alarms {
    // Transceiver Temperature Alarm
    string transceiver_temperature = 1;
    // Transceiver Voltage Alarm
    string transceiver_voltage = 2;
    // Transmit Laser Power Alarm
    string transmit_laser_power = 3;
    // Received Optical Power Alarm
    string received_laser_power = 4;
    // Laser Bias Current Alarm
    string laser_bias_current = 5;
}

message eth_ctrlr_phy_dom_threshold_validity {
    // The temperature fields are valid
    sint32 temperature_valid = 1;
    // The voltage fields are valid
    sint32 voltage_valid = 2;
    // The laser bias fields are valid
    sint32 laser_bias_valid = 3;
    // The transmit power fields are valid
    sint32 transmit_power_valid = 4;
    // The receive power fields are valid
    sint32 receive_power_valid = 5;
}

message eth_ctrlr_phy_dom_thresholds {
    // Field validity
    eth_ctrlr_phy_dom_threshold_validity field_validity = 1;
    // Transceiver high temperature alarm threshold (mDegrees C)
    sint32 transceiver_temperature_alarm_high = 2;
    // Transceiver high temperature warning threshold (mDegrees C)
    sint32 transceiver_temperature_warning_high = 3;
    // Transceiver low temperature warning threshold (mDegrees C)
    sint32 transceiver_temperature_warning_low = 4;
    // Transceiver low temperature alarm threshold (mDegrees C)
    sint32 transceiver_temperature_alarm_low = 5;
    // Transceiver high voltage alarm threshold (mV)
    uint32 transceiver_voltage_alarm_high = 6;
    // Transceiver high voltage warning threshold (mV)
    uint32 transceiver_voltage_warning_high = 7;
    // Transceiver low voltage warning threshold (mV)
    uint32 transceiver_voltage_warning_low = 8;
    // Transceiver low voltage alarm threshold (mV)
    uint32 transceiver_voltage_alarm_low = 9;
    // Laser bias high alarm threshold (uA)
    uint32 laser_bias_alarm_high = 10;
    // Laser bias high warning threshold (uA)
    uint32 laser_bias_warning_high = 11;
    // Laser bias low warning threshold (uA)
    uint32 laser_bias_warning_low = 12;
    // Laser bias low alarm threshold (uA)
    uint32 laser_bias_alarm_low = 13;
    // High optical transmit power alarm threshold (uW)
    uint32 optical_transmit_power_alarm_high = 14;
    // High optical transmit power warning threshold (uW)
    uint32 optical_transmit_power_warning_high = 15;
    // Low optical transmit power warning threshold (uW)
    uint32 optical_transmit_power_warning_low = 16;
    // Low optical transmit power alarm threshold (uW)
    uint32 optical_transmit_power_alarm_low = 17;
    // High optical receive power alarm threshold (uW)
    uint32 optical_receive_power_alarm_high = 18;
    // High optical receive power warning threshold (uW)
    uint32 optical_receive_power_warning_high = 19;
    // Low optical receive power warning threshold (uW)
    uint32 optical_receive_power_warning_low = 20;
    // Low optical receive power alarm threshold (uW)
    uint32 optical_receive_power_alarm_low = 21;
}

message ether_phy_details {
    // Name of the port optics manufacturer
    string vendor = 1;
    // Part number for the port optics
    string vendor_part_number = 2;
    // Serial number for the port optics
    string vendor_serial_number = 3;
    // The temperature of the transceiver (mDegrees C)
    sint32 transceiver_temperature = 4;
    // The input voltage to the transceiver (mV)
    sint32 transceiver_voltage = 5;
    // The transceiver transmit laser power (uW)
    sint32 transceiver_tx_power = 6;
    // The transceiver receive optical power (uW)
    sint32 transceiver_rx_power = 7;
    // The laser bias of the transceiver (uA)
    sint32 transceiver_tx_bias = 8;
    // Digital Optical Monitoring (per lane information)
    repeated eth_ctrlr_phy_lane_opt_mon lane = 9;
    // Digital Optical Monitoring (per lane information) validity
    eth_ctrlr_phy_lane_opt_mon_validity lane_field_validity = 10;
    // Digital Optical Monitoring alarm thresholds
    eth_ctrlr_phy_dom_thresholds dig_opt_mon_alarm_thresholds = 11;
    // Digital Optical Monitoring alarms
    eth_ctrlr_phy_dom_alarms dig_opt_mon_alarms = 12;
    // Wavelength of the optics being used in nm * 1000
    uint32 optics_wavelength = 13;
}

message eth_ctrlr_alarms {
    // Received Loss of Signal
    string received_loss_of_signal_alarm = 1;
    // PCS Loss of Block Lock
    string pcs_loss_of_block_lock_alarm = 2;
    // Local Fault
    string local_fault_alarm = 3;
    // Remote Fault
    string remote_fault_alarm = 4;
    // SD-BER
    string sd_ber_alarm = 5;
    // SF-BER
    string sf_ber_alarm = 6;
    // Loss of Synchronization Data
    string loss_of_synchronization_data_alarm = 7;
    // Hi-BER
    string hi_ber_alarm = 8;
    // Squelch
    string squelch_alarm = 9;
}

message eth_ctrlr_error_counters {
    // Sync-header error count
    uint64 sync_header_errors = 1;
    // PCS BIP error count
    uint64 pcsbip_errors = 2;
}

message ether_ber_settings {
    // BER threshold for signal to degrade
    uint32 signal_degrade_threshold = 1;
    // Report alarm to indicate signal degrade
    sint32 signal_degrade_alarm = 2;
    // BER threshold for signal to fail
    uint32 signal_fail_threshold = 3;
    // Report alarm to indicate signal failure
    sint32 signal_fail_alarm = 4;
    // Whether drivers should signal remote faults
    sint32 signal_remote_fault = 5;
}

message eth_ber_monitoring {
    // Whether or not BER monitoring is supported
    sint32 supported = 1;
    // The BER monitoring settings to be applied
    ether_ber_settings settings = 2;
}

message eth_ctrlr_ucast_mac_filter {
    // MAC addresses in the unicast ingress destination MAC filter
    repeated mac_addr_type unicast_mac_addresses = 1;
}

message eth_ctrlr_mcast_mac_filter {
    // Whether the port is in multicast promiscuous mode
    uint32 multicast_promiscuous = 1;
    // MAC addresses in the multicast ingress destination MAC filter
    repeated ether_mcast_mac_type_ multicast_mac_addresses = 2;
}

message ether_fec_details {
    // Port operational FEC type
    string fec = 1;
    // Corrected codeword error count
    uint64 corrected_codeword_count = 2;
    // Uncorrected codeword error count
    uint64 uncorrected_codeword_count = 3;
}

message ether_pfc_details_type {
    // Port operational priority flow control
    string priority_flowcontrol = 1;
    // Priority bitmap
    uint32 priority_enabled_bitmap = 2;
    // RX Frame counts
    repeated uint64 rx_frames = 3;
    // TX Frame counts
    repeated uint64 tx_frames = 4;
}

message eth_ctrlr_phy_info {
    // Port media type
    string media_type = 1;
    // Presence of PHY
    string phy_present = 2;
    // Details about the PHY
    ether_phy_details phy_details = 3;
    // Port operational loopback
    string loopback = 4;
    // Forward Error Correction information
    ether_fec_details fec_details = 5;
}

message eth_ctrlr_l1_info {
    // Link state
    string link_state = 1;
    // State of the LED
    string led_state = 2;
    // Port autonegotiation configuration settings
    ether_autoneg_ autoneg = 3;
    // Port operational speed
    string speed = 4;
    // Port operational duplexity
    string duplex = 5;
    // Port operational flow control
    string flowcontrol = 6;
    // Port operational inter-packet-gap
    string ipg = 7;
    // Current alarms
    eth_ctrlr_alarms current_alarms = 8;
    // Previous alarms
    eth_ctrlr_alarms previous_alarms = 9;
    // Statistics for detected errors
    eth_ctrlr_error_counters error_counts = 10;
    // BER monitoring details
    eth_ber_monitoring ber_monitoring = 11;
    // Laser Squelch - TRUE if enabled
    uint32 laser_squelch_enabled = 12;
    // Bandwidth utilization (hundredths of a percent)
    uint32 bandwidth_utilization = 13;
    // Priority flow control information
    ether_pfc_details_type pfc_info = 14;
    // Port operational bandwidth
    uint64 bandwidth = 15;
}

message eth_ctrlr_mac_info {
    // Port operational MTU
    uint32 mtu = 1;
    // Port operational MRU
    uint32 mru = 2;
    // Port Burned-In MAC address
    string burned_in_mac_address = 3;
    // Port operational MAC address
    mac_addr_type operational_mac_address = 4;
    // Port unicast MAC filter information
    eth_ctrlr_ucast_mac_filter unicast_mac_filters = 5;
    // Port multicast MAC filter information
    eth_ctrlr_mcast_mac_filter multicast_mac_filters = 6;
}

message eth_ctlr_transport_info {
    // Maintenance Mode - TRUE if enabled
    uint32 maintenance_mode_enabled = 1;
    // AINS Soak status
    string ains_status = 2;
    // Total duration (seconds) of AINS soak timer
    uint32 total_duration = 3;
    // Remaining duration (seconds) of AINS soak timer
    uint32 remaining_duration = 4;
}

