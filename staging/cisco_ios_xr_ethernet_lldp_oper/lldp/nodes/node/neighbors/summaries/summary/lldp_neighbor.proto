// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ethernet_lldp_oper.lldp.nodes.node.neighbors.summaries.summary;

// LLDP neighbor info
message lldp_neighbor_KEYS {
    string node_name = 1;
    string interface_name = 2;
    string device_id = 3;
}

message lldp_neighbor {
    // Next neighbor in the list
    repeated lldp_neighbor_item lldp_neighbor = 50;
}

message lldp_neighbor_item {
    // Interface the neighbor entry was received on 
    string receiving_interface_name = 1;
    // Parent Interface the neighbor entry was received on 
    string receiving_parent_interface_name = 2;
    // Device identifier
    string device_id = 3;
    // Chassis id
    string chassis_id = 4;
    // Outgoing port identifier
    string port_id_detail = 5;
    // Version number
    uint32 header_version = 6;
    // Remaining hold time
    uint32 hold_time = 7;
    // Enabled Capabilities
    string enabled_capabilities = 8;
    // Platform type
    string platform = 9;
    // Detailed neighbor info
    lldp_neighbor_detail detail = 10;
    // MIB nieghbor info
    lldp_neighbor_mib mib = 11;
}

message in6_addr_td {
    string value = 1;
}

message lldp_l3_addr {
    string address_type = 1;
    // IPv4 address
    string ipv4_address = 2;
    // IPv6 address
    in6_addr_td ipv6_address = 3;
}

message lldp_addr_entry {
    // Next address entry in list
    repeated lldp_addr_entry_item lldp_addr_entry = 1;
}

message lldp_addr_entry_item {
    // Network layer address
    lldp_l3_addr address = 1;
    // MA sub type
    uint32 ma_subtype = 2;
    // Interface num
    uint32 if_num = 3;
}

message lldp_unknown_tlv_entry {
    // Next unknown TLV entry in list
    repeated lldp_unknown_tlv_entry_item lldp_unknown_tlv_entry = 1;
}

message lldp_unknown_tlv_entry_item {
    // Unknown TLV type
    uint32 tlv_type = 1;
    // Unknown TLV payload
    bytes tlv_value = 2;
}

message lldp_org_def_tlv_entry {
    // Next Org Def TLV entry in list
    repeated lldp_org_def_tlv_entry_item lldp_org_def_tlv_entry = 1;
}

message lldp_org_def_tlv_entry_item {
    // Organizationally Unique Identifier
    uint32 oui = 1;
    // Org Def TLV subtype
    uint32 tlv_subtype = 2;
    // lldpRemOrgDefInfoIndex
    uint32 tlv_info_indes = 3;
    // Org Def TLV payload
    bytes tlv_value = 4;
}

message lldp_neighbor_detail {
    // Port Description
    string port_description = 1;
    // System Name
    string system_name = 2;
    // System Description
    string system_description = 3;
    // Time remaining
    uint32 time_remaining = 4;
    // System Capabilities
    string system_capabilities = 5;
    // Enabled Capabilities
    string enabled_capabilities = 6;
    // Management Addresses
    lldp_addr_entry network_addresses = 7;
    // Auto Negotiation
    string auto_negotiation = 8;
    // Physical media capabilities
    string physical_media_capabilities = 9;
    // Media Attachment Unit type
    uint32 media_attachment_unit_type = 10;
    // Vlan ID
    uint32 port_vlan_id = 11;
}

message lldp_neighbor_mib {
    // TimeFilter
    uint32 rem_time_mark = 1;
    // LldpPortNumber
    uint32 rem_local_port_num = 2;
    // lldpRemIndex
    uint32 rem_index = 3;
    // Chassis ID sub type
    uint32 chassis_id_sub_type = 4;
    // Chassis ID length
    uint32 chassis_id_len = 5;
    // Port ID sub type
    uint32 port_id_sub_type = 6;
    // Port ID length
    uint32 port_id_len = 7;
    // Supported and combined cpabilities
    uint32 combined_capabilities = 8;
    // Unknown TLV list
    lldp_unknown_tlv_entry unknown_tlv_list = 9;
    // Org Def TLV list
    lldp_org_def_tlv_entry org_def_tlv_list = 10;
}

