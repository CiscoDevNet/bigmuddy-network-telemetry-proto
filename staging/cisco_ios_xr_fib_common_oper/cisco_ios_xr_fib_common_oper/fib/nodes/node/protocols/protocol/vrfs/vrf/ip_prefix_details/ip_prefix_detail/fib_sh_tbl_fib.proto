//                                 Apache License
//                           Version 2.0, January 2004
//                        http://www.apache.org/licenses/
//
//   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//
//   1. Definitions.
//
//      "License" shall mean the terms and conditions for use, reproduction,
//      and distribution as defined by Sections 1 through 9 of this document.
//
//      "Licensor" shall mean the copyright owner or entity authorized by
//      the copyright owner that is granting the License.
//
//      "Legal Entity" shall mean the union of the acting entity and all
//      other entities that control, are controlled by, or are under common
//      control with that entity. For the purposes of this definition,
//      "control" means (i) the power, direct or indirect, to cause the
//      direction or management of such entity, whether by contract or
//      otherwise, or (ii) ownership of fifty percent (50%) or more of the
//      outstanding shares, or (iii) beneficial ownership of such entity.
//
//      "You" (or "Your") shall mean an individual or Legal Entity
//      exercising permissions granted by this License.
//
//      "Source" form shall mean the preferred form for making modifications,
//      including but not limited to software source code, documentation
//      source, and configuration files.
//
//      "Object" form shall mean any form resulting from mechanical
//      transformation or translation of a Source form, including but
//      not limited to compiled object code, generated documentation,
//      and conversions to other media types.
//
//      "Work" shall mean the work of authorship, whether in Source or
//      Object form, made available under the License, as indicated by a
//      copyright notice that is included in or attached to the work
//      (an example is provided in the Appendix below).
//
//      "Derivative Works" shall mean any work, whether in Source or Object
//      form, that is based on (or derived from) the Work and for which the
//      editorial revisions, annotations, elaborations, or other modifications
//      represent, as a whole, an original work of authorship. For the purposes
//      of this License, Derivative Works shall not include works that remain
//      separable from, or merely link (or bind by name) to the interfaces of,
//      the Work and Derivative Works thereof.
//
//      "Contribution" shall mean any work of authorship, including
//      the original version of the Work and any modifications or additions
//      to that Work or Derivative Works thereof, that is intentionally
//      submitted to Licensor for inclusion in the Work by the copyright owner
//      or by an individual or Legal Entity authorized to submit on behalf of
//      the copyright owner. For the purposes of this definition, "submitted"
//      means any form of electronic, verbal, or written communication sent
//      to the Licensor or its representatives, including but not limited to
//      communication on electronic mailing lists, source code control systems,
//      and issue tracking systems that are managed by, or on behalf of, the
//      Licensor for the purpose of discussing and improving the Work, but
//      excluding communication that is conspicuously marked or otherwise
//      designated in writing by the copyright owner as "Not a Contribution."
//
//      "Contributor" shall mean Licensor and any individual or Legal Entity
//      on behalf of whom a Contribution has been received by Licensor and
//      subsequently incorporated within the Work.
//
//   2. Grant of Copyright License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      copyright license to reproduce, prepare Derivative Works of,
//      publicly display, publicly perform, sublicense, and distribute the
//      Work and such Derivative Works in Source or Object form.
//
//   3. Grant of Patent License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      (except as stated in this section) patent license to make, have made,
//      use, offer to sell, sell, import, and otherwise transfer the Work,
//      where such license applies only to those patent claims licensable
//      by such Contributor that are necessarily infringed by their
//      Contribution(s) alone or by combination of their Contribution(s)
//      with the Work to which such Contribution(s) was submitted. If You
//      institute patent litigation against any entity (including a
//      cross-claim or counterclaim in a lawsuit) alleging that the Work
//      or a Contribution incorporated within the Work constitutes direct
//      or contributory patent infringement, then any patent licenses
//      granted to You under this License for that Work shall terminate
//      as of the date such litigation is filed.
//
//   4. Redistribution. You may reproduce and distribute copies of the
//      Work or Derivative Works thereof in any medium, with or without
//      modifications, and in Source or Object form, provided that You
//      meet the following conditions:
//
//      (a) You must give any other recipients of the Work or
//          Derivative Works a copy of this License; and
//
//      (b) You must cause any modified files to carry prominent notices
//          stating that You changed the files; and
//
//      (c) You must retain, in the Source form of any Derivative Works
//          that You distribute, all copyright, patent, trademark, and
//          attribution notices from the Source form of the Work,
//          excluding those notices that do not pertain to any part of
//          the Derivative Works; and
//
//      (d) If the Work includes a "NOTICE" text file as part of its
//          distribution, then any Derivative Works that You distribute must
//          include a readable copy of the attribution notices contained
//          within such NOTICE file, excluding those notices that do not
//          pertain to any part of the Derivative Works, in at least one
//          of the following places: within a NOTICE text file distributed
//          as part of the Derivative Works; within the Source form or
//          documentation, if provided along with the Derivative Works; or,
//          within a display generated by the Derivative Works, if and
//          wherever such third-party notices normally appear. The contents
//          of the NOTICE file are for informational purposes only and
//          do not modify the License. You may add Your own attribution
//          notices within Derivative Works that You distribute, alongside
//          or as an addendum to the NOTICE text from the Work, provided
//          that such additional attribution notices cannot be construed
//          as modifying the License.
//
//      You may add Your own copyright statement to Your modifications and
//      may provide additional or different license terms and conditions
//      for use, reproduction, or distribution of Your modifications, or
//      for any such Derivative Works as a whole, provided Your use,
//      reproduction, and distribution of the Work otherwise complies with
//      the conditions stated in this License.
//
//   5. Submission of Contributions. Unless You explicitly state otherwise,
//      any Contribution intentionally submitted for inclusion in the Work
//      by You to the Licensor shall be under the terms and conditions of
//      this License, without any additional terms or conditions.
//      Notwithstanding the above, nothing herein shall supersede or modify
//      the terms of any separate license agreement you may have executed
//      with Licensor regarding such Contributions.
//
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor,
//      except as required for reasonable and customary use in describing the
//      origin of the Work and reproducing the content of the NOTICE file.
//
//   7. Disclaimer of Warranty. Unless required by applicable law or
//      agreed to in writing, Licensor provides the Work (and each
//      Contributor provides its Contributions) on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//      implied, including, without limitation, any warranties or conditions
//      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
//      PARTICULAR PURPOSE. You are solely responsible for determining the
//      appropriateness of using or redistributing the Work and assume any
//      risks associated with Your exercise of permissions under this License.
//
//   8. Limitation of Liability. In no event and under no legal theory,
//      whether in tort (including negligence), contract, or otherwise,
//      unless required by applicable law (such as deliberate and grossly
//      negligent acts) or agreed to in writing, shall any Contributor be
//      liable to You for damages, including any direct, indirect, special,
//      incidental, or consequential damages of any character arising as a
//      result of this License or out of the use or inability to use the
//      Work (including but not limited to damages for loss of goodwill,
//      work stoppage, computer failure or malfunction, or any and all
//      other commercial damages or losses), even if such Contributor
//      has been advised of the possibility of such damages.
//
//   9. Accepting Warranty or Additional Liability. While redistributing
//      the Work or Derivative Works thereof, You may choose to offer,
//      and charge a fee for, acceptance of support, warranty, indemnity,
//      or other liability obligations and/or rights consistent with this
//      License. However, in accepting such obligations, You may act only
//      on Your own behalf and on Your sole responsibility, not on behalf
//      of any other Contributor, and only if You agree to indemnify,
//      defend, and hold each Contributor harmless for any liability
//      incurred by, or claims asserted against, such Contributor by reason
//      of your accepting any such warranty or additional liability.
//
//   END OF TERMS AND CONDITIONS
//
//   APPENDIX: How to apply the Apache License to your work.
//
//      To apply the Apache License to your work, attach the following
//      boilerplate notice, with the fields enclosed by brackets "{}"
//      replaced with your own identifying information. (Don't include
//      the brackets!)  The text should be enclosed in the appropriate
//      comment syntax for the file format. We also recommend that a
//      file or class name and description of purpose be included on the
//      same "printed page" as the copyright notice for easier
//      identification within third-party archives.
//
//   Copyright (c) 2017 Cisco
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

//Path: Cisco-IOS-XR-fib-common-oper:fib/nodes/node/protocols/protocol/vrfs/vrf/ip-prefix-details/ip-prefix-detail

package cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.ip_prefix_details.ip_prefix_detail;

// Basic FIB table information
message fib_sh_tbl_fib_KEYS {
    string node_name = 1;
    string protocol_name = 2;
    string vrf_name = 3;
    string prefix = 4;
    uint32 prefix_length = 5;
}

message fib_sh_tbl_fib {
    // Proto type for this entry
    uint32 protocol_type_fib_entry = 50;
    // Detailed FIB entry information
    fib_sh_tbl_fib_det detail_fib_entry_information = 51;
    // FIB entry path details
    fib_sh_tbl_path fib_entry_path = 52;
    // Platform Hardware info
    bytes platform_hardware = 53;
    // Number of references to the pathlist
    uint32 number_of_referances_to_path_list = 54;
    // The pathlist flags
    uint32 path_list_flags = 55;
    // The pathlist source
    uint32 path_list_source = 56;
    // Number of references to the LDI
    uint32 number_of_referances_to_ldi = 57;
    // The LDI flags
    uint32 ldi_flags = 58;
    // The flags of ext assocaited with LDI 
    uint32 flags_external_ldi = 59;
    // The pointer to the ext assocaited with LDI
    uint32 pointer_external_ldi = 60;
    // exact-path interface handle
    uint32 exact_path_interface_handle = 61;
    // exact-path GRE physical interface handle
    uint32 exact_path_gre_interface_handle = 62;
    // exact-route GRE phy ifh available
    bool exact_route_gre_phys_ifh_avail = 63;
    // exact-route result
    bool exact_route_result = 64;
    // Prefix is static or connected
    bool prefix_is_static_or_connected = 65;
    // Packet should always be received
    bool packet_should_recieve = 66;
    // Prefix is connected
    bool prefix_connected = 67;
    // Prefix is for an adjacency
    bool prefix_for_adjancency = 68;
    // Prefix is for a PIC nexthop
    bool prefix_for_pic_next_hop = 69;
    // Purgable after the purge interval
    bool purgable_after_purge_interval = 70;
    // Broadcast receive flag
    bool broadcast_recive_flag = 71;
    // Broadcast forward flag
    bool broadcast_forward_flag = 72;
    // 0/0 route added as default route
    bool zero_by_zero_route_as_default = 73;
    // External switch function triggered
    bool external_switch_triggered = 74;
    // Route attributes summary flag
    bool route_attribute_flag = 75;
    // Dummy real zero route
    bool dummy_real_zero_route = 76;
    // The LDI LW flags
    uint32 ldi_lw_flag = 77;
    // The refcounter of LDI LW LDI
    uint32 ref_counter_of_ldi_lw_ldi = 78;
    // The type of LDI LW LDI
    uint32 type_of_ldi_lw_ldi = 79;
    // The LSPA flags
    uint32 lspa_flags = 80;
    // The version of the route
    uint64 version_of_route = 81;
    // Priority at which the route was downloaded
    uint32 fib_route_download_priority = 82;
    // The time of last update in msec
    uint64 time_of_last_update_in_msec = 83;
    // Is L2 Subscriber route
    bool l2_subscriber_route = 84;
    // XConnect-id associated with L2 subscriber
    uint32 l2_subscriber_x_connect_id = 85;
    // IP protocol associated with L2 subscriber
    uint32 l2_subscriber_ip_protocol = 86;
    // L2TPv3 cookie length for L2 subscriber
    uint32 l2_tpv3_cookie_length_bits = 87;
    // Route destined for Line Card that support External Reach only
    bool route_for_external_reach_linecard_flag = 88;
    // Route is a MPLS Segment-Routing prefix
    bool route_is_sr_flag = 89;
    // Information about IPv6 SR prefix
    fib_sh_leaf_srv6_info srv6_information = 90;
    // Leaf Extension Object List
    repeated fib_sh_tbl_fib_ext_cmn_det extension_object_list = 91;
}

// FIB address
message fib_addr_str {
    // address
    string address = 1;
}

// mpls label stack information for FIB table entries
message fib_sh_tbl_mpls_label_stack {
    uint32 number_of_labels = 1;
    repeated uint32 l_stack = 2;
    string out_interface = 3;
    string nh_address = 4;
}

// mpls path information for FIB table entries
message fib_sh_tbl_path_mpls_info {
    uint32 local_lable = 1;
    bool recursive_fwd_chain = 2;
    // Recursive Label(s)
    repeated uint32 recursive_lbl_stack = 3;
    uint32 number_of_igp_paths = 4;
    // RemoteBackupPath
    bool remote_backup = 5;
    repeated fib_sh_tbl_mpls_label_stack igp_label_stack_array = 6;
}

// Detailed IP Encap Header Description
message fib_sh_ipencap_hdr_det {
    // Header Type
    string ip_encap_hdr_type = 1;
    // Static Header
    bytes ip_encap_hdrp = 2;
    // Dynamic Header Fields
    uint32 ip_encap_hdr_dyn = 3;
}

// Detailed IP Encap Description
message fib_sh_ipencap_det {
    // Header Count
    uint32 ip_encap_hdr_count = 1;
    // IPEncap Object Locks
    uint32 ip_encap_locks = 2;
    // Transport Table
    uint32 ip_encap_transport_tbl = 3;
    // Transport VRF name
    string ipe_transport_vrf_name = 4;
    // Transport AF
    uint32 ip_encap_transport_af = 5;
    // Payload AF
    uint32 ip_encap_payload_af = 6;
    // Payload MTU
    uint32 ip_encap_payload_mtu = 7;
    // Pointer to parent
    uint32 ip_encap_parent = 8;
    // Parent type enumeration
    uint32 ip_encap_parent_type = 9;
    // Headers
    repeated fib_sh_ipencap_hdr_det ip_encap_hdrs = 10;
}

// Detailed path information for FIB table entries
message fib_sh_tbl_path_det {
    // IP address to recurse to
    string ip_address_to_recurse = 1;
    // Local label to recurse over
    uint32 label_to_recurse = 2;
    // Next hop prefix
    string detail_next_hop_prefix = 3;
    // Next hop mask length
    uint32 next_hop_mask_length = 4;
    // Interface associated with this path
    string interface_associated_path = 5;
    // Next hop interface
    string next_hop_interface = 6;
    // Next hop VRF
    bytes next_hop_vrf = 7;
    // Tunnel endpoint id
    uint32 tunnle_endpoint_id = 8;
    // LISP RLOC ID
    uint32 lisprlocid = 9;
    // No. of dependents for this path
    uint32 number_of_dependencies_this_path = 10;
    // Round robin reset value
    uint32 robin_reset_value = 11;
    // Is recursion object a leaf?
    bool recurse_prefix_object = 12;
    // Next prefix recursion in the path
    bytes next_prefix_recursion = 13;
    // Next prefix length
    uint32 next_prefix_length = 14;
    // Recursion has two leaves (e.g. implicit-null path)
    bool recurse_prefix_object2 = 15;
    // Next prefix2 recursion in the path
    bytes next_prefix_recursion2 = 16;
    // Next prefix2 length
    uint32 next_prefix_length2 = 17;
    // FIB entry adjacency type
    string detail_fib_adjacency_type = 18;
    // Current path flag
    bool current_path_flag = 19;
    // Recursive path information is available
    bool recursive_path_information = 20;
    // Path is an external adjacency
    bool external_adjacency = 21;
    // FIB Nhinfo type
    string fib_path_nh_information_type = 22;
    // FIB Nhinfo type special
    string fib_path_nh_information_type_special = 23;
    // Weight of the path
    uint32 weight_of_path = 24;
    // Tunnel class of the path
    uint32 tunnel_class = 25;
    // IP Encap
    repeated fib_sh_ipencap_det spd_ipencap = 26;
    // Tunnel is forward class
    bool tunnel_is_forward_class = 27;
}

// Brief path information for FIB table entries
message fib_sh_tbl_path {
    // Next entry in the path
    repeated fib_sh_tbl_path_item fib_sh_tbl_path = 1;
}

message fib_sh_tbl_path_item {
    // More detail about this path entry
    fib_sh_tbl_path_det more_detail_about_path = 1;
    // mpls info for this path entry
    fib_sh_tbl_path_mpls_info mpls_information_for_path = 2;
    // Hardware info
    bytes hardware_information = 3;
    // Interface handle
    string brief_interface_handle = 4;
    // Next hop prefix
    string brief_next_hop_prefix = 5;
    // Local label to recurse over
    uint32 via_label_to_recurse = 6;
    // P-node address
    string brief_pnode_address = 7;
    // Q-node address
    string brief_qnode_address = 8;
    // LFA protection type
    string brief_lfa_protection_type = 9;
    // Resolved path
    bool resolved_path = 10;
    // Recursive path
    bool recursive_path = 11;
    // Packets received on this path
    bool packets_received_path = 12;
    // Attached path
    bool attached_path = 13;
    // Backup path
    bool backup_path = 14;
    // Best external path
    bool best_external_path = 15;
    // Is protection ignored
    bool protect_ignore = 16;
    // Is this the path used for DLB
    bool path_dlb = 17;
    // Path flags
    uint32 path_flags = 18;
    // Path Info flags
    uint32 path_info_flags = 19;
    // Path index
    uint32 path_index = 20;
    // Backup path index
    uint32 backup_index = 21;
    // Next Hop Index
    uint32 next_hop_index = 22;
    // Parent Interface Handle
    string parent_interface_handle = 23;
    // recursion via /N constraint
    uint32 recursion_via_len = 24;
}

// Internal load sharing information arrays for FIB table entries
message fib_sh_tbl_loadinfo_int {
    // level of ldis
    uint32 level_ofldis = 1;
    // no. of ldis
    uint32 number_of_ldis = 2;
    // Maximum index of the arrays
    uint32 maximum_index_arrays = 3;
    // Path indices
    bytes path_indices = 4;
    // Path indices
    bytes path_ldi_numbers = 5;
    // Sanity flag
    repeated bool sanity_flag = 6;
    // Adjacency address
    repeated fib_addr_str adjacency_address = 7;
    // Interface handle
    repeated string interface_handle = 8;
    // Maximum slots
    uint32 maximum_slots = 9;
    // Weights of paths
    repeated uint32 weights_of_paths = 10;
    // Normalized weights
    bytes normalized_weights = 11;
    // Tunnel class value
    bytes tunnel_class_value = 12;
    // PBTS info valid flag
    bool is_pbts_info_valid = 13;
    // PBTS class offset
    bytes pbts_class_offset = 14;
    // PBTS class num paths
    bytes pbts_class_num_paths = 15;
    // Does PBTS class fall back to drop or any class
    repeated bool pbts_class_is_fallback_mapped = 16;
    // PBTS class falls back to class
    bytes pbts_fallback_mapped_class = 17;
    // PBTS class falls back to drop
    repeated bool pbts_fallback_to_drop = 18;
    // Round Robin Disable
    bool round_robin_disable = 19;
    // Number of LDI next hop buckets
    uint32 ldi_next_hop_buckets = 20;
    // Platform Hardware info
    bytes platform_hardware_information = 21;
    // Tunnel is forward class
    repeated bool tunnel_is_forward_class = 22;
}

// Detailed load sharing information for FIB table entries
message fib_sh_tbl_loadinfo_det {
    // Packets through this loadinfo
    uint64 packets_through_load_information = 1;
    // Bytes through this loadinfo
    uint64 bytes_through_load_information = 2;
    // Total packets through this loadinfo
    uint64 total_packets_through_load_information = 3;
    // Total bytes through this loadinfo
    uint64 total_bytes_through_load_information = 4;
    // Prefix of the owner
    uint32 prefix_of_owner = 5;
    // Mask length of the owner
    uint32 mask_length_of_owner = 6;
    // Loadinfo reference count
    uint32 load_information_reference_count = 7;
    // Per destination load sharing flag
    bool per_dest_load_sharing_flag = 8;
    // Loadinfo owner deleted flag
    bool load_information_owner_deleted_flag = 9;
    // Loadinfo sanity flag
    bool loadinfo_sanity_flag = 10;
    // Owner flag
    bool is_owner = 11;
    // Loadinfo internal data
    fib_sh_tbl_loadinfo_int load_informtion_internal_data = 12;
}

// Statistics for a IPv6 SR prefix
message fib_sh_leaf_srv6_stats {
    // SRv6 packets forwarded for a prefix
    uint64 srv6_packets_forwarded = 1;
    // SRv6 Packets dropped for a prefix
    uint64 srv6_packets_dropped = 2;
}

// IPv6 SR related information
message fib_sh_leaf_srv6_info {
    // Route is an IPv6 Segment-Routing prefix
    bool route_is_sripv6_flag = 1;
    // Route is a SRv6 prefix resolved via Policy label
    bool srv6_pfx_resolved_via_policy_label = 2;
    // Statistics are valid for this prefix
    bool sripv6_stats_valid_flag = 3;
    // Statistics for a IPv6 SR prefix
    fib_sh_leaf_srv6_stats srv6_statistics = 4;
}

// Detailed FIB table entry information
message fib_sh_tbl_fib_det {
    // FIB entry version number
    uint32 fib_entry_version = 1;
    // Per Prefix Accounting
    uint32 per_prefix_accounting = 2;
    // Load sharing type
    string load_sharing_type = 3;
    // FIB entry adjacency type
    string fib_entry_adjacency_type = 4;
    // FIB Protocol type
    uint32 fib_protocol_type = 5;
    // AFI FIB protocol type
    uint32 afi_fib_protocol_type = 6;
    // AIB L3 Address
    bytes aib_l3_address = 7;
    // ADJ ADDR LEN
    uint32 adjacency_address_length = 8;
    // ADJ IFH
    uint32 adjacency_interface = 9;
    // FIB Special NHINFO Type
    uint32 fib_special_nh_information_type = 10;
    // FIB entry adj address
    bytes fib_entry_adjacency_address = 11;
    // FIB entry adjacency interface
    uint32 fib_entry_adjacency_interface = 12;
    // Packets through this FIB entry
    uint64 packets_through_fib_entry = 13;
    // Bytes through this FIB entry
    uint64 bytes_through_fib_entry = 14;
    // Prefix length
    uint32 detailed_prefix_length = 15;
    // Prefix protocol
    uint32 prefix_protocol = 16;
    // Precedence for packets to this entry
    uint32 precedence_forpackets = 17;
    // Traffic index for packets to this entry
    uint32 traffic_index_for_packets = 18;
    // Switch function compontent ID
    uint32 switch_compontent_id = 19;
    // Fast adjacency flag
    bool fast_adjacency_flag = 20;
    // Illegal fast adjacency flag
    bool illegal_fast_adjacency_flag = 21;
    // Remote adjacency flag
    bool remote_adjacency_flag = 22;
    // Detailed Loadshare info
    fib_sh_tbl_loadinfo_det loadshare_information = 23;
    // BGP attribute id
    uint32 bgp_attribute_id = 24;
    // BGP local attribute id
    uint32 bgp_local_attribute_id = 25;
    // BGP attribute origin as
    uint32 bgp_attribute_origin_as = 26;
    // BGP attribute next hop as
    uint32 bgp_attribute_next_hop_as = 27;
    // As path string
    bytes path_string = 28;
    // extcom st
    bytes extcom_string = 29;
    // com st
    bytes com_string = 30;
    // extended community
    uint32 extended_community = 31;
    // qos group
    uint32 qos_group = 32;
    // mpls fec
    uint32 mpls_fec = 33;
    // qppb QOS group and IP precedence
    uint32 qppb_qos_group_and_ip_precedence = 34;
    // PBR flow-tag
    uint32 flow_tag = 35;
    // SPP forwarding class ID
    uint32 forward_class = 36;
    // The time of last update for PL in msec
    uint64 pl_time_of_last_update_in_msec = 37;
    // The time of last update for LDI in msec
    uint64 ldi_time_of_last_update_in_msec = 38;
    // The time of last update for LW-LDI in msec
    uint64 lwldi_time_of_last_update_in_msec = 39;
    // The type of time-stamp on PL
    uint32 pl_time_stamp_type = 40;
}

// FIB entry extension list information
message fib_sh_tbl_fib_ext_det {
    // Context Label Exist
    bool context_label_flag = 1;
    // Context Label
    uint32 context_label = 2;
}

message fib_sh_tbl_fib_ext_cmn_det {
    string type = 1;
    fib_sh_tbl_fib_ext_det sfecd_le = 2;
}

