// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ip_rib_ipv4_oper.rib.vrfs.vrf.afs.af.safs.saf.ip_rib_route_table_names.ip_rib_route_table_name.destination_kw.dest_next_hop_routes.dest_next_hop_route;

// Information of a rib route head and rib proto route
message ipv4_rib_edm_route_KEYS {
    string vrf_name = 1;
    string af_name = 2;
    string saf_name = 3;
    string route_table_name = 4;
    string address = 5;
}

message ipv4_rib_edm_route {
    // Route prefix
    string prefix = 50;
    // Length of prefix
    uint32 prefix_length = 51;
    // Route version
    uint32 route_version = 52;
    // Protocol advertising the route
    uint32 protocol_id = 53;
    //  Name of Protocol
    string protocol_name = 54;
    // Instance name
    string instance = 55;
    // Client adding the route to RIB
    uint32 client_id = 56;
    // Route type
    uint32 route_type = 57;
    // Route priority
    uint32 priority = 58;
    // SVD Type of route
    uint32 svd_type = 59;
    // Route flags
    uint32 flags = 60;
    // Extended Route flags
    uint64 extended_flags = 61;
    // Opaque proto specific info
    uint32 tag = 62;
    // Distance of the route
    uint32 distance = 63;
    // Diversion distance of the route
    uint32 diversion_distance = 64;
    // Route metric
    uint32 metric = 65;
    // Number of paths
    uint32 paths_count = 66;
    // BGP Attribute ID
    uint32 attribute_identity = 67;
    // BGP Traffic Index
    uint32 traffic_index = 68;
    // Route ip precedence
    uint32 route_precedence = 69;
    // Route qos group
    uint32 qos_group = 70;
    // Flow tag
    uint32 flow_tag = 71;
    // Forward Class
    uint32 fwd_class = 72;
    // Number of pic paths in this route
    uint32 pic_count = 73;
    // Is the route active or backup
    bool active = 74;
    // Route has a diversion path
    bool diversion = 75;
    // Diversion route protocol name
    string diversion_proto_name = 76;
    // Age of route (seconds)
    uint32 route_age = 77;
    // Local label of the route
    uint32 route_label = 78;
    // Route Version
    uint32 version = 79;
    // Table Version
    uint64 tbl_version = 80;
    // Route modification time(nanoseconds)
    uint64 route_modify_time = 81;
    // Path(s) of the route
    ipv4_rib_edm_path route_path = 82;
}

// Information of a rib path
message ipv4_rib_edm_path {
    // Next path
    repeated ipv4_rib_edm_path_item ipv4_rib_edm_path = 1;
}

message ipv4_rib_edm_path_item {
    // Nexthop
    string address = 1;
    // Infosource
    string information_source = 2;
    // V6 nexthop
    string v6_nexthop = 3;
    // Interface Name
    string interface_name = 4;
    // Metrics
    uint32 metric = 5;
    // Load Metrics
    uint32 load_metric = 6;
    // Flags extended to 64 bits
    uint64 flags64 = 7;
    // Flags
    uint32 flags = 8;
    // Private Flags
    uint32 private_flags = 9;
    // Looping path
    bool looped = 10;
    // Nexthop tableid
    uint32 next_hop_table_id = 11;
    // VRF Name of the nh table
    string next_hop_vrf_name = 12;
    // NH table name
    string next_hop_table_name = 13;
    // NH afi
    uint32 next_hop_afi = 14;
    // NH safi
    uint32 next_hop_safi = 15;
    // Label associated with this path
    uint32 route_label = 16;
    // Tunnel ID associated with this path
    uint32 tunnel_id = 17;
    // Path id of this path
    uint32 pathid = 18;
    // Path id of this path's backup
    uint32 backup_pathid = 19;
    // Refcnt of backup
    uint32 ref_cnt_of_backup = 20;
    // Number of extended communities
    uint32 number_of_extended_communities = 21;
    // MVPN attribute present
    bool mvpn_present = 22;
    // Path RT present
    bool pathrt_present = 23;
    bool vrfimportrt_present = 24;
    bool sourceasrt_present = 25;
    bool sourcerd_present = 26;
    bool segmented_nexthop_present = 27;
    // NHID associated with this path
    uint32 next_hop_id = 28;
    // NHID references
    uint32 next_hop_id_refcount = 29;
    // OSPF area associated with the path
    string ospf_area_id = 30;
    // Remote backup node address
    repeated bytes remote_backup_addr = 31;
    // Path has a label stack
    bool has_labelstk = 32;
    // Number of labels in stack
    uint32 num_labels = 33;
    // Labels for this path
    repeated uint32 labelstk = 34;
    // binding Label for this path
    uint32 binding_label = 35;
    // Fib nhid encap id
    uint64 nhid_feid = 36;
    // Fib mpls encap id
    uint64 mpls_feid = 37;
}

// Information of local label for route head
message rib_edm_local_label {
    // Protocol Name
    string protocol_name = 1;
    // Client ID
    uint32 client_id = 2;
    // Stale
    uint32 stale = 3;
    // Mirrored
    uint32 mirrored = 4;
    // Merge disable
    uint32 merge_disable = 5;
    // Redist only
    uint32 redist_only = 6;
    // Local label
    uint32 label = 7;
    // Distance
    uint32 distance = 8;
}

