// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router;

// Detailed vrID specific information
message vrrp_vrouter_info_KEYS {
    string interface_name = 1;
    uint32 virtual_router_id = 2;
}

message vrrp_vrouter_info {
    // IM Interface Name
    string interface_name = 50;
    // Virtual Router ID
    uint32 virtual_router_id = 51;
    // VRRP Protocol Version
    uint32 version = 52;
    // Address family
    string address_family = 53;
    // Session Name
    string session_name = 54;
    // Number of slaves following state
    uint32 slaves = 55;
    // Group is a slave group
    bool is_slave = 56;
    // Followed Session Name
    string followed_session_name = 57;
    // Configured VRRP secondary address count
    uint32 secondary_address_count = 58;
    // Operational VRRP address count
    uint32 operational_address_count = 59;
    // Operational IPv4 VRRP addresses
    repeated bytes operational_address_list = 60;
    // Configured IPv4 Primary address
    string primary_virtual_ip = 61;
    // IPv6 Operational VRRP addresses
    repeated ipv6_bag_addr_ ipv6_operational_address_list = 62;
    //  Configured but Down VRRP address count
    uint32 configured_down_address_count = 63;
    // IPv4 Configured but Down VRRP addresses
    repeated bytes ipv4_configured_down_address_list = 64;
    // IPv6 Configured but Down VRRP addresses
    repeated ipv6_bag_addr_ ipv6_configured_down_address_list = 65;
    // Virtual linklocal IPv6 address
    string virtual_linklocal_ipv6_address = 66;
    // State of primary IP address
    string primary_state = 67;
    // Master router real IP address
    string master_ip_address = 68;
    // Master router real IPv6 address
    string master_ipv6_address = 69;
    // Master router priority
    uint32 master_priority = 70;
    // VRRP state
    string vrrp_state = 71;
    // Authentication type
    string authentication_type = 72;
    // Authentication data
    repeated uint32 authentication_string = 73;
    // Configured advertize time
    uint32 configured_advertize_time = 74;
    // Operational advertize time
    uint32 oper_advertize_time = 75;
    // Minimum delay time in msecs
    uint32 min_delay_time = 76;
    // Reload delay time in msecs
    uint32 reload_delay_time = 77;
    // Delay timer running flag
    bool delay_timer_flag = 78;
    // Delay timer running time secs
    uint32 delay_timer_secs = 79;
    // Delay timer running time msecs
    uint32 delay_timer_msecs = 80;
    // Text authentication configured flag
    bool authentication_flag = 81;
    // Configured timers forced flag
    bool force_timer_flag = 82;
    // Preempt configured flag
    bool preempt_flag = 83;
    // IP address owner flag
    bool ip_address_owner_flag = 84;
    // Is accept mode
    bool is_accept_mode = 85;
    // Preempt delay time
    uint32 preempt_delay_time = 86;
    // Configured priority
    uint32 configured_priority = 87;
    // Operational priority
    uint32 operational_priority = 88;
    // Priority decrement
    uint32 priority_decrement = 89;
    // Number of items tracked
    uint32 tracked_interface_count = 90;
    // Number of tracked items up
    uint32 tracked_interface_up_count = 91;
    // Number of tracked items
    uint32 tracked_item_count = 92;
    // Number of tracked items in UP state
    uint32 tracked_item_up_count = 93;
    // Time in current state secs
    uint32 time_in_current_state = 94;
    // Number of state changes
    uint32 state_change_count = 95;
    // Time vrouter is up in ticks (10ns units)
    uint32 time_vrouter_up = 96;
    // No. of times become Master
    uint32 master_count = 97;
    // No. of advertisements received
    uint32 adverts_received_count = 98;
    // Advertise interval errors
    uint32 advert_interval_error_count = 99;
    // No. of advertisements sent
    uint32 adverts_sent_count = 100;
    // Authentication failures
    uint32 authentication_fail_count = 101;
    // TTL errors
    uint32 ttl_error_count = 102;
    // No. priority 0 received
    uint32 priority_zero_received_count = 103;
    // No. priority 0 sent
    uint32 priority_zero_sent_count = 104;
    // Invalid packets received
    uint32 invalid_packet_count = 105;
    // Address list errors
    uint32 address_list_error_count = 106;
    // Invalid authentication type
    uint32 invalid_auth_type_count = 107;
    // Authentication type mismatches
    uint32 auth_type_mismatch_count = 108;
    // Packet length errors
    uint32 pkt_length_errors_count = 109;
    // Time since a statistics discontinuity in ticks (10ns units)
    uint32 time_stats_discontinuity = 110;
    // BFD session state
    string bfd_session_state = 111;
    // BFD packet send interval
    uint32 bfd_interval = 112;
    // BFD multiplier
    uint32 bfd_multiplier = 113;
    // BFD configured remote IP
    string bfd_cfg_remote_ip = 114;
    // BFD configured remote IPv6
    string bfd_configured_remote_ipv6_address = 115;
    // Whether state recovered from checkpoint
    bool state_from_checkpoint = 116;
    // Time last resign was sent
    vrrp_bag_timestamp resign_sent_time = 117;
    // Time last resign was received
    vrrp_bag_timestamp resign_received_time = 118;
    // State change history
    repeated vrrp_state_change_info_type state_change_history = 119;
    // The Interface Primary IPv4 address
    string interface_ipv4_address = 120;
    // The Interface linklocal IPv6 address
    string interface_ipv6_address = 121;
    // Virtual mac address
    string virtual_mac_address = 122;
    // Virtual mac address state
    string virtual_mac_address_state = 123;
}

message ipv6_bag_addr_ {
    string ipv6_address = 1;
}

// Timestamp
message vrrp_bag_timestamp {
    // Seconds
    uint32 seconds = 1;
    // Nanoseconds
    uint32 nanoseconds = 2;
}

// State change info
message vrrp_state_change_info_type {
    // Old State
    string old_state = 1;
    // New State
    string new_state = 2;
    // Reason for state change
    string reason = 3;
    // Time of state change
    vrrp_bag_timestamp time = 4;
}

