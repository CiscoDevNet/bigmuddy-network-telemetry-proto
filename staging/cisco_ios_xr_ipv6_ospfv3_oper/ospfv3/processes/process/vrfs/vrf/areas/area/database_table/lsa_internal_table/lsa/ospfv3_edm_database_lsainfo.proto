// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv6_ospfv3_oper.ospfv3.processes.process.vrfs.vrf.areas.area.database_table.lsa_internal_table.lsa;

// OSPFv3 LSA Information
message ospfv3_edm_database_lsainfo_KEYS {
    string process_name = 1;
    string vrf_name = 2;
    uint32 area_id = 3;
    uint32 area_id_1 = 4;
    string ls_type = 5;
    string advertising_router = 6;
    uint32 ls_id = 7;
    string interface_name = 8;
}

message ospfv3_edm_database_lsainfo {
    // Summary of all LSAs or LSA specific information 
    ospfv3_lsa_info_union lsa_info = 50;
}

// OSPFv3 Prefix Type
message ospfv3_edm_prefix {
    // OSPFv3 prefix 
    string prefix = 1;
    // OSPFv3 prefix length 
    uint32 osp_fv3_prefix_length = 2;
    // OSPFv3 prefix options 
    uint32 osp_fv3_prefix_options = 3;
    // OSPFv3 prefix metric 
    uint32 osp_fv3_prefix_metric = 4;
    // Prefix priority
    string priority = 5;
}

// OSPFv3 LSA Database Header
message ospfv3_edm_db_header {
    // LSA type
    uint32 lsa_type = 1;
    // Area ID in decimal or dotted-decimal format
    string lsa_area_id = 2;
    // LSA's Age (s)
    uint32 lsa_age = 3;
    // If true, Do Not Age this LSA
    bool is_do_not_age_lsa = 4;
    // LS ID
    uint32 ls_id = 5;
    // Router ID of Advertising Router
    string advertising_router = 6;
    // Current Sequence number
    uint32 sequence_number = 7;
    // Checksum value
    uint32 checksum = 8;
    // If true, if grace restart is active 
    bool is_graceful_restart_active = 9;
}

// OSPFv3 Detailed LSA Database Information
message ospfv3_edm_db_detail {
    // Second table index
    uint32 second_table_index = 1;
    // Minute table index
    uint32 minute_table_index = 2;
    // The amount of time since the last check was made to free this LSA (s)
    uint32 free_time = 3;
    // If true, flag is set to delete this LSA 
    bool is_deleted = 4;
    // If true, Routing Bit set on the LSA
    bool is_routing_bit = 5;
    // If true, Advertising Router is reachable
    bool is_advertising_router_reachable = 6;
    // If true, the reason not to delete this LSA is because delete flag not set on this LSA
    bool is_no_delete = 7;
    // If true, the reason  not to delete this LSA is because neighbor is in exchange state
    bool is_neighbor_exchange = 8;
    // If true, the reason  not to delete this LSA is because it has a contributing entry in the routing table 
    bool is_routing_table = 9;
    // If true, the reason not to delete this LSA is because it's Acknowledgement list is not empty 
    bool is_acknowledged = 10;
    // If true, the reason not to delete this LSA is because it is in Maxage Queue
    bool is_maximum_aged = 11;
    // If true, the reason not to delete this LSA is because it is in partial SPF queue
    bool is_partial_spf = 12;
    // If true, the reason not to delete this LSA is because waiting for flooding or retransmission
    bool is_flood_pending = 13;
    // If true, the reason not to delete this LSA is because waiting for next wait-interval to expire
    bool rate_limit = 14;
    // If true, the reason not to delete this LSA is because NSR ACK from standby is pending
    bool is_nsr_ack_pending = 15;
    // If true, the reason not to delete this LSA is because it is pending flooding on switchover
    bool nsr_flood_required = 16;
    // LSA flood required after FO
    bool lsa_flood_required_post_fail_over = 17;
    // Length of the LSA
    uint32 lsa_length = 18;
    // State of LSA sync with active
    string lsa_sync_state = 19;
}

// OSPFv3 External LSA
message ospfv3_edm_lsa_external {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA Information
    ospfv3_edm_db_detail lsa_detail = 2;
    // IPV6 address prefix 
    string prefix = 3;
    // Prefix length 
    uint32 prefix_length = 4;
    // Metric type 
    string metric_type = 5;
    // Type of service cost metric 
    uint32 tos_cost = 6;
    // If true, forwarding address is set 
    bool is_forwarding_address_set = 7;
    // Forwarding Address
    string forwarding_address = 8;
    // Route Tag
    uint32 external_tag = 9;
    // Prefix priority
    string priority = 10;
}

// OSPFv3 Inter-area Prefix LSA
message ospfv3_edm_lsa_iapfx {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA Information
    ospfv3_edm_db_detail lsa_detail = 2;
    // LSA address prefix 
    string prefix = 3;
    // Prefix length 
    uint32 prefix_length = 4;
    // Prefix priority
    string priority = 5;
}

// OSPFv3 Inter-area Router LSA
message ospfv3_edm_lsa_iartr {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA information
    ospfv3_edm_db_detail lsa_detail = 2;
    // LSA router ID 
    uint32 lsa_router_id = 3;
}

// OSPFv3 Link LSA
message ospfv3_edm_lsa_link {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA information
    ospfv3_edm_db_detail lsa_detail = 2;
    // LSA interface handle
    string interface_name = 3;
    // If true, it is a virtual link
    bool is_virtual_link = 4;
    // Virtual link ID 
    uint32 virtual_link_id = 5;
    // If true, it is a sham link
    bool is_sham_link = 6;
    // Sham link ID 
    uint32 sham_link_id = 7;
    // LSA link local 
    string lsa_link_local = 8;
    // Router priority 
    uint32 router_priority = 9;
    // OSPFv3 prefix 
    repeated ospfv3_edm_prefix prefix = 10;
}

// OSPFv3 Network LSA
message ospfv3_edm_lsa_network {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA information
    ospfv3_edm_db_detail lsa_detail = 2;
    // Neighbor router list
    repeated bytes neighbor_router_list = 3;
}

// OSPFv3 Grace LSA
message ospfv3_edm_lsa_grace {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA information
    ospfv3_edm_db_detail lsa_detail = 2;
    // The grace periord where helper routers should wait before advertising it fully adjacent(s) 
    uint32 grace_period = 3;
    // Reason for router restart
    string grace_reason = 4;
}

// OSPFv3 Prefix LSA
message ospfv3_edm_lsa_prefix {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA information
    ospfv3_edm_db_detail lsa_detail = 2;
    // Reference type 
    string reference_type = 3;
    // Reference LSA ID 
    uint32 reference_lsa_id = 4;
    // Reference advertised router 
    string reference_advertised_router = 5;
    // OSPFv3 prefix 
    repeated ospfv3_edm_prefix prefix = 6;
}

// OSPFv3 Router LSA Links
message ospfv3_edm_link {
    // Type of link
    string link_type = 1;
    // LSA link metric 
    uint32 link_metric = 2;
    // LSA link interface ID 
    uint32 link_interface_id = 3;
    // LSA link neighbor interface ID 
    uint32 link_neighbor_interface_id = 4;
    // LSA link neigbhor router id 
    uint32 link_neighbor_router_id = 5;
}

// OSPFv3 Router LSA Reverse-Path Forwarding Information
message ospfv3_edm_rpf_path {
    // RPF multicast next hop 
    uint32 rpf_multicast_next_hop = 1;
    // RPF multicast IDB 
    string interface_name = 2;
}

// OSPFv3 Router LSA
message ospfv3_edm_lsa_router {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA information
    ospfv3_edm_db_detail lsa_detail = 2;
    // Router LA bits 
    uint32 router_la_bits = 3;
    // List of links in this LSA
    repeated ospfv3_edm_link link_list = 4;
    // Router LSA Reverse-Path Forwarding information 
    ospfv3_edm_rpf_path rpf_path = 5;
}

// OSPFv3 Unknown LSA Database Information
message ospfv3_edm_lsa_unknown {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA information
    ospfv3_edm_db_detail lsa_detail = 2;
    // LSA interface name 
    string interface_name = 3;
    // If true, it is a virtual link 
    bool is_virtual_link = 4;
    // Virtual link ID 
    uint32 virtual_link_id = 5;
    // If true, it is a sham link 
    bool is_sham_link = 6;
    // Shamlink ID 
    uint32 sham_link_id = 7;
}

// OSPFv3 Database Information
message ospfv3_edm_database {
    // Header information 
    ospfv3_edm_db_header lsa_header = 1;
    // Detailed LSA information
    ospfv3_edm_db_detail lsa_detail = 2;
    // Number of links
    uint32 links = 3;
    // Router LA bits 
    uint32 router_la_bits = 4;
    // Reference type 
    uint32 reference_type = 5;
    // Reference LSA ID 
    uint32 reference_lsa_id = 6;
    // LSA router ID 
    uint32 lsa_router_id = 7;
    // OSPFv3 address Prefix 
    string prefix = 8;
    // Prefix length 
    uint32 prefix_length = 9;
    // LSA interface name 
    string interface_name = 10;
    // If true, it is a virtual link 
    bool is_virtual_link = 11;
    // Virtual link ID 
    uint32 virtual_link_id = 12;
    // If true, it is a sham link 
    bool is_sham_link = 13;
    // Sham link ID 
    uint32 sham_link_id = 14;
}

// Detail LSA information for an LSA
message ospfv3_lsa_info_union {
    string lsa_info_type = 1;
    // Summary information of LSAs
    ospfv3_edm_database lsa_summary_info = 2;
    // Router LSA
    ospfv3_edm_lsa_router router_lsa_type = 3;
    // Network LSA
    ospfv3_edm_lsa_network network_lsa_type = 4;
    // Inter Area Prefix LSA
    ospfv3_edm_lsa_iapfx inter_area_prefix_lsa_type = 5;
    // Inter Area Router LSA
    ospfv3_edm_lsa_iartr inter_area_router_lsa_type = 6;
    // External LSA
    ospfv3_edm_lsa_external external_lsa_type = 7;
    // NSSA External LSA
    ospfv3_edm_lsa_external nssalsa_type = 8;
    // Link LSA
    ospfv3_edm_lsa_link link_lsa_type = 9;
    // Intra Area Prefix LSA
    ospfv3_edm_lsa_prefix intra_area_prefix_lsa_type = 10;
    // Grace LSA
    ospfv3_edm_lsa_grace grace_lsa = 11;
    // Unknown Link Scope LSA
    ospfv3_edm_lsa_unknown unknown_link_lsa_type = 12;
    // Unknown-Area scope LSA
    ospfv3_edm_lsa_unknown unknown_area_lsa_type = 13;
    // Unknown-AS scope LSA
    ospfv3_edm_lsa_unknown unknown_aslsa_type = 14;
    // Unknown LSA
    ospfv3_edm_lsa_unknown unknown_lsa_type = 15;
}

