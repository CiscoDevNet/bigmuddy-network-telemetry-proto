//                                 Apache License
//                           Version 2.0, January 2004
//                        http://www.apache.org/licenses/
//
//   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
//
//   1. Definitions.
//
//      "License" shall mean the terms and conditions for use, reproduction,
//      and distribution as defined by Sections 1 through 9 of this document.
//
//      "Licensor" shall mean the copyright owner or entity authorized by
//      the copyright owner that is granting the License.
//
//      "Legal Entity" shall mean the union of the acting entity and all
//      other entities that control, are controlled by, or are under common
//      control with that entity. For the purposes of this definition,
//      "control" means (i) the power, direct or indirect, to cause the
//      direction or management of such entity, whether by contract or
//      otherwise, or (ii) ownership of fifty percent (50%) or more of the
//      outstanding shares, or (iii) beneficial ownership of such entity.
//
//      "You" (or "Your") shall mean an individual or Legal Entity
//      exercising permissions granted by this License.
//
//      "Source" form shall mean the preferred form for making modifications,
//      including but not limited to software source code, documentation
//      source, and configuration files.
//
//      "Object" form shall mean any form resulting from mechanical
//      transformation or translation of a Source form, including but
//      not limited to compiled object code, generated documentation,
//      and conversions to other media types.
//
//      "Work" shall mean the work of authorship, whether in Source or
//      Object form, made available under the License, as indicated by a
//      copyright notice that is included in or attached to the work
//      (an example is provided in the Appendix below).
//
//      "Derivative Works" shall mean any work, whether in Source or Object
//      form, that is based on (or derived from) the Work and for which the
//      editorial revisions, annotations, elaborations, or other modifications
//      represent, as a whole, an original work of authorship. For the purposes
//      of this License, Derivative Works shall not include works that remain
//      separable from, or merely link (or bind by name) to the interfaces of,
//      the Work and Derivative Works thereof.
//
//      "Contribution" shall mean any work of authorship, including
//      the original version of the Work and any modifications or additions
//      to that Work or Derivative Works thereof, that is intentionally
//      submitted to Licensor for inclusion in the Work by the copyright owner
//      or by an individual or Legal Entity authorized to submit on behalf of
//      the copyright owner. For the purposes of this definition, "submitted"
//      means any form of electronic, verbal, or written communication sent
//      to the Licensor or its representatives, including but not limited to
//      communication on electronic mailing lists, source code control systems,
//      and issue tracking systems that are managed by, or on behalf of, the
//      Licensor for the purpose of discussing and improving the Work, but
//      excluding communication that is conspicuously marked or otherwise
//      designated in writing by the copyright owner as "Not a Contribution."
//
//      "Contributor" shall mean Licensor and any individual or Legal Entity
//      on behalf of whom a Contribution has been received by Licensor and
//      subsequently incorporated within the Work.
//
//   2. Grant of Copyright License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      copyright license to reproduce, prepare Derivative Works of,
//      publicly display, publicly perform, sublicense, and distribute the
//      Work and such Derivative Works in Source or Object form.
//
//   3. Grant of Patent License. Subject to the terms and conditions of
//      this License, each Contributor hereby grants to You a perpetual,
//      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
//      (except as stated in this section) patent license to make, have made,
//      use, offer to sell, sell, import, and otherwise transfer the Work,
//      where such license applies only to those patent claims licensable
//      by such Contributor that are necessarily infringed by their
//      Contribution(s) alone or by combination of their Contribution(s)
//      with the Work to which such Contribution(s) was submitted. If You
//      institute patent litigation against any entity (including a
//      cross-claim or counterclaim in a lawsuit) alleging that the Work
//      or a Contribution incorporated within the Work constitutes direct
//      or contributory patent infringement, then any patent licenses
//      granted to You under this License for that Work shall terminate
//      as of the date such litigation is filed.
//
//   4. Redistribution. You may reproduce and distribute copies of the
//      Work or Derivative Works thereof in any medium, with or without
//      modifications, and in Source or Object form, provided that You
//      meet the following conditions:
//
//      (a) You must give any other recipients of the Work or
//          Derivative Works a copy of this License; and
//
//      (b) You must cause any modified files to carry prominent notices
//          stating that You changed the files; and
//
//      (c) You must retain, in the Source form of any Derivative Works
//          that You distribute, all copyright, patent, trademark, and
//          attribution notices from the Source form of the Work,
//          excluding those notices that do not pertain to any part of
//          the Derivative Works; and
//
//      (d) If the Work includes a "NOTICE" text file as part of its
//          distribution, then any Derivative Works that You distribute must
//          include a readable copy of the attribution notices contained
//          within such NOTICE file, excluding those notices that do not
//          pertain to any part of the Derivative Works, in at least one
//          of the following places: within a NOTICE text file distributed
//          as part of the Derivative Works; within the Source form or
//          documentation, if provided along with the Derivative Works; or,
//          within a display generated by the Derivative Works, if and
//          wherever such third-party notices normally appear. The contents
//          of the NOTICE file are for informational purposes only and
//          do not modify the License. You may add Your own attribution
//          notices within Derivative Works that You distribute, alongside
//          or as an addendum to the NOTICE text from the Work, provided
//          that such additional attribution notices cannot be construed
//          as modifying the License.
//
//      You may add Your own copyright statement to Your modifications and
//      may provide additional or different license terms and conditions
//      for use, reproduction, or distribution of Your modifications, or
//      for any such Derivative Works as a whole, provided Your use,
//      reproduction, and distribution of the Work otherwise complies with
//      the conditions stated in this License.
//
//   5. Submission of Contributions. Unless You explicitly state otherwise,
//      any Contribution intentionally submitted for inclusion in the Work
//      by You to the Licensor shall be under the terms and conditions of
//      this License, without any additional terms or conditions.
//      Notwithstanding the above, nothing herein shall supersede or modify
//      the terms of any separate license agreement you may have executed
//      with Licensor regarding such Contributions.
//
//   6. Trademarks. This License does not grant permission to use the trade
//      names, trademarks, service marks, or product names of the Licensor,
//      except as required for reasonable and customary use in describing the
//      origin of the Work and reproducing the content of the NOTICE file.
//
//   7. Disclaimer of Warranty. Unless required by applicable law or
//      agreed to in writing, Licensor provides the Work (and each
//      Contributor provides its Contributions) on an "AS IS" BASIS,
//      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//      implied, including, without limitation, any warranties or conditions
//      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
//      PARTICULAR PURPOSE. You are solely responsible for determining the
//      appropriateness of using or redistributing the Work and assume any
//      risks associated with Your exercise of permissions under this License.
//
//   8. Limitation of Liability. In no event and under no legal theory,
//      whether in tort (including negligence), contract, or otherwise,
//      unless required by applicable law (such as deliberate and grossly
//      negligent acts) or agreed to in writing, shall any Contributor be
//      liable to You for damages, including any direct, indirect, special,
//      incidental, or consequential damages of any character arising as a
//      result of this License or out of the use or inability to use the
//      Work (including but not limited to damages for loss of goodwill,
//      work stoppage, computer failure or malfunction, or any and all
//      other commercial damages or losses), even if such Contributor
//      has been advised of the possibility of such damages.
//
//   9. Accepting Warranty or Additional Liability. While redistributing
//      the Work or Derivative Works thereof, You may choose to offer,
//      and charge a fee for, acceptance of support, warranty, indemnity,
//      or other liability obligations and/or rights consistent with this
//      License. However, in accepting such obligations, You may act only
//      on Your own behalf and on Your sole responsibility, not on behalf
//      of any other Contributor, and only if You agree to indemnify,
//      defend, and hold each Contributor harmless for any liability
//      incurred by, or claims asserted against, such Contributor by reason
//      of your accepting any such warranty or additional liability.
//
//   END OF TERMS AND CONDITIONS
//
//   APPENDIX: How to apply the Apache License to your work.
//
//      To apply the Apache License to your work, attach the following
//      boilerplate notice, with the fields enclosed by brackets "{}"
//      replaced with your own identifying information. (Don't include
//      the brackets!)  The text should be enclosed in the appropriate
//      comment syntax for the file format. We also recommend that a
//      file or class name and description of purpose be included on the
//      same "printed page" as the copyright notice for easier
//      identification within third-party archives.
//
//   Copyright (c) 2017 Cisco
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

//Path: Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-xr/interface

package cisco_ios_xr_pfi_im_cmd_oper.interfaces.interface_xr.interface;

// Full interface information
message im_cmd_info_KEYS {
    string interface_name = 1;
}

message im_cmd_info {
    // Interface name
    string interface_handle = 50;
    // Interface type
    string interface_type = 51;
    // Hardware type description string
    string hardware_type_string = 52;
    // Interface state
    string state = 53;
    // Line protocol state
    string line_state = 54;
    // Interface encapsulation
    string encapsulation = 55;
    // Interface encapsulation description string
    string encapsulation_type_string = 56;
    // MTU in bytes
    uint32 mtu = 57;
    // L2 transport flag
    bool is_l2_transport_enabled = 58;
    // The number of times the state has changed
    uint32 state_transition_count = 59;
    // The time elasped after the last state transition
    uint32 last_state_transition_time = 60;
    // Dampening enabled flag
    bool is_dampening_enabled = 61;
    // State dampening information
    im_cmd_damp_st dampening_information = 62;
    // Interface speed (Kb/s)
    uint32 speed = 63;
    // Cyclic Redundancy Check length
    uint32 crc_length = 64;
    // Interface scramble config
    bool is_scramble_enabled = 65;
    // Interface duplexity
    string duplexity = 66;
    // Interface media type
    string media_type = 67;
    // Interface link type
    string link_type = 68;
    // Input flow control configuration
    string in_flow_control = 69;
    // Output flow control configuration
    string out_flow_control = 70;
    // Interface MAC address
    im_cmd_mac_addr_st mac_address = 71;
    // Interface burned in address
    im_cmd_mac_addr_st burned_in_address = 72;
    // Carrier Delay
    im_cmd_carrier_delay_st carrier_delay = 73;
    // Interface bandwidth (Kb/s)
    uint32 bandwidth = 74;
    // Maximum Interface bandwidth (Kb/s)
    uint32 max_bandwidth = 75;
    // Interface keepalive time (s)
    uint32 keepalive = 76;
    // Loopback detected by layer 2
    bool is_l2_looped = 77;
    // Parent interface
    string parent_interface_name = 78;
    // Interface loopback configuration
    string loopback_configuration = 79;
    // Interface description string
    string description = 80;
    // Interface ARP type and timeout
    im_cmd_arp_info_st arp_information = 81;
    // Interface IP address info
    im_cmd_ip_info_st ip_information = 82;
    // Maintenance embargo flag
    bool is_maintenance_enabled = 83;
    // Data invert flag
    bool is_data_inverted = 84;
    // Interface transport mode
    string transport_mode = 85;
    // Fast Shutdown flag
    bool fast_shutdown = 86;
    // Information specific to the encapsulation
    im_cmd_encaps_info encapsulation_information = 87;
    // Information specific to the interface type
    im_cmd_intf_type_info interface_type_information = 88;
    // Packet and byte rates
    statsdbag_datarate data_rates = 89;
    // Packet, byte and error counters
    im_cmd_if_stats interface_statistics = 90;
    // L2 Protocol Statistics
    stats_data l2_interface_statistics = 91;
    // nV Optical Controller Information
    nv_optical_interface_info nv_optical = 92;
    // This is not supposed to be used. It is a dummy attribute to support ifindex for OC model
    uint32 if_index = 93;
}

// Generic set of interface counters
message ifstatsbag_generic {
    // Packets received
    uint64 packets_received = 1;
    // Bytes received
    uint64 bytes_received = 2;
    // Packets sent
    uint64 packets_sent = 3;
    // Bytes sent
    uint64 bytes_sent = 4;
    // Multicast packets received
    uint64 multicast_packets_received = 5;
    // Broadcast packets received
    uint64 broadcast_packets_received = 6;
    // Multicast packets sent
    uint64 multicast_packets_sent = 7;
    // Broadcast packets sent
    uint64 broadcast_packets_sent = 8;
    // Total output drops
    uint32 output_drops = 9;
    // Output queue drops
    uint32 output_queue_drops = 10;
    // Total input drops
    uint32 input_drops = 11;
    // Input queue drops
    uint32 input_queue_drops = 12;
    // Received runt packets
    uint32 runt_packets_received = 13;
    // Received giant packets
    uint32 giant_packets_received = 14;
    // Received throttled packets
    uint32 throttled_packets_received = 15;
    // Received parity packets
    uint32 parity_packets_received = 16;
    // Unknown protocol packets received
    uint32 unknown_protocol_packets_received = 17;
    // Total input errors
    uint32 input_errors = 18;
    // Input CRC errors
    uint32 crc_errors = 19;
    // Input overruns
    uint32 input_overruns = 20;
    // Framing-errors received
    uint32 framing_errors_received = 21;
    // Input ignored packets
    uint32 input_ignored_packets = 22;
    // Input aborts
    uint32 input_aborts = 23;
    // Total output errors
    uint32 output_errors = 24;
    // Output underruns
    uint32 output_underruns = 25;
    // Output buffer failures
    uint32 output_buffer_failures = 26;
    // Output buffers swapped out
    uint32 output_buffers_swapped_out = 27;
    // Applique
    uint32 applique = 28;
    // Number of board resets
    uint32 resets = 29;
    // Carrier transitions
    uint32 carrier_transitions = 30;
    // Availability bit mask
    uint32 availability_flag = 31;
    // Time when counters were last written (in seconds)
    uint32 last_data_time = 32;
    // Number of seconds since last clear counters
    uint32 seconds_since_last_clear_counters = 33;
    // SysUpTime when counters were last reset (in seconds)
    uint32 last_discontinuity_time = 34;
    // Seconds since packet received
    uint32 seconds_since_packet_received = 35;
    // Seconds since packet sent
    uint32 seconds_since_packet_sent = 36;
}

// Basic set of interface counters
message ifstatsbag_basic {
    // Packets received
    uint64 packets_received = 1;
    // Bytes received
    uint64 bytes_received = 2;
    // Packets sent
    uint64 packets_sent = 3;
    // Bytes sent
    uint64 bytes_sent = 4;
    // Total input drops
    uint32 input_drops = 5;
    // Input queue drops
    uint32 input_queue_drops = 6;
    // Total input errors
    uint32 input_errors = 7;
    // Unknown protocol packets received
    uint32 unknown_protocol_packets_received = 8;
    // Total output drops
    uint32 output_drops = 9;
    // Output queue drops
    uint32 output_queue_drops = 10;
    // Total output errors
    uint32 output_errors = 11;
    // Time when counters were last written (in seconds)
    uint32 last_data_time = 12;
    // Number of seconds since last clear counters
    uint32 seconds_since_last_clear_counters = 13;
    // SysUpTime when counters were last reset (in seconds)
    uint32 last_discontinuity_time = 14;
    // Seconds since packet received
    uint32 seconds_since_packet_received = 15;
    // Seconds since packet sent
    uint32 seconds_since_packet_sent = 16;
}

// Datarate information
message statsdbag_datarate {
    // Input data rate in 1000's of bps
    uint64 input_data_rate = 1;
    // Input packets per second
    uint64 input_packet_rate = 2;
    // Output data rate in 1000's of bps
    uint64 output_data_rate = 3;
    // Output packets per second
    uint64 output_packet_rate = 4;
    // Peak input data rate
    uint64 peak_input_data_rate = 5;
    // Peak input packet rate
    uint64 peak_input_packet_rate = 6;
    // Peak output data rate
    uint64 peak_output_data_rate = 7;
    // Peak output packet rate
    uint64 peak_output_packet_rate = 8;
    // Bandwidth (in kbps)
    uint32 bandwidth = 9;
    // Number of 30-sec intervals less one
    uint32 load_interval = 10;
    // Output load as fraction of 255
    uint32 output_load = 11;
    // Input load as fraction of 255
    uint32 input_load = 12;
    // Reliability coefficient
    uint32 reliability = 13;
}

message ifstats_srp_per_side_errors_st {
    // Error packets received
    uint32 error_packets_received = 1;
    // Input CRC errors
    uint32 crc_errors = 2;
    // Input insufficient resources events
    uint32 input_insufficient_resource_events = 3;
    // Aborts received at MAC/RAC
    uint32 mac_aborts_received = 4;
    // Too small packets received at MAC/RAC
    uint32 mac_runt_packets_received = 5;
    // Too large packets received at MAC/RAC
    uint32 mac_giant_packets_received = 6;
    // Too small packets received at framer
    uint32 framer_runt_packets_received = 7;
    // Too large packets received at framer
    uint32 framer_giant_packets_received = 8;
    // Aborts received at framer
    uint32 framer_aborts_received = 9;
}

message ifstats_srp_per_side_data_rate_st {
    // Sent bit rate
    uint32 bit_rate_sent = 1;
    // Sent packet rate
    uint32 packet_rate_sent = 2;
    // Received bit rate
    uint32 bit_rate_received = 3;
    // Received packet rate
    uint32 packet_rate_received = 4;
}

// SRP interface statistics
message ifstatsbag_srp {
    // Data rate interval (5 mins or 30 seconds)
    uint32 data_rate_interval = 1;
    // Data rates for side A interface
    ifstats_srp_per_side_data_rate_st side_a_data_rate = 2;
    // Data rates for side B interface
    ifstats_srp_per_side_data_rate_st side_b_data_rate = 3;
    // Errors for side A interface
    ifstats_srp_per_side_errors_st side_a_errors = 4;
    // Errors for side B interface
    ifstats_srp_per_side_errors_st side_b_errors = 5;
}

message stats_bag_id_td {
    string id_type = 1;
    // Unused
    uint32 unused = 2;
    // Interface Handle
    string interface_handle = 3;
    // Node ID
    string node_id = 4;
    // Feature ID
    uint32 feature_id = 5;
    // ID
    uint32 id = 6;
}

message stats_bag_block_st {
    string type = 1;
    uint32 count = 2;
    bytes data = 3;
}

message stats_bag_element_st {
    bytes key = 1;
    repeated stats_bag_block_st block_array = 2;
}

// Stats Data
message stats_data {
    // Stats type value
    uint32 stats_type = 1;
    // Identifier
    stats_bag_id_td stats_id = 2;
    // Bag contents
    string contents = 3;
    // Block Array
    repeated stats_bag_block_st block_array = 4;
    // Element Array
    repeated stats_bag_element_st element_array = 5;
}

// NCP state information
message ppp_show_int_ncp_info {
    // NCP state value
    string ncp_state = 1;
    // NCP state identifier
    string ncp_identifier = 2;
}

// PPP state information
message ppp_show_int_info {
    // LCP State
    string lcp_state = 1;
    // Loopback detected
    sint32 is_loopback_detected = 2;
    // Keepalive value
    uint32 keepalive_period = 3;
    // MP Bundle Member
    sint32 is_mp_bundle_member = 4;
    // Is Multilink Open
    sint32 is_multilink_open = 5;
    // Array of per-NCP data
    repeated ppp_show_int_ncp_info ncp_info_array = 6;
}

// Additional member state reason data
message bm_mbr_state_reason_data_type {
    // The item the reason applies to
    string reason_type = 1;
    // The severity of the reason
    string severity = 2;
}

message bm_mac_addr_st {
    // MAC address
    string address = 1;
}

message bm_mux_data {
    // Current state of this bundle member
    string mux_state = 1;
    // Internal value indicating if an error occurred trying to put a link into the desired state
    uint32 error = 2;
    // Reason for last Mux state change
    string member_mux_state_reason = 3;
    // Data regarding the reason for last Mux state change
    bm_mbr_state_reason_data_type member_mux_state_reason_data = 4;
    // Current internal state of this bundle member
    string member_state = 5;
    // Reason for last Mux state change (Deprecated)
    string mux_state_reason = 6;
}

// Statistics for a port using using LACP
message bm_lacp_counters {
    // LACPDUs received
    uint32 lacpd_us_received = 1;
    // LACPDUs transmitted
    uint32 lacpd_us_transmitted = 2;
    // Marker packets received
    uint32 marker_packets_received = 3;
    // Marker response packets transmitted
    uint32 marker_responses_transmitted = 4;
    // Illegal and unknown packets received
    uint32 illegal_packets_received = 5;
    // LACPDUs received that exceed the rate limit
    uint32 excess_lacpd_us_received = 6;
    // Marker packets received that exceed the rate limit
    uint32 excess_marker_packets_received = 7;
    // State flag set to Defaulted
    uint32 defaulted = 8;
    // State flag set to Expired
    uint32 expired = 9;
    // Last time counters cleared (s) (deprecated)
    uint32 last_cleared_sec = 10;
    // Last time counters cleared (nsec) (deprecated)
    uint32 last_cleared_nsec = 11;
}

// Link properties for a port using LACP 
message bm_lacp_link_data {
    // Member's interface handle
    string interface_handle = 1;
    // System priority of actor system
    uint32 actor_system_priority = 2;
    // MAC Address of the actor system
    string actor_system_mac_address = 3;
    // Operational key for this port
    uint32 actor_operational_key = 4;
    // System priority of partner system
    uint32 partner_system_priority = 5;
    // MAC Address used to identify the partner system
    string partner_system_mac_address = 6;
    // Operational key for partner port
    uint32 partner_operational_key = 7;
    // MIB ifindex of selected bundle
    uint32 selected_aggregator_id = 8;
    // MIB ifindex of attached bundle
    uint32 attached_aggregator_id = 9;
    // Port number of this port
    uint32 actor_port_id = 10;
    // Priority of this port
    uint32 actor_port_priority = 11;
    // Port number of the partner's port
    uint32 partner_port_id = 12;
    // Priority of the partner's port
    uint32 partner_port_priority = 13;
    // LACP state of this port
    uint32 actor_port_state = 14;
    // LACP state of the partner's port
    uint32 partner_port_state = 15;
}

// Bundle member data for any member
message bm_member_data {
    // Member's interface name
    string interface_name = 1;
    // The priority of this member
    uint32 port_priority = 2;
    // Member's link number
    uint32 port_number = 3;
    // Member's underlying link ID
    uint32 underlying_link_id = 4;
    // Member's link order number
    uint32 link_order_number = 5;
    // Location of member
    uint32 iccp_node = 6;
    // Bandwidth of this member (kbps)
    uint32 bandwidth = 7;
    // Boolean indicating LACP enabled or not
    string lacp_enabled = 8;
    // Counters data about member link
    bm_lacp_counters counters = 9;
    // Lacp data about member link
    bm_lacp_link_data link_data = 10;
    // Mux state machine data
    bm_mux_data member_mux_data = 11;
    // Member's type (local/foreign)
    string member_type = 12;
    // Member's (short form) name
    string member_name = 13;
    // MAC address of this member (deprecated)
    bm_mac_addr_st mac_address = 14;
}

// VLAN double tag stack
message vlan_double_tag_stack {
    // Outer tag value
    uint32 outer_tag = 1;
    // Second tag value
    uint32 second_tag = 2;
}

message efp_range {
    uint32 vlan_id_low = 1;
    uint32 vlan_id_high = 2;
}

message efp_tag_match {
    string ethertype = 1;
    repeated efp_range vlan_ranges = 2;
    string priority = 3;
}

message efp_vlan_tag {
    string ethertype = 1;
    uint32 vlan_id = 2;
}

message efp_tag_local_traffic_stack {
    repeated efp_vlan_tag local_traffic_tags = 1;
}

message MacAddressType {
    string value = 1;
}

message efp_description {
    repeated efp_tag_match tags_to_match = 1;
    string payload_ethertype = 2;
    uint32 tags_popped = 3;
    repeated efp_vlan_tag pushes = 4;
    efp_tag_local_traffic_stack local_traffic_stack = 5;
    sint32 is_exact_match = 6;
    sint32 is_native_vlan = 7;
    sint32 is_native_preserving = 8;
    MacAddressType source_mac_match = 9;
    MacAddressType destination_mac_match = 10;
}

message efp_description_p_type {
    efp_description value = 1;
}

// VLAN encapsulation and tag stack
message vlan_tag_stack_type {
    string vlan_encapsulation = 1;
    // Tag value
    uint32 tag = 2;
    // Stack value
    vlan_double_tag_stack stack = 3;
    // Outer tag value
    uint32 outer_tag = 4;
    // Native tag value
    uint32 native_tag = 5;
    // 802.1ad tag value
    uint32 dot1ad_tag = 6;
    // 802.1ad native tag value
    uint32 dot1ad_native_tag = 7;
    // Service Instance encapsulation
    efp_description_p_type service_instance_details = 8;
    // 802.1ad 802.1Q stack value
    vlan_double_tag_stack dot1ad_dot1q_stack = 9;
    // 802.1ad Outer tag value
    uint32 dot1ad_outer_tag = 10;
}

message vlan_intf_generic {
    // Encapsulation type and tag stack
    vlan_tag_stack_type encapsulation_details = 1;
}

message srp_topology_node_data {
    // Outer-ring hops to reach this node
    uint32 hop_count = 1;
    // MAC address
    string mac_address = 2;
    // IPv4 address
    string ipv4_address = 3;
    // Wrap state
    sint32 is_wrapped = 4;
    // SRR protocol supported
    sint32 is_srr_supported = 5;
    // Node name
    string node_name = 6;
}

message srp_topology_map {
    // How often a topology pkt is sent
    uint32 topology_timer = 1;
    // Time remaining until next topo pkt sent
    uint32 next_topology_packet_delay = 2;
    // Time since last topo pkt was received
    uint32 time_since_last_topology_packet_received = 3;
    // Time since last topology change
    uint32 time_since_last_topology_change = 4;
    // Number of nodes on ring
    uint32 number_of_nodes_on_ring = 5;
    // List of nodes on the ring info
    repeated srp_topology_node_data ring_node_list = 6;
}

message srp_topology_info {
    // Is the interfaceadministratively down
    sint32 is_admin_down = 1;
    // Detailed SRP topology information
    repeated srp_topology_map local_information = 2;
}

// SRP failure info
message srp_failure_info {
    // Failure type
    string type = 1;
    // Reported state
    string reported_state = 2;
    // Debounced state
    string debounced_state = 3;
    // Current state
    string current_state = 4;
    // Stable time
    uint64 stable_time = 5;
    // Debounce delay
    uint32 debounced_delay = 6;
}

message srp_ips_side_detail {
    // MAC address
    string mac_address = 1;
    // Wrap state
    string wrap_state = 2;
    // SRP IPS packet send interval in seconds
    uint32 packet_sent_timer = 3;
    // Time in seconds remaining until next send of an IPS request
    uint32 send_timer_time_remaining = 4;
    // Time in seconds until wrap removal
    uint32 wtr_timer_remaining = 5;
    // Self Detected Requests
    string self_detected_request = 6;
    // Remote Requests
    string remote_request = 7;
    // Failures presently asserted
    repeated srp_failure_info asserted_failures = 8;
    // Neighbour mac address for received message
    string rx_neighbor_mac_address = 9;
    // Type of message received
    string rx_message_type = 10;
    // Short/long path for received message
    string rx_path_type = 11;
    // Time to live for received message
    uint32 rx_ttl = 12;
    // Test for existence of an RX packet
    sint32 rx_packet_test = 13;
    // Mac address of node receiving TXed messages
    string tx_neighbor_mac_address = 14;
    // Type of message transmitted
    string tx_message_type = 15;
    // Short/long path of transmitted message
    string tx_path_type = 16;
    // Time to live for transmitted message
    uint32 tx_ttl = 17;
    // Test for existence of a TX packet
    sint32 tx_packet_test = 18;
    // Number of milliseconds to wait after an L1 failure is detected before triggering an L2 wrap
    uint32 delay_keep_alive_trigger = 19;
}

message srp_ips_detail {
    // MAC address for node
    string mac_address = 1;
    // Inter card bus enabled
    sint32 is_inter_card_bus_enabled = 2;
    // IPS Wait To Restore period in seconds
    uint32 wtr_timer_period = 3;
    // Side A IPS details
    srp_ips_side_detail side_a = 4;
    // Side B IPS details
    srp_ips_side_detail side_b = 5;
}

message srp_ips_info {
    // Is the interfaceadministratively down
    sint32 is_admin_down = 1;
    // IPS information
    repeated srp_ips_detail local_information = 2;
}

message srr_node_data {
    // Node name
    string node_name = 1;
    // Does the SRR information exist for this node
    sint32 srr_entry_exits = 2;
    // node mac address
    string mac_address = 3;
    // Outer failure
    string outer_failure = 4;
    // Inner failure
    string inner_failure = 5;
    // Announce last received ?
    sint32 is_last_announce_received = 6;
    // Announce last received
    uint32 last_announce_received_time = 7;
}

message srp_srr_detail {
    // Version number
    uint32 version_number = 1;
    // Wrong version recieved
    sint32 is_wrong_version_received = 2;
    // Time that last wrong version message recieved
    uint32 last_wrong_version_receive_time = 3;
    // SRR node mac address
    string mac_address = 4;
    // SRR node state
    string node_state = 5;
    // Is the outer ring in use
    sint32 is_outer_ring_in_use = 6;
    //  Is the inner ring in use
    sint32 is_inner_ring_in_use = 7;
    // Is announcing enabled
    sint32 is_announce = 8;
    // Outer fail type
    string outer_fail_type = 9;
    // Inner fail type
    string inner_fail_type = 10;
    // SRR packet send timer interval in seconds
    uint32 packet_send_timer = 11;
    // Time remaining in seconds to next SRR packet send
    uint32 next_srr_packet_send_time = 12;
    // Single ring bandwidth Mbps
    uint32 single_ring_bw = 13;
    // SRR Wait To Restore interval delay in seconds
    uint32 wtr_time = 14;
    // Time remaining in seconds until next outer ring wrap removal
    uint32 wtr_timer_remaining_outer_ring = 15;
    // Time remaining in seconds until next inner ring wrap removal
    uint32 wtr_timer_remaining_inner_ring = 16;
    // List of nodes on the ring info
    repeated srr_node_data nodes_on_ring = 17;
    // nodes not in topology map
    repeated srr_node_data nodes_not_on_ring = 18;
}

message srp_srr_info {
    // Is the interfaceadministratively down
    sint32 is_admin_down = 1;
    // SRR enabled
    sint32 is_srr_enabled = 2;
    // SRP information
    repeated srp_srr_detail srr_detailed_info = 3;
}

// Detailed SRP rate limit information
message srp_rate_limit_detail {
    // Minimum SRP priority for high-priority transmit queue
    uint32 min_priority_value = 1;
}

// SRP rate limit information
message srp_rate_limit_info {
    // Is the interfaceadministratively down
    sint32 is_admin_down = 1;
    // SRP rate limit information
    repeated srp_rate_limit_detail rate_limit_detailed_info = 2;
}

// Complete SRP information
message srp_all_info {
    // SRP IPS information
    srp_ips_info ips_info = 1;
    // SRP topology information
    srp_topology_info topology_info = 2;
    // SRP SRR information
    srp_srr_info srr_info = 3;
    // SRP rate limit information
    srp_rate_limit_info rate_limit_info = 4;
}

message tunl_pfi_in6_addr_t {
    string value = 1;
}

message pfi_ip_addr_union {
    string afi = 1;
    // IPv4 address type
    string ipv4 = 2;
    // IPv6 address type
    tunl_pfi_in6_addr_t ipv6 = 3;
}

// Tunnel info 
message im_cmd_tunl_gre_info {
    // Tunnel source name
    string source_name = 1;
    // Tunnel source IP address
    pfi_ip_addr_union source_ip_address = 2;
    // Tunnel destination IP address
    pfi_ip_addr_union destination_ip_address = 3;
    // Tunnel destination IP address length
    uint32 destination_ip_address_length = 4;
    // GRE tunnel TOS
    uint32 tunnel_tos = 5;
    // GRE tunnel TTL
    uint32 tunnel_ttl = 6;
    // Key value for GRE Packet
    uint32 key = 7;
    // Keepalive period in seconds
    uint32 keepalive_period = 8;
    // Keepalive retry
    uint32 keepalive_maximum_retry = 9;
    // Tunnel GRE Mode
    string tunnel_mode = 10;
    // Tunnel Mode Direction
    string tunnel_mode_direction = 11;
    // Keepalive State
    string keepalive_state = 12;
    // DF Bit State
    string df_bit_state = 13;
    // Key Config State
    string key_bit_state = 14;
}

// Serial interface information
message serial_interface {
    // Timeslots separated by : or - from 1 to 31. : indicates individual timeslot and - represents a range. E.g. 1-3:5 represents timeslots 1, 2, 3, and 5.
    string timeslots = 1;
}

// SONET POS interface information
message im_sonet_pos_info_interface {
    // APS state
    string aps_state = 1;
}

message pwhe_ether_interface_info {
    // Interface list Name
    string interface_list_name = 1;
    // L2 Overhead
    uint32 l2_overhead = 2;
    // Internal Label
    uint32 internal_label = 3;
}

// CEM interface information
message cem_interface {
    // Timeslots separated by : or - from 1 to 32. : indicates individual timeslot and - represents a range. E.g. 1-3:5 represents timeslots 1, 2, 3, and 5.
    string timeslots = 1;
    // Payload size in bytes configured on CEM interface
    uint32 payload = 2;
    // Dejitter buffer length configuredin milliseconds
    uint32 dejitter_buffer = 3;
    //  If framing is TRUE then the CEM  interface is structure aware ; otherwise it is structure agnostic
    sint32 framing = 4;
}

// nV Optical Controller information
message nv_optical_interface_info {
    // Controller that nV controller maps to
    string controller = 1;
}

// GCC
message im_cmd_gcc_per_port_info {
    // Derived State
    string derived_mode = 1;
    // Sec State 
    string sec_state = 2;
}

message im_cmd_damp_st {
    // Dampening penalty of the interface
    uint32 penalty = 1;
    // Flag showing if state is suppressed
    bool is_suppressed_enabled = 2;
    // Remaining period of suppression in secs
    uint32 seconds_remaining = 3;
    // Configured decay half life in mins
    uint32 half_life = 4;
    // Configured reuse threshold
    uint32 reuse_threshold = 5;
    // Value of suppress threshold
    uint32 suppress_threshold = 6;
    // Maximum suppress time in mins
    uint32 maximum_suppress_time = 7;
    // Configured restart penalty
    uint32 restart_penalty = 8;
}

message im_cmd_arp_info_st {
    // ARP timeout in seconds. Only valid if 'ARPIsLearningDisabled' is 'false'
    uint32 arp_timeout = 1;
    // ARP type name
    string arp_type_name = 2;
    // Whether the interface has dynamic learning disabled
    bool arp_is_learning_disabled = 3;
}

message im_cmd_ip_info_st {
    // Interface IPv4 address
    string ip_address = 1;
    // Interface subnet mask length
    uint32 subnet_mask_length = 2;
}

message im_cmd_mac_addr_st {
    // MAC Address
    string address = 1;
}

message im_cmd_if_stats {
    string stats_type = 1;
    // Packet, byte and all error counters
    ifstatsbag_generic full_interface_stats = 2;
    // Packet, byte and selected error counters
    ifstatsbag_basic basic_interface_stats = 3;
}

message im_cmd_carrier_delay_st {
    // Carrier delay on state up (ms)
    uint32 carrier_delay_up = 1;
    // Carrier delay on state down (ms)
    uint32 carrier_delay_down = 2;
}

message im_cmd_fr_info {
    // Frame Relay encapsulation type
    string fr_encapsulation_type = 1;
    // The LMI type: Autosense, ANSI, CCITT or CISCO
    string lmi_type = 2;
    // LMI DLCI
    uint32 lmidlci = 3;
    // The NNI LMI interface type
    bool is_nni = 4;
    // The DTE/DCE LMI interface type
    bool is_dte = 5;
    // Flag indicating whether the LMI  DTE/DCE/NNI-DTE state is UP
    bool is_lmi_up = 6;
    // Flag indicating whether the LMI  NNI-DCE state is UP
    bool is_lmi_nni_dce_up = 7;
    // The status of FR LMI for an interface
    bool is_lmi_enabled = 8;
    // Number of enquiry messages received
    uint32 enquiries_received = 9;
    // Number of enquiry messages sent
    uint32 enquiries_sent = 10;
    // Number of status messages received
    uint32 status_received = 11;
    // Number of status messages sent
    uint32 status_sent = 12;
    // Number of update status messages received
    uint32 update_status_received = 13;
    // Number of update status messages sent
    uint32 update_status_sent = 14;
}

// Encapsulation-specific information
message im_cmd_encaps_info {
    string encapsulation_type = 1;
    // Frame Relay information
    im_cmd_fr_info frame_relay_information = 2;
    // VLAN 802.1q information
    vlan_intf_generic dot1_q_information = 3;
    // PPP information
    ppp_show_int_info ppp_information = 4;
}

message im_cmd_srp_info {
    // SRP-specific data
    srp_all_info srp_information = 1;
    // SRP-specific packet and byte counters
    ifstatsbag_srp srp_statistics = 2;
}

message im_cmd_tunnel_info {
    // Tunnel source name
    string source_name = 1;
    // Tunnel source IP address
    string source_ipv4_address = 2;
    // Tunnel destination IP address
    string destination_ipv4_address = 3;
    // Tunnel protocol/transport
    string tunnel_type = 4;
    // GRE tunnel key
    uint32 key = 5;
    // GRE tunnel TTL
    uint32 ttl = 6;
}

message im_cmd_bundle_info {
    // List of bundle members and their properties
    repeated bm_member_data member_list = 1;
}

// Interface-specific information
message im_cmd_intf_type_info {
    string interface_type_info = 1;
    // SRP interface information
    im_cmd_srp_info srp_information = 2;
    // Tunnel interface information
    im_cmd_tunnel_info tunnel_information = 3;
    // Bundle interface information
    im_cmd_bundle_info bundle_information = 4;
    // Serial interface information
    serial_interface serial_information = 5;
    // SONET POS interface information
    im_sonet_pos_info_interface sonet_pos_information = 6;
    // Tunnel GRE interface information
    im_cmd_tunl_gre_info tunnel_gre_information = 7;
    // PseudowireHeadEnd interface information
    pwhe_ether_interface_info pseudowire_head_end_information = 8;
    // Cem interface information
    cem_interface cem_information = 9;
    // GCC interface information
    im_cmd_gcc_per_port_info gcc_information = 10;
}

