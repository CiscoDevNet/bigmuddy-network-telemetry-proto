// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence;

// ACLE bag
message ipv6_acl_edm_ace_KEYS {
    string access_list_name = 1;
    uint32 sequence_number = 2;
}

message ipv6_acl_edm_ace {
    // ACE type (acl, remark)
    string is_ace_type = 50;
    // ACLE sequence number
    uint32 is_ace_sequence_number = 51;
    // Grant value permit/deny 
    string is_packet_allow_or_deny = 52;
    sint32 is_ipv6_protocol_type = 53;
    string is_source_address_in_numbers = 54;
    uint32 is_source_address_prefix_length = 55;
    // Source Mask
    string source_mask = 56;
    string is_destination_address_in_numbers = 57;
    uint32 is_destination_address_prefix_length = 58;
    // Destination Mask
    string destination_mask = 59;
    // eq, ne, lt, etc...
    string is_source_operator = 60;
    uint32 is_source_port1 = 61;
    uint32 is_source_port2 = 62;
    // eq, ne, lt, etc...
    string is_destination_operator = 63;
    uint32 is_destination_port1 = 64;
    uint32 is_destination_port2 = 65;
    string is_log_option = 66;
    // Counter name
    string counter_name = 67;
    string is_tcp_bits_operator = 68;
    uint32 is_tcp_bits = 69;
    uint32 is_tcp_bits_mask = 70;
    sint32 is_dscp_present = 71;
    uint32 is_dscp_valu = 72;
    sint32 is_precedence_present = 73;
    // range from 0 to 7
    uint32 is_precedence_value = 74;
    // Match if routing header is presant
    uint32 is_header_matches = 75;
    // Match if routing header is presant
    string is_packet_length_operator = 76;
    uint32 is_packet_length_start = 77;
    uint32 is_packet_length_end = 78;
    string is_time_to_live_operator = 79;
    uint32 is_time_to_live_start = 80;
    uint32 is_time_to_live_end = 81;
    sint32 no_stats = 82;
    uint64 hits = 83;
    // Capture option, TRUE if enabled
    uint32 capture = 84;
    // Don't generate the icmp message
    sint32 is_icmp_message_off = 85;
    string is_comment_for_entry = 86;
    // Next hop type
    string next_hop_type = 87;
    // Next hop info
    repeated ipv6_acl_bag_nh_info next_hop_info = 88;
    // HW Next hop info
    ipv6_acl_bag_hw_nh_info hw_next_hop_info = 89;
    uint32 is_flow_id = 90;
    // Source prefix object-group
    string source_prefix_group = 91;
    // Destination prefix object-group
    string destination_prefix_group = 92;
    // Source port object-group
    string source_port_group = 93;
    // Destination port object-group
    string destination_port_group = 94;
    // ACL Name
    string acl_name = 95;
    // Sequence String
    string sequence_str = 96;
}

// NH_Info structure
message ipv6_acl_bag_nh_info {
    // The next hop
    string next_hop = 1;
    // Vrf Name
    string vrf_name = 2;
    // Track name
    string track_name = 3;
    // The next hop status
    string status = 4;
    // The next hop at status
    string at_status = 5;
    // The nexthop exist
    sint32 acl_nh_exist = 6;
}

// HW_NH_Info structure
message ipv6_acl_bag_hw_nh_info {
    // The next-hop type
    string type = 1;
    // The Next Hop
    string next_hop = 2;
    // Table ID
    uint32 table_id = 3;
    // Vrf Name
    string vrf_name = 4;
}

