// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

//Path: Cisco-IOS-XR-telemetry-model-driven-oper:telemetry-model-driven/subscriptions/subscription

package cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription;

// Per subscription group detailed information
message mdt_subscription_details_KEYS {
    string subscription_id = 1;
}

message mdt_subscription_details {
    // Subscription
    mdt_subscription subscription = 50;
    // Total number of packets sent for this subscription
    uint64 total_num_of_packets_sent = 51;
    // Total number of bytes sent for this subscription
    uint64 total_num_of_bytes_sent = 52;
    // List of collection groups active for this subscription
    repeated mdt_collection_group collection_groups = 53;
}

message mdt_in6_addr_t {
    string value = 1;
}

message MdtDestinationIPAddress {
    string ip_type = 1;
    // IPV4 Address
    string ipv4_address = 2;
    // IPV6 Address
    mdt_in6_addr_t ipv6_address = 3;
}

// Sensor Path information
message mdt_sensor_paths {
    // Sensor Path
    string path = 1;
    // State, if sensor path is resolved or not
    uint32 state = 2;
    // Error str, if there are any errors resolving the sensor path
    string status_str = 3;
}

// Per collection group sysdb information
message mdt_collection_sysdb_group {
    // Sysdb Path
    string path = 1;
    // Period of the collections (ms)
    uint64 cadence = 2;
    // Total number of gets
    uint64 total_get_count = 3;
    // Total number of lists
    uint64 total_list_count = 4;
    // Total number of datalists
    uint64 total_datalist_count = 5;
    // Total number of finddata
    uint64 total_finddata_count = 6;
    // Total number of get bulk
    uint64 total_get_bulk_count = 7;
    // Total number of items retrived from sysdb
    uint64 total_item_count = 8;
    // Total number of get errors
    uint64 total_get_errors = 9;
    // Total number of list errors
    uint64 total_list_errors = 10;
    // Total number of datalist errors
    uint64 total_datalist_errors = 11;
    // Total number of finddata errors
    uint64 total_finddata_errors = 12;
    // Total number of get bulk errors
    uint64 total_get_bulk_errors = 13;
    // Total number of encode errors
    uint64 total_encode_errors = 14;
    // Total number of encode deferred
    uint64 total_encode_notready = 15;
    // Total number of send errors
    uint64 total_send_errors = 16;
    // Total number of send channel full
    uint64 total_send_drops = 17;
    // Total number of bytes sent
    uint64 total_sent_bytes = 18;
    // Total number of packets sent
    uint64 total_send_packets = 19;
    // Total number of send bytes dropped
    uint64 total_send_bytes_dropped = 20;
    // Completed collections count
    uint64 total_collections = 21;
    // Total number of collections missed
    uint64 total_collections_missed = 22;
    // Maximum time for a collection (ms)
    uint64 max_collection_time = 23;
    // Minimum time for a collection (ms)
    uint64 min_collection_time = 24;
    // Average time for a collection (ms)
    uint64 avg_collection_time = 25;
    // Collection method in use
    uint64 collection_method = 26;
    // Status of collection path
    string status = 27;
}

// Per collection group information
message mdt_collection_group {
    // Collection Group id
    uint64 id = 1;
    // Period of the collections (ms)
    uint32 cadence = 2;
    // Completed collections count
    uint32 total_collections = 3;
    // Destination group encoding
    string encoding = 4;
    // Timestamp of the start of last collection
    uint64 last_collection_start_time = 5;
    // Timestamp of the end of last collection
    uint64 last_collection_end_time = 6;
    // Maximum time for a collection (ms)
    uint32 max_collection_time = 7;
    // Minimum time for a collection (ms)
    uint32 min_collection_time = 8;
    // Minimum time for all processing (ms)
    uint32 min_total_time = 9;
    // Maximum time for all processing (ms)
    uint32 max_total_time = 10;
    // Average time for all processing (ms)
    uint32 avg_total_time = 11;
    // Total number of errors
    uint32 total_other_errors = 12;
    // Total number skipped (not ready)
    uint32 total_not_ready = 13;
    // Total number of send errors
    uint32 total_send_errors = 14;
    // Total number of send drops
    uint32 total_send_drops = 15;
    // Array of information for sensor paths within collection group
    repeated mdt_sensor_paths collection_paths = 16;
    // Array of information for sysdb paths within collection group
    repeated mdt_collection_sysdb_group internal_collection_group = 17;
}

// Per Destination information
message mdt_destination {
    // Destination Id
    string id = 1;
    // Sub Idstr
    string sub_id_str = 2;
    // Sub Id
    repeated uint64 sub_id = 3;
    // Destination IP Address
    MdtDestinationIPAddress dest_ip_address = 4;
    // Destination Port number
    uint32 dest_port = 5;
    // Destination group encoding
    string encoding = 6;
    // Destination group transport
    string transport = 7;
    // Destination group vrf
    string vrf = 8;
    // Destination group vrf id
    uint32 vrf_id = 9;
    // State of streaming on this destination
    uint32 state = 10;
    // UDP MTU if this destination is UDP
    uint32 udp_mtu = 11;
    // TLS connection to this destination
    uint32 tls = 12;
    // TLS Hostname of this destination
    string tls_host = 13;
    // Total number of packets sent for this destination
    uint64 total_num_of_packets_sent = 14;
    // Total number of bytes sent for this destination
    uint64 total_num_of_bytes_sent = 15;
    // Timestamp of the last collection
    uint64 last_collection_time = 16;
}

// Per Destination Group information
message mdt_destination_group {
    // Destination Group name
    string id = 1;
    // Set if this is configured destination group
    uint32 configured = 2;
    // list of destinations defined in this group
    repeated mdt_destination destinations = 3;
}

// Per sensor group information
message mdt_sensor_group {
    // Sensor Group name
    string id = 1;
    // Set if this is configured sensor group
    uint32 configured = 2;
    // Array of information for sensor paths within sensor group
    repeated mdt_sensor_paths sensor_paths = 3;
}

// Per sensor profile information
message mdt_sensor_profile {
    // sensor group
    mdt_sensor_group sensor_group = 1;
    // Sample interval for the sensor group (ms)
    uint32 sample_interval = 2;
    // Heartbeat interval for the sensor group (s)
    uint32 heartbeat_interval = 3;
    // Suppress Redundant
    bool suppress_redundant = 4;
}

// source interface information
message mdt_source_interface {
    // Source Interface Name
    string interface_name = 1;
    // interface state
    bool state = 2;
    // IPV4 Address
    string ipv4_address = 3;
    // IPV6 Address
    string ipv6_address = 4;
    // Src Vrf Id
    uint32 vrf_id = 5;
}

// Per subscription group information
message mdt_subscription {
    // Collection Subscription name
    string id = 1;
    // Subscription state
    uint32 state = 2;
    // configured source interface
    mdt_source_interface source_interface = 3;
    // List of sensor groups within a subscription
    repeated mdt_sensor_profile sensor_profiles = 4;
    // Array of destinations within a subscription
    repeated mdt_destination_group destination_grps = 5;
}

