// Copyright (c) 2015, Cisco Systems
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
// TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This file is autogenerated
//
// The following edits are possible, without affecting the validity of the
// file:
//
//  * Fields may be renamed.
//  * Fields may be deleted.
//  * The unique numbered tag for a field may be changed, provided that
//    the ordering of tags for fields within a message is preserved.
//  * Message types may be renamed.
//  * Message types may be deleted (if all fields that reference them
//    have been deleted).
//
// All Cisco message and field extensions must be preserved (except when the
// field itself is being deleted).

syntax = "proto3";

package cisco_ios_xr_infra_statsd_oper.infra_statistics.interfaces.interface.cache.interfaces_mib_counters;

// Generic set of interface counters
message ifstatsbag_generic_KEYS {
    string interface_name = 1;
}

message ifstatsbag_generic {
    // Packets received
    uint64 packets_received = 50;
    // Bytes received
    uint64 bytes_received = 51;
    // Packets sent
    uint64 packets_sent = 52;
    // Bytes sent
    uint64 bytes_sent = 53;
    // Multicast packets received
    uint64 multicast_packets_received = 54;
    // Broadcast packets received
    uint64 broadcast_packets_received = 55;
    // Multicast packets sent
    uint64 multicast_packets_sent = 56;
    // Broadcast packets sent
    uint64 broadcast_packets_sent = 57;
    // Total output drops
    uint32 output_drops = 58;
    // Output queue drops
    uint32 output_queue_drops = 59;
    // Total input drops
    uint32 input_drops = 60;
    // Input queue drops
    uint32 input_queue_drops = 61;
    // Received runt packets
    uint32 runt_packets_received = 62;
    // Received giant packets
    uint32 giant_packets_received = 63;
    // Received throttled packets
    uint32 throttled_packets_received = 64;
    // Received parity packets
    uint32 parity_packets_received = 65;
    // Unknown protocol packets received
    uint32 unknown_protocol_packets_received = 66;
    // Total input errors
    uint32 input_errors = 67;
    // Input CRC errors
    uint32 crc_errors = 68;
    // Input overruns
    uint32 input_overruns = 69;
    // Framing-errors received
    uint32 framing_errors_received = 70;
    // Input ignored packets
    uint32 input_ignored_packets = 71;
    // Input aborts
    uint32 input_aborts = 72;
    // Total output errors
    uint32 output_errors = 73;
    // Output underruns
    uint32 output_underruns = 74;
    // Output buffer failures
    uint32 output_buffer_failures = 75;
    // Output buffers swapped out
    uint32 output_buffers_swapped_out = 76;
    // Applique
    uint32 applique = 77;
    // Number of board resets
    uint32 resets = 78;
    // Carrier transitions
    uint32 carrier_transitions = 79;
    // Availability bit mask
    uint32 availability_flag = 80;
    // Time when counters were last written (in seconds)
    uint32 last_data_time = 81;
    // Number of seconds since last clear counters
    uint32 seconds_since_last_clear_counters = 82;
    // SysUpTime when counters were last reset (in seconds)
    uint32 last_discontinuity_time = 83;
    // Seconds since packet received
    uint32 seconds_since_packet_received = 84;
    // Seconds since packet sent
    uint32 seconds_since_packet_sent = 85;
}

