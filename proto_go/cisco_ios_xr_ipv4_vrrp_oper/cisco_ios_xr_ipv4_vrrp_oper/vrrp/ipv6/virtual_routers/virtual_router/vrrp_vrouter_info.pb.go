// Code generated by protoc-gen-go.
// source: vrrp_vrouter_info.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router is a generated protocol buffer package.

It is generated from these files:
	vrrp_vrouter_info.proto

It has these top-level messages:
	VrrpVrouterInfo_KEYS
	VrrpVrouterInfo
	Ipv6BagAddr_
	VrrpBagTimestamp
	VrrpStateChangeInfoType
*/
package cisco_ios_xr_ipv4_vrrp_oper_vrrp_ipv6_virtual_routers_virtual_router

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Detailed vrID specific information
type VrrpVrouterInfo_KEYS struct {
	InterfaceName   string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	VirtualRouterId uint32 `protobuf:"varint,2,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
}

func (m *VrrpVrouterInfo_KEYS) Reset()                    { *m = VrrpVrouterInfo_KEYS{} }
func (m *VrrpVrouterInfo_KEYS) String() string            { return proto.CompactTextString(m) }
func (*VrrpVrouterInfo_KEYS) ProtoMessage()               {}
func (*VrrpVrouterInfo_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VrrpVrouterInfo_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *VrrpVrouterInfo_KEYS) GetVirtualRouterId() uint32 {
	if m != nil {
		return m.VirtualRouterId
	}
	return 0
}

type VrrpVrouterInfo struct {
	// IM Interface Name
	InterfaceName string `protobuf:"bytes,50,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// Virtual Router ID
	VirtualRouterId uint32 `protobuf:"varint,51,opt,name=virtual_router_id,json=virtualRouterId" json:"virtual_router_id,omitempty"`
	// VRRP Protocol Version
	Version uint32 `protobuf:"varint,52,opt,name=version" json:"version,omitempty"`
	// Address family
	AddressFamily string `protobuf:"bytes,53,opt,name=address_family,json=addressFamily" json:"address_family,omitempty"`
	// Session Name
	SessionName string `protobuf:"bytes,54,opt,name=session_name,json=sessionName" json:"session_name,omitempty"`
	// Number of slaves following state
	Slaves uint32 `protobuf:"varint,55,opt,name=slaves" json:"slaves,omitempty"`
	// Group is a slave group
	IsSlave bool `protobuf:"varint,56,opt,name=is_slave,json=isSlave" json:"is_slave,omitempty"`
	// Followed Session Name
	FollowedSessionName string `protobuf:"bytes,57,opt,name=followed_session_name,json=followedSessionName" json:"followed_session_name,omitempty"`
	// Configured VRRP secondary address count
	SecondaryAddressCount uint32 `protobuf:"varint,58,opt,name=secondary_address_count,json=secondaryAddressCount" json:"secondary_address_count,omitempty"`
	// Operational VRRP address count
	OperationalAddressCount uint32 `protobuf:"varint,59,opt,name=operational_address_count,json=operationalAddressCount" json:"operational_address_count,omitempty"`
	// Operational IPv4 VRRP addresses
	OperationalAddressList [][]byte `protobuf:"bytes,60,rep,name=operational_address_list,json=operationalAddressList,proto3" json:"operational_address_list,omitempty"`
	// Configured IPv4 Primary address
	PrimaryVirtualIp string `protobuf:"bytes,61,opt,name=primary_virtual_ip,json=primaryVirtualIp" json:"primary_virtual_ip,omitempty"`
	// IPv6 Operational VRRP addresses
	Ipv6OperationalAddressList []*Ipv6BagAddr_ `protobuf:"bytes,62,rep,name=ipv6_operational_address_list,json=ipv6OperationalAddressList" json:"ipv6_operational_address_list,omitempty"`
	//  Configured but Down VRRP address count
	ConfiguredDownAddressCount uint32 `protobuf:"varint,63,opt,name=configured_down_address_count,json=configuredDownAddressCount" json:"configured_down_address_count,omitempty"`
	// IPv4 Configured but Down VRRP addresses
	Ipv4ConfiguredDownAddressList [][]byte `protobuf:"bytes,64,rep,name=ipv4_configured_down_address_list,json=ipv4ConfiguredDownAddressList,proto3" json:"ipv4_configured_down_address_list,omitempty"`
	// IPv6 Configured but Down VRRP addresses
	Ipv6ConfiguredDownAddressList []*Ipv6BagAddr_ `protobuf:"bytes,65,rep,name=ipv6_configured_down_address_list,json=ipv6ConfiguredDownAddressList" json:"ipv6_configured_down_address_list,omitempty"`
	// Virtual linklocal IPv6 address
	VirtualLinklocalIpv6Address string `protobuf:"bytes,66,opt,name=virtual_linklocal_ipv6_address,json=virtualLinklocalIpv6Address" json:"virtual_linklocal_ipv6_address,omitempty"`
	// State of primary IP address
	PrimaryState string `protobuf:"bytes,67,opt,name=primary_state,json=primaryState" json:"primary_state,omitempty"`
	// Master router real IP address
	MasterIpAddress string `protobuf:"bytes,68,opt,name=master_ip_address,json=masterIpAddress" json:"master_ip_address,omitempty"`
	// Master router real IPv6 address
	MasterIpv6Address string `protobuf:"bytes,69,opt,name=master_ipv6_address,json=masterIpv6Address" json:"master_ipv6_address,omitempty"`
	// Master router priority
	MasterPriority uint32 `protobuf:"varint,70,opt,name=master_priority,json=masterPriority" json:"master_priority,omitempty"`
	// VRRP state
	VrrpState string `protobuf:"bytes,71,opt,name=vrrp_state,json=vrrpState" json:"vrrp_state,omitempty"`
	// Authentication type
	AuthenticationType string `protobuf:"bytes,72,opt,name=authentication_type,json=authenticationType" json:"authentication_type,omitempty"`
	// Authentication data
	AuthenticationString string `protobuf:"bytes,73,opt,name=authentication_string,json=authenticationString" json:"authentication_string,omitempty"`
	// Configured advertize time
	ConfiguredAdvertizeTime uint32 `protobuf:"varint,74,opt,name=configured_advertize_time,json=configuredAdvertizeTime" json:"configured_advertize_time,omitempty"`
	// Operational advertize time
	OperAdvertizeTime uint32 `protobuf:"varint,75,opt,name=oper_advertize_time,json=operAdvertizeTime" json:"oper_advertize_time,omitempty"`
	// Minimum delay time in msecs
	MinDelayTime uint32 `protobuf:"varint,76,opt,name=min_delay_time,json=minDelayTime" json:"min_delay_time,omitempty"`
	// Reload delay time in msecs
	ReloadDelayTime uint32 `protobuf:"varint,77,opt,name=reload_delay_time,json=reloadDelayTime" json:"reload_delay_time,omitempty"`
	// Delay timer running flag
	DelayTimerFlag bool `protobuf:"varint,78,opt,name=delay_timer_flag,json=delayTimerFlag" json:"delay_timer_flag,omitempty"`
	// Delay timer running time secs
	DelayTimerSecs uint32 `protobuf:"varint,79,opt,name=delay_timer_secs,json=delayTimerSecs" json:"delay_timer_secs,omitempty"`
	// Delay timer running time msecs
	DelayTimerMsecs uint32 `protobuf:"varint,80,opt,name=delay_timer_msecs,json=delayTimerMsecs" json:"delay_timer_msecs,omitempty"`
	// Text authentication configured flag
	AuthenticationFlag bool `protobuf:"varint,81,opt,name=authentication_flag,json=authenticationFlag" json:"authentication_flag,omitempty"`
	// Configured timers forced flag
	ForceTimerFlag bool `protobuf:"varint,82,opt,name=force_timer_flag,json=forceTimerFlag" json:"force_timer_flag,omitempty"`
	// Preempt configured flag
	PreemptFlag bool `protobuf:"varint,83,opt,name=preempt_flag,json=preemptFlag" json:"preempt_flag,omitempty"`
	// IP address owner flag
	IpAddressOwnerFlag bool `protobuf:"varint,84,opt,name=ip_address_owner_flag,json=ipAddressOwnerFlag" json:"ip_address_owner_flag,omitempty"`
	// Is accept mode
	IsAcceptMode bool `protobuf:"varint,85,opt,name=is_accept_mode,json=isAcceptMode" json:"is_accept_mode,omitempty"`
	// Preempt delay time
	PreemptDelayTime uint32 `protobuf:"varint,86,opt,name=preempt_delay_time,json=preemptDelayTime" json:"preempt_delay_time,omitempty"`
	// Configured priority
	ConfiguredPriority uint32 `protobuf:"varint,87,opt,name=configured_priority,json=configuredPriority" json:"configured_priority,omitempty"`
	// Operational priority
	OperationalPriority uint32 `protobuf:"varint,88,opt,name=operational_priority,json=operationalPriority" json:"operational_priority,omitempty"`
	// Priority decrement
	PriorityDecrement uint32 `protobuf:"varint,89,opt,name=priority_decrement,json=priorityDecrement" json:"priority_decrement,omitempty"`
	// Number of items tracked
	TrackedInterfaceCount uint32 `protobuf:"varint,90,opt,name=tracked_interface_count,json=trackedInterfaceCount" json:"tracked_interface_count,omitempty"`
	// Number of tracked items up
	TrackedInterfaceUpCount uint32 `protobuf:"varint,91,opt,name=tracked_interface_up_count,json=trackedInterfaceUpCount" json:"tracked_interface_up_count,omitempty"`
	// Number of tracked items
	TrackedItemCount uint32 `protobuf:"varint,92,opt,name=tracked_item_count,json=trackedItemCount" json:"tracked_item_count,omitempty"`
	// Number of tracked items in UP state
	TrackedItemUpCount uint32 `protobuf:"varint,93,opt,name=tracked_item_up_count,json=trackedItemUpCount" json:"tracked_item_up_count,omitempty"`
	// Time in current state secs
	TimeInCurrentState uint32 `protobuf:"varint,94,opt,name=time_in_current_state,json=timeInCurrentState" json:"time_in_current_state,omitempty"`
	// Number of state changes
	StateChangeCount uint32 `protobuf:"varint,95,opt,name=state_change_count,json=stateChangeCount" json:"state_change_count,omitempty"`
	// Time vrouter is up in centiseconds
	TimeVrouterUp uint32 `protobuf:"varint,96,opt,name=time_vrouter_up,json=timeVrouterUp" json:"time_vrouter_up,omitempty"`
	// No. of times become Master
	MasterCount uint32 `protobuf:"varint,97,opt,name=master_count,json=masterCount" json:"master_count,omitempty"`
	// No. of advertisements received
	AdvertsReceivedCount uint32 `protobuf:"varint,98,opt,name=adverts_received_count,json=advertsReceivedCount" json:"adverts_received_count,omitempty"`
	// Advertise interval errors
	AdvertIntervalErrorCount uint32 `protobuf:"varint,99,opt,name=advert_interval_error_count,json=advertIntervalErrorCount" json:"advert_interval_error_count,omitempty"`
	// No. of advertisements sent
	AdvertsSentCount uint32 `protobuf:"varint,100,opt,name=adverts_sent_count,json=advertsSentCount" json:"adverts_sent_count,omitempty"`
	// Authentication failures
	AuthenticationFailCount uint32 `protobuf:"varint,101,opt,name=authentication_fail_count,json=authenticationFailCount" json:"authentication_fail_count,omitempty"`
	// TTL errors
	TtlErrorCount uint32 `protobuf:"varint,102,opt,name=ttl_error_count,json=ttlErrorCount" json:"ttl_error_count,omitempty"`
	// No. priority 0 received
	PriorityZeroReceivedCount uint32 `protobuf:"varint,103,opt,name=priority_zero_received_count,json=priorityZeroReceivedCount" json:"priority_zero_received_count,omitempty"`
	// No. priority 0 sent
	PriorityZeroSentCount uint32 `protobuf:"varint,104,opt,name=priority_zero_sent_count,json=priorityZeroSentCount" json:"priority_zero_sent_count,omitempty"`
	// Invalid packets received
	InvalidPacketCount uint32 `protobuf:"varint,105,opt,name=invalid_packet_count,json=invalidPacketCount" json:"invalid_packet_count,omitempty"`
	// Address list errors
	AddressListErrorCount uint32 `protobuf:"varint,106,opt,name=address_list_error_count,json=addressListErrorCount" json:"address_list_error_count,omitempty"`
	// Invalid authentication type
	InvalidAuthTypeCount uint32 `protobuf:"varint,107,opt,name=invalid_auth_type_count,json=invalidAuthTypeCount" json:"invalid_auth_type_count,omitempty"`
	// Authentication type mismatches
	AuthTypeMismatchCount uint32 `protobuf:"varint,108,opt,name=auth_type_mismatch_count,json=authTypeMismatchCount" json:"auth_type_mismatch_count,omitempty"`
	// Packet length errors
	PktLengthErrorsCount uint32 `protobuf:"varint,109,opt,name=pkt_length_errors_count,json=pktLengthErrorsCount" json:"pkt_length_errors_count,omitempty"`
	// Time since a statistics discontinuity in ticks (10ns units)
	TimeStatsDiscontinuity uint32 `protobuf:"varint,110,opt,name=time_stats_discontinuity,json=timeStatsDiscontinuity" json:"time_stats_discontinuity,omitempty"`
	// BFD session state
	BfdSessionState string `protobuf:"bytes,111,opt,name=bfd_session_state,json=bfdSessionState" json:"bfd_session_state,omitempty"`
	// BFD packet send interval
	BfdInterval uint32 `protobuf:"varint,112,opt,name=bfd_interval,json=bfdInterval" json:"bfd_interval,omitempty"`
	// BFD multiplier
	BfdMultiplier uint32 `protobuf:"varint,113,opt,name=bfd_multiplier,json=bfdMultiplier" json:"bfd_multiplier,omitempty"`
	// BFD configured remote IP
	BfdCfgRemoteIp string `protobuf:"bytes,114,opt,name=bfd_cfg_remote_ip,json=bfdCfgRemoteIp" json:"bfd_cfg_remote_ip,omitempty"`
	// BFD configured remote IPv6
	BfdConfiguredRemoteIpv6Address string `protobuf:"bytes,115,opt,name=bfd_configured_remote_ipv6_address,json=bfdConfiguredRemoteIpv6Address" json:"bfd_configured_remote_ipv6_address,omitempty"`
	// Whether state recovered from checkpoint
	StateFromCheckpoint bool `protobuf:"varint,116,opt,name=state_from_checkpoint,json=stateFromCheckpoint" json:"state_from_checkpoint,omitempty"`
	// Time last resign was sent
	ResignSentTime *VrrpBagTimestamp `protobuf:"bytes,117,opt,name=resign_sent_time,json=resignSentTime" json:"resign_sent_time,omitempty"`
	// Time last resign was received
	ResignReceivedTime *VrrpBagTimestamp `protobuf:"bytes,118,opt,name=resign_received_time,json=resignReceivedTime" json:"resign_received_time,omitempty"`
	// State change history
	StateChangeHistory []*VrrpStateChangeInfoType `protobuf:"bytes,119,rep,name=state_change_history,json=stateChangeHistory" json:"state_change_history,omitempty"`
	// The Interface Primary IPv4 address
	InterfaceIpv4Address string `protobuf:"bytes,120,opt,name=interface_ipv4_address,json=interfaceIpv4Address" json:"interface_ipv4_address,omitempty"`
	// The Interface linklocal IPv6 address
	InterfaceIpv6Address string `protobuf:"bytes,121,opt,name=interface_ipv6_address,json=interfaceIpv6Address" json:"interface_ipv6_address,omitempty"`
	// Virtual mac address
	VirtualMacAddress string `protobuf:"bytes,122,opt,name=virtual_mac_address,json=virtualMacAddress" json:"virtual_mac_address,omitempty"`
	// Virtual mac address state
	VirtualMacAddressState string `protobuf:"bytes,123,opt,name=virtual_mac_address_state,json=virtualMacAddressState" json:"virtual_mac_address_state,omitempty"`
}

func (m *VrrpVrouterInfo) Reset()                    { *m = VrrpVrouterInfo{} }
func (m *VrrpVrouterInfo) String() string            { return proto.CompactTextString(m) }
func (*VrrpVrouterInfo) ProtoMessage()               {}
func (*VrrpVrouterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VrrpVrouterInfo) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *VrrpVrouterInfo) GetVirtualRouterId() uint32 {
	if m != nil {
		return m.VirtualRouterId
	}
	return 0
}

func (m *VrrpVrouterInfo) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAddressFamily() string {
	if m != nil {
		return m.AddressFamily
	}
	return ""
}

func (m *VrrpVrouterInfo) GetSessionName() string {
	if m != nil {
		return m.SessionName
	}
	return ""
}

func (m *VrrpVrouterInfo) GetSlaves() uint32 {
	if m != nil {
		return m.Slaves
	}
	return 0
}

func (m *VrrpVrouterInfo) GetIsSlave() bool {
	if m != nil {
		return m.IsSlave
	}
	return false
}

func (m *VrrpVrouterInfo) GetFollowedSessionName() string {
	if m != nil {
		return m.FollowedSessionName
	}
	return ""
}

func (m *VrrpVrouterInfo) GetSecondaryAddressCount() uint32 {
	if m != nil {
		return m.SecondaryAddressCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetOperationalAddressCount() uint32 {
	if m != nil {
		return m.OperationalAddressCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetOperationalAddressList() [][]byte {
	if m != nil {
		return m.OperationalAddressList
	}
	return nil
}

func (m *VrrpVrouterInfo) GetPrimaryVirtualIp() string {
	if m != nil {
		return m.PrimaryVirtualIp
	}
	return ""
}

func (m *VrrpVrouterInfo) GetIpv6OperationalAddressList() []*Ipv6BagAddr_ {
	if m != nil {
		return m.Ipv6OperationalAddressList
	}
	return nil
}

func (m *VrrpVrouterInfo) GetConfiguredDownAddressCount() uint32 {
	if m != nil {
		return m.ConfiguredDownAddressCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetIpv4ConfiguredDownAddressList() [][]byte {
	if m != nil {
		return m.Ipv4ConfiguredDownAddressList
	}
	return nil
}

func (m *VrrpVrouterInfo) GetIpv6ConfiguredDownAddressList() []*Ipv6BagAddr_ {
	if m != nil {
		return m.Ipv6ConfiguredDownAddressList
	}
	return nil
}

func (m *VrrpVrouterInfo) GetVirtualLinklocalIpv6Address() string {
	if m != nil {
		return m.VirtualLinklocalIpv6Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetPrimaryState() string {
	if m != nil {
		return m.PrimaryState
	}
	return ""
}

func (m *VrrpVrouterInfo) GetMasterIpAddress() string {
	if m != nil {
		return m.MasterIpAddress
	}
	return ""
}

func (m *VrrpVrouterInfo) GetMasterIpv6Address() string {
	if m != nil {
		return m.MasterIpv6Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetMasterPriority() uint32 {
	if m != nil {
		return m.MasterPriority
	}
	return 0
}

func (m *VrrpVrouterInfo) GetVrrpState() string {
	if m != nil {
		return m.VrrpState
	}
	return ""
}

func (m *VrrpVrouterInfo) GetAuthenticationType() string {
	if m != nil {
		return m.AuthenticationType
	}
	return ""
}

func (m *VrrpVrouterInfo) GetAuthenticationString() string {
	if m != nil {
		return m.AuthenticationString
	}
	return ""
}

func (m *VrrpVrouterInfo) GetConfiguredAdvertizeTime() uint32 {
	if m != nil {
		return m.ConfiguredAdvertizeTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetOperAdvertizeTime() uint32 {
	if m != nil {
		return m.OperAdvertizeTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetMinDelayTime() uint32 {
	if m != nil {
		return m.MinDelayTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetReloadDelayTime() uint32 {
	if m != nil {
		return m.ReloadDelayTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetDelayTimerFlag() bool {
	if m != nil {
		return m.DelayTimerFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetDelayTimerSecs() uint32 {
	if m != nil {
		return m.DelayTimerSecs
	}
	return 0
}

func (m *VrrpVrouterInfo) GetDelayTimerMsecs() uint32 {
	if m != nil {
		return m.DelayTimerMsecs
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAuthenticationFlag() bool {
	if m != nil {
		return m.AuthenticationFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetForceTimerFlag() bool {
	if m != nil {
		return m.ForceTimerFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetPreemptFlag() bool {
	if m != nil {
		return m.PreemptFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetIpAddressOwnerFlag() bool {
	if m != nil {
		return m.IpAddressOwnerFlag
	}
	return false
}

func (m *VrrpVrouterInfo) GetIsAcceptMode() bool {
	if m != nil {
		return m.IsAcceptMode
	}
	return false
}

func (m *VrrpVrouterInfo) GetPreemptDelayTime() uint32 {
	if m != nil {
		return m.PreemptDelayTime
	}
	return 0
}

func (m *VrrpVrouterInfo) GetConfiguredPriority() uint32 {
	if m != nil {
		return m.ConfiguredPriority
	}
	return 0
}

func (m *VrrpVrouterInfo) GetOperationalPriority() uint32 {
	if m != nil {
		return m.OperationalPriority
	}
	return 0
}

func (m *VrrpVrouterInfo) GetPriorityDecrement() uint32 {
	if m != nil {
		return m.PriorityDecrement
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTrackedInterfaceCount() uint32 {
	if m != nil {
		return m.TrackedInterfaceCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTrackedInterfaceUpCount() uint32 {
	if m != nil {
		return m.TrackedInterfaceUpCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTrackedItemCount() uint32 {
	if m != nil {
		return m.TrackedItemCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTrackedItemUpCount() uint32 {
	if m != nil {
		return m.TrackedItemUpCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTimeInCurrentState() uint32 {
	if m != nil {
		return m.TimeInCurrentState
	}
	return 0
}

func (m *VrrpVrouterInfo) GetStateChangeCount() uint32 {
	if m != nil {
		return m.StateChangeCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTimeVrouterUp() uint32 {
	if m != nil {
		return m.TimeVrouterUp
	}
	return 0
}

func (m *VrrpVrouterInfo) GetMasterCount() uint32 {
	if m != nil {
		return m.MasterCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAdvertsReceivedCount() uint32 {
	if m != nil {
		return m.AdvertsReceivedCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAdvertIntervalErrorCount() uint32 {
	if m != nil {
		return m.AdvertIntervalErrorCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAdvertsSentCount() uint32 {
	if m != nil {
		return m.AdvertsSentCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAuthenticationFailCount() uint32 {
	if m != nil {
		return m.AuthenticationFailCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTtlErrorCount() uint32 {
	if m != nil {
		return m.TtlErrorCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetPriorityZeroReceivedCount() uint32 {
	if m != nil {
		return m.PriorityZeroReceivedCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetPriorityZeroSentCount() uint32 {
	if m != nil {
		return m.PriorityZeroSentCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetInvalidPacketCount() uint32 {
	if m != nil {
		return m.InvalidPacketCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAddressListErrorCount() uint32 {
	if m != nil {
		return m.AddressListErrorCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetInvalidAuthTypeCount() uint32 {
	if m != nil {
		return m.InvalidAuthTypeCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetAuthTypeMismatchCount() uint32 {
	if m != nil {
		return m.AuthTypeMismatchCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetPktLengthErrorsCount() uint32 {
	if m != nil {
		return m.PktLengthErrorsCount
	}
	return 0
}

func (m *VrrpVrouterInfo) GetTimeStatsDiscontinuity() uint32 {
	if m != nil {
		return m.TimeStatsDiscontinuity
	}
	return 0
}

func (m *VrrpVrouterInfo) GetBfdSessionState() string {
	if m != nil {
		return m.BfdSessionState
	}
	return ""
}

func (m *VrrpVrouterInfo) GetBfdInterval() uint32 {
	if m != nil {
		return m.BfdInterval
	}
	return 0
}

func (m *VrrpVrouterInfo) GetBfdMultiplier() uint32 {
	if m != nil {
		return m.BfdMultiplier
	}
	return 0
}

func (m *VrrpVrouterInfo) GetBfdCfgRemoteIp() string {
	if m != nil {
		return m.BfdCfgRemoteIp
	}
	return ""
}

func (m *VrrpVrouterInfo) GetBfdConfiguredRemoteIpv6Address() string {
	if m != nil {
		return m.BfdConfiguredRemoteIpv6Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetStateFromCheckpoint() bool {
	if m != nil {
		return m.StateFromCheckpoint
	}
	return false
}

func (m *VrrpVrouterInfo) GetResignSentTime() *VrrpBagTimestamp {
	if m != nil {
		return m.ResignSentTime
	}
	return nil
}

func (m *VrrpVrouterInfo) GetResignReceivedTime() *VrrpBagTimestamp {
	if m != nil {
		return m.ResignReceivedTime
	}
	return nil
}

func (m *VrrpVrouterInfo) GetStateChangeHistory() []*VrrpStateChangeInfoType {
	if m != nil {
		return m.StateChangeHistory
	}
	return nil
}

func (m *VrrpVrouterInfo) GetInterfaceIpv4Address() string {
	if m != nil {
		return m.InterfaceIpv4Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetInterfaceIpv6Address() string {
	if m != nil {
		return m.InterfaceIpv6Address
	}
	return ""
}

func (m *VrrpVrouterInfo) GetVirtualMacAddress() string {
	if m != nil {
		return m.VirtualMacAddress
	}
	return ""
}

func (m *VrrpVrouterInfo) GetVirtualMacAddressState() string {
	if m != nil {
		return m.VirtualMacAddressState
	}
	return ""
}

type Ipv6BagAddr_ struct {
	Ipv6Address string `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
}

func (m *Ipv6BagAddr_) Reset()                    { *m = Ipv6BagAddr_{} }
func (m *Ipv6BagAddr_) String() string            { return proto.CompactTextString(m) }
func (*Ipv6BagAddr_) ProtoMessage()               {}
func (*Ipv6BagAddr_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ipv6BagAddr_) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

// Timestamp
type VrrpBagTimestamp struct {
	// Seconds
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Nanoseconds
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *VrrpBagTimestamp) Reset()                    { *m = VrrpBagTimestamp{} }
func (m *VrrpBagTimestamp) String() string            { return proto.CompactTextString(m) }
func (*VrrpBagTimestamp) ProtoMessage()               {}
func (*VrrpBagTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VrrpBagTimestamp) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *VrrpBagTimestamp) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// State change info
type VrrpStateChangeInfoType struct {
	// Old State
	OldState string `protobuf:"bytes,1,opt,name=old_state,json=oldState" json:"old_state,omitempty"`
	// New State
	NewState string `protobuf:"bytes,2,opt,name=new_state,json=newState" json:"new_state,omitempty"`
	// Reason for state change
	Reason string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	// Time of state change
	Time *VrrpBagTimestamp `protobuf:"bytes,4,opt,name=time" json:"time,omitempty"`
}

func (m *VrrpStateChangeInfoType) Reset()                    { *m = VrrpStateChangeInfoType{} }
func (m *VrrpStateChangeInfoType) String() string            { return proto.CompactTextString(m) }
func (*VrrpStateChangeInfoType) ProtoMessage()               {}
func (*VrrpStateChangeInfoType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VrrpStateChangeInfoType) GetOldState() string {
	if m != nil {
		return m.OldState
	}
	return ""
}

func (m *VrrpStateChangeInfoType) GetNewState() string {
	if m != nil {
		return m.NewState
	}
	return ""
}

func (m *VrrpStateChangeInfoType) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *VrrpStateChangeInfoType) GetTime() *VrrpBagTimestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*VrrpVrouterInfo_KEYS)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info_KEYS")
	proto.RegisterType((*VrrpVrouterInfo)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_vrouter_info")
	proto.RegisterType((*Ipv6BagAddr_)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.ipv6_bag_addr_")
	proto.RegisterType((*VrrpBagTimestamp)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_bag_timestamp")
	proto.RegisterType((*VrrpStateChangeInfoType)(nil), "cisco_ios_xr_ipv4_vrrp_oper.vrrp.ipv6.virtual_routers.virtual_router.vrrp_state_change_info_type")
}

func init() { proto.RegisterFile("vrrp_vrouter_info.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5b, 0x77, 0x1b, 0xb7,
	0x11, 0x3e, 0x8c, 0x73, 0x1c, 0x1b, 0xba, 0xd8, 0x5a, 0x5d, 0xbc, 0xb6, 0xea, 0x1c, 0x5a, 0x4d,
	0x5b, 0x35, 0xc7, 0x55, 0x6a, 0x49, 0x51, 0x6e, 0x4d, 0x53, 0x95, 0xb2, 0x6a, 0x26, 0x52, 0xac,
	0x92, 0xb2, 0x9b, 0xa4, 0x17, 0x14, 0xda, 0x05, 0x49, 0x54, 0xbb, 0xc0, 0x16, 0x00, 0xa9, 0xd0,
	0x7d, 0xeb, 0x63, 0x1f, 0xfa, 0xd2, 0x87, 0xbe, 0xf5, 0x9f, 0xf5, 0xbf, 0xf4, 0x60, 0x06, 0xd8,
	0x0b, 0x25, 0xfb, 0xf4, 0xc1, 0x7e, 0xe3, 0xce, 0xf7, 0x7d, 0x33, 0xb3, 0x83, 0x01, 0x30, 0x4b,
	0x72, 0x67, 0xa2, 0x75, 0x41, 0x27, 0x5a, 0x8d, 0x2d, 0xd7, 0x54, 0xc8, 0x81, 0xda, 0x2a, 0xb4,
	0xb2, 0x2a, 0x3a, 0x48, 0x84, 0x49, 0x14, 0x15, 0xca, 0xd0, 0xef, 0x35, 0x15, 0xc5, 0x64, 0x97,
	0x02, 0x55, 0x15, 0x5c, 0x6f, 0xb9, 0x5f, 0x5b, 0xa2, 0x98, 0xec, 0x6d, 0x4d, 0x84, 0xb6, 0x63,
	0x96, 0x51, 0x74, 0x60, 0x66, 0x9e, 0x37, 0xce, 0xc9, 0xda, 0xa5, 0x00, 0xf4, 0xab, 0xc7, 0xdf,
	0xf6, 0xa3, 0x1f, 0x91, 0x45, 0x21, 0x2d, 0xd7, 0x03, 0x96, 0x70, 0x2a, 0x59, 0xce, 0xe3, 0x56,
	0xbb, 0xb5, 0x79, 0xb3, 0xb7, 0x50, 0x5a, 0xbf, 0x66, 0x39, 0x8f, 0xde, 0x27, 0x4b, 0x4d, 0x97,
	0x54, 0xa4, 0xf1, 0x5b, 0xed, 0xd6, 0xe6, 0x42, 0xef, 0x96, 0x07, 0x7a, 0x60, 0xef, 0xa6, 0x1b,
	0xff, 0x6c, 0x93, 0xa5, 0x4b, 0xd1, 0xae, 0x08, 0xb4, 0xfd, 0x7f, 0x07, 0xda, 0xb9, 0x32, 0x50,
	0x14, 0x93, 0x77, 0x26, 0x5c, 0x1b, 0xa1, 0x64, 0xbc, 0x0b, 0x8c, 0xf0, 0xe8, 0x82, 0xb1, 0x34,
	0xd5, 0xdc, 0x18, 0x3a, 0x60, 0xb9, 0xc8, 0xa6, 0xf1, 0x87, 0x18, 0xcc, 0x5b, 0x0f, 0xc1, 0x18,
	0x3d, 0x20, 0xf3, 0x86, 0x1b, 0xa7, 0xc0, 0x8c, 0xf6, 0x80, 0x34, 0xe7, 0x6d, 0x90, 0xcf, 0x1a,
	0xb9, 0x6e, 0x32, 0x36, 0xe1, 0x26, 0xfe, 0x08, 0x42, 0xf8, 0xa7, 0xe8, 0x2e, 0xb9, 0x21, 0x0c,
	0x85, 0x87, 0xf8, 0xe3, 0x76, 0x6b, 0xf3, 0x46, 0xef, 0x1d, 0x61, 0xfa, 0xee, 0x31, 0xda, 0x26,
	0xab, 0x03, 0x95, 0x65, 0xea, 0x82, 0xa7, 0xb4, 0xe1, 0xfe, 0x13, 0x70, 0xbf, 0x1c, 0xc0, 0x7e,
	0x2d, 0xcc, 0x1e, 0xb9, 0x63, 0x78, 0xa2, 0x64, 0xca, 0xf4, 0x94, 0x86, 0xd4, 0x13, 0x35, 0x96,
	0x36, 0xfe, 0x14, 0xe2, 0xae, 0x96, 0xf0, 0x3e, 0xa2, 0x1d, 0x07, 0x46, 0x9f, 0x92, 0xbb, 0xae,
	0x13, 0x98, 0x15, 0x4a, 0xb2, 0x6c, 0x46, 0xf9, 0x19, 0x28, 0xef, 0xd4, 0x08, 0x0d, 0xed, 0xc7,
	0x24, 0xbe, 0x4a, 0x9b, 0x09, 0x63, 0xe3, 0x5f, 0xb4, 0xaf, 0x6d, 0xce, 0xf7, 0xd6, 0x2e, 0x4b,
	0x8f, 0x84, 0xb1, 0xd1, 0x43, 0x12, 0x15, 0x5a, 0xe4, 0x2e, 0xd7, 0xb0, 0x58, 0xa2, 0x88, 0x3f,
	0x87, 0xd7, 0xbb, 0xed, 0x91, 0xe7, 0x08, 0x74, 0x8b, 0xe8, 0xdf, 0x2d, 0x72, 0xdf, 0x35, 0x29,
	0x7d, 0x69, 0xb4, 0x5f, 0xb6, 0xaf, 0x6d, 0xce, 0x6d, 0x9f, 0x6e, 0xbd, 0x8e, 0x5e, 0x07, 0x0e,
	0x3d, 0x63, 0x43, 0x08, 0x41, 0x7b, 0xf7, 0xdc, 0xf3, 0xd3, 0xab, 0xdf, 0x63, 0x9f, 0xdc, 0x4f,
	0x94, 0x1c, 0x88, 0xe1, 0x58, 0xf3, 0x94, 0xa6, 0xea, 0x42, 0xce, 0x54, 0xf0, 0x0b, 0xa8, 0xe0,
	0xbd, 0x8a, 0x74, 0xa0, 0x2e, 0x64, 0xa3, 0x88, 0x4f, 0xc8, 0x03, 0x48, 0xf4, 0x65, 0x7e, 0xe0,
	0xfd, 0x7e, 0x05, 0xd5, 0x74, 0x45, 0xd8, 0xed, 0x5c, 0xe5, 0x0a, 0x92, 0xf9, 0x4f, 0x0b, 0x5c,
	0xed, 0xbd, 0xda, 0xd5, 0xfe, 0x1b, 0x2c, 0x15, 0xac, 0xd2, 0xcb, 0x13, 0xec, 0x90, 0x77, 0x83,
	0x3e, 0x13, 0xf2, 0x3c, 0x53, 0x09, 0xac, 0xfb, 0x64, 0x2f, 0x64, 0x18, 0xff, 0x1a, 0x3a, 0x60,
	0xdd, 0xb3, 0x8e, 0x02, 0xa9, 0x5b, 0x4c, 0xf6, 0xbc, 0xa3, 0xe8, 0x87, 0x64, 0x21, 0xb4, 0x8e,
	0xb1, 0xcc, 0xf2, 0xb8, 0x03, 0x9a, 0x79, 0x6f, 0xec, 0x3b, 0x9b, 0x3b, 0x04, 0x72, 0x66, 0x60,
	0xf3, 0x17, 0xa5, 0xf3, 0x03, 0x20, 0xde, 0x42, 0xa0, 0x5b, 0x04, 0x87, 0x5b, 0x64, 0xb9, 0xe4,
	0xd6, 0x52, 0x79, 0x0c, 0xec, 0xa5, 0xc0, 0xae, 0x12, 0xf8, 0x09, 0xf1, 0x2e, 0x68, 0xa1, 0x85,
	0xd2, 0xc2, 0x4e, 0xe3, 0x43, 0x58, 0xe5, 0x45, 0x34, 0x9f, 0x78, 0x6b, 0x74, 0x9f, 0x10, 0x28,
	0x29, 0xa6, 0xf9, 0x1b, 0xf0, 0x77, 0xd3, 0x59, 0x30, 0xc7, 0x0f, 0xc8, 0x32, 0x1b, 0xdb, 0x11,
	0x97, 0x56, 0x24, 0xd0, 0x5a, 0xd4, 0x4e, 0x0b, 0x1e, 0x3f, 0x01, 0x5e, 0xd4, 0x84, 0x4e, 0xa7,
	0x05, 0x8f, 0x76, 0xc8, 0xea, 0x8c, 0xc0, 0x58, 0x2d, 0xe4, 0x30, 0xee, 0x82, 0x64, 0xa5, 0x09,
	0xf6, 0x01, 0x73, 0xfb, 0xbb, 0xd6, 0x0e, 0x2c, 0x9d, 0x70, 0x6d, 0xc5, 0x0b, 0x4e, 0xad, 0xc8,
	0x79, 0xfc, 0x25, 0xee, 0xef, 0x8a, 0xb0, 0x1f, 0xf0, 0x53, 0x91, 0x73, 0x57, 0x19, 0xd7, 0x0e,
	0xb3, 0xaa, 0xaf, 0x40, 0xb5, 0xe4, 0xa0, 0x26, 0xff, 0x3d, 0xb2, 0x98, 0x0b, 0x49, 0x53, 0x9e,
	0xb1, 0x29, 0x52, 0x8f, 0x80, 0x3a, 0x9f, 0x0b, 0x79, 0xe0, 0x8c, 0xc0, 0x7a, 0x9f, 0x2c, 0x69,
	0x9e, 0x29, 0x96, 0xd6, 0x89, 0xc7, 0x78, 0x40, 0x23, 0x50, 0x71, 0x37, 0xc9, 0xed, 0x8a, 0xa4,
	0xe9, 0x20, 0x63, 0xc3, 0xf8, 0x6b, 0x38, 0x2c, 0x17, 0xd3, 0x40, 0xd2, 0x87, 0x19, 0x1b, 0xce,
	0x32, 0x0d, 0x4f, 0x4c, 0xfc, 0x14, 0x97, 0xa5, 0x62, 0xf6, 0x79, 0x62, 0x5c, 0xfc, 0x3a, 0x33,
	0x07, 0xea, 0x09, 0xc6, 0xaf, 0xa8, 0xc7, 0xce, 0x7c, 0xc5, 0x1a, 0x41, 0x0a, 0xbf, 0x85, 0x14,
	0x66, 0xd6, 0x28, 0xa4, 0x31, 0x50, 0x3a, 0xe1, 0xf5, 0x84, 0x7b, 0x98, 0x30, 0xd8, 0xab, 0x84,
	0x1f, 0x90, 0xf9, 0x42, 0x73, 0x9e, 0x17, 0x16, 0x59, 0x7d, 0x60, 0xcd, 0x79, 0x1b, 0x50, 0x1e,
	0x91, 0xd5, 0xaa, 0x7d, 0xa9, 0xba, 0x90, 0xc1, 0xe3, 0x29, 0xc6, 0x17, 0xa1, 0x87, 0x9f, 0x3a,
	0x08, 0x24, 0xef, 0x91, 0x45, 0x61, 0x28, 0x4b, 0x12, 0x5e, 0x58, 0x9a, 0xab, 0x94, 0xc7, 0xcf,
	0x80, 0x3b, 0x2f, 0xcc, 0x3e, 0x18, 0x8f, 0x55, 0xca, 0xf1, 0xf8, 0xc5, 0xd8, 0xb5, 0x35, 0x78,
	0x0e, 0x35, 0xb8, 0xed, 0x91, 0x6a, 0x11, 0x3e, 0x20, 0xcb, 0xb5, 0x16, 0x2a, 0x9b, 0xfe, 0x77,
	0x40, 0x8f, 0x2a, 0xa8, 0x6c, 0xfc, 0x47, 0x64, 0xa5, 0x7e, 0x52, 0x97, 0x8a, 0x6f, 0x40, 0xb1,
	0x5c, 0xc3, 0x4a, 0xc9, 0xcf, 0xe0, 0x42, 0x80, 0xdf, 0x34, 0xe5, 0x89, 0xe6, 0x39, 0x97, 0x36,
	0xfe, 0x16, 0x3b, 0x2d, 0x20, 0x07, 0x01, 0x70, 0xb7, 0x9d, 0xd5, 0x2c, 0x39, 0xe7, 0x29, 0xad,
	0x66, 0x02, 0x3c, 0x71, 0xbf, 0xc3, 0xdb, 0xce, 0xc3, 0xdd, 0x80, 0xe2, 0x61, 0xfb, 0x19, 0xb9,
	0x77, 0x59, 0x37, 0x2e, 0xbc, 0xf4, 0xf7, 0xb8, 0x1d, 0x66, 0xa5, 0xcf, 0x0a, 0x14, 0x3f, 0x24,
	0x51, 0x29, 0xb6, 0x3c, 0xf7, 0xa2, 0x3f, 0x60, 0xd5, 0x82, 0xc8, 0xf2, 0x1c, 0xd9, 0x8f, 0xc8,
	0x6a, 0x83, 0x5d, 0x46, 0xf9, 0x23, 0xd6, 0xad, 0x26, 0x08, 0x01, 0x9c, 0x44, 0xe4, 0x9c, 0x0a,
	0x49, 0x93, 0xb1, 0xd6, 0x5c, 0x5a, 0x7f, 0x76, 0xfc, 0xc9, 0x4b, 0x44, 0xce, 0xbb, 0xb2, 0x83,
	0x10, 0x1e, 0x22, 0x0f, 0x49, 0x04, 0x14, 0x9a, 0x8c, 0x98, 0x1c, 0x86, 0x1a, 0x50, 0xcc, 0x09,
	0x90, 0x0e, 0x00, 0x18, 0xe0, 0xc7, 0xe4, 0x16, 0x04, 0x08, 0x73, 0xd5, 0xb8, 0x88, 0xff, 0x0c,
	0xd4, 0x05, 0x67, 0x7e, 0x8e, 0xd6, 0x67, 0x85, 0xeb, 0x4d, 0x7f, 0xc4, 0xa1, 0x3f, 0x06, 0xa4,
	0x39, 0xb4, 0xa1, 0xab, 0x5d, 0xb2, 0x86, 0xc7, 0x82, 0xa1, 0x9a, 0x27, 0x5c, 0x4c, 0x78, 0xea,
	0xc9, 0x67, 0x40, 0x5e, 0xf1, 0x68, 0xcf, 0x83, 0xa8, 0xfa, 0x9c, 0xac, 0xa3, 0x1d, 0xcb, 0x3f,
	0x61, 0x19, 0xe5, 0x5a, 0xab, 0x10, 0x27, 0x01, 0x69, 0x8c, 0x94, 0xae, 0x67, 0x3c, 0x76, 0x84,
	0x72, 0x05, 0x42, 0x50, 0xe3, 0xaa, 0x83, 0xaa, 0x14, 0xdf, 0xd6, 0x23, 0x7d, 0x2e, 0x6d, 0x39,
	0xda, 0xcc, 0x6e, 0x5e, 0x26, 0x32, 0x2f, 0xe2, 0xb8, 0xd6, 0x33, 0x5b, 0x98, 0x89, 0xac, 0xaa,
	0x94, 0x6d, 0x26, 0x37, 0xf0, 0x95, 0xb2, 0xf5, 0x8c, 0xbe, 0x20, 0x3f, 0x28, 0xfb, 0xf6, 0x05,
	0xd7, 0x6a, 0xb6, 0x18, 0x43, 0x10, 0xdd, 0x0d, 0x9c, 0xef, 0xb8, 0x56, 0xcd, 0x8a, 0x7c, 0x44,
	0xe2, 0xa6, 0x83, 0xda, 0x8b, 0x8d, 0xb0, 0x95, 0xeb, 0xe2, 0xea, 0xed, 0x7e, 0x4e, 0x56, 0x84,
	0x9c, 0xb0, 0x4c, 0xa4, 0xb4, 0x70, 0x9d, 0x14, 0x44, 0x02, 0x7b, 0xc5, 0x63, 0x27, 0x00, 0x95,
	0xa1, 0xea, 0x93, 0x40, 0xe3, 0xe5, 0xfe, 0x82, 0xa1, 0x58, 0x75, 0x5b, 0xd7, 0x5e, 0xf2, 0x43,
	0x72, 0x27, 0x84, 0x72, 0xf5, 0x82, 0x7b, 0xca, 0xeb, 0xce, 0x71, 0xb1, 0x3d, 0xbc, 0x3f, 0xb6,
	0x23, 0x77, 0x55, 0x55, 0xf1, 0x4a, 0x7a, 0x2e, 0x4c, 0xce, 0x6c, 0x32, 0xf2, 0xba, 0xcc, 0xc7,
	0xf3, 0x82, 0x63, 0x8f, 0x96, 0xf1, 0x8a, 0x73, 0x4b, 0x33, 0x2e, 0x87, 0x76, 0x84, 0x69, 0x86,
	0x79, 0x2a, 0xc7, 0x78, 0xc5, 0xb9, 0x3d, 0x02, 0x14, 0xb2, 0xac, 0xc6, 0x51, 0xe8, 0x6e, 0xd7,
	0xf6, 0x86, 0xa6, 0x6e, 0xbe, 0x91, 0x56, 0xc8, 0xb1, 0x3b, 0x7a, 0x24, 0xe8, 0xd6, 0x1c, 0xee,
	0x36, 0x8e, 0x39, 0xa8, 0xa3, 0xee, 0x4a, 0x38, 0x1b, 0x54, 0xb3, 0x36, 0x6e, 0x3a, 0x85, 0xe3,
	0xc2, 0xd9, 0x20, 0xcc, 0xd9, 0xb8, 0xe3, 0x1e, 0x90, 0x79, 0xc7, 0x0d, 0xfd, 0x1b, 0x17, 0xb8,
	0x37, 0xce, 0x06, 0x69, 0x68, 0x58, 0xf7, 0xf1, 0xe0, 0x28, 0xf9, 0x38, 0xb3, 0xa2, 0xc8, 0x04,
	0xd7, 0xf1, 0x5f, 0xb1, 0x77, 0xce, 0x06, 0xe9, 0x71, 0x69, 0x8c, 0x7e, 0x8a, 0x51, 0x93, 0xc1,
	0x90, 0x6a, 0x9e, 0x2b, 0xcb, 0xdd, 0x0c, 0xac, 0x21, 0xaa, 0xd3, 0x77, 0x06, 0xc3, 0x1e, 0x98,
	0xbb, 0x45, 0xf4, 0x25, 0xd9, 0x00, 0x6a, 0x75, 0x0c, 0x97, 0x8a, 0xda, 0xc8, 0x62, 0x40, 0xfb,
	0xae, 0xd3, 0x96, 0xc4, 0xe0, 0xa2, 0x9a, 0x5f, 0xb6, 0xc9, 0x2a, 0x1e, 0x19, 0x03, 0xad, 0x72,
	0x9a, 0x8c, 0x78, 0x72, 0x5e, 0x28, 0x21, 0x6d, 0x6c, 0xe1, 0xa6, 0x58, 0x06, 0xf0, 0x50, 0xab,
	0xbc, 0x53, 0x42, 0xd1, 0xdf, 0x5b, 0xe4, 0xb6, 0xe6, 0x46, 0x0c, 0x25, 0xf6, 0x27, 0xdc, 0x17,
	0xe3, 0x76, 0x6b, 0x73, 0x6e, 0xfb, 0x9b, 0xd7, 0x33, 0x49, 0x82, 0xc4, 0x4d, 0x92, 0xce, 0xb5,
	0xb1, 0x2c, 0x2f, 0x7a, 0x8b, 0x18, 0xd1, 0xb5, 0x3c, 0xdc, 0x43, 0xff, 0x68, 0x91, 0x15, 0x9f,
	0x44, 0xb9, 0xcb, 0x20, 0x91, 0xc9, 0x1b, 0x4e, 0x24, 0xc2, 0xa8, 0x61, 0xe3, 0x42, 0x32, 0xff,
	0x6a, 0x91, 0x95, 0xc6, 0xc9, 0x3b, 0x12, 0xc6, 0x2a, 0x3d, 0x8d, 0x2f, 0x60, 0xbe, 0x66, 0xaf,
	0x31, 0x99, 0x46, 0x18, 0xf8, 0xf0, 0x76, 0x3b, 0xaa, 0x17, 0xd5, 0x8e, 0xf7, 0x27, 0x18, 0xdc,
	0x9d, 0xca, 0xd5, 0xbd, 0x06, 0x41, 0x43, 0x6f, 0x7c, 0x8f, 0x33, 0x62, 0x89, 0x76, 0x8b, 0xc9,
	0x6e, 0xe8, 0x88, 0x59, 0x55, 0xd5, 0x51, 0xd3, 0xcb, 0xaa, 0xbd, 0xda, 0xdc, 0x1c, 0xb2, 0xcd,
	0x59, 0x52, 0x4a, 0x5e, 0xe0, 0xdc, 0xec, 0xa1, 0x63, 0x96, 0x04, 0xfe, 0x27, 0xe4, 0xee, 0x15,
	0x7c, 0xbf, 0xd9, 0xfe, 0x06, 0xaa, 0xb5, 0x4b, 0x2a, 0xd8, 0x73, 0x1b, 0x3b, 0x64, 0xb1, 0xf9,
	0xa5, 0xe1, 0x76, 0x61, 0x23, 0x51, 0xfc, 0xcf, 0x61, 0x4e, 0x54, 0xf9, 0x6d, 0x9c, 0x90, 0xe8,
	0xf2, 0x5a, 0xba, 0x4f, 0x7e, 0xfc, 0x10, 0x46, 0xcd, 0x42, 0x2f, 0x3c, 0x46, 0x6d, 0x32, 0x27,
	0x99, 0x54, 0x01, 0xc5, 0xff, 0x26, 0xea, 0xa6, 0x8d, 0xff, 0xb6, 0xc8, 0xfa, 0x2b, 0x56, 0x24,
	0x5a, 0x27, 0x37, 0x55, 0x96, 0xfa, 0x37, 0xc2, 0x8c, 0x6e, 0xa8, 0x2c, 0xc5, 0x73, 0x63, 0x9d,
	0xdc, 0x94, 0xfc, 0xc2, 0x83, 0x6f, 0x21, 0x28, 0xf9, 0x05, 0x82, 0x6b, 0xe4, 0xba, 0xe6, 0xcc,
	0x28, 0x19, 0x5f, 0x03, 0xc4, 0x3f, 0x45, 0x19, 0x79, 0x1b, 0x3a, 0xfc, 0xed, 0x37, 0xdc, 0xe1,
	0x10, 0xe5, 0xec, 0x3a, 0xfc, 0x63, 0xb4, 0xf3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0xdd,
	0x4c, 0xee, 0x4c, 0x12, 0x00, 0x00,
}
