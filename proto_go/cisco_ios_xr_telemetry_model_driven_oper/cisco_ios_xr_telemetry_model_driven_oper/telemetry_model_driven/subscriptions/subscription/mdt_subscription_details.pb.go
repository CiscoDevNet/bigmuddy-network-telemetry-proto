// Code generated by protoc-gen-go.
// source: mdt_subscription_details.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_subscriptions_subscription is a generated protocol buffer package.

It is generated from these files:
	mdt_subscription_details.proto

It has these top-level messages:
	MdtSubscriptionDetails_KEYS
	MdtSubscriptionDetails
	MdtIn6AddrT
	MdtDestinationIPAddress
	MdtSensorPaths
	MdtCollectionSysdbGroup
	MdtCollectionGroup
	MdtDestination
	MdtDestinationGroup
	MdtSensorGroup
	MdtSensorProfile
	MdtSourceInterface
	MdtSubscription
*/
package cisco_ios_xr_telemetry_model_driven_oper_telemetry_model_driven_subscriptions_subscription

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Per subscription group detailed information
type MdtSubscriptionDetails_KEYS struct {
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
}

func (m *MdtSubscriptionDetails_KEYS) Reset()                    { *m = MdtSubscriptionDetails_KEYS{} }
func (m *MdtSubscriptionDetails_KEYS) String() string            { return proto.CompactTextString(m) }
func (*MdtSubscriptionDetails_KEYS) ProtoMessage()               {}
func (*MdtSubscriptionDetails_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MdtSubscriptionDetails_KEYS) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

type MdtSubscriptionDetails struct {
	// Subscription
	Subscription *MdtSubscription `protobuf:"bytes,50,opt,name=subscription" json:"subscription,omitempty"`
	// List of collection groups active for this subscription
	CollectionGroups []*MdtCollectionGroup `protobuf:"bytes,51,rep,name=collection_groups,json=collectionGroups" json:"collection_groups,omitempty"`
}

func (m *MdtSubscriptionDetails) Reset()                    { *m = MdtSubscriptionDetails{} }
func (m *MdtSubscriptionDetails) String() string            { return proto.CompactTextString(m) }
func (*MdtSubscriptionDetails) ProtoMessage()               {}
func (*MdtSubscriptionDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MdtSubscriptionDetails) GetSubscription() *MdtSubscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *MdtSubscriptionDetails) GetCollectionGroups() []*MdtCollectionGroup {
	if m != nil {
		return m.CollectionGroups
	}
	return nil
}

type MdtIn6AddrT struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *MdtIn6AddrT) Reset()                    { *m = MdtIn6AddrT{} }
func (m *MdtIn6AddrT) String() string            { return proto.CompactTextString(m) }
func (*MdtIn6AddrT) ProtoMessage()               {}
func (*MdtIn6AddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MdtIn6AddrT) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MdtDestinationIPAddress struct {
	IpType string `protobuf:"bytes,1,opt,name=ip_type,json=ipType" json:"ip_type,omitempty"`
	// IPV4 Address
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPV6 Address
	Ipv6Address *MdtIn6AddrT `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
}

func (m *MdtDestinationIPAddress) Reset()                    { *m = MdtDestinationIPAddress{} }
func (m *MdtDestinationIPAddress) String() string            { return proto.CompactTextString(m) }
func (*MdtDestinationIPAddress) ProtoMessage()               {}
func (*MdtDestinationIPAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MdtDestinationIPAddress) GetIpType() string {
	if m != nil {
		return m.IpType
	}
	return ""
}

func (m *MdtDestinationIPAddress) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *MdtDestinationIPAddress) GetIpv6Address() *MdtIn6AddrT {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

// Sensor Path information
type MdtSensorPaths struct {
	// Sensor Path
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// State, if sensor path is resolved or not
	State bool `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	// Error str, if there are any errors resolving the sensor path
	StatusStr string `protobuf:"bytes,3,opt,name=status_str,json=statusStr" json:"status_str,omitempty"`
}

func (m *MdtSensorPaths) Reset()                    { *m = MdtSensorPaths{} }
func (m *MdtSensorPaths) String() string            { return proto.CompactTextString(m) }
func (*MdtSensorPaths) ProtoMessage()               {}
func (*MdtSensorPaths) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MdtSensorPaths) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MdtSensorPaths) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *MdtSensorPaths) GetStatusStr() string {
	if m != nil {
		return m.StatusStr
	}
	return ""
}

// Per collection group sysdb information
type MdtCollectionSysdbGroup struct {
	// Sysdb Path
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// Period of the collections (ms)
	Cadence uint64 `protobuf:"varint,2,opt,name=cadence" json:"cadence,omitempty"`
	// Total number of gets
	TotalGetCount uint64 `protobuf:"varint,3,opt,name=total_get_count,json=totalGetCount" json:"total_get_count,omitempty"`
	// Total number of lists
	TotalListCount uint64 `protobuf:"varint,4,opt,name=total_list_count,json=totalListCount" json:"total_list_count,omitempty"`
	// Total number of datalists
	TotalDatalistCount uint64 `protobuf:"varint,5,opt,name=total_datalist_count,json=totalDatalistCount" json:"total_datalist_count,omitempty"`
	// Total number of finddata
	TotalFinddataCount uint64 `protobuf:"varint,6,opt,name=total_finddata_count,json=totalFinddataCount" json:"total_finddata_count,omitempty"`
	// Total number of get bulk
	TotalGetBulkCount uint64 `protobuf:"varint,7,opt,name=total_get_bulk_count,json=totalGetBulkCount" json:"total_get_bulk_count,omitempty"`
	// Total number of items retrived from sysdb
	TotalItemCount uint64 `protobuf:"varint,8,opt,name=total_item_count,json=totalItemCount" json:"total_item_count,omitempty"`
	// Total number of get errors
	TotalGetErrors uint64 `protobuf:"varint,9,opt,name=total_get_errors,json=totalGetErrors" json:"total_get_errors,omitempty"`
	// Total number of list errors
	TotalListErrors uint64 `protobuf:"varint,10,opt,name=total_list_errors,json=totalListErrors" json:"total_list_errors,omitempty"`
	// Total number of datalist errors
	TotalDatalistErrors uint64 `protobuf:"varint,11,opt,name=total_datalist_errors,json=totalDatalistErrors" json:"total_datalist_errors,omitempty"`
	// Total number of finddata errors
	TotalFinddataErrors uint64 `protobuf:"varint,12,opt,name=total_finddata_errors,json=totalFinddataErrors" json:"total_finddata_errors,omitempty"`
	// Total number of get bulk errors
	TotalGetBulkErrors uint64 `protobuf:"varint,13,opt,name=total_get_bulk_errors,json=totalGetBulkErrors" json:"total_get_bulk_errors,omitempty"`
	// Total number of encode errors
	TotalEncodeErrors uint64 `protobuf:"varint,14,opt,name=total_encode_errors,json=totalEncodeErrors" json:"total_encode_errors,omitempty"`
	// Total number of encode deferred
	TotalEncodeNotready uint64 `protobuf:"varint,15,opt,name=total_encode_notready,json=totalEncodeNotready" json:"total_encode_notready,omitempty"`
	// Total number of send errors
	TotalSendErrors uint64 `protobuf:"varint,16,opt,name=total_send_errors,json=totalSendErrors" json:"total_send_errors,omitempty"`
	// Total number of send channel full
	TotalSendDrops uint64 `protobuf:"varint,17,opt,name=total_send_drops,json=totalSendDrops" json:"total_send_drops,omitempty"`
	// Total number of bytes sent
	TotalSentBytes uint64 `protobuf:"varint,18,opt,name=total_sent_bytes,json=totalSentBytes" json:"total_sent_bytes,omitempty"`
	// Total number of packets sent
	TotalSendPackets uint64 `protobuf:"varint,19,opt,name=total_send_packets,json=totalSendPackets" json:"total_send_packets,omitempty"`
	// Total number of send bytes dropped
	TotalSendBytesDropped uint64 `protobuf:"varint,20,opt,name=total_send_bytes_dropped,json=totalSendBytesDropped" json:"total_send_bytes_dropped,omitempty"`
	// Completed collections count
	TotalCollections uint64 `protobuf:"varint,21,opt,name=total_collections,json=totalCollections" json:"total_collections,omitempty"`
	// Total number of collections missed
	TotalCollectionsMissed uint64 `protobuf:"varint,22,opt,name=total_collections_missed,json=totalCollectionsMissed" json:"total_collections_missed,omitempty"`
	// Maximum time for a collection (ms)
	MaxCollectionTime uint64 `protobuf:"varint,23,opt,name=max_collection_time,json=maxCollectionTime" json:"max_collection_time,omitempty"`
	// Minimum time for a collection (ms)
	MinCollectionTime uint64 `protobuf:"varint,24,opt,name=min_collection_time,json=minCollectionTime" json:"min_collection_time,omitempty"`
	// Average time for a collection (ms)
	AvgCollectionTime uint64 `protobuf:"varint,25,opt,name=avg_collection_time,json=avgCollectionTime" json:"avg_collection_time,omitempty"`
	// Collection method in use
	CollectionMethod uint64 `protobuf:"varint,26,opt,name=collection_method,json=collectionMethod" json:"collection_method,omitempty"`
	// Status of collection path
	Status string `protobuf:"bytes,27,opt,name=status" json:"status,omitempty"`
}

func (m *MdtCollectionSysdbGroup) Reset()                    { *m = MdtCollectionSysdbGroup{} }
func (m *MdtCollectionSysdbGroup) String() string            { return proto.CompactTextString(m) }
func (*MdtCollectionSysdbGroup) ProtoMessage()               {}
func (*MdtCollectionSysdbGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MdtCollectionSysdbGroup) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MdtCollectionSysdbGroup) GetCadence() uint64 {
	if m != nil {
		return m.Cadence
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalGetCount() uint64 {
	if m != nil {
		return m.TotalGetCount
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalListCount() uint64 {
	if m != nil {
		return m.TotalListCount
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalDatalistCount() uint64 {
	if m != nil {
		return m.TotalDatalistCount
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalFinddataCount() uint64 {
	if m != nil {
		return m.TotalFinddataCount
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalGetBulkCount() uint64 {
	if m != nil {
		return m.TotalGetBulkCount
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalItemCount() uint64 {
	if m != nil {
		return m.TotalItemCount
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalGetErrors() uint64 {
	if m != nil {
		return m.TotalGetErrors
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalListErrors() uint64 {
	if m != nil {
		return m.TotalListErrors
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalDatalistErrors() uint64 {
	if m != nil {
		return m.TotalDatalistErrors
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalFinddataErrors() uint64 {
	if m != nil {
		return m.TotalFinddataErrors
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalGetBulkErrors() uint64 {
	if m != nil {
		return m.TotalGetBulkErrors
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalEncodeErrors() uint64 {
	if m != nil {
		return m.TotalEncodeErrors
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalEncodeNotready() uint64 {
	if m != nil {
		return m.TotalEncodeNotready
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalSendErrors() uint64 {
	if m != nil {
		return m.TotalSendErrors
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalSendDrops() uint64 {
	if m != nil {
		return m.TotalSendDrops
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalSentBytes() uint64 {
	if m != nil {
		return m.TotalSentBytes
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalSendPackets() uint64 {
	if m != nil {
		return m.TotalSendPackets
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalSendBytesDropped() uint64 {
	if m != nil {
		return m.TotalSendBytesDropped
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalCollections() uint64 {
	if m != nil {
		return m.TotalCollections
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetTotalCollectionsMissed() uint64 {
	if m != nil {
		return m.TotalCollectionsMissed
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetMaxCollectionTime() uint64 {
	if m != nil {
		return m.MaxCollectionTime
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetMinCollectionTime() uint64 {
	if m != nil {
		return m.MinCollectionTime
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetAvgCollectionTime() uint64 {
	if m != nil {
		return m.AvgCollectionTime
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetCollectionMethod() uint64 {
	if m != nil {
		return m.CollectionMethod
	}
	return 0
}

func (m *MdtCollectionSysdbGroup) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// Per collection group information
type MdtCollectionGroup struct {
	// Collection Group id
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Period of the collections (ms)
	Cadence uint32 `protobuf:"varint,2,opt,name=cadence" json:"cadence,omitempty"`
	// Completed collections count
	TotalCollections uint32 `protobuf:"varint,3,opt,name=total_collections,json=totalCollections" json:"total_collections,omitempty"`
	// Destination group encoding
	Encoding string `protobuf:"bytes,4,opt,name=encoding" json:"encoding,omitempty"`
	// Timestamp of the start of last collection
	LastCollectionStartTime uint64 `protobuf:"varint,5,opt,name=last_collection_start_time,json=lastCollectionStartTime" json:"last_collection_start_time,omitempty"`
	// Timestamp of the end of last collection
	LastCollectionEndTime uint64 `protobuf:"varint,6,opt,name=last_collection_end_time,json=lastCollectionEndTime" json:"last_collection_end_time,omitempty"`
	// Maximum time for a collection (ms)
	MaxCollectionTime uint32 `protobuf:"varint,7,opt,name=max_collection_time,json=maxCollectionTime" json:"max_collection_time,omitempty"`
	// Minimum time for a collection (ms)
	MinCollectionTime uint32 `protobuf:"varint,8,opt,name=min_collection_time,json=minCollectionTime" json:"min_collection_time,omitempty"`
	// Minimum time for all processing (ms)
	MinTotalTime uint32 `protobuf:"varint,9,opt,name=min_total_time,json=minTotalTime" json:"min_total_time,omitempty"`
	// Maximum time for all processing (ms)
	MaxTotalTime uint32 `protobuf:"varint,10,opt,name=max_total_time,json=maxTotalTime" json:"max_total_time,omitempty"`
	// Average time for all processing (ms)
	AvgTotalTime uint32 `protobuf:"varint,11,opt,name=avg_total_time,json=avgTotalTime" json:"avg_total_time,omitempty"`
	// Total number of errors
	TotalOtherErrors uint32 `protobuf:"varint,12,opt,name=total_other_errors,json=totalOtherErrors" json:"total_other_errors,omitempty"`
	// Total number of no data instances
	TotalOnDataInstances uint32 `protobuf:"varint,13,opt,name=total_on_data_instances,json=totalOnDataInstances" json:"total_on_data_instances,omitempty"`
	// Total number skipped (not ready)
	TotalNotReady uint32 `protobuf:"varint,14,opt,name=total_not_ready,json=totalNotReady" json:"total_not_ready,omitempty"`
	// Total number of send errors
	TotalSendErrors uint32 `protobuf:"varint,15,opt,name=total_send_errors,json=totalSendErrors" json:"total_send_errors,omitempty"`
	// Total number of send drops
	TotalSendDrops uint32 `protobuf:"varint,16,opt,name=total_send_drops,json=totalSendDrops" json:"total_send_drops,omitempty"`
	// Array of information for sensor paths within collection group
	CollectionPaths []*MdtSensorPaths `protobuf:"bytes,17,rep,name=collection_paths,json=collectionPaths" json:"collection_paths,omitempty"`
	// Array of information for sysdb paths within collection group
	InternalCollectionGroup []*MdtCollectionSysdbGroup `protobuf:"bytes,18,rep,name=internal_collection_group,json=internalCollectionGroup" json:"internal_collection_group,omitempty"`
}

func (m *MdtCollectionGroup) Reset()                    { *m = MdtCollectionGroup{} }
func (m *MdtCollectionGroup) String() string            { return proto.CompactTextString(m) }
func (*MdtCollectionGroup) ProtoMessage()               {}
func (*MdtCollectionGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MdtCollectionGroup) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MdtCollectionGroup) GetCadence() uint32 {
	if m != nil {
		return m.Cadence
	}
	return 0
}

func (m *MdtCollectionGroup) GetTotalCollections() uint32 {
	if m != nil {
		return m.TotalCollections
	}
	return 0
}

func (m *MdtCollectionGroup) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *MdtCollectionGroup) GetLastCollectionStartTime() uint64 {
	if m != nil {
		return m.LastCollectionStartTime
	}
	return 0
}

func (m *MdtCollectionGroup) GetLastCollectionEndTime() uint64 {
	if m != nil {
		return m.LastCollectionEndTime
	}
	return 0
}

func (m *MdtCollectionGroup) GetMaxCollectionTime() uint32 {
	if m != nil {
		return m.MaxCollectionTime
	}
	return 0
}

func (m *MdtCollectionGroup) GetMinCollectionTime() uint32 {
	if m != nil {
		return m.MinCollectionTime
	}
	return 0
}

func (m *MdtCollectionGroup) GetMinTotalTime() uint32 {
	if m != nil {
		return m.MinTotalTime
	}
	return 0
}

func (m *MdtCollectionGroup) GetMaxTotalTime() uint32 {
	if m != nil {
		return m.MaxTotalTime
	}
	return 0
}

func (m *MdtCollectionGroup) GetAvgTotalTime() uint32 {
	if m != nil {
		return m.AvgTotalTime
	}
	return 0
}

func (m *MdtCollectionGroup) GetTotalOtherErrors() uint32 {
	if m != nil {
		return m.TotalOtherErrors
	}
	return 0
}

func (m *MdtCollectionGroup) GetTotalOnDataInstances() uint32 {
	if m != nil {
		return m.TotalOnDataInstances
	}
	return 0
}

func (m *MdtCollectionGroup) GetTotalNotReady() uint32 {
	if m != nil {
		return m.TotalNotReady
	}
	return 0
}

func (m *MdtCollectionGroup) GetTotalSendErrors() uint32 {
	if m != nil {
		return m.TotalSendErrors
	}
	return 0
}

func (m *MdtCollectionGroup) GetTotalSendDrops() uint32 {
	if m != nil {
		return m.TotalSendDrops
	}
	return 0
}

func (m *MdtCollectionGroup) GetCollectionPaths() []*MdtSensorPaths {
	if m != nil {
		return m.CollectionPaths
	}
	return nil
}

func (m *MdtCollectionGroup) GetInternalCollectionGroup() []*MdtCollectionSysdbGroup {
	if m != nil {
		return m.InternalCollectionGroup
	}
	return nil
}

// Per Destination information
type MdtDestination struct {
	// Destination Id
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Sub Idstr
	SubIdStr string `protobuf:"bytes,2,opt,name=sub_id_str,json=subIdStr" json:"sub_id_str,omitempty"`
	// Sub Id
	SubId []uint64 `protobuf:"varint,3,rep,packed,name=sub_id,json=subId" json:"sub_id,omitempty"`
	// Destination IP Address
	DestIpAddress *MdtDestinationIPAddress `protobuf:"bytes,4,opt,name=dest_ip_address,json=destIpAddress" json:"dest_ip_address,omitempty"`
	// Destination Port number
	DestPort uint32 `protobuf:"varint,5,opt,name=dest_port,json=destPort" json:"dest_port,omitempty"`
	// Destination group encoding
	Encoding string `protobuf:"bytes,6,opt,name=encoding" json:"encoding,omitempty"`
	// Destination group transport
	Transport string `protobuf:"bytes,7,opt,name=transport" json:"transport,omitempty"`
	// Destination group vrf
	Vrf string `protobuf:"bytes,8,opt,name=vrf" json:"vrf,omitempty"`
	// Destination group vrf id
	VrfId uint32 `protobuf:"varint,9,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
	// State of streaming on this destination
	State string `protobuf:"bytes,10,opt,name=state" json:"state,omitempty"`
	// UDP MTU if this destination is UDP
	UdpMtu uint32 `protobuf:"varint,11,opt,name=udp_mtu,json=udpMtu" json:"udp_mtu,omitempty"`
	// TLS connection to this destination
	Tls uint32 `protobuf:"varint,12,opt,name=tls" json:"tls,omitempty"`
	// TLS Hostname of this destination
	TlsHost string `protobuf:"bytes,13,opt,name=tls_host,json=tlsHost" json:"tls_host,omitempty"`
	// Total number of packets sent for this destination
	TotalNumOfPacketsSent uint64 `protobuf:"varint,14,opt,name=total_num_of_packets_sent,json=totalNumOfPacketsSent" json:"total_num_of_packets_sent,omitempty"`
	// Total number of bytes sent for this destination
	TotalNumOfBytesSent uint64 `protobuf:"varint,15,opt,name=total_num_of_bytes_sent,json=totalNumOfBytesSent" json:"total_num_of_bytes_sent,omitempty"`
	// Timestamp of the last collection
	LastCollectionTime uint64 `protobuf:"varint,16,opt,name=last_collection_time,json=lastCollectionTime" json:"last_collection_time,omitempty"`
	// DSCP setting for this destination
	Dscp uint32 `protobuf:"varint,17,opt,name=dscp" json:"dscp,omitempty"`
}

func (m *MdtDestination) Reset()                    { *m = MdtDestination{} }
func (m *MdtDestination) String() string            { return proto.CompactTextString(m) }
func (*MdtDestination) ProtoMessage()               {}
func (*MdtDestination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MdtDestination) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MdtDestination) GetSubIdStr() string {
	if m != nil {
		return m.SubIdStr
	}
	return ""
}

func (m *MdtDestination) GetSubId() []uint64 {
	if m != nil {
		return m.SubId
	}
	return nil
}

func (m *MdtDestination) GetDestIpAddress() *MdtDestinationIPAddress {
	if m != nil {
		return m.DestIpAddress
	}
	return nil
}

func (m *MdtDestination) GetDestPort() uint32 {
	if m != nil {
		return m.DestPort
	}
	return 0
}

func (m *MdtDestination) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *MdtDestination) GetTransport() string {
	if m != nil {
		return m.Transport
	}
	return ""
}

func (m *MdtDestination) GetVrf() string {
	if m != nil {
		return m.Vrf
	}
	return ""
}

func (m *MdtDestination) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

func (m *MdtDestination) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *MdtDestination) GetUdpMtu() uint32 {
	if m != nil {
		return m.UdpMtu
	}
	return 0
}

func (m *MdtDestination) GetTls() uint32 {
	if m != nil {
		return m.Tls
	}
	return 0
}

func (m *MdtDestination) GetTlsHost() string {
	if m != nil {
		return m.TlsHost
	}
	return ""
}

func (m *MdtDestination) GetTotalNumOfPacketsSent() uint64 {
	if m != nil {
		return m.TotalNumOfPacketsSent
	}
	return 0
}

func (m *MdtDestination) GetTotalNumOfBytesSent() uint64 {
	if m != nil {
		return m.TotalNumOfBytesSent
	}
	return 0
}

func (m *MdtDestination) GetLastCollectionTime() uint64 {
	if m != nil {
		return m.LastCollectionTime
	}
	return 0
}

func (m *MdtDestination) GetDscp() uint32 {
	if m != nil {
		return m.Dscp
	}
	return 0
}

// Per Destination Group information
type MdtDestinationGroup struct {
	// Destination Group name
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Set if this is configured destination group
	Configured uint32 `protobuf:"varint,2,opt,name=configured" json:"configured,omitempty"`
	// list of destinations defined in this group
	Destinations []*MdtDestination `protobuf:"bytes,3,rep,name=destinations" json:"destinations,omitempty"`
}

func (m *MdtDestinationGroup) Reset()                    { *m = MdtDestinationGroup{} }
func (m *MdtDestinationGroup) String() string            { return proto.CompactTextString(m) }
func (*MdtDestinationGroup) ProtoMessage()               {}
func (*MdtDestinationGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MdtDestinationGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MdtDestinationGroup) GetConfigured() uint32 {
	if m != nil {
		return m.Configured
	}
	return 0
}

func (m *MdtDestinationGroup) GetDestinations() []*MdtDestination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

// Per sensor group information
type MdtSensorGroup struct {
	// Sensor Group name
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Set if this is configured sensor group
	Configured uint32 `protobuf:"varint,2,opt,name=configured" json:"configured,omitempty"`
	// Array of information for sensor paths within sensor group
	SensorPaths []*MdtSensorPaths `protobuf:"bytes,3,rep,name=sensor_paths,json=sensorPaths" json:"sensor_paths,omitempty"`
}

func (m *MdtSensorGroup) Reset()                    { *m = MdtSensorGroup{} }
func (m *MdtSensorGroup) String() string            { return proto.CompactTextString(m) }
func (*MdtSensorGroup) ProtoMessage()               {}
func (*MdtSensorGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MdtSensorGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MdtSensorGroup) GetConfigured() uint32 {
	if m != nil {
		return m.Configured
	}
	return 0
}

func (m *MdtSensorGroup) GetSensorPaths() []*MdtSensorPaths {
	if m != nil {
		return m.SensorPaths
	}
	return nil
}

// Per sensor profile information
type MdtSensorProfile struct {
	// sensor group
	SensorGroup *MdtSensorGroup `protobuf:"bytes,1,opt,name=sensor_group,json=sensorGroup" json:"sensor_group,omitempty"`
	// Sample interval for the sensor group (ms)
	SampleInterval uint32 `protobuf:"varint,2,opt,name=sample_interval,json=sampleInterval" json:"sample_interval,omitempty"`
	// Heartbeat interval for the sensor group (s)
	HeartbeatInterval uint32 `protobuf:"varint,3,opt,name=heartbeat_interval,json=heartbeatInterval" json:"heartbeat_interval,omitempty"`
	// Suppress Redundant
	SuppressRedundant bool `protobuf:"varint,4,opt,name=suppress_redundant,json=suppressRedundant" json:"suppress_redundant,omitempty"`
}

func (m *MdtSensorProfile) Reset()                    { *m = MdtSensorProfile{} }
func (m *MdtSensorProfile) String() string            { return proto.CompactTextString(m) }
func (*MdtSensorProfile) ProtoMessage()               {}
func (*MdtSensorProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MdtSensorProfile) GetSensorGroup() *MdtSensorGroup {
	if m != nil {
		return m.SensorGroup
	}
	return nil
}

func (m *MdtSensorProfile) GetSampleInterval() uint32 {
	if m != nil {
		return m.SampleInterval
	}
	return 0
}

func (m *MdtSensorProfile) GetHeartbeatInterval() uint32 {
	if m != nil {
		return m.HeartbeatInterval
	}
	return 0
}

func (m *MdtSensorProfile) GetSuppressRedundant() bool {
	if m != nil {
		return m.SuppressRedundant
	}
	return false
}

// source interface information
type MdtSourceInterface struct {
	// Source Interface Name
	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
	// interface state
	State bool `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	// IPV4 Address
	Ipv4Address string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPV6 Address
	Ipv6Address string `protobuf:"bytes,4,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// Src Vrf Id
	VrfId uint32 `protobuf:"varint,5,opt,name=vrf_id,json=vrfId" json:"vrf_id,omitempty"`
}

func (m *MdtSourceInterface) Reset()                    { *m = MdtSourceInterface{} }
func (m *MdtSourceInterface) String() string            { return proto.CompactTextString(m) }
func (*MdtSourceInterface) ProtoMessage()               {}
func (*MdtSourceInterface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MdtSourceInterface) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *MdtSourceInterface) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *MdtSourceInterface) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *MdtSourceInterface) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *MdtSourceInterface) GetVrfId() uint32 {
	if m != nil {
		return m.VrfId
	}
	return 0
}

// Per subscription group information
type MdtSubscription struct {
	// Collection Subscription name
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Subscription state
	State string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	// configured source interface
	SourceInterface *MdtSourceInterface `protobuf:"bytes,3,opt,name=source_interface,json=sourceInterface" json:"source_interface,omitempty"`
	// DSCP
	SourceQosMarking string `protobuf:"bytes,4,opt,name=source_qos_marking,json=sourceQosMarking" json:"source_qos_marking,omitempty"`
	// List of sensor groups within a subscription
	SensorProfiles []*MdtSensorProfile `protobuf:"bytes,5,rep,name=sensor_profiles,json=sensorProfiles" json:"sensor_profiles,omitempty"`
	// Array of destinations within a subscription
	DestinationGrps []*MdtDestinationGroup `protobuf:"bytes,6,rep,name=destination_grps,json=destinationGrps" json:"destination_grps,omitempty"`
}

func (m *MdtSubscription) Reset()                    { *m = MdtSubscription{} }
func (m *MdtSubscription) String() string            { return proto.CompactTextString(m) }
func (*MdtSubscription) ProtoMessage()               {}
func (*MdtSubscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MdtSubscription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MdtSubscription) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *MdtSubscription) GetSourceInterface() *MdtSourceInterface {
	if m != nil {
		return m.SourceInterface
	}
	return nil
}

func (m *MdtSubscription) GetSourceQosMarking() string {
	if m != nil {
		return m.SourceQosMarking
	}
	return ""
}

func (m *MdtSubscription) GetSensorProfiles() []*MdtSensorProfile {
	if m != nil {
		return m.SensorProfiles
	}
	return nil
}

func (m *MdtSubscription) GetDestinationGrps() []*MdtDestinationGroup {
	if m != nil {
		return m.DestinationGrps
	}
	return nil
}

func init() {
	proto.RegisterType((*MdtSubscriptionDetails_KEYS)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_subscription_details_KEYS")
	proto.RegisterType((*MdtSubscriptionDetails)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_subscription_details")
	proto.RegisterType((*MdtIn6AddrT)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_in6_addr_t")
	proto.RegisterType((*MdtDestinationIPAddress)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.MdtDestinationIPAddress")
	proto.RegisterType((*MdtSensorPaths)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_sensor_paths")
	proto.RegisterType((*MdtCollectionSysdbGroup)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_collection_sysdb_group")
	proto.RegisterType((*MdtCollectionGroup)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_collection_group")
	proto.RegisterType((*MdtDestination)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_destination")
	proto.RegisterType((*MdtDestinationGroup)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_destination_group")
	proto.RegisterType((*MdtSensorGroup)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_sensor_group")
	proto.RegisterType((*MdtSensorProfile)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_sensor_profile")
	proto.RegisterType((*MdtSourceInterface)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_source_interface")
	proto.RegisterType((*MdtSubscription)(nil), "cisco_ios_xr_telemetry_model_driven_oper.telemetry_model_driven.subscriptions.subscription.mdt_subscription")
}

func init() { proto.RegisterFile("mdt_subscription_details.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x6f, 0x1c, 0xb7,
	0x15, 0xc7, 0x48, 0xab, 0xd5, 0x2e, 0xa5, 0xfd, 0x23, 0x5a, 0xb2, 0x46, 0xf2, 0x1f, 0xc8, 0x8b,
	0xd6, 0x15, 0x6a, 0x57, 0x75, 0x65, 0xd7, 0x36, 0xd0, 0x53, 0x6d, 0xa9, 0xf2, 0xa2, 0x95, 0xac,
	0x8e, 0x7c, 0x69, 0x7b, 0x18, 0x70, 0x97, 0x5c, 0x69, 0xaa, 0xf9, 0x67, 0x92, 0xb3, 0x90, 0xce,
	0x01, 0x72, 0x0b, 0x92, 0x5b, 0x0e, 0x4e, 0x3e, 0x42, 0x80, 0x20, 0xf7, 0x7c, 0x84, 0x9c, 0x92,
	0x4b, 0x3e, 0x40, 0xbe, 0x47, 0xc0, 0x47, 0xce, 0x0c, 0x67, 0x24, 0x01, 0x46, 0x00, 0xe9, 0x36,
	0x7c, 0xef, 0xf7, 0x23, 0x1f, 0x1f, 0xc9, 0x1f, 0x1f, 0x07, 0xdd, 0x8f, 0xa8, 0xf4, 0x45, 0x36,
	0x12, 0x63, 0x1e, 0xa4, 0x32, 0x48, 0x62, 0x9f, 0x32, 0x49, 0x82, 0x50, 0x6c, 0xa5, 0x3c, 0x91,
	0x09, 0xfe, 0xef, 0x38, 0x10, 0xe3, 0xc4, 0x0f, 0x12, 0xe1, 0x9f, 0x71, 0x5f, 0xb2, 0x90, 0x45,
	0x4c, 0xf2, 0x73, 0x3f, 0x4a, 0x28, 0x0b, 0x7d, 0xca, 0x83, 0x29, 0x8b, 0xfd, 0x24, 0x65, 0x7c,
	0xeb, 0x72, 0xdf, 0x96, 0xdd, 0xb7, 0xa8, 0xb4, 0x06, 0x6f, 0xd0, 0xbd, 0xab, 0x46, 0xf7, 0xff,
	0xb9, 0xfb, 0x9f, 0x23, 0xfc, 0x07, 0xd4, 0xab, 0x38, 0x03, 0xea, 0x3a, 0x1b, 0xce, 0x66, 0xdb,
	0xeb, 0xda, 0xe6, 0x21, 0x1d, 0xfc, 0x30, 0x83, 0xdc, 0xab, 0xba, 0xc2, 0x5f, 0x38, 0x68, 0xd1,
	0x76, 0xb8, 0xdb, 0x1b, 0xce, 0xe6, 0xc2, 0x76, 0xb8, 0x75, 0x7d, 0x53, 0xdb, 0xaa, 0x07, 0xe3,
	0x55, 0x22, 0xc0, 0x5f, 0x3b, 0x68, 0x69, 0x9c, 0x84, 0x21, 0x1b, 0x43, 0xa4, 0xc7, 0x3c, 0xc9,
	0x52, 0xe1, 0x3e, 0xdd, 0x98, 0xdd, 0x5c, 0xd8, 0x4e, 0xaf, 0x3b, 0xae, 0xfa, 0xc0, 0x5e, 0xbf,
	0xb4, 0xec, 0x41, 0x24, 0x83, 0x87, 0xa8, 0xab, 0x90, 0x41, 0xfc, 0xdc, 0x27, 0x94, 0x72, 0x5f,
	0xe2, 0x65, 0x34, 0x37, 0x25, 0x61, 0xc6, 0xcc, 0x02, 0xe8, 0xc6, 0xe0, 0x17, 0x07, 0xad, 0xee,
	0x53, 0xb9, 0xc3, 0x84, 0x0c, 0x62, 0x02, 0x8b, 0x71, 0xf8, 0x77, 0x4a, 0x39, 0x13, 0x02, 0xaf,
	0xa2, 0xf9, 0x20, 0xf5, 0xe5, 0x79, 0x9a, 0x73, 0x9a, 0x41, 0xfa, 0xee, 0x3c, 0x65, 0xf8, 0x01,
	0x5a, 0x0c, 0xd2, 0xe9, 0x33, 0xe8, 0x99, 0x09, 0xe1, 0xce, 0x80, 0x77, 0x41, 0xd9, 0x72, 0xee,
	0x67, 0x0e, 0x60, 0x9e, 0x17, 0x98, 0x59, 0x58, 0xb2, 0xff, 0x5f, 0x77, 0x6a, 0xca, 0x09, 0x43,
	0x3c, 0xcf, 0x4d, 0x3c, 0x83, 0xff, 0xa1, 0x3e, 0xac, 0x28, 0x8b, 0x45, 0xc2, 0xfd, 0x94, 0xc8,
	0x13, 0x81, 0x31, 0x6a, 0xa8, 0x0f, 0x33, 0x39, 0xf8, 0x56, 0x59, 0x12, 0x92, 0x48, 0x06, 0x73,
	0x6a, 0x79, 0xba, 0x81, 0xef, 0x21, 0xa4, 0x3e, 0x32, 0xe1, 0x0b, 0xc9, 0x61, 0x2a, 0x6d, 0xaf,
	0xad, 0x2d, 0x47, 0x92, 0x0f, 0x7e, 0x6c, 0xa3, 0xf5, 0xda, 0xba, 0x88, 0x73, 0x41, 0x47, 0x7a,
	0x75, 0x2e, 0x1d, 0xc7, 0x45, 0xf3, 0x63, 0x42, 0x59, 0x3c, 0xd6, 0x23, 0x35, 0xbc, 0xbc, 0x89,
	0x1f, 0xa2, 0x9e, 0x4c, 0x24, 0x09, 0xfd, 0x63, 0xa6, 0x7a, 0xcc, 0x62, 0x09, 0x03, 0x36, 0xbc,
	0x0e, 0x98, 0xf7, 0x98, 0x7c, 0xad, 0x8c, 0x78, 0x13, 0xf5, 0x35, 0x2e, 0x0c, 0x44, 0x0e, 0x6c,
	0x00, 0xb0, 0x0b, 0xf6, 0x7f, 0x05, 0xc2, 0x20, 0x9f, 0xa0, 0x65, 0x8d, 0xa4, 0x44, 0x12, 0x0b,
	0x3d, 0x07, 0x68, 0x0c, 0xbe, 0x1d, 0xe3, 0xaa, 0x31, 0x26, 0x41, 0x4c, 0x15, 0xcb, 0x30, 0x9a,
	0x16, 0xe3, 0x1f, 0xc6, 0xa5, 0x19, 0x7f, 0xce, 0x19, 0x2a, 0xea, 0x51, 0x16, 0x9e, 0x1a, 0xc6,
	0x3c, 0x30, 0x96, 0xf2, 0xd0, 0x5f, 0x65, 0xe1, 0x69, 0x2d, 0xfc, 0x40, 0xb2, 0xc8, 0x80, 0x5b,
	0x56, 0xf8, 0x43, 0xc9, 0xa2, 0x1a, 0x52, 0x75, 0xcd, 0x38, 0x4f, 0xb8, 0x70, 0xdb, 0x16, 0x72,
	0x8f, 0xc9, 0x5d, 0xb0, 0xe2, 0x3f, 0xa2, 0x25, 0x2b, 0x25, 0x06, 0x8a, 0x00, 0xda, 0x2b, 0x72,
	0x62, 0xb0, 0xdb, 0x68, 0xa5, 0x96, 0x14, 0x83, 0x5f, 0x00, 0xfc, 0xad, 0x4a, 0x56, 0xea, 0x9c,
	0x22, 0x2d, 0x86, 0xb3, 0x68, 0x71, 0xf2, 0xbc, 0x18, 0xce, 0x5f, 0x72, 0x4e, 0x91, 0x18, 0xc3,
	0xe9, 0x58, 0xb9, 0x34, 0x99, 0x31, 0x94, 0x2d, 0xa4, 0x7b, 0xf2, 0x59, 0x3c, 0x4e, 0x28, 0xcb,
	0x09, 0x5d, 0x2b, 0x95, 0xbb, 0xe0, 0xa9, 0x87, 0x65, 0xf0, 0x71, 0x22, 0x39, 0x23, 0xf4, 0xdc,
	0xed, 0x59, 0x61, 0x69, 0xc6, 0x81, 0x71, 0x95, 0xa9, 0x12, 0x2c, 0xa6, 0xf9, 0x08, 0x7d, 0x2b,
	0x55, 0x47, 0x2c, 0xa6, 0xa6, 0xff, 0x62, 0x01, 0x00, 0x4b, 0x79, 0x92, 0x0a, 0x77, 0xc9, 0x5a,
	0x00, 0x05, 0xdd, 0x51, 0xd6, 0x0a, 0x52, 0xfa, 0xa3, 0x73, 0xc9, 0x84, 0x8b, 0xab, 0x48, 0xf9,
	0x4a, 0x59, 0xf1, 0x63, 0x84, 0xad, 0x3e, 0x53, 0x32, 0x3e, 0x65, 0x52, 0xb8, 0xb7, 0x00, 0xdb,
	0x2f, 0x7a, 0x3d, 0xd4, 0x76, 0xfc, 0x02, 0xb9, 0x16, 0x1a, 0xfa, 0x85, 0x38, 0x52, 0x46, 0xdd,
	0x65, 0xe0, 0xac, 0x14, 0x1c, 0xe8, 0x7f, 0x47, 0x3b, 0xf1, 0xa3, 0x7c, 0x9a, 0xe5, 0xd1, 0x14,
	0xee, 0x8a, 0x35, 0xca, 0xeb, 0xd2, 0x8e, 0x5f, 0xe6, 0xa3, 0x58, 0x60, 0x3f, 0x0a, 0x84, 0x60,
	0xd4, 0xbd, 0x0d, 0x9c, 0xdb, 0x75, 0xce, 0x3e, 0x78, 0xd5, 0x8a, 0x45, 0xe4, 0xcc, 0x3e, 0xff,
	0x32, 0x88, 0x98, 0xbb, 0xaa, 0x57, 0x2c, 0x22, 0x67, 0x25, 0xe5, 0x5d, 0x10, 0x31, 0xc0, 0x07,
	0xf1, 0x05, 0xbc, 0x6b, 0xf0, 0x41, 0x7c, 0x11, 0x4f, 0xa6, 0xc7, 0x17, 0xf0, 0x6b, 0x1a, 0x4f,
	0xa6, 0xc7, 0x35, 0xfc, 0xa3, 0xca, 0xe5, 0x14, 0x31, 0x79, 0x92, 0x50, 0x77, 0x5d, 0x4f, 0xbb,
	0x74, 0xec, 0x83, 0x1d, 0xdf, 0x46, 0x4d, 0x2d, 0x65, 0xee, 0x1d, 0xad, 0xf2, 0xba, 0x35, 0xf8,
	0xa4, 0x85, 0x96, 0x2f, 0xbb, 0x6d, 0x70, 0x17, 0xcd, 0x98, 0x7b, 0xbc, 0xe1, 0xcd, 0x04, 0xb4,
	0xae, 0x65, 0x9d, 0x52, 0xcb, 0x2e, 0x4d, 0xff, 0x2c, 0x60, 0x2e, 0xa6, 0x7f, 0x1d, 0xb5, 0x60,
	0x03, 0x07, 0xf1, 0x31, 0x08, 0x59, 0xdb, 0x2b, 0xda, 0xf8, 0x6f, 0x68, 0x3d, 0x24, 0xa2, 0xaa,
	0xb0, 0x92, 0x70, 0xa9, 0xf3, 0xa0, 0x85, 0x6c, 0x55, 0x21, 0xca, 0x0e, 0x8f, 0x94, 0x1f, 0xb2,
	0xf1, 0x02, 0xb9, 0x75, 0xb2, 0xda, 0x46, 0x40, 0xd5, 0x8a, 0xb6, 0x52, 0xa5, 0xee, 0xc6, 0xb4,
	0x58, 0xa6, 0x4b, 0x96, 0x75, 0x1e, 0x26, 0xf0, 0xf1, 0xcb, 0xda, 0x32, 0xf8, 0x0b, 0xcb, 0xfa,
	0x3b, 0xd4, 0x55, 0x78, 0x9d, 0x22, 0x80, 0xb6, 0x01, 0xba, 0x18, 0x05, 0xf1, 0x3b, 0x65, 0x2c,
	0x50, 0xe4, 0xcc, 0x46, 0x21, 0x83, 0x22, 0x67, 0x15, 0x94, 0xda, 0x22, 0x16, 0x6a, 0x41, 0xa3,
	0xc8, 0xf4, 0xb8, 0x44, 0x15, 0xc7, 0x2e, 0x91, 0x27, 0x8c, 0xdb, 0xf2, 0x95, 0xaf, 0xc8, 0x5b,
	0xe5, 0x30, 0x07, 0xff, 0xaf, 0x68, 0xd5, 0xa0, 0x63, 0x90, 0x49, 0x3f, 0x88, 0x85, 0x24, 0xf1,
	0x98, 0x69, 0xf5, 0xea, 0x78, 0x5a, 0xf3, 0xdf, 0xc6, 0x4a, 0x27, 0x87, 0xb9, 0xaf, 0xbc, 0xc1,
	0xe2, 0x44, 0xfa, 0x5a, 0x89, 0xba, 0x00, 0xd7, 0x37, 0xd8, 0x41, 0x22, 0xbd, 0xab, 0x35, 0xa8,
	0x07, 0xc8, 0x8f, 0xd2, 0xa0, 0x3e, 0x40, 0xeb, 0x1a, 0xf4, 0xa5, 0x83, 0xac, 0x3d, 0xae, 0xaf,
	0x7a, 0x77, 0x09, 0x0a, 0xb3, 0xeb, 0x2f, 0x18, 0xad, 0xf2, 0xc2, 0xeb, 0x95, 0x51, 0x1c, 0x42,
	0xbd, 0xf1, 0x9d, 0x83, 0xd6, 0x82, 0x58, 0x32, 0x1e, 0x57, 0x4e, 0x84, 0x3e, 0x55, 0x2e, 0x86,
	0x10, 0xa7, 0x37, 0x58, 0x3b, 0x5a, 0x35, 0x8a, 0xb7, 0x9a, 0x07, 0xf6, 0xba, 0x5a, 0x49, 0x0e,
	0x3e, 0x9d, 0x43, 0x3d, 0xc5, 0xa3, 0x65, 0x85, 0x68, 0x09, 0x40, 0x1b, 0x04, 0xe0, 0x2e, 0x42,
	0x22, 0x1b, 0xf9, 0x01, 0x85, 0xf2, 0x48, 0x57, 0x83, 0x2d, 0x91, 0x8d, 0x86, 0xf4, 0x48, 0x72,
	0xbc, 0x82, 0x9a, 0xda, 0xeb, 0xce, 0x6e, 0xcc, 0x6e, 0x36, 0xbc, 0x39, 0xf0, 0xe0, 0x0f, 0x0e,
	0xea, 0xa9, 0x4e, 0xfd, 0x20, 0x2d, 0x8a, 0xc4, 0x06, 0x14, 0x89, 0xe2, 0x3a, 0x73, 0x70, 0x45,
	0xb1, 0xeb, 0x75, 0x54, 0x2c, 0xc3, 0x34, 0xaf, 0x5f, 0xef, 0xa0, 0x36, 0x04, 0x97, 0x26, 0x5c,
	0x17, 0x4a, 0x1d, 0xaf, 0xa5, 0x0c, 0x87, 0x09, 0x97, 0x15, 0xa5, 0x6a, 0xd6, 0x94, 0xea, 0x2e,
	0x6a, 0x4b, 0x4e, 0x62, 0x01, 0xc4, 0x79, 0x5d, 0x29, 0x16, 0x06, 0xdc, 0x47, 0xb3, 0x53, 0x3e,
	0x01, 0x45, 0x68, 0x7b, 0xea, 0x53, 0x65, 0x67, 0xca, 0x27, 0x2a, 0x3b, 0xfa, 0xec, 0xcf, 0x4d,
	0xf9, 0x64, 0x48, 0xcb, 0x3a, 0x14, 0xe9, 0x6a, 0x5d, 0xd7, 0xa1, 0xab, 0x68, 0x3e, 0xa3, 0xa9,
	0x1f, 0xc9, 0xcc, 0x9c, 0xee, 0x66, 0x46, 0xd3, 0x7d, 0x99, 0xa9, 0x7e, 0x65, 0x98, 0x1f, 0x64,
	0xf5, 0x89, 0xd7, 0x50, 0x4b, 0x86, 0xc2, 0x3f, 0x49, 0x84, 0x84, 0xc3, 0xda, 0xf6, 0xe6, 0x65,
	0x28, 0xde, 0x24, 0x42, 0xe2, 0x97, 0x68, 0xcd, 0x9c, 0xcf, 0x2c, 0xf2, 0x93, 0x49, 0x7e, 0xfb,
	0xc2, 0xa5, 0x6d, 0xaa, 0x0c, 0x7d, 0x9d, 0x1e, 0x64, 0xd1, 0xdb, 0x89, 0xb9, 0x83, 0xd5, 0xd5,
	0x8d, 0x9f, 0xe5, 0x82, 0x60, 0x98, 0xfa, 0x26, 0x06, 0x9e, 0x5d, 0x6b, 0x00, 0x0f, 0xee, 0x61,
	0x60, 0x3d, 0x41, 0xcb, 0x75, 0xfd, 0x05, 0x81, 0xd2, 0xe5, 0x06, 0xae, 0x6a, 0x2f, 0xc8, 0x14,
	0x46, 0x0d, 0x2a, 0xc6, 0x29, 0x54, 0x19, 0x1d, 0x0f, 0xbe, 0x07, 0x3f, 0x3b, 0x68, 0xa5, 0xb6,
	0x11, 0x2f, 0xdc, 0x47, 0x7a, 0x3b, 0xde, 0x47, 0x68, 0x9c, 0xc4, 0x93, 0xe0, 0x38, 0xe3, 0x8c,
	0x9a, 0x2b, 0xc9, 0xb2, 0xe0, 0xcf, 0x1d, 0xb4, 0x68, 0xf5, 0x22, 0x60, 0x5f, 0x2e, 0x6c, 0x9f,
	0x5e, 0xf7, 0xd1, 0xb3, 0xc6, 0xf4, 0x2a, 0x01, 0x0c, 0x7e, 0x72, 0x2a, 0xcf, 0x93, 0xdf, 0x3e,
	0x2d, 0x5b, 0x80, 0xcc, 0xb4, 0x6e, 0x56, 0xf4, 0x16, 0x74, 0x0b, 0x04, 0x6f, 0xf0, 0xcd, 0x0c,
	0xc2, 0x36, 0x82, 0x27, 0x93, 0x20, 0x64, 0x76, 0xa0, 0x5a, 0xfa, 0x9c, 0x1b, 0x7a, 0xce, 0x5b,
	0x63, 0xe6, 0x81, 0x82, 0xc8, 0xc1, 0x6f, 0x0a, 0x12, 0xa5, 0x21, 0xf3, 0x41, 0x06, 0xa7, 0x24,
	0x34, 0xf9, 0xed, 0x6a, 0xf3, 0xd0, 0x58, 0xf1, 0x9f, 0x10, 0x3e, 0x61, 0x84, 0xcb, 0x11, 0x23,
	0xb2, 0xc4, 0xea, 0x8a, 0x66, 0xa9, 0xf0, 0xd8, 0x70, 0x91, 0xa5, 0xa9, 0x52, 0x14, 0x9f, 0x33,
	0x9a, 0xc5, 0x94, 0x98, 0x57, 0x5a, 0xcb, 0x5b, 0xca, 0x3d, 0x5e, 0xee, 0x18, 0x7c, 0xeb, 0xe8,
	0x8a, 0x4b, 0x24, 0x19, 0x1f, 0x9b, 0x58, 0x26, 0x64, 0xcc, 0xf0, 0xef, 0x51, 0xb7, 0x68, 0xf8,
	0x31, 0x89, 0xf2, 0x07, 0x79, 0xa7, 0xb0, 0x1e, 0x90, 0x88, 0x5d, 0xf1, 0x78, 0xad, 0xbf, 0xd6,
	0x67, 0x2f, 0xbe, 0xd6, 0x1f, 0xd4, 0x1e, 0xeb, 0x8d, 0x02, 0x92, 0x3f, 0xa0, 0x2d, 0x9d, 0x9a,
	0xb3, 0x74, 0x6a, 0xf0, 0x7d, 0xc3, 0xec, 0x5c, 0xfb, 0xe7, 0x48, 0x7d, 0xe7, 0x56, 0xe2, 0x2a,
	0xc4, 0xec, 0x83, 0x83, 0xfa, 0xf5, 0x99, 0x9a, 0xdf, 0x04, 0xd7, 0xfe, 0x07, 0xa5, 0x3e, 0xae,
	0xd7, 0xd3, 0x96, 0x61, 0x91, 0xf2, 0xc7, 0x08, 0x1b, 0xd0, 0xfb, 0x44, 0xf8, 0x11, 0xe1, 0xa7,
	0x65, 0x5d, 0x6a, 0xc2, 0xfe, 0x77, 0x22, 0xf6, 0xb5, 0x5d, 0x15, 0x1d, 0xbd, 0xea, 0x2e, 0x17,
	0xee, 0x1c, 0x1c, 0xbf, 0xf8, 0xa6, 0x8e, 0x9f, 0x1e, 0xd6, 0xeb, 0x9a, 0x03, 0x68, 0xa2, 0xc0,
	0x5f, 0x39, 0xa8, 0x5f, 0x95, 0xcc, 0x54, 0xb8, 0x4d, 0x08, 0xed, 0xfd, 0x0d, 0x0a, 0x9e, 0x39,
	0x75, 0x3d, 0xcb, 0xb4, 0xc7, 0x53, 0x31, 0x6a, 0xc2, 0x4f, 0xca, 0xa7, 0xbf, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x44, 0xb0, 0xd5, 0xe8, 0xc6, 0x14, 0x00, 0x00,
}
