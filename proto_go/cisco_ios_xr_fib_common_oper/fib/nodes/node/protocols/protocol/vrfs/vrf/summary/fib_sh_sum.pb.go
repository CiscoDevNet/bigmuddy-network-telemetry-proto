// Code generated by protoc-gen-go.
// source: fib_sh_sum.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary is a generated protocol buffer package.

It is generated from these files:
	fib_sh_sum.proto

It has these top-level messages:
	FibShSum_KEYS
	FibShSum
	FibPlLdiCount
	FibShPfxMasklenCnt
	FibShPfxMasklenDistrib
*/
package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_vrfs_vrf_summary

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// FIB summary statistics
type FibShSum_KEYS struct {
	NodeName     string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	ProtocolName string `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName" json:"protocol_name,omitempty"`
	VrfName      string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
}

func (m *FibShSum_KEYS) Reset()                    { *m = FibShSum_KEYS{} }
func (m *FibShSum_KEYS) String() string            { return proto.CompactTextString(m) }
func (*FibShSum_KEYS) ProtoMessage()               {}
func (*FibShSum_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FibShSum_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *FibShSum_KEYS) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *FibShSum_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

type FibShSum struct {
	// The router-id
	Prefix []byte `protobuf:"bytes,50,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Table Id
	SsTblId uint32 `protobuf:"varint,51,opt,name=ss_tbl_id,json=ssTblId" json:"ss_tbl_id,omitempty"`
	// Table Id Ptr
	SsTblIdPtr uint32 `protobuf:"varint,52,opt,name=ss_tbl_id_ptr,json=ssTblIdPtr" json:"ss_tbl_id_ptr,omitempty"`
	// Virtual routing forwarding instance Id
	SsVrfId uint32 `protobuf:"varint,53,opt,name=ss_vrf_id,json=ssVrfId" json:"ss_vrf_id,omitempty"`
	// Virtual router instance Id
	SsVrId uint32 `protobuf:"varint,54,opt,name=ss_vr_id,json=ssVrId" json:"ss_vr_id,omitempty"`
	// LBA configuration state
	LoadBalancing string `protobuf:"bytes,55,opt,name=load_balancing,json=loadBalancing" json:"load_balancing,omitempty"`
	// Number of forwarding elements linked to the table
	ForwardingElements uint32 `protobuf:"varint,56,opt,name=forwarding_elements,json=forwardingElements" json:"forwarding_elements,omitempty"`
	// Number of routes
	Routes uint32 `protobuf:"varint,57,opt,name=routes" json:"routes,omitempty"`
	// Number of inplace modifications
	PrefixInPlaceModifications uint32 `protobuf:"varint,58,opt,name=prefix_in_place_modifications,json=prefixInPlaceModifications" json:"prefix_in_place_modifications,omitempty"`
	// Number of deleted stale leafs
	StalePrefixDeletes uint32 `protobuf:"varint,59,opt,name=stale_prefix_deletes,json=stalePrefixDeletes" json:"stale_prefix_deletes,omitempty"`
	// Count of load sharing elements
	LoadSharingElements uint32 `protobuf:"varint,60,opt,name=load_sharing_elements,json=loadSharingElements" json:"load_sharing_elements,omitempty"`
	// Count of load sharing references
	LoadSharingReferences uint64 `protobuf:"varint,61,opt,name=load_sharing_references,json=loadSharingReferences" json:"load_sharing_references,omitempty"`
	// Total memory used by load sharing elements
	TotalLoadShareElementBytes uint32 `protobuf:"varint,62,opt,name=total_load_share_element_bytes,json=totalLoadShareElementBytes" json:"total_load_share_element_bytes,omitempty"`
	// Exclusive load sharing element
	ExclusiveLoadSharingElement *FibPlLdiCount `protobuf:"bytes,63,opt,name=exclusive_load_sharing_element,json=exclusiveLoadSharingElement" json:"exclusive_load_sharing_element,omitempty"`
	// Shared load sharing element
	SharedLoadSharingElement *FibPlLdiCount `protobuf:"bytes,64,opt,name=shared_load_sharing_element,json=sharedLoadSharingElement" json:"shared_load_sharing_element,omitempty"`
	// Cross-table shared load sharing element
	CrossSharedLoadSharingElement *FibPlLdiCount `protobuf:"bytes,65,opt,name=cross_shared_load_sharing_element,json=crossSharedLoadSharingElement" json:"cross_shared_load_sharing_element,omitempty"`
	// Label-shared load sharing element
	LabelSharedLoadSharingElement *FibPlLdiCount `protobuf:"bytes,66,opt,name=label_shared_load_sharing_element,json=labelSharedLoadSharingElement" json:"label_shared_load_sharing_element,omitempty"`
	// Total memory used by leaves
	LeavesUsedBytes uint32 `protobuf:"varint,67,opt,name=leaves_used_bytes,json=leavesUsedBytes" json:"leaves_used_bytes,omitempty"`
	// Number of reresolved entries
	ReresolveEntries uint32 `protobuf:"varint,68,opt,name=reresolve_entries,json=reresolveEntries" json:"reresolve_entries,omitempty"`
	// Number of old unresolved entries
	OldUnresolveEntries uint32 `protobuf:"varint,69,opt,name=old_unresolve_entries,json=oldUnresolveEntries" json:"old_unresolve_entries,omitempty"`
	// Number of new unresolved entries
	NewUnresolveEntries uint32 `protobuf:"varint,70,opt,name=new_unresolve_entries,json=newUnresolveEntries" json:"new_unresolve_entries,omitempty"`
	// Number of total unresolved entries
	UnresolveEntries uint32 `protobuf:"varint,71,opt,name=unresolve_entries,json=unresolveEntries" json:"unresolve_entries,omitempty"`
	// Number of routes dropped by CEF
	CefRouteDrops uint32 `protobuf:"varint,72,opt,name=cef_route_drops,json=cefRouteDrops" json:"cef_route_drops,omitempty"`
	// the number of routes dropped due to version mismatch
	CefVersionMismatchRouteDrops uint64 `protobuf:"varint,73,opt,name=cef_version_mismatch_route_drops,json=cefVersionMismatchRouteDrops" json:"cef_version_mismatch_route_drops,omitempty"`
	// Number of entries in the route delete cache
	DeleteCacheNumEntries uint32 `protobuf:"varint,74,opt,name=delete_cache_num_entries,json=deleteCacheNumEntries" json:"delete_cache_num_entries,omitempty"`
	// Number of entries present on addition
	ExistingLeavesRevisions uint32 `protobuf:"varint,75,opt,name=existing_leaves_revisions,json=existingLeavesRevisions" json:"existing_leaves_revisions,omitempty"`
	// Default prefix
	FibDefaultPrefix uint32 `protobuf:"varint,76,opt,name=fib_default_prefix,json=fibDefaultPrefix" json:"fib_default_prefix,omitempty"`
	// Default prefix mask length
	FibDefaultPrefixMaskLength uint32 `protobuf:"varint,77,opt,name=fib_default_prefix_mask_length,json=fibDefaultPrefixMaskLength" json:"fib_default_prefix_mask_length,omitempty"`
	// Number of NHINFOS
	NextHops uint32 `protobuf:"varint,78,opt,name=next_hops,json=nextHops" json:"next_hops,omitempty"`
	// Number of incomplete NHINFOS
	IncompleteNextHops uint32 `protobuf:"varint,79,opt,name=incomplete_next_hops,json=incompleteNextHops" json:"incomplete_next_hops,omitempty"`
	// IP CEF resolution timer in seconds
	ResolutionTimer uint32 `protobuf:"varint,80,opt,name=resolution_timer,json=resolutionTimer" json:"resolution_timer,omitempty"`
	// IP CEF slow processing time in seconds
	SlowProcessTimer uint32 `protobuf:"varint,81,opt,name=slow_process_timer,json=slowProcessTimer" json:"slow_process_timer,omitempty"`
	// IP CEF max resolution time in seconds
	MaxResolutionTimer uint32 `protobuf:"varint,82,opt,name=max_resolution_timer,json=maxResolutionTimer" json:"max_resolution_timer,omitempty"`
	// Number of prefixes with imposition LDI
	ImpositionPrefixes uint32 `protobuf:"varint,83,opt,name=imposition_prefixes,json=impositionPrefixes" json:"imposition_prefixes,omitempty"`
	// Number of prefixes with extended path-list
	ExtendedPrefixes uint32 `protobuf:"varint,84,opt,name=extended_prefixes,json=extendedPrefixes" json:"extended_prefixes,omitempty"`
	// Number of routes updates with recycled label handled
	CeflBlRecycledRoutes uint32 `protobuf:"varint,85,opt,name=cefl_bl_recycled_routes,json=ceflBlRecycledRoutes" json:"cefl_bl_recycled_routes,omitempty"`
	// pd backwalks on LDI modify with backup path
	LdiBackwalks uint32 `protobuf:"varint,86,opt,name=ldi_backwalks,json=ldiBackwalks" json:"ldi_backwalks,omitempty"`
	// Number of routes with FRR protection
	SsProtRouteCount uint32 `protobuf:"varint,87,opt,name=ss_prot_route_count,json=ssProtRouteCount" json:"ss_prot_route_count,omitempty"`
	// Number of lisp eid prefixes associated with table
	LispEidPrefixes uint32 `protobuf:"varint,88,opt,name=lisp_eid_prefixes,json=lispEidPrefixes" json:"lisp_eid_prefixes,omitempty"`
	// Number of lisp eid prefixes eligible for forwarding
	LispEidValidPrefixes uint32 `protobuf:"varint,89,opt,name=lisp_eid_valid_prefixes,json=lispEidValidPrefixes" json:"lisp_eid_valid_prefixes,omitempty"`
	// Number of lisp rloc objects associated with table
	LispRlocObjects uint32 `protobuf:"varint,90,opt,name=lisp_rloc_objects,json=lispRlocObjects" json:"lisp_rloc_objects,omitempty"`
	// VXLAN local Interface handle
	SsVxlanLtepIfh string `protobuf:"bytes,91,opt,name=ss_vxlan_ltep_ifh,json=ssVxlanLtepIfh" json:"ss_vxlan_ltep_ifh,omitempty"`
	// Number of dropped pathlists
	SsDropPlCount uint32 `protobuf:"varint,92,opt,name=ss_drop_pl_count,json=ssDropPlCount" json:"ss_drop_pl_count,omitempty"`
	// Distribution of prefix mask lengths
	PrefixMasklenDistribution *FibShPfxMasklenDistrib `protobuf:"bytes,93,opt,name=prefix_masklen_distribution,json=prefixMasklenDistribution" json:"prefix_masklen_distribution,omitempty"`
}

func (m *FibShSum) Reset()                    { *m = FibShSum{} }
func (m *FibShSum) String() string            { return proto.CompactTextString(m) }
func (*FibShSum) ProtoMessage()               {}
func (*FibShSum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FibShSum) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *FibShSum) GetSsTblId() uint32 {
	if m != nil {
		return m.SsTblId
	}
	return 0
}

func (m *FibShSum) GetSsTblIdPtr() uint32 {
	if m != nil {
		return m.SsTblIdPtr
	}
	return 0
}

func (m *FibShSum) GetSsVrfId() uint32 {
	if m != nil {
		return m.SsVrfId
	}
	return 0
}

func (m *FibShSum) GetSsVrId() uint32 {
	if m != nil {
		return m.SsVrId
	}
	return 0
}

func (m *FibShSum) GetLoadBalancing() string {
	if m != nil {
		return m.LoadBalancing
	}
	return ""
}

func (m *FibShSum) GetForwardingElements() uint32 {
	if m != nil {
		return m.ForwardingElements
	}
	return 0
}

func (m *FibShSum) GetRoutes() uint32 {
	if m != nil {
		return m.Routes
	}
	return 0
}

func (m *FibShSum) GetPrefixInPlaceModifications() uint32 {
	if m != nil {
		return m.PrefixInPlaceModifications
	}
	return 0
}

func (m *FibShSum) GetStalePrefixDeletes() uint32 {
	if m != nil {
		return m.StalePrefixDeletes
	}
	return 0
}

func (m *FibShSum) GetLoadSharingElements() uint32 {
	if m != nil {
		return m.LoadSharingElements
	}
	return 0
}

func (m *FibShSum) GetLoadSharingReferences() uint64 {
	if m != nil {
		return m.LoadSharingReferences
	}
	return 0
}

func (m *FibShSum) GetTotalLoadShareElementBytes() uint32 {
	if m != nil {
		return m.TotalLoadShareElementBytes
	}
	return 0
}

func (m *FibShSum) GetExclusiveLoadSharingElement() *FibPlLdiCount {
	if m != nil {
		return m.ExclusiveLoadSharingElement
	}
	return nil
}

func (m *FibShSum) GetSharedLoadSharingElement() *FibPlLdiCount {
	if m != nil {
		return m.SharedLoadSharingElement
	}
	return nil
}

func (m *FibShSum) GetCrossSharedLoadSharingElement() *FibPlLdiCount {
	if m != nil {
		return m.CrossSharedLoadSharingElement
	}
	return nil
}

func (m *FibShSum) GetLabelSharedLoadSharingElement() *FibPlLdiCount {
	if m != nil {
		return m.LabelSharedLoadSharingElement
	}
	return nil
}

func (m *FibShSum) GetLeavesUsedBytes() uint32 {
	if m != nil {
		return m.LeavesUsedBytes
	}
	return 0
}

func (m *FibShSum) GetReresolveEntries() uint32 {
	if m != nil {
		return m.ReresolveEntries
	}
	return 0
}

func (m *FibShSum) GetOldUnresolveEntries() uint32 {
	if m != nil {
		return m.OldUnresolveEntries
	}
	return 0
}

func (m *FibShSum) GetNewUnresolveEntries() uint32 {
	if m != nil {
		return m.NewUnresolveEntries
	}
	return 0
}

func (m *FibShSum) GetUnresolveEntries() uint32 {
	if m != nil {
		return m.UnresolveEntries
	}
	return 0
}

func (m *FibShSum) GetCefRouteDrops() uint32 {
	if m != nil {
		return m.CefRouteDrops
	}
	return 0
}

func (m *FibShSum) GetCefVersionMismatchRouteDrops() uint64 {
	if m != nil {
		return m.CefVersionMismatchRouteDrops
	}
	return 0
}

func (m *FibShSum) GetDeleteCacheNumEntries() uint32 {
	if m != nil {
		return m.DeleteCacheNumEntries
	}
	return 0
}

func (m *FibShSum) GetExistingLeavesRevisions() uint32 {
	if m != nil {
		return m.ExistingLeavesRevisions
	}
	return 0
}

func (m *FibShSum) GetFibDefaultPrefix() uint32 {
	if m != nil {
		return m.FibDefaultPrefix
	}
	return 0
}

func (m *FibShSum) GetFibDefaultPrefixMaskLength() uint32 {
	if m != nil {
		return m.FibDefaultPrefixMaskLength
	}
	return 0
}

func (m *FibShSum) GetNextHops() uint32 {
	if m != nil {
		return m.NextHops
	}
	return 0
}

func (m *FibShSum) GetIncompleteNextHops() uint32 {
	if m != nil {
		return m.IncompleteNextHops
	}
	return 0
}

func (m *FibShSum) GetResolutionTimer() uint32 {
	if m != nil {
		return m.ResolutionTimer
	}
	return 0
}

func (m *FibShSum) GetSlowProcessTimer() uint32 {
	if m != nil {
		return m.SlowProcessTimer
	}
	return 0
}

func (m *FibShSum) GetMaxResolutionTimer() uint32 {
	if m != nil {
		return m.MaxResolutionTimer
	}
	return 0
}

func (m *FibShSum) GetImpositionPrefixes() uint32 {
	if m != nil {
		return m.ImpositionPrefixes
	}
	return 0
}

func (m *FibShSum) GetExtendedPrefixes() uint32 {
	if m != nil {
		return m.ExtendedPrefixes
	}
	return 0
}

func (m *FibShSum) GetCeflBlRecycledRoutes() uint32 {
	if m != nil {
		return m.CeflBlRecycledRoutes
	}
	return 0
}

func (m *FibShSum) GetLdiBackwalks() uint32 {
	if m != nil {
		return m.LdiBackwalks
	}
	return 0
}

func (m *FibShSum) GetSsProtRouteCount() uint32 {
	if m != nil {
		return m.SsProtRouteCount
	}
	return 0
}

func (m *FibShSum) GetLispEidPrefixes() uint32 {
	if m != nil {
		return m.LispEidPrefixes
	}
	return 0
}

func (m *FibShSum) GetLispEidValidPrefixes() uint32 {
	if m != nil {
		return m.LispEidValidPrefixes
	}
	return 0
}

func (m *FibShSum) GetLispRlocObjects() uint32 {
	if m != nil {
		return m.LispRlocObjects
	}
	return 0
}

func (m *FibShSum) GetSsVxlanLtepIfh() string {
	if m != nil {
		return m.SsVxlanLtepIfh
	}
	return ""
}

func (m *FibShSum) GetSsDropPlCount() uint32 {
	if m != nil {
		return m.SsDropPlCount
	}
	return 0
}

func (m *FibShSum) GetPrefixMasklenDistribution() *FibShPfxMasklenDistrib {
	if m != nil {
		return m.PrefixMasklenDistribution
	}
	return nil
}

// FIB Pathlist and Loadinfo summary
type FibPlLdiCount struct {
	// Total memory used by load sharing elements in bytes
	TotalLoadSharingElementBytes uint32 `protobuf:"varint,1,opt,name=total_load_sharing_element_bytes,json=totalLoadSharingElementBytes" json:"total_load_sharing_element_bytes,omitempty"`
	// Total count of references to load sharing elements
	TotalLoadSharingElementReferences uint64 `protobuf:"varint,2,opt,name=total_load_sharing_element_references,json=totalLoadSharingElementReferences" json:"total_load_sharing_element_references,omitempty"`
	// Total count of Pathlist elements
	TotalPathListElements uint32 `protobuf:"varint,3,opt,name=total_path_list_elements,json=totalPathListElements" json:"total_path_list_elements,omitempty"`
	// Count of recursive Pathlist elements
	RecursivePathListElements uint32 `protobuf:"varint,4,opt,name=recursive_path_list_elements,json=recursivePathListElements" json:"recursive_path_list_elements,omitempty"`
	// Count of platform shared Pathlist elements
	PlatformSharedPathListElements uint32 `protobuf:"varint,5,opt,name=platform_shared_path_list_elements,json=platformSharedPathListElements" json:"platform_shared_path_list_elements,omitempty"`
	// Count of Pathlist elements in retry
	RetryPathListElements uint32 `protobuf:"varint,6,opt,name=retry_path_list_elements,json=retryPathListElements" json:"retry_path_list_elements,omitempty"`
	// Total count of Loadinfo elements
	TotalLoadInfoElements uint32 `protobuf:"varint,7,opt,name=total_load_info_elements,json=totalLoadInfoElements" json:"total_load_info_elements,omitempty"`
	// Count of recursive Loadinfo elements
	RecursiveLoadInfoElements uint32 `protobuf:"varint,8,opt,name=recursive_load_info_elements,json=recursiveLoadInfoElements" json:"recursive_load_info_elements,omitempty"`
	// Count of platform shared Loadinfo elements
	PlatformSharedLoadInfoElements uint32 `protobuf:"varint,9,opt,name=platform_shared_load_info_elements,json=platformSharedLoadInfoElements" json:"platform_shared_load_info_elements,omitempty"`
	// Count of XPL Loadinfo elements
	XplLoadInfoElements uint32 `protobuf:"varint,10,opt,name=xpl_load_info_elements,json=xplLoadInfoElements" json:"xpl_load_info_elements,omitempty"`
}

func (m *FibPlLdiCount) Reset()                    { *m = FibPlLdiCount{} }
func (m *FibPlLdiCount) String() string            { return proto.CompactTextString(m) }
func (*FibPlLdiCount) ProtoMessage()               {}
func (*FibPlLdiCount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FibPlLdiCount) GetTotalLoadSharingElementBytes() uint32 {
	if m != nil {
		return m.TotalLoadSharingElementBytes
	}
	return 0
}

func (m *FibPlLdiCount) GetTotalLoadSharingElementReferences() uint64 {
	if m != nil {
		return m.TotalLoadSharingElementReferences
	}
	return 0
}

func (m *FibPlLdiCount) GetTotalPathListElements() uint32 {
	if m != nil {
		return m.TotalPathListElements
	}
	return 0
}

func (m *FibPlLdiCount) GetRecursivePathListElements() uint32 {
	if m != nil {
		return m.RecursivePathListElements
	}
	return 0
}

func (m *FibPlLdiCount) GetPlatformSharedPathListElements() uint32 {
	if m != nil {
		return m.PlatformSharedPathListElements
	}
	return 0
}

func (m *FibPlLdiCount) GetRetryPathListElements() uint32 {
	if m != nil {
		return m.RetryPathListElements
	}
	return 0
}

func (m *FibPlLdiCount) GetTotalLoadInfoElements() uint32 {
	if m != nil {
		return m.TotalLoadInfoElements
	}
	return 0
}

func (m *FibPlLdiCount) GetRecursiveLoadInfoElements() uint32 {
	if m != nil {
		return m.RecursiveLoadInfoElements
	}
	return 0
}

func (m *FibPlLdiCount) GetPlatformSharedLoadInfoElements() uint32 {
	if m != nil {
		return m.PlatformSharedLoadInfoElements
	}
	return 0
}

func (m *FibPlLdiCount) GetXplLoadInfoElements() uint32 {
	if m != nil {
		return m.XplLoadInfoElements
	}
	return 0
}

// FIB Prefix Masklength counts
type FibShPfxMasklenCnt struct {
	// Mask length
	MaskLength uint32 `protobuf:"varint,1,opt,name=mask_length,json=maskLength" json:"mask_length,omitempty"`
	// Number of prefixes with given mask length
	NumberOfPrefixes uint32 `protobuf:"varint,2,opt,name=number_of_prefixes,json=numberOfPrefixes" json:"number_of_prefixes,omitempty"`
}

func (m *FibShPfxMasklenCnt) Reset()                    { *m = FibShPfxMasklenCnt{} }
func (m *FibShPfxMasklenCnt) String() string            { return proto.CompactTextString(m) }
func (*FibShPfxMasklenCnt) ProtoMessage()               {}
func (*FibShPfxMasklenCnt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FibShPfxMasklenCnt) GetMaskLength() uint32 {
	if m != nil {
		return m.MaskLength
	}
	return 0
}

func (m *FibShPfxMasklenCnt) GetNumberOfPrefixes() uint32 {
	if m != nil {
		return m.NumberOfPrefixes
	}
	return 0
}

// FIB Prefix Masklengths distribution
type FibShPfxMasklenDistrib struct {
	// Masklength counts for unicast prefixes
	UnicastPrefixes []*FibShPfxMasklenCnt `protobuf:"bytes,1,rep,name=unicast_prefixes,json=unicastPrefixes" json:"unicast_prefixes,omitempty"`
	// Masklength counts for broadcast prefixes
	BroadcastPrefixes []*FibShPfxMasklenCnt `protobuf:"bytes,2,rep,name=broadcast_prefixes,json=broadcastPrefixes" json:"broadcast_prefixes,omitempty"`
	// Masklength counts for multicast prefixes
	MulticastPrefix []*FibShPfxMasklenCnt `protobuf:"bytes,3,rep,name=multicast_prefix,json=multicastPrefix" json:"multicast_prefix,omitempty"`
}

func (m *FibShPfxMasklenDistrib) Reset()                    { *m = FibShPfxMasklenDistrib{} }
func (m *FibShPfxMasklenDistrib) String() string            { return proto.CompactTextString(m) }
func (*FibShPfxMasklenDistrib) ProtoMessage()               {}
func (*FibShPfxMasklenDistrib) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FibShPfxMasklenDistrib) GetUnicastPrefixes() []*FibShPfxMasklenCnt {
	if m != nil {
		return m.UnicastPrefixes
	}
	return nil
}

func (m *FibShPfxMasklenDistrib) GetBroadcastPrefixes() []*FibShPfxMasklenCnt {
	if m != nil {
		return m.BroadcastPrefixes
	}
	return nil
}

func (m *FibShPfxMasklenDistrib) GetMulticastPrefix() []*FibShPfxMasklenCnt {
	if m != nil {
		return m.MulticastPrefix
	}
	return nil
}

func init() {
	proto.RegisterType((*FibShSum_KEYS)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_sum_KEYS")
	proto.RegisterType((*FibShSum)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_sum")
	proto.RegisterType((*FibPlLdiCount)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_pl_ldi_count")
	proto.RegisterType((*FibShPfxMasklenCnt)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_pfx_masklen_cnt")
	proto.RegisterType((*FibShPfxMasklenDistrib)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.vrfs.vrf.summary.fib_sh_pfx_masklen_distrib")
}

func init() { proto.RegisterFile("fib_sh_sum.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x56, 0x14, 0xb9,
	0x16, 0x5e, 0x0d, 0x8a, 0x10, 0x45, 0xa0, 0x40, 0x2d, 0x44, 0x3d, 0x88, 0xcb, 0x73, 0xf0, 0xe8,
	0x41, 0x17, 0x1e, 0xe5, 0x1c, 0xcf, 0x8f, 0x23, 0x82, 0x23, 0xca, 0x4f, 0x4f, 0xa3, 0xcc, 0x38,
	0x3f, 0x2b, 0x2b, 0x9d, 0xda, 0x45, 0x67, 0x48, 0x25, 0xb5, 0x92, 0x54, 0xd3, 0xbc, 0xc6, 0x5c,
	0xcc, 0xf5, 0x5c, 0x79, 0xe3, 0x43, 0xcd, 0x23, 0xcc, 0x2b, 0xcc, 0x4a, 0x52, 0x55, 0x5d, 0xd0,
	0x25, 0x57, 0x33, 0xdc, 0xb0, 0xe8, 0xfd, 0x7d, 0xdf, 0xce, 0xb7, 0x77, 0x25, 0x3b, 0x41, 0x93,
	0x31, 0x6b, 0x63, 0xdd, 0xc1, 0x3a, 0x4b, 0x96, 0x52, 0x25, 0x8d, 0x0c, 0x76, 0x28, 0xd3, 0x54,
	0x62, 0x26, 0x35, 0xee, 0x29, 0x6c, 0x61, 0x2a, 0x93, 0x44, 0x0a, 0x2c, 0x53, 0x50, 0x4b, 0x31,
	0x6b, 0x2f, 0x09, 0x19, 0x81, 0x76, 0x7f, 0xbd, 0x84, 0x4a, 0xae, 0xcb, 0xff, 0x96, 0xba, 0x2a,
	0xd6, 0xf6, 0xcf, 0x92, 0xce, 0x92, 0x84, 0xa8, 0xa3, 0x05, 0x81, 0x26, 0xfa, 0x8b, 0xe0, 0xb7,
	0xeb, 0x1f, 0x76, 0x83, 0x39, 0x34, 0x66, 0xe5, 0x58, 0x90, 0x04, 0xc2, 0xc6, 0x7c, 0x63, 0x71,
	0xac, 0x35, 0x6a, 0x03, 0xdb, 0x24, 0x81, 0xe0, 0x0e, 0x1a, 0x2f, 0x92, 0x79, 0xc2, 0x90, 0x23,
	0x5c, 0x2a, 0x82, 0x8e, 0x34, 0x8b, 0x46, 0xbb, 0x2a, 0xf6, 0xf8, 0xb0, 0xc3, 0x2f, 0x74, 0x55,
	0x6c, 0xa1, 0x85, 0xdf, 0x66, 0x10, 0xea, 0x2f, 0x18, 0x5c, 0x45, 0x23, 0xa9, 0x82, 0x98, 0xf5,
	0xc2, 0xe5, 0xf9, 0xc6, 0xe2, 0xa5, 0x56, 0xfe, 0x2b, 0xb8, 0x8e, 0xc6, 0xb4, 0xc6, 0xa6, 0xcd,
	0x31, 0x8b, 0xc2, 0xc7, 0xf3, 0x8d, 0xc5, 0xf1, 0xd6, 0x05, 0xad, 0xdf, 0xb5, 0xf9, 0x46, 0x14,
	0xdc, 0x46, 0xe3, 0x25, 0x86, 0x53, 0xa3, 0xc2, 0x7f, 0x3a, 0x1c, 0xe5, 0x78, 0xd3, 0xa8, 0x5c,
	0x6e, 0x3d, 0xb0, 0x28, 0x7c, 0x52, 0xc8, 0xf7, 0x54, 0xbc, 0x11, 0x05, 0x21, 0x1a, 0x75, 0x98,
	0x85, 0x9e, 0x3a, 0x68, 0xc4, 0x42, 0x1b, 0x51, 0x70, 0x17, 0x5d, 0xe6, 0x92, 0x44, 0xb8, 0x4d,
	0x38, 0x11, 0x94, 0x89, 0xfd, 0x70, 0xc5, 0x99, 0x1f, 0xb7, 0xd1, 0xd5, 0x22, 0x18, 0x3c, 0x44,
	0xd3, 0xb1, 0x54, 0x87, 0x44, 0x45, 0x4c, 0xec, 0x63, 0xe0, 0x90, 0x80, 0x30, 0x3a, 0xfc, 0x97,
	0xcb, 0x15, 0xf4, 0xa1, 0xf5, 0x1c, 0xb1, 0x45, 0x2a, 0x99, 0x19, 0xd0, 0xe1, 0xbf, 0xfd, 0x7a,
	0xfe, 0x57, 0xf0, 0x02, 0xdd, 0xf4, 0xe5, 0x62, 0x26, 0x70, 0xca, 0x09, 0x05, 0x9c, 0xc8, 0x88,
	0xc5, 0x8c, 0x12, 0xc3, 0xa4, 0xd0, 0xe1, 0x33, 0x47, 0xbf, 0xee, 0x49, 0x1b, 0xa2, 0x69, 0x29,
	0x5b, 0x55, 0x46, 0xf0, 0x08, 0xcd, 0x68, 0x43, 0x38, 0xe0, 0x3c, 0x51, 0x04, 0x1c, 0xec, 0x42,
	0xff, 0xf1, 0x66, 0x1c, 0xd6, 0x74, 0xd0, 0x9a, 0x47, 0x82, 0x65, 0x74, 0xc5, 0x15, 0xa9, 0x3b,
	0x44, 0x1d, 0xf3, 0xff, 0x5f, 0x27, 0x99, 0xb6, 0xe0, 0xae, 0xc7, 0xca, 0x02, 0x9e, 0xa2, 0x6b,
	0xc7, 0x34, 0x0a, 0x62, 0x50, 0x20, 0x28, 0xe8, 0xf0, 0x7f, 0xf3, 0x8d, 0xc5, 0x73, 0xad, 0x2b,
	0x15, 0x55, 0xab, 0x04, 0x83, 0x55, 0x74, 0xcb, 0x48, 0x43, 0x38, 0x2e, 0xd5, 0x50, 0xac, 0x87,
	0xdb, 0x47, 0xd6, 0xe7, 0xff, 0x7d, 0x85, 0x8e, 0xb5, 0x99, 0xe7, 0x80, 0x7c, 0xdd, 0x55, 0xcb,
	0x08, 0x3e, 0x36, 0xd0, 0x2d, 0xe8, 0x51, 0x9e, 0x69, 0xd6, 0x05, 0x5c, 0x67, 0x3d, 0x7c, 0x3e,
	0xdf, 0x58, 0xbc, 0xb8, 0x4c, 0x96, 0xfe, 0xe0, 0xb3, 0x61, 0x25, 0x38, 0xe5, 0x98, 0x47, 0x0c,
	0x53, 0x99, 0x09, 0xd3, 0x9a, 0x2b, 0x8d, 0x6c, 0x0e, 0x74, 0x29, 0xf8, 0xa5, 0x81, 0xe6, 0x5c,
	0x89, 0x51, 0xbd, 0xcb, 0x2f, 0xce, 0xca, 0x65, 0xe8, 0x5d, 0xd4, 0x58, 0xfc, 0xd4, 0x40, 0xb7,
	0xa9, 0x92, 0x5a, 0xe3, 0xd3, 0x8c, 0xbe, 0x38, 0x2b, 0xa3, 0x37, 0x9d, 0x97, 0xdd, 0xd3, 0xdc,
	0x72, 0xd2, 0x06, 0x7e, 0xaa, 0xdb, 0xd5, 0x33, 0x73, 0xeb, 0xbc, 0x7c, 0xd6, 0xed, 0xdf, 0xd1,
	0x14, 0x07, 0xd2, 0x05, 0x8d, 0x33, 0x0d, 0x51, 0xbe, 0xbd, 0x5f, 0xba, 0xed, 0x3d, 0xe1, 0x81,
	0xf7, 0x1a, 0x22, 0xbf, 0xa7, 0xef, 0xa3, 0x29, 0x05, 0x0a, 0xb4, 0xe4, 0x5d, 0xc0, 0x20, 0x8c,
	0x62, 0xa0, 0xc3, 0x35, 0xc7, 0x9d, 0x2c, 0x81, 0x75, 0x1f, 0xb7, 0x07, 0x56, 0xf2, 0x08, 0x67,
	0xe2, 0xa4, 0x60, 0xdd, 0x1f, 0x58, 0xc9, 0xa3, 0xf7, 0x62, 0x50, 0x23, 0xe0, 0xb0, 0x46, 0xf3,
	0xca, 0x6b, 0x04, 0x1c, 0x0e, 0x68, 0xee, 0xa3, 0xa9, 0x41, 0xfe, 0x97, 0xde, 0x54, 0x76, 0x92,
	0xfc, 0x57, 0x34, 0x41, 0x21, 0xc6, 0x6e, 0x90, 0xe1, 0x48, 0xc9, 0x54, 0x87, 0xaf, 0x1d, 0x75,
	0x9c, 0x42, 0xdc, 0xb2, 0xd1, 0x35, 0x1b, 0x0c, 0x5e, 0xa1, 0x79, 0xcb, 0xeb, 0x82, 0xd2, 0x4c,
	0x0a, 0x9c, 0x30, 0x9d, 0x10, 0x43, 0x3b, 0xc7, 0x84, 0x1b, 0x6e, 0x84, 0xdc, 0xa0, 0x10, 0xef,
	0x79, 0xda, 0x56, 0xce, 0xaa, 0xe4, 0x59, 0x41, 0xa1, 0x1f, 0x6d, 0x98, 0x12, 0xda, 0x01, 0x2c,
	0xb2, 0xa4, 0xf4, 0xf8, 0xc6, 0x2d, 0x7c, 0xc5, 0xe3, 0x2f, 0x2d, 0xbc, 0x9d, 0x25, 0x85, 0xd1,
	0x67, 0x68, 0x16, 0x7a, 0x4c, 0x1b, 0xbb, 0x65, 0xf2, 0xef, 0xa3, 0xa0, 0xcb, 0xb4, 0x9b, 0xaf,
	0x6f, 0x9d, 0xf2, 0x5a, 0x41, 0xd8, 0x74, 0x78, 0xab, 0x80, 0x83, 0x07, 0x28, 0xb0, 0xbb, 0x20,
	0x82, 0x98, 0x64, 0xdc, 0xe4, 0x23, 0x36, 0xdc, 0xf4, 0x2d, 0x89, 0x59, 0x7b, 0xcd, 0x03, 0x7e,
	0xbe, 0xda, 0x61, 0x37, 0xc8, 0xc6, 0x09, 0xd1, 0x07, 0x98, 0x83, 0xd8, 0x37, 0x9d, 0x70, 0xcb,
	0x0f, 0xbb, 0x93, 0xca, 0x2d, 0xa2, 0x0f, 0x36, 0x1d, 0xc3, 0x5d, 0xbd, 0xd0, 0x33, 0xb8, 0x63,
	0xfb, 0xb2, 0xed, 0xe8, 0xa3, 0x36, 0xf0, 0xda, 0xf6, 0xe0, 0x11, 0x9a, 0x61, 0x82, 0xca, 0x24,
	0x75, 0x7d, 0xe8, 0xf3, 0x76, 0xfc, 0xac, 0xef, 0x63, 0xdb, 0x85, 0xe2, 0x1e, 0x9a, 0x74, 0xdf,
	0x2d, 0xb3, 0x97, 0x05, 0x36, 0x2c, 0x01, 0x15, 0x36, 0xfd, 0x96, 0xec, 0xc7, 0xdf, 0xd9, 0xb0,
	0xad, 0x55, 0x73, 0x79, 0x88, 0x53, 0x25, 0x29, 0xd8, 0xeb, 0xd5, 0x91, 0xbf, 0xf2, 0xb5, 0x5a,
	0xa4, 0xe9, 0x01, 0xcf, 0x7e, 0x84, 0x66, 0x12, 0xd2, 0xc3, 0x03, 0xc9, 0x5b, 0xde, 0x4a, 0x42,
	0x7a, 0xad, 0x13, 0xf9, 0x1f, 0xa2, 0x69, 0x96, 0xa4, 0x52, 0x33, 0xc7, 0xf6, 0xcd, 0x01, 0x1d,
	0xee, 0xe6, 0xde, 0x4b, 0xa8, 0x99, 0x23, 0x76, 0x3b, 0x42, 0xcf, 0x80, 0x88, 0x20, 0xea, 0xd3,
	0xdf, 0x79, 0x3f, 0x05, 0x50, 0x92, 0x9f, 0xa0, 0x6b, 0x14, 0x62, 0x8e, 0xdb, 0x1c, 0x2b, 0xa0,
	0x47, 0x94, 0x43, 0x84, 0xf3, 0x2b, 0xf7, 0xbd, 0x93, 0xcc, 0x58, 0x78, 0x95, 0xb7, 0x72, 0xb0,
	0xe5, 0x2f, 0xe0, 0x3b, 0x68, 0xdc, 0x9e, 0xef, 0x36, 0xa1, 0x07, 0x87, 0x84, 0x1f, 0xe8, 0x70,
	0xcf, 0x91, 0x2f, 0xf1, 0x88, 0xad, 0x16, 0xb1, 0xe0, 0x1f, 0x68, 0x5a, 0x6b, 0xdb, 0x17, 0x93,
	0xef, 0x5a, 0x37, 0x0e, 0xc2, 0xaf, 0xf3, 0xd6, 0xe8, 0xa6, 0x92, 0xc6, 0xe5, 0x7b, 0x69, 0xe3,
	0x6e, 0x0e, 0x30, 0x9d, 0x62, 0x60, 0x15, 0xdf, 0xdf, 0xe4, 0x73, 0x80, 0xe9, 0x74, 0x9d, 0x1d,
	0xb3, 0x5d, 0x72, 0xbb, 0x84, 0x57, 0x15, 0x1f, 0xbc, 0xed, 0x5c, 0xb1, 0x67, 0xc1, 0x52, 0x56,
	0x2c, 0xa1, 0xb8, 0xa4, 0x58, 0xb6, 0x7f, 0x04, 0x6a, 0x74, 0xf8, 0x6d, 0x7f, 0x89, 0x16, 0x97,
	0x74, 0xc7, 0x87, 0x83, 0x7b, 0x68, 0xca, 0xbe, 0x76, 0x7a, 0x9c, 0x08, 0xcc, 0x0d, 0xa4, 0x98,
	0xc5, 0x9d, 0xf0, 0x3b, 0xf7, 0xac, 0xb9, 0xac, 0xf5, 0x9e, 0x8d, 0x6f, 0x1a, 0x48, 0x37, 0xe2,
	0x4e, 0xf0, 0x37, 0x34, 0xa9, 0xb5, 0x3b, 0x93, 0x76, 0xf0, 0xf9, 0x2a, 0xbf, 0xf7, 0x87, 0x5a,
	0x6b, 0x7b, 0x0c, 0x9b, 0xdc, 0x97, 0xf8, 0xa9, 0x81, 0xe6, 0x2a, 0xdb, 0x9b, 0x83, 0xc0, 0x11,
	0xd3, 0x46, 0xb1, 0xb6, 0xfb, 0xe0, 0xe1, 0x0f, 0x6e, 0x24, 0x1f, 0xfc, 0x29, 0x23, 0x59, 0x77,
	0x70, 0x1a, 0x0f, 0xac, 0xdb, 0x9a, 0x4d, 0xcb, 0xa3, 0xc4, 0x41, 0xac, 0x55, 0xdc, 0x2c, 0x7c,
	0x3c, 0xef, 0xdf, 0xd1, 0xd5, 0x61, 0x6e, 0xe7, 0xd2, 0x89, 0x97, 0x49, 0xe5, 0x4e, 0xc9, 0x87,
	0x77, 0xc3, 0xd5, 0x7e, 0xe3, 0xd8, 0xdb, 0xa4, 0x3f, 0xf0, 0xfd, 0x24, 0x6f, 0xa2, 0xbb, 0xa7,
	0xe4, 0xa9, 0xbc, 0x93, 0x86, 0xdc, 0x90, 0xbb, 0xfd, 0x99, 0x64, 0x95, 0x37, 0xd3, 0x0a, 0x0a,
	0x7d, 0xc6, 0x94, 0x98, 0x0e, 0xe6, 0x4c, 0x9b, 0xfe, 0x13, 0x6d, 0xd8, 0x4f, 0x3a, 0x87, 0x37,
	0x89, 0xe9, 0x6c, 0x32, 0x6d, 0xca, 0x47, 0xda, 0x73, 0x74, 0x43, 0x01, 0xcd, 0x94, 0x7b, 0x27,
	0xd5, 0x88, 0xcf, 0x39, 0xf1, 0x6c, 0xc9, 0x19, 0x48, 0xf0, 0x06, 0x2d, 0xa4, 0x9c, 0x98, 0x58,
	0xaa, 0xa4, 0xb8, 0x71, 0x6b, 0xd2, 0x9c, 0x77, 0x69, 0x6e, 0x15, 0x4c, 0x7f, 0x1f, 0x0e, 0xe4,
	0x5a, 0x41, 0xa1, 0x02, 0xa3, 0x8e, 0xea, 0x32, 0x8c, 0xf8, 0x2a, 0x1c, 0x5e, 0x27, 0xac, 0x34,
	0x94, 0x89, 0x58, 0xf6, 0x85, 0x17, 0x2a, 0xe5, 0xdb, 0x1e, 0x6e, 0x88, 0x58, 0xd6, 0x97, 0x5f,
	0x23, 0x1e, 0x3d, 0x51, 0xfe, 0x40, 0x82, 0x9a, 0xf2, 0x6b, 0xd2, 0x8c, 0xd5, 0x95, 0x3f, 0x90,
	0xeb, 0x31, 0xba, 0xda, 0x4b, 0x6b, 0x6b, 0x40, 0xfe, 0x02, 0xee, 0xa5, 0x03, 0x15, 0x2c, 0xec,
	0xa3, 0xab, 0x35, 0x3b, 0x9c, 0x0a, 0x13, 0xfc, 0x05, 0x5d, 0xac, 0xde, 0x23, 0x7e, 0x63, 0xa2,
	0xa4, 0x7f, 0x6f, 0x3c, 0x40, 0x81, 0xc8, 0x92, 0x36, 0x28, 0x2c, 0xe3, 0xfe, 0x0c, 0x19, 0xf2,
	0x23, 0xca, 0x23, 0x3b, 0x71, 0x31, 0x3f, 0x16, 0x7e, 0x1d, 0x46, 0xd7, 0x3f, 0x7f, 0x96, 0x82,
	0x9f, 0x1a, 0x68, 0x32, 0x13, 0x8c, 0x12, 0x6d, 0xfa, 0xb9, 0x1a, 0xf3, 0xc3, 0x8b, 0x17, 0x97,
	0xf7, 0xcf, 0xe2, 0x4c, 0x53, 0x61, 0x5a, 0x13, 0xb9, 0x81, 0x72, 0xe6, 0xfd, 0xdc, 0x40, 0x41,
	0x5b, 0x49, 0x12, 0x1d, 0xb7, 0x35, 0x74, 0xb6, 0xb6, 0xa6, 0x4a, 0x0b, 0xa5, 0x31, 0xdb, 0xad,
	0x24, 0xe3, 0xa6, 0xda, 0xaf, 0x70, 0xf8, 0x8c, 0xbb, 0x55, 0x1a, 0xf0, 0xb6, 0xda, 0x23, 0x2e,
	0xc5, 0xe3, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xca, 0x9f, 0x19, 0x0c, 0x41, 0x10, 0x00, 0x00,
}
