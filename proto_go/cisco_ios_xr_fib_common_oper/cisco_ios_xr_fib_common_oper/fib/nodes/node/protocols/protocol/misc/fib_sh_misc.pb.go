// Code generated by protoc-gen-go.
// source: fib_sh_misc.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc is a generated protocol buffer package.

It is generated from these files:
	fib_sh_misc.proto

It has these top-level messages:
	FibShMisc_KEYS
	FibShMisc
	FibShObjActionStats
	FibShObjStats
	FibShPlatfUpdStats
	FibShGtrieFnTiming
	FibShGtrieTiming
	FibShProtoDebugStats
	FibShProtoPurgeStats
	FibShRouteDelTs
	FibIssuProtoState
	FibIssuState
	FibShProtoFrrStats
	FibShPlatCapabilities
*/
package cisco_ios_xr_fib_common_oper_fib_nodes_node_protocols_protocol_misc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// FIB miscellaneous info
type FibShMisc_KEYS struct {
	NodeName     string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	ProtocolName string `protobuf:"bytes,2,opt,name=protocol_name,json=protocolName" json:"protocol_name,omitempty"`
}

func (m *FibShMisc_KEYS) Reset()                    { *m = FibShMisc_KEYS{} }
func (m *FibShMisc_KEYS) String() string            { return proto.CompactTextString(m) }
func (*FibShMisc_KEYS) ProtoMessage()               {}
func (*FibShMisc_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FibShMisc_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *FibShMisc_KEYS) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

type FibShMisc struct {
	// Per protocol debug stats
	MiProtoDbgStats []*FibShProtoDebugStats `protobuf:"bytes,50,rep,name=mi_proto_dbg_stats,json=miProtoDbgStats" json:"mi_proto_dbg_stats,omitempty"`
	// number of pfi ifh create notif
	MiPfiIfhUpd uint64 `protobuf:"varint,51,opt,name=mi_pfi_ifh_upd,json=miPfiIfhUpd" json:"mi_pfi_ifh_upd,omitempty"`
	// number of pfi ifh delete notif
	MiPfiIfhDel uint64 `protobuf:"varint,52,opt,name=mi_pfi_ifh_del,json=miPfiIfhDel" json:"mi_pfi_ifh_del,omitempty"`
	// number of stale ifh removed
	MiPfiIfhStale uint64 `protobuf:"varint,53,opt,name=mi_pfi_ifh_stale,json=miPfiIfhStale" json:"mi_pfi_ifh_stale,omitempty"`
	// total platform update time
	MiTotPlatUpdTime uint64 `protobuf:"varint,54,opt,name=mi_tot_plat_upd_time,json=miTotPlatUpdTime" json:"mi_tot_plat_upd_time,omitempty"`
	// total time spent in gtrie operations
	MiTotGtrieTime uint64 `protobuf:"varint,55,opt,name=mi_tot_gtrie_time,json=miTotGtrieTime" json:"mi_tot_gtrie_time,omitempty"`
	// total download time
	MiTotDnldTime uint64 `protobuf:"varint,56,opt,name=mi_tot_dnld_time,json=miTotDnldTime" json:"mi_tot_dnld_time,omitempty"`
	// clock download time
	MiClockTime uint64 `protobuf:"varint,57,opt,name=mi_clock_time,json=miClockTime" json:"mi_clock_time,omitempty"`
	// CPU download time
	MiCpuTime uint64 `protobuf:"varint,58,opt,name=mi_cpu_time,json=miCpuTime" json:"mi_cpu_time,omitempty"`
	// Last FIB shared memory reset time stamp
	MiShmResetTs uint64 `protobuf:"varint,59,opt,name=mi_shm_reset_ts,json=miShmResetTs" json:"mi_shm_reset_ts,omitempty"`
	// Number of idbs that hit ifh recycle
	MiIdbRecycleCount uint32 `protobuf:"varint,60,opt,name=mi_idb_recycle_count,json=miIdbRecycleCount" json:"mi_idb_recycle_count,omitempty"`
	// Number of idb cleaned up after hitting ifh recycle
	MiIdbRecycleCleanupCount uint32 `protobuf:"varint,61,opt,name=mi_idb_recycle_cleanup_count,json=miIdbRecycleCleanupCount" json:"mi_idb_recycle_cleanup_count,omitempty"`
	// Number of recycled idb extensions that failed cleanup
	MiIdbExtCleanupFailedCount []uint32 `protobuf:"varint,62,rep,packed,name=mi_idb_ext_cleanup_failed_count,json=miIdbExtCleanupFailedCount" json:"mi_idb_ext_cleanup_failed_count,omitempty"`
	// Number of management interfaces
	MiNumMgmtList uint32 `protobuf:"varint,63,opt,name=mi_num_mgmt_list,json=miNumMgmtList" json:"mi_num_mgmt_list,omitempty"`
	// the number of counters used for purge counter stats
	MiIdbPurgeCntrs []*FibShProtoPurgeStats `protobuf:"bytes,64,rep,name=mi_idb_purge_cntrs,json=miIdbPurgeCntrs" json:"mi_idb_purge_cntrs,omitempty"`
	// Timestamps of deleted routes
	MiDelTs []*FibShRouteDelTs `protobuf:"bytes,65,rep,name=mi_del_ts,json=miDelTs" json:"mi_del_ts,omitempty"`
	// Per protocol Failure stats for label RPF
	MiLrpfStatsFail []uint32 `protobuf:"varint,66,rep,packed,name=mi_lrpf_stats_fail,json=miLrpfStatsFail" json:"mi_lrpf_stats_fail,omitempty"`
	// Per protocol actions stats for label RPF
	MiLrpfStatsAct []uint32 `protobuf:"varint,67,rep,packed,name=mi_lrpf_stats_act,json=miLrpfStatsAct" json:"mi_lrpf_stats_act,omitempty"`
	// Per protocol number of label RPFs
	MiLrpfNum []uint32 `protobuf:"varint,68,rep,packed,name=mi_lrpf_num,json=miLrpfNum" json:"mi_lrpf_num,omitempty"`
	// Number of interfaces having label security enabled
	MiIdbLsecEnabledNum            []uint32 `protobuf:"varint,69,rep,packed,name=mi_idb_lsec_enabled_num,json=miIdbLsecEnabledNum" json:"mi_idb_lsec_enabled_num,omitempty"`
	MiNumVirtualLlAddressesAdded   uint32   `protobuf:"varint,70,opt,name=mi_num_virtual_ll_addresses_added,json=miNumVirtualLlAddressesAdded" json:"mi_num_virtual_ll_addresses_added,omitempty"`
	MiNumVirtualLlAddressesDeleted uint32   `protobuf:"varint,71,opt,name=mi_num_virtual_ll_addresses_deleted,json=miNumVirtualLlAddressesDeleted" json:"mi_num_virtual_ll_addresses_deleted,omitempty"`
	MiNumVirtualLlAddressesDropped uint32   `protobuf:"varint,72,opt,name=mi_num_virtual_ll_addresses_dropped,json=miNumVirtualLlAddressesDropped" json:"mi_num_virtual_ll_addresses_dropped,omitempty"`
	MiNumVirtualLlAddressesCached  uint32   `protobuf:"varint,73,opt,name=mi_num_virtual_ll_addresses_cached,json=miNumVirtualLlAddressesCached" json:"mi_num_virtual_ll_addresses_cached,omitempty"`
	// FIB ISSU state
	MiIssuState *FibIssuState `protobuf:"bytes,74,opt,name=mi_issu_state,json=miIssuState" json:"mi_issu_state,omitempty"`
	// FRR statistics
	MiFrrStats []*FibShProtoFrrStats `protobuf:"bytes,75,rep,name=mi_frr_stats,json=miFrrStats" json:"mi_frr_stats,omitempty"`
	// FIB platform capabilities
	MiPlatCapabilities *FibShPlatCapabilities `protobuf:"bytes,76,opt,name=mi_plat_capabilities,json=miPlatCapabilities" json:"mi_plat_capabilities,omitempty"`
	// number of LISP EID prefixes
	MiNumLispEids []uint32 `protobuf:"varint,77,rep,packed,name=mi_num_lisp_eids,json=miNumLispEids" json:"mi_num_lisp_eids,omitempty"`
	// number of LISP EID prefixes eligible for forwarding
	MiNumLispValidEids []uint32 `protobuf:"varint,78,rep,packed,name=mi_num_lisp_valid_eids,json=miNumLispValidEids" json:"mi_num_lisp_valid_eids,omitempty"`
	// cpuless node list init
	MiCpulessInit bool `protobuf:"varint,79,opt,name=mi_cpuless_init,json=miCpulessInit" json:"mi_cpuless_init,omitempty"`
	// count of cpuless line cards
	MiCpulessCount uint32 `protobuf:"varint,80,opt,name=mi_cpuless_count,json=miCpulessCount" json:"mi_cpuless_count,omitempty"`
	// list of cpuless line cards
	MiCpulessNodes []uint32 `protobuf:"varint,81,rep,packed,name=mi_cpuless_nodes,json=miCpulessNodes" json:"mi_cpuless_nodes,omitempty"`
	// Prefer AIB routes over RIB/LSD operational state
	MiPreferAibRoutesOverRibOper bool `protobuf:"varint,82,opt,name=mi_prefer_aib_routes_over_rib_oper,json=miPreferAibRoutesOverRibOper" json:"mi_prefer_aib_routes_over_rib_oper,omitempty"`
	// Prefer AIB routes over RIB/LSD configured state
	MiPreferAibRoutesOverRibCfg bool `protobuf:"varint,83,opt,name=mi_prefer_aib_routes_over_rib_cfg,json=miPreferAibRoutesOverRibCfg" json:"mi_prefer_aib_routes_over_rib_cfg,omitempty"`
	// XPL loadinfo is enabled
	MiXplLdiEnabled bool `protobuf:"varint,84,opt,name=mi_xpl_ldi_enabled,json=miXplLdiEnabled" json:"mi_xpl_ldi_enabled,omitempty"`
}

func (m *FibShMisc) Reset()                    { *m = FibShMisc{} }
func (m *FibShMisc) String() string            { return proto.CompactTextString(m) }
func (*FibShMisc) ProtoMessage()               {}
func (*FibShMisc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FibShMisc) GetMiProtoDbgStats() []*FibShProtoDebugStats {
	if m != nil {
		return m.MiProtoDbgStats
	}
	return nil
}

func (m *FibShMisc) GetMiPfiIfhUpd() uint64 {
	if m != nil {
		return m.MiPfiIfhUpd
	}
	return 0
}

func (m *FibShMisc) GetMiPfiIfhDel() uint64 {
	if m != nil {
		return m.MiPfiIfhDel
	}
	return 0
}

func (m *FibShMisc) GetMiPfiIfhStale() uint64 {
	if m != nil {
		return m.MiPfiIfhStale
	}
	return 0
}

func (m *FibShMisc) GetMiTotPlatUpdTime() uint64 {
	if m != nil {
		return m.MiTotPlatUpdTime
	}
	return 0
}

func (m *FibShMisc) GetMiTotGtrieTime() uint64 {
	if m != nil {
		return m.MiTotGtrieTime
	}
	return 0
}

func (m *FibShMisc) GetMiTotDnldTime() uint64 {
	if m != nil {
		return m.MiTotDnldTime
	}
	return 0
}

func (m *FibShMisc) GetMiClockTime() uint64 {
	if m != nil {
		return m.MiClockTime
	}
	return 0
}

func (m *FibShMisc) GetMiCpuTime() uint64 {
	if m != nil {
		return m.MiCpuTime
	}
	return 0
}

func (m *FibShMisc) GetMiShmResetTs() uint64 {
	if m != nil {
		return m.MiShmResetTs
	}
	return 0
}

func (m *FibShMisc) GetMiIdbRecycleCount() uint32 {
	if m != nil {
		return m.MiIdbRecycleCount
	}
	return 0
}

func (m *FibShMisc) GetMiIdbRecycleCleanupCount() uint32 {
	if m != nil {
		return m.MiIdbRecycleCleanupCount
	}
	return 0
}

func (m *FibShMisc) GetMiIdbExtCleanupFailedCount() []uint32 {
	if m != nil {
		return m.MiIdbExtCleanupFailedCount
	}
	return nil
}

func (m *FibShMisc) GetMiNumMgmtList() uint32 {
	if m != nil {
		return m.MiNumMgmtList
	}
	return 0
}

func (m *FibShMisc) GetMiIdbPurgeCntrs() []*FibShProtoPurgeStats {
	if m != nil {
		return m.MiIdbPurgeCntrs
	}
	return nil
}

func (m *FibShMisc) GetMiDelTs() []*FibShRouteDelTs {
	if m != nil {
		return m.MiDelTs
	}
	return nil
}

func (m *FibShMisc) GetMiLrpfStatsFail() []uint32 {
	if m != nil {
		return m.MiLrpfStatsFail
	}
	return nil
}

func (m *FibShMisc) GetMiLrpfStatsAct() []uint32 {
	if m != nil {
		return m.MiLrpfStatsAct
	}
	return nil
}

func (m *FibShMisc) GetMiLrpfNum() []uint32 {
	if m != nil {
		return m.MiLrpfNum
	}
	return nil
}

func (m *FibShMisc) GetMiIdbLsecEnabledNum() []uint32 {
	if m != nil {
		return m.MiIdbLsecEnabledNum
	}
	return nil
}

func (m *FibShMisc) GetMiNumVirtualLlAddressesAdded() uint32 {
	if m != nil {
		return m.MiNumVirtualLlAddressesAdded
	}
	return 0
}

func (m *FibShMisc) GetMiNumVirtualLlAddressesDeleted() uint32 {
	if m != nil {
		return m.MiNumVirtualLlAddressesDeleted
	}
	return 0
}

func (m *FibShMisc) GetMiNumVirtualLlAddressesDropped() uint32 {
	if m != nil {
		return m.MiNumVirtualLlAddressesDropped
	}
	return 0
}

func (m *FibShMisc) GetMiNumVirtualLlAddressesCached() uint32 {
	if m != nil {
		return m.MiNumVirtualLlAddressesCached
	}
	return 0
}

func (m *FibShMisc) GetMiIssuState() *FibIssuState {
	if m != nil {
		return m.MiIssuState
	}
	return nil
}

func (m *FibShMisc) GetMiFrrStats() []*FibShProtoFrrStats {
	if m != nil {
		return m.MiFrrStats
	}
	return nil
}

func (m *FibShMisc) GetMiPlatCapabilities() *FibShPlatCapabilities {
	if m != nil {
		return m.MiPlatCapabilities
	}
	return nil
}

func (m *FibShMisc) GetMiNumLispEids() []uint32 {
	if m != nil {
		return m.MiNumLispEids
	}
	return nil
}

func (m *FibShMisc) GetMiNumLispValidEids() []uint32 {
	if m != nil {
		return m.MiNumLispValidEids
	}
	return nil
}

func (m *FibShMisc) GetMiCpulessInit() bool {
	if m != nil {
		return m.MiCpulessInit
	}
	return false
}

func (m *FibShMisc) GetMiCpulessCount() uint32 {
	if m != nil {
		return m.MiCpulessCount
	}
	return 0
}

func (m *FibShMisc) GetMiCpulessNodes() []uint32 {
	if m != nil {
		return m.MiCpulessNodes
	}
	return nil
}

func (m *FibShMisc) GetMiPreferAibRoutesOverRibOper() bool {
	if m != nil {
		return m.MiPreferAibRoutesOverRibOper
	}
	return false
}

func (m *FibShMisc) GetMiPreferAibRoutesOverRibCfg() bool {
	if m != nil {
		return m.MiPreferAibRoutesOverRibCfg
	}
	return false
}

func (m *FibShMisc) GetMiXplLdiEnabled() bool {
	if m != nil {
		return m.MiXplLdiEnabled
	}
	return false
}

// FIB Max time statistics for each action types of an object
type FibShObjActionStats struct {
	// Total number of updates
	FoasTotUpdates uint64 `protobuf:"varint,1,opt,name=foas_tot_updates,json=foasTotUpdates" json:"foas_tot_updates,omitempty"`
	// Total time for updates
	FoasTotUpdTime uint64 `protobuf:"varint,2,opt,name=foas_tot_upd_time,json=foasTotUpdTime" json:"foas_tot_upd_time,omitempty"`
	// Total number of updates that took zero time
	FoasTotUpdatesZero uint64 `protobuf:"varint,3,opt,name=foas_tot_updates_zero,json=foasTotUpdatesZero" json:"foas_tot_updates_zero,omitempty"`
	// Total number of successful updates
	FoasNumSuccess uint64 `protobuf:"varint,4,opt,name=foas_num_success,json=foasNumSuccess" json:"foas_num_success,omitempty"`
	// Total number of failed updates
	FoasNumFailure uint64 `protobuf:"varint,5,opt,name=foas_num_failure,json=foasNumFailure" json:"foas_num_failure,omitempty"`
	// Time for the update
	FoasMaxTime uint64 `protobuf:"varint,6,opt,name=foas_max_time,json=foasMaxTime" json:"foas_max_time,omitempty"`
	// Time stamp of max update
	FoasMaxTstamp uint64 `protobuf:"varint,7,opt,name=foas_max_tstamp,json=foasMaxTstamp" json:"foas_max_tstamp,omitempty"`
}

func (m *FibShObjActionStats) Reset()                    { *m = FibShObjActionStats{} }
func (m *FibShObjActionStats) String() string            { return proto.CompactTextString(m) }
func (*FibShObjActionStats) ProtoMessage()               {}
func (*FibShObjActionStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FibShObjActionStats) GetFoasTotUpdates() uint64 {
	if m != nil {
		return m.FoasTotUpdates
	}
	return 0
}

func (m *FibShObjActionStats) GetFoasTotUpdTime() uint64 {
	if m != nil {
		return m.FoasTotUpdTime
	}
	return 0
}

func (m *FibShObjActionStats) GetFoasTotUpdatesZero() uint64 {
	if m != nil {
		return m.FoasTotUpdatesZero
	}
	return 0
}

func (m *FibShObjActionStats) GetFoasNumSuccess() uint64 {
	if m != nil {
		return m.FoasNumSuccess
	}
	return 0
}

func (m *FibShObjActionStats) GetFoasNumFailure() uint64 {
	if m != nil {
		return m.FoasNumFailure
	}
	return 0
}

func (m *FibShObjActionStats) GetFoasMaxTime() uint64 {
	if m != nil {
		return m.FoasMaxTime
	}
	return 0
}

func (m *FibShObjActionStats) GetFoasMaxTstamp() uint64 {
	if m != nil {
		return m.FoasMaxTstamp
	}
	return 0
}

// FIB Max time statistics for each FIB object
type FibShObjStats struct {
	// Total number of updates
	FosTotUpdates uint64 `protobuf:"varint,1,opt,name=fos_tot_updates,json=fosTotUpdates" json:"fos_tot_updates,omitempty"`
	// Total time for updates
	FosTotUpdTime uint64 `protobuf:"varint,2,opt,name=fos_tot_upd_time,json=fosTotUpdTime" json:"fos_tot_upd_time,omitempty"`
	// Array of max time info indexed by action type
	FosObjActStats []*FibShObjActionStats `protobuf:"bytes,3,rep,name=fos_obj_act_stats,json=fosObjActStats" json:"fos_obj_act_stats,omitempty"`
}

func (m *FibShObjStats) Reset()                    { *m = FibShObjStats{} }
func (m *FibShObjStats) String() string            { return proto.CompactTextString(m) }
func (*FibShObjStats) ProtoMessage()               {}
func (*FibShObjStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FibShObjStats) GetFosTotUpdates() uint64 {
	if m != nil {
		return m.FosTotUpdates
	}
	return 0
}

func (m *FibShObjStats) GetFosTotUpdTime() uint64 {
	if m != nil {
		return m.FosTotUpdTime
	}
	return 0
}

func (m *FibShObjStats) GetFosObjActStats() []*FibShObjActionStats {
	if m != nil {
		return m.FosObjActStats
	}
	return nil
}

// FIB platform update statistics
type FibShPlatfUpdStats struct {
	// Number of successful updates
	FpusNumSuccess uint64 `protobuf:"varint,1,opt,name=fpus_num_success,json=fpusNumSuccess" json:"fpus_num_success,omitempty"`
	// Number of unsuccessful updates
	FpusNumFailure uint64 `protobuf:"varint,2,opt,name=fpus_num_failure,json=fpusNumFailure" json:"fpus_num_failure,omitempty"`
	// Array of max time info indexed by object type
	FpusObjStats []*FibShObjStats `protobuf:"bytes,3,rep,name=fpus_obj_stats,json=fpusObjStats" json:"fpus_obj_stats,omitempty"`
	// Total time for all pd updates
	FpusUpdTotalTime uint64 `protobuf:"varint,4,opt,name=fpus_upd_total_time,json=fpusUpdTotalTime" json:"fpus_upd_total_time,omitempty"`
}

func (m *FibShPlatfUpdStats) Reset()                    { *m = FibShPlatfUpdStats{} }
func (m *FibShPlatfUpdStats) String() string            { return proto.CompactTextString(m) }
func (*FibShPlatfUpdStats) ProtoMessage()               {}
func (*FibShPlatfUpdStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FibShPlatfUpdStats) GetFpusNumSuccess() uint64 {
	if m != nil {
		return m.FpusNumSuccess
	}
	return 0
}

func (m *FibShPlatfUpdStats) GetFpusNumFailure() uint64 {
	if m != nil {
		return m.FpusNumFailure
	}
	return 0
}

func (m *FibShPlatfUpdStats) GetFpusObjStats() []*FibShObjStats {
	if m != nil {
		return m.FpusObjStats
	}
	return nil
}

func (m *FibShPlatfUpdStats) GetFpusUpdTotalTime() uint64 {
	if m != nil {
		return m.FpusUpdTotalTime
	}
	return 0
}

// FIB timing statistics for individual gtrie functions
type FibShGtrieFnTiming struct {
	// Gtrie operation
	FgftFn []byte `protobuf:"bytes,1,opt,name=fgft_fn,json=fgftFn,proto3" json:"fgft_fn,omitempty"`
	// Total number of updates
	FgftTotUpdates uint64 `protobuf:"varint,2,opt,name=fgft_tot_updates,json=fgftTotUpdates" json:"fgft_tot_updates,omitempty"`
	// Total number of updates with zero timing (due to timestamp granularity)
	FgftTotUpdatesZero uint64 `protobuf:"varint,3,opt,name=fgft_tot_updates_zero,json=fgftTotUpdatesZero" json:"fgft_tot_updates_zero,omitempty"`
	// Total time for updates
	FgftTotUpdTime uint64 `protobuf:"varint,4,opt,name=fgft_tot_upd_time,json=fgftTotUpdTime" json:"fgft_tot_upd_time,omitempty"`
	// Time for the update
	FgftMaxTime uint64 `protobuf:"varint,5,opt,name=fgft_max_time,json=fgftMaxTime" json:"fgft_max_time,omitempty"`
	// Time stamp of max update
	FgftMaxTstamp uint64 `protobuf:"varint,6,opt,name=fgft_max_tstamp,json=fgftMaxTstamp" json:"fgft_max_tstamp,omitempty"`
}

func (m *FibShGtrieFnTiming) Reset()                    { *m = FibShGtrieFnTiming{} }
func (m *FibShGtrieFnTiming) String() string            { return proto.CompactTextString(m) }
func (*FibShGtrieFnTiming) ProtoMessage()               {}
func (*FibShGtrieFnTiming) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FibShGtrieFnTiming) GetFgftFn() []byte {
	if m != nil {
		return m.FgftFn
	}
	return nil
}

func (m *FibShGtrieFnTiming) GetFgftTotUpdates() uint64 {
	if m != nil {
		return m.FgftTotUpdates
	}
	return 0
}

func (m *FibShGtrieFnTiming) GetFgftTotUpdatesZero() uint64 {
	if m != nil {
		return m.FgftTotUpdatesZero
	}
	return 0
}

func (m *FibShGtrieFnTiming) GetFgftTotUpdTime() uint64 {
	if m != nil {
		return m.FgftTotUpdTime
	}
	return 0
}

func (m *FibShGtrieFnTiming) GetFgftMaxTime() uint64 {
	if m != nil {
		return m.FgftMaxTime
	}
	return 0
}

func (m *FibShGtrieFnTiming) GetFgftMaxTstamp() uint64 {
	if m != nil {
		return m.FgftMaxTstamp
	}
	return 0
}

// FIB platform update statistics
type FibShGtrieTiming struct {
	// Number of successful updates
	FgtNumSuccess uint64 `protobuf:"varint,1,opt,name=fgt_num_success,json=fgtNumSuccess" json:"fgt_num_success,omitempty"`
	// Number of unsuccessful updates
	FgtNumFailure uint64 `protobuf:"varint,2,opt,name=fgt_num_failure,json=fgtNumFailure" json:"fgt_num_failure,omitempty"`
	// Array of max time info indexed by gtrie function
	FgtGtrieFnTiming []*FibShGtrieFnTiming `protobuf:"bytes,3,rep,name=fgt_gtrie_fn_timing,json=fgtGtrieFnTiming" json:"fgt_gtrie_fn_timing,omitempty"`
	// Total time for all pd updates
	FgtUpdTotalTime uint64 `protobuf:"varint,4,opt,name=fgt_upd_total_time,json=fgtUpdTotalTime" json:"fgt_upd_total_time,omitempty"`
}

func (m *FibShGtrieTiming) Reset()                    { *m = FibShGtrieTiming{} }
func (m *FibShGtrieTiming) String() string            { return proto.CompactTextString(m) }
func (*FibShGtrieTiming) ProtoMessage()               {}
func (*FibShGtrieTiming) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FibShGtrieTiming) GetFgtNumSuccess() uint64 {
	if m != nil {
		return m.FgtNumSuccess
	}
	return 0
}

func (m *FibShGtrieTiming) GetFgtNumFailure() uint64 {
	if m != nil {
		return m.FgtNumFailure
	}
	return 0
}

func (m *FibShGtrieTiming) GetFgtGtrieFnTiming() []*FibShGtrieFnTiming {
	if m != nil {
		return m.FgtGtrieFnTiming
	}
	return nil
}

func (m *FibShGtrieTiming) GetFgtUpdTotalTime() uint64 {
	if m != nil {
		return m.FgtUpdTotalTime
	}
	return 0
}

// FIB per protocol debug information
type FibShProtoDebugStats struct {
	// the number of fib entries in global tbl
	FpdGbltblEntries uint64 `protobuf:"varint,1,opt,name=fpd_gbltbl_entries,json=fpdGbltblEntries" json:"fpd_gbltbl_entries,omitempty"`
	// the number of fib entries in global retry tbl
	FpdGbltblRejEntries uint64 `protobuf:"varint,2,opt,name=fpd_gbltbl_rej_entries,json=fpdGbltblRejEntries" json:"fpd_gbltbl_rej_entries,omitempty"`
	// the number of fib entries in vrf tbls
	FpdVrftblEntries uint64 `protobuf:"varint,3,opt,name=fpd_vrftbl_entries,json=fpdVrftblEntries" json:"fpd_vrftbl_entries,omitempty"`
	// the number of fib entries in vrf retry tbls
	FpdVrftblRejEntries uint64 `protobuf:"varint,4,opt,name=fpd_vrftbl_rej_entries,json=fpdVrftblRejEntries" json:"fpd_vrftbl_rej_entries,omitempty"`
	// the number of tables in table set
	FpdNumTbls uint32 `protobuf:"varint,5,opt,name=fpd_num_tbls,json=fpdNumTbls" json:"fpd_num_tbls,omitempty"`
	// Number of global routes from each route source
	FpdGbltblSrcEntries []uint64 `protobuf:"varint,6,rep,packed,name=fpd_gbltbl_src_entries,json=fpdGbltblSrcEntries" json:"fpd_gbltbl_src_entries,omitempty"`
	// Number of vrf routes from each route source
	FpdVrftblSrcEntries []uint64 `protobuf:"varint,7,rep,packed,name=fpd_vrftbl_src_entries,json=fpdVrftblSrcEntries" json:"fpd_vrftbl_src_entries,omitempty"`
	// the number of bcdl msgs
	FpdBcdlMsgs uint64 `protobuf:"varint,8,opt,name=fpd_bcdl_msgs,json=fpdBcdlMsgs" json:"fpd_bcdl_msgs,omitempty"`
	// the number of route updates
	FpdRouteUpd uint64 `protobuf:"varint,9,opt,name=fpd_route_upd,json=fpdRouteUpd" json:"fpd_route_upd,omitempty"`
	// the number of route deletes
	FpdRouteDel uint64 `protobuf:"varint,10,opt,name=fpd_route_del,json=fpdRouteDel" json:"fpd_route_del,omitempty"`
	// the number of routes received
	FpdRouteRcv uint64 `protobuf:"varint,11,opt,name=fpd_route_rcv,json=fpdRouteRcv" json:"fpd_route_rcv,omitempty"`
	// the number of routes dropped
	FpdRouteDrops uint64 `protobuf:"varint,12,opt,name=fpd_route_drops,json=fpdRouteDrops" json:"fpd_route_drops,omitempty"`
	// the number of routes handled with recycled label
	FpdLblRecycled uint64 `protobuf:"varint,13,opt,name=fpd_lbl_recycled,json=fpdLblRecycled" json:"fpd_lbl_recycled,omitempty"`
	// the number of routes dropped because of version mismatch
	FpdVersionMismatchDrops uint64 `protobuf:"varint,14,opt,name=fpd_version_mismatch_drops,json=fpdVersionMismatchDrops" json:"fpd_version_mismatch_drops,omitempty"`
	// the number of adjacency updates
	FpdAdjUpd uint64 `protobuf:"varint,15,opt,name=fpd_adj_upd,json=fpdAdjUpd" json:"fpd_adj_upd,omitempty"`
	// the number of adjacency deletes
	FpdAdjDel uint64 `protobuf:"varint,16,opt,name=fpd_adj_del,json=fpdAdjDel" json:"fpd_adj_del,omitempty"`
	// number of TX adjacency updates from AIB
	FpdAdjUpdTx uint64 `protobuf:"varint,17,opt,name=fpd_adj_upd_tx,json=fpdAdjUpdTx" json:"fpd_adj_upd_tx,omitempty"`
	// number of TX adjacency updates that found or created NH
	FpdAdjUpdTxNhFound uint64 `protobuf:"varint,18,opt,name=fpd_adj_upd_tx_nh_found,json=fpdAdjUpdTxNhFound" json:"fpd_adj_upd_tx_nh_found,omitempty"`
	// number of TX adjacency updates that went to retry
	FpdAdjUpdTxRetryCreated uint64 `protobuf:"varint,19,opt,name=fpd_adj_upd_tx_retry_created,json=fpdAdjUpdTxRetryCreated" json:"fpd_adj_upd_tx_retry_created,omitempty"`
	// number of TX adj retries that found or created NH
	FpdAdjTxRetryNhFound uint64 `protobuf:"varint,20,opt,name=fpd_adj_tx_retry_nh_found,json=fpdAdjTxRetryNhFound" json:"fpd_adj_tx_retry_nh_found,omitempty"`
	// number of times TX NH retry objects updated
	FpdAdjTxRetryObjReinit uint64 `protobuf:"varint,21,opt,name=fpd_adj_tx_retry_obj_reinit,json=fpdAdjTxRetryObjReinit" json:"fpd_adj_tx_retry_obj_reinit,omitempty"`
	//  number of adj updates dropped because of OOR
	FpdAdjDrops uint64 `protobuf:"varint,22,opt,name=fpd_adj_drops,json=fpdAdjDrops" json:"fpd_adj_drops,omitempty"`
	// number of AIB messages
	FpdAdjMsg uint64 `protobuf:"varint,23,opt,name=fpd_adj_msg,json=fpdAdjMsg" json:"fpd_adj_msg,omitempty"`
	// the number of TE upds received
	FpdTeRcv uint64 `protobuf:"varint,24,opt,name=fpd_te_rcv,json=fpdTeRcv" json:"fpd_te_rcv,omitempty"`
	// the number of TE upds dropped because of version mismatch
	FpdTeVersionMismatchDrops uint64 `protobuf:"varint,25,opt,name=fpd_te_version_mismatch_drops,json=fpdTeVersionMismatchDrops" json:"fpd_te_version_mismatch_drops,omitempty"`
	// platform update statistics
	FpdPlatfUpdStats *FibShPlatfUpdStats `protobuf:"bytes,26,opt,name=fpd_platf_upd_stats,json=fpdPlatfUpdStats" json:"fpd_platf_upd_stats,omitempty"`
	// Gtrie timing statistics
	FpdGtrieTiming *FibShGtrieTiming `protobuf:"bytes,27,opt,name=fpd_gtrie_timing,json=fpdGtrieTiming" json:"fpd_gtrie_timing,omitempty"`
	// the number of retry timeouts
	FpdNumRetryTouts uint64 `protobuf:"varint,28,opt,name=fpd_num_retry_touts,json=fpdNumRetryTouts" json:"fpd_num_retry_touts,omitempty"`
	// the number of fixup LDIs
	FpdLdiNumFixedup uint64 `protobuf:"varint,29,opt,name=fpd_ldi_num_fixedup,json=fpdLdiNumFixedup" json:"fpd_ldi_num_fixedup,omitempty"`
	// the number of corrected fixup LDIs
	FpdLdiNumCorrectFixup uint64 `protobuf:"varint,30,opt,name=fpd_ldi_num_correct_fixup,json=fpdLdiNumCorrectFixup" json:"fpd_ldi_num_correct_fixup,omitempty"`
	// the number of PL queued for fixup
	FpdPlNumQueuedFixedup uint64 `protobuf:"varint,31,opt,name=fpd_pl_num_queued_fixedup,json=fpdPlNumQueuedFixedup" json:"fpd_pl_num_queued_fixedup,omitempty"`
	// the number of corrected fixup PLs
	FpdPlNumCorrectFixup uint64 `protobuf:"varint,32,opt,name=fpd_pl_num_correct_fixup,json=fpdPlNumCorrectFixup" json:"fpd_pl_num_correct_fixup,omitempty"`
	// the number PLs added to retry while already in retry
	FpdPlRetryAddExist uint64 `protobuf:"varint,33,opt,name=fpd_pl_retry_add_exist,json=fpdPlRetryAddExist" json:"fpd_pl_retry_add_exist,omitempty"`
	// the number of PLs linked to resolving tables for inline res
	FpdPlInlineResQ uint64 `protobuf:"varint,34,opt,name=fpd_pl_inline_res_q,json=fpdPlInlineResQ" json:"fpd_pl_inline_res_q,omitempty"`
	// number of pl creates with backu path
	FpdPlWithBackupCreateCount uint64 `protobuf:"varint,35,opt,name=fpd_pl_with_backup_create_count,json=fpdPlWithBackupCreateCount" json:"fpd_pl_with_backup_create_count,omitempty"`
	// number of pl deletes with backup path
	FpdPlWithBackupDelCount uint64 `protobuf:"varint,36,opt,name=fpd_pl_with_backup_del_count,json=fpdPlWithBackupDelCount" json:"fpd_pl_with_backup_del_count,omitempty"`
	// number of PLs marked to include backup path
	FpdPlBackupEnableCount uint64 `protobuf:"varint,37,opt,name=fpd_pl_backup_enable_count,json=fpdPlBackupEnableCount" json:"fpd_pl_backup_enable_count,omitempty"`
	//  number of PLs unmarked to include backup path
	FpdPlBackupDisableCount uint64 `protobuf:"varint,38,opt,name=fpd_pl_backup_disable_count,json=fpdPlBackupDisableCount" json:"fpd_pl_backup_disable_count,omitempty"`
	// number of PLs visited on fast notification
	FpdPlFastNfnCount uint64 `protobuf:"varint,39,opt,name=fpd_pl_fast_nfn_count,json=fpdPlFastNfnCount" json:"fpd_pl_fast_nfn_count,omitempty"`
	// number of ldi backup path activications
	FpdLdiBackupActivateCount uint64 `protobuf:"varint,40,opt,name=fpd_ldi_backup_activate_count,json=fpdLdiBackupActivateCount" json:"fpd_ldi_backup_activate_count,omitempty"`
	// ldi mod time for last backup activation
	FpdLdiLastBackupActivateTime uint64 `protobuf:"varint,41,opt,name=fpd_ldi_last_backup_activate_time,json=fpdLdiLastBackupActivateTime" json:"fpd_ldi_last_backup_activate_time,omitempty"`
	// max ldi mod time for backup activation
	FpdLdiMaxBackupActivateTime uint64 `protobuf:"varint,42,opt,name=fpd_ldi_max_backup_activate_time,json=fpdLdiMaxBackupActivateTime" json:"fpd_ldi_max_backup_activate_time,omitempty"`
	// min ldi mod time for backup activation
	FpdLdiMinBackupActivateTime uint64 `protobuf:"varint,43,opt,name=fpd_ldi_min_backup_activate_time,json=fpdLdiMinBackupActivateTime" json:"fpd_ldi_min_backup_activate_time,omitempty"`
	// total ldi mod time for backup activation
	FpdLdiTotalBackupActivateTime uint64 `protobuf:"varint,44,opt,name=fpd_ldi_total_backup_activate_time,json=fpdLdiTotalBackupActivateTime" json:"fpd_ldi_total_backup_activate_time,omitempty"`
	// avg ldi mod time for backup activation
	FpdLdiAvgBackupActivateTime uint64 `protobuf:"varint,45,opt,name=fpd_ldi_avg_backup_activate_time,json=fpdLdiAvgBackupActivateTime" json:"fpd_ldi_avg_backup_activate_time,omitempty"`
	// number of resolution failures because of recursion constraint
	FpdRecursionConstraintCount uint64 `protobuf:"varint,46,opt,name=fpd_recursion_constraint_count,json=fpdRecursionConstraintCount" json:"fpd_recursion_constraint_count,omitempty"`
	// the number of deleted with non-zero refcount
	FpdLdiNumDelRefcnt uint64 `protobuf:"varint,47,opt,name=fpd_ldi_num_del_refcnt,json=fpdLdiNumDelRefcnt" json:"fpd_ldi_num_del_refcnt,omitempty"`
	// the number of retries of each type
	FpdNumRetries []uint64 `protobuf:"varint,48,rep,packed,name=fpd_num_retries,json=fpdNumRetries" json:"fpd_num_retries,omitempty"`
	// the number of elements in retryq
	FpdRetryqSize uint32 `protobuf:"varint,49,opt,name=fpd_retryq_size,json=fpdRetryqSize" json:"fpd_retryq_size,omitempty"`
	// the number of allocs for this proto
	FpdNumAllocs uint64 `protobuf:"varint,50,opt,name=fpd_num_allocs,json=fpdNumAllocs" json:"fpd_num_allocs,omitempty"`
	// the number of frees for this proto
	FpdNumFrees uint64 `protobuf:"varint,51,opt,name=fpd_num_frees,json=fpdNumFrees" json:"fpd_num_frees,omitempty"`
	// timeout value in msec
	FpdRetryqTimeout uint32 `protobuf:"varint,52,opt,name=fpd_retryq_timeout,json=fpdRetryqTimeout" json:"fpd_retryq_timeout,omitempty"`
	// Scheduler time period in msec
	FpdRetryqSchedTime uint32 `protobuf:"varint,53,opt,name=fpd_retryq_sched_time,json=fpdRetryqSchedTime" json:"fpd_retryq_sched_time,omitempty"`
}

func (m *FibShProtoDebugStats) Reset()                    { *m = FibShProtoDebugStats{} }
func (m *FibShProtoDebugStats) String() string            { return proto.CompactTextString(m) }
func (*FibShProtoDebugStats) ProtoMessage()               {}
func (*FibShProtoDebugStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FibShProtoDebugStats) GetFpdGbltblEntries() uint64 {
	if m != nil {
		return m.FpdGbltblEntries
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdGbltblRejEntries() uint64 {
	if m != nil {
		return m.FpdGbltblRejEntries
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdVrftblEntries() uint64 {
	if m != nil {
		return m.FpdVrftblEntries
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdVrftblRejEntries() uint64 {
	if m != nil {
		return m.FpdVrftblRejEntries
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdNumTbls() uint32 {
	if m != nil {
		return m.FpdNumTbls
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdGbltblSrcEntries() []uint64 {
	if m != nil {
		return m.FpdGbltblSrcEntries
	}
	return nil
}

func (m *FibShProtoDebugStats) GetFpdVrftblSrcEntries() []uint64 {
	if m != nil {
		return m.FpdVrftblSrcEntries
	}
	return nil
}

func (m *FibShProtoDebugStats) GetFpdBcdlMsgs() uint64 {
	if m != nil {
		return m.FpdBcdlMsgs
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdRouteUpd() uint64 {
	if m != nil {
		return m.FpdRouteUpd
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdRouteDel() uint64 {
	if m != nil {
		return m.FpdRouteDel
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdRouteRcv() uint64 {
	if m != nil {
		return m.FpdRouteRcv
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdRouteDrops() uint64 {
	if m != nil {
		return m.FpdRouteDrops
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLblRecycled() uint64 {
	if m != nil {
		return m.FpdLblRecycled
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdVersionMismatchDrops() uint64 {
	if m != nil {
		return m.FpdVersionMismatchDrops
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdAdjUpd() uint64 {
	if m != nil {
		return m.FpdAdjUpd
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdAdjDel() uint64 {
	if m != nil {
		return m.FpdAdjDel
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdAdjUpdTx() uint64 {
	if m != nil {
		return m.FpdAdjUpdTx
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdAdjUpdTxNhFound() uint64 {
	if m != nil {
		return m.FpdAdjUpdTxNhFound
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdAdjUpdTxRetryCreated() uint64 {
	if m != nil {
		return m.FpdAdjUpdTxRetryCreated
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdAdjTxRetryNhFound() uint64 {
	if m != nil {
		return m.FpdAdjTxRetryNhFound
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdAdjTxRetryObjReinit() uint64 {
	if m != nil {
		return m.FpdAdjTxRetryObjReinit
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdAdjDrops() uint64 {
	if m != nil {
		return m.FpdAdjDrops
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdAdjMsg() uint64 {
	if m != nil {
		return m.FpdAdjMsg
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdTeRcv() uint64 {
	if m != nil {
		return m.FpdTeRcv
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdTeVersionMismatchDrops() uint64 {
	if m != nil {
		return m.FpdTeVersionMismatchDrops
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlatfUpdStats() *FibShPlatfUpdStats {
	if m != nil {
		return m.FpdPlatfUpdStats
	}
	return nil
}

func (m *FibShProtoDebugStats) GetFpdGtrieTiming() *FibShGtrieTiming {
	if m != nil {
		return m.FpdGtrieTiming
	}
	return nil
}

func (m *FibShProtoDebugStats) GetFpdNumRetryTouts() uint64 {
	if m != nil {
		return m.FpdNumRetryTouts
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLdiNumFixedup() uint64 {
	if m != nil {
		return m.FpdLdiNumFixedup
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLdiNumCorrectFixup() uint64 {
	if m != nil {
		return m.FpdLdiNumCorrectFixup
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlNumQueuedFixedup() uint64 {
	if m != nil {
		return m.FpdPlNumQueuedFixedup
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlNumCorrectFixup() uint64 {
	if m != nil {
		return m.FpdPlNumCorrectFixup
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlRetryAddExist() uint64 {
	if m != nil {
		return m.FpdPlRetryAddExist
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlInlineResQ() uint64 {
	if m != nil {
		return m.FpdPlInlineResQ
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlWithBackupCreateCount() uint64 {
	if m != nil {
		return m.FpdPlWithBackupCreateCount
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlWithBackupDelCount() uint64 {
	if m != nil {
		return m.FpdPlWithBackupDelCount
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlBackupEnableCount() uint64 {
	if m != nil {
		return m.FpdPlBackupEnableCount
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlBackupDisableCount() uint64 {
	if m != nil {
		return m.FpdPlBackupDisableCount
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdPlFastNfnCount() uint64 {
	if m != nil {
		return m.FpdPlFastNfnCount
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLdiBackupActivateCount() uint64 {
	if m != nil {
		return m.FpdLdiBackupActivateCount
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLdiLastBackupActivateTime() uint64 {
	if m != nil {
		return m.FpdLdiLastBackupActivateTime
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLdiMaxBackupActivateTime() uint64 {
	if m != nil {
		return m.FpdLdiMaxBackupActivateTime
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLdiMinBackupActivateTime() uint64 {
	if m != nil {
		return m.FpdLdiMinBackupActivateTime
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLdiTotalBackupActivateTime() uint64 {
	if m != nil {
		return m.FpdLdiTotalBackupActivateTime
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLdiAvgBackupActivateTime() uint64 {
	if m != nil {
		return m.FpdLdiAvgBackupActivateTime
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdRecursionConstraintCount() uint64 {
	if m != nil {
		return m.FpdRecursionConstraintCount
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdLdiNumDelRefcnt() uint64 {
	if m != nil {
		return m.FpdLdiNumDelRefcnt
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdNumRetries() []uint64 {
	if m != nil {
		return m.FpdNumRetries
	}
	return nil
}

func (m *FibShProtoDebugStats) GetFpdRetryqSize() uint32 {
	if m != nil {
		return m.FpdRetryqSize
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdNumAllocs() uint64 {
	if m != nil {
		return m.FpdNumAllocs
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdNumFrees() uint64 {
	if m != nil {
		return m.FpdNumFrees
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdRetryqTimeout() uint32 {
	if m != nil {
		return m.FpdRetryqTimeout
	}
	return 0
}

func (m *FibShProtoDebugStats) GetFpdRetryqSchedTime() uint32 {
	if m != nil {
		return m.FpdRetryqSchedTime
	}
	return 0
}

// FIB per protocol purge counters
type FibShProtoPurgeStats struct {
	// the number of frees for this proto
	FppCntrs []uint32 `protobuf:"varint,1,rep,packed,name=fpp_cntrs,json=fppCntrs" json:"fpp_cntrs,omitempty"`
}

func (m *FibShProtoPurgeStats) Reset()                    { *m = FibShProtoPurgeStats{} }
func (m *FibShProtoPurgeStats) String() string            { return proto.CompactTextString(m) }
func (*FibShProtoPurgeStats) ProtoMessage()               {}
func (*FibShProtoPurgeStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FibShProtoPurgeStats) GetFppCntrs() []uint32 {
	if m != nil {
		return m.FppCntrs
	}
	return nil
}

type FibShRouteDelTs struct {
	Tableid   uint32 `protobuf:"varint,1,opt,name=tableid" json:"tableid,omitempty"`
	Prfx      []byte `protobuf:"bytes,2,opt,name=prfx,proto3" json:"prfx,omitempty"`
	PrfxLen   uint32 `protobuf:"varint,3,opt,name=prfx_len,json=prfxLen" json:"prfx_len,omitempty"`
	PrfxProto uint32 `protobuf:"varint,4,opt,name=prfx_proto,json=prfxProto" json:"prfx_proto,omitempty"`
	MsecTime  uint64 `protobuf:"varint,5,opt,name=msec_time,json=msecTime" json:"msec_time,omitempty"`
}

func (m *FibShRouteDelTs) Reset()                    { *m = FibShRouteDelTs{} }
func (m *FibShRouteDelTs) String() string            { return proto.CompactTextString(m) }
func (*FibShRouteDelTs) ProtoMessage()               {}
func (*FibShRouteDelTs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FibShRouteDelTs) GetTableid() uint32 {
	if m != nil {
		return m.Tableid
	}
	return 0
}

func (m *FibShRouteDelTs) GetPrfx() []byte {
	if m != nil {
		return m.Prfx
	}
	return nil
}

func (m *FibShRouteDelTs) GetPrfxLen() uint32 {
	if m != nil {
		return m.PrfxLen
	}
	return 0
}

func (m *FibShRouteDelTs) GetPrfxProto() uint32 {
	if m != nil {
		return m.PrfxProto
	}
	return 0
}

func (m *FibShRouteDelTs) GetMsecTime() uint64 {
	if m != nil {
		return m.MsecTime
	}
	return 0
}

// FIB ISSU protocol state
type FibIssuProtoState struct {
	// Protocol name
	ProtocolName    string `protobuf:"bytes,1,opt,name=protocol_name,json=protocolName" json:"protocol_name,omitempty"`
	AibEodTimeStamp string `protobuf:"bytes,2,opt,name=aib_eod_time_stamp,json=aibEodTimeStamp" json:"aib_eod_time_stamp,omitempty"`
	// RSI EOD expected/valid
	RsiEodValid bool `protobuf:"varint,3,opt,name=rsi_eod_valid,json=rsiEodValid" json:"rsi_eod_valid,omitempty"`
	// RSI EOD received timestamp
	RsiEodTimeStamp string `protobuf:"bytes,4,opt,name=rsi_eod_time_stamp,json=rsiEodTimeStamp" json:"rsi_eod_time_stamp,omitempty"`
	// LSD EOD expected/valid
	LsdEodValid bool `protobuf:"varint,5,opt,name=lsd_eod_valid,json=lsdEodValid" json:"lsd_eod_valid,omitempty"`
	// LSD EOD received timestamp
	LsdEodTimeStamp string `protobuf:"bytes,6,opt,name=lsd_eod_time_stamp,json=lsdEodTimeStamp" json:"lsd_eod_time_stamp,omitempty"`
	// LMRIB EOD expected/valid
	LmribEodValid bool `protobuf:"varint,7,opt,name=lmrib_eod_valid,json=lmribEodValid" json:"lmrib_eod_valid,omitempty"`
	// LMRIB EOD received timestamp
	LmribEodTimeStamp string `protobuf:"bytes,8,opt,name=lmrib_eod_time_stamp,json=lmribEodTimeStamp" json:"lmrib_eod_time_stamp,omitempty"`
	// RIB table info valid
	RibInfoValid bool `protobuf:"varint,9,opt,name=rib_info_valid,json=ribInfoValid" json:"rib_info_valid,omitempty"`
	// Number of BCDL tables
	BcdlTables uint32 `protobuf:"varint,10,opt,name=bcdl_tables,json=bcdlTables" json:"bcdl_tables,omitempty"`
	// Number of tables converged
	ConvergedTables uint32 `protobuf:"varint,11,opt,name=converged_tables,json=convergedTables" json:"converged_tables,omitempty"`
	// All RIB tables converged timestamp
	RibTablesConvergedTimeStamp string `protobuf:"bytes,12,opt,name=rib_tables_converged_time_stamp,json=ribTablesConvergedTimeStamp" json:"rib_tables_converged_time_stamp,omitempty"`
	// Protocol EOD expected/valid
	ProtocolEodValid bool `protobuf:"varint,13,opt,name=protocol_eod_valid,json=protocolEodValid" json:"protocol_eod_valid,omitempty"`
	// Protocol EOD sent timestamp
	ProtocolEodTimeStamp string `protobuf:"bytes,14,opt,name=protocol_eod_time_stamp,json=protocolEodTimeStamp" json:"protocol_eod_time_stamp,omitempty"`
}

func (m *FibIssuProtoState) Reset()                    { *m = FibIssuProtoState{} }
func (m *FibIssuProtoState) String() string            { return proto.CompactTextString(m) }
func (*FibIssuProtoState) ProtoMessage()               {}
func (*FibIssuProtoState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FibIssuProtoState) GetProtocolName() string {
	if m != nil {
		return m.ProtocolName
	}
	return ""
}

func (m *FibIssuProtoState) GetAibEodTimeStamp() string {
	if m != nil {
		return m.AibEodTimeStamp
	}
	return ""
}

func (m *FibIssuProtoState) GetRsiEodValid() bool {
	if m != nil {
		return m.RsiEodValid
	}
	return false
}

func (m *FibIssuProtoState) GetRsiEodTimeStamp() string {
	if m != nil {
		return m.RsiEodTimeStamp
	}
	return ""
}

func (m *FibIssuProtoState) GetLsdEodValid() bool {
	if m != nil {
		return m.LsdEodValid
	}
	return false
}

func (m *FibIssuProtoState) GetLsdEodTimeStamp() string {
	if m != nil {
		return m.LsdEodTimeStamp
	}
	return ""
}

func (m *FibIssuProtoState) GetLmribEodValid() bool {
	if m != nil {
		return m.LmribEodValid
	}
	return false
}

func (m *FibIssuProtoState) GetLmribEodTimeStamp() string {
	if m != nil {
		return m.LmribEodTimeStamp
	}
	return ""
}

func (m *FibIssuProtoState) GetRibInfoValid() bool {
	if m != nil {
		return m.RibInfoValid
	}
	return false
}

func (m *FibIssuProtoState) GetBcdlTables() uint32 {
	if m != nil {
		return m.BcdlTables
	}
	return 0
}

func (m *FibIssuProtoState) GetConvergedTables() uint32 {
	if m != nil {
		return m.ConvergedTables
	}
	return 0
}

func (m *FibIssuProtoState) GetRibTablesConvergedTimeStamp() string {
	if m != nil {
		return m.RibTablesConvergedTimeStamp
	}
	return ""
}

func (m *FibIssuProtoState) GetProtocolEodValid() bool {
	if m != nil {
		return m.ProtocolEodValid
	}
	return false
}

func (m *FibIssuProtoState) GetProtocolEodTimeStamp() string {
	if m != nil {
		return m.ProtocolEodTimeStamp
	}
	return ""
}

// FIB ISSU state
type FibIssuState struct {
	// IMDR supported
	ImdrSupport bool `protobuf:"varint,1,opt,name=imdr_support,json=imdrSupport" json:"imdr_support,omitempty"`
	// SLC supported
	SlcSupport bool `protobuf:"varint,2,opt,name=slc_support,json=slcSupport" json:"slc_support,omitempty"`
	// ISSU restart
	FisIssuRestart bool `protobuf:"varint,3,opt,name=fis_issu_restart,json=fisIssuRestart" json:"fis_issu_restart,omitempty"`
	// IMDR End-of-config implicit
	ImdrEocImplicit bool `protobuf:"varint,4,opt,name=imdr_eoc_implicit,json=imdrEocImplicit" json:"imdr_eoc_implicit,omitempty"`
	// SLC End-of-config implicit
	SlcEocImplicit bool `protobuf:"varint,5,opt,name=slc_eoc_implicit,json=slcEocImplicit" json:"slc_eoc_implicit,omitempty"`
	// End-of-config received from IMDR timestamp
	EocReceivedImdrTimeStamp string `protobuf:"bytes,6,opt,name=eoc_received_imdr_time_stamp,json=eocReceivedImdrTimeStamp" json:"eoc_received_imdr_time_stamp,omitempty"`
	// End-of-config received from SLC timestamp
	EocReceivedSlcTimeStamp string `protobuf:"bytes,7,opt,name=eoc_received_slc_time_stamp,json=eocReceivedSlcTimeStamp" json:"eoc_received_slc_time_stamp,omitempty"`
	// End-of-download received from IM timestamp
	EodReceivedImTimeStamp string `protobuf:"bytes,8,opt,name=eod_received_im_time_stamp,json=eodReceivedImTimeStamp" json:"eod_received_im_time_stamp,omitempty"`
	// End-of-download send to IMDR timestamp
	EodSentImdrTimeStamp string `protobuf:"bytes,9,opt,name=eod_sent_imdr_time_stamp,json=eodSentImdrTimeStamp" json:"eod_sent_imdr_time_stamp,omitempty"`
	// End-of-download send to SLC timestamp
	EodSentSlcTimeStamp string `protobuf:"bytes,10,opt,name=eod_sent_slc_time_stamp,json=eodSentSlcTimeStamp" json:"eod_sent_slc_time_stamp,omitempty"`
	// ISSU error sent to ISSUMGR timetstamp
	FisIssuErrorTs uint64 `protobuf:"varint,11,opt,name=fis_issu_error_ts,json=fisIssuErrorTs" json:"fis_issu_error_ts,omitempty"`
	// IMDR state for the protocols
	FisProtoState []*FibIssuProtoState `protobuf:"bytes,12,rep,name=fis_proto_state,json=fisProtoState" json:"fis_proto_state,omitempty"`
}

func (m *FibIssuState) Reset()                    { *m = FibIssuState{} }
func (m *FibIssuState) String() string            { return proto.CompactTextString(m) }
func (*FibIssuState) ProtoMessage()               {}
func (*FibIssuState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FibIssuState) GetImdrSupport() bool {
	if m != nil {
		return m.ImdrSupport
	}
	return false
}

func (m *FibIssuState) GetSlcSupport() bool {
	if m != nil {
		return m.SlcSupport
	}
	return false
}

func (m *FibIssuState) GetFisIssuRestart() bool {
	if m != nil {
		return m.FisIssuRestart
	}
	return false
}

func (m *FibIssuState) GetImdrEocImplicit() bool {
	if m != nil {
		return m.ImdrEocImplicit
	}
	return false
}

func (m *FibIssuState) GetSlcEocImplicit() bool {
	if m != nil {
		return m.SlcEocImplicit
	}
	return false
}

func (m *FibIssuState) GetEocReceivedImdrTimeStamp() string {
	if m != nil {
		return m.EocReceivedImdrTimeStamp
	}
	return ""
}

func (m *FibIssuState) GetEocReceivedSlcTimeStamp() string {
	if m != nil {
		return m.EocReceivedSlcTimeStamp
	}
	return ""
}

func (m *FibIssuState) GetEodReceivedImTimeStamp() string {
	if m != nil {
		return m.EodReceivedImTimeStamp
	}
	return ""
}

func (m *FibIssuState) GetEodSentImdrTimeStamp() string {
	if m != nil {
		return m.EodSentImdrTimeStamp
	}
	return ""
}

func (m *FibIssuState) GetEodSentSlcTimeStamp() string {
	if m != nil {
		return m.EodSentSlcTimeStamp
	}
	return ""
}

func (m *FibIssuState) GetFisIssuErrorTs() uint64 {
	if m != nil {
		return m.FisIssuErrorTs
	}
	return 0
}

func (m *FibIssuState) GetFisProtoState() []*FibIssuProtoState {
	if m != nil {
		return m.FisProtoState
	}
	return nil
}

// FIB per protocol frr counters
type FibShProtoFrrStats struct {
	// number of FRR events sent on nh interface down
	MiNumIntfFrr uint32 `protobuf:"varint,1,opt,name=mi_num_intf_frr,json=miNumIntfFrr" json:"mi_num_intf_frr,omitempty"`
	// number of FRR events sent on nh parent interface down
	MiNumParentIntfFrr uint32 `protobuf:"varint,2,opt,name=mi_num_parent_intf_frr,json=miNumParentIntfFrr" json:"mi_num_parent_intf_frr,omitempty"`
	// number of interface down FRR events from PFI
	MiNumPfiIntfDown uint32 `protobuf:"varint,3,opt,name=mi_num_pfi_intf_down,json=miNumPfiIntfDown" json:"mi_num_pfi_intf_down,omitempty"`
	// number of NH down FRR events frm BFD
	MiNumBfdDown uint32 `protobuf:"varint,4,opt,name=mi_num_bfd_down,json=miNumBfdDown" json:"mi_num_bfd_down,omitempty"`
	// total number of prot FRR objects
	MiNumProtFrrObjects uint32 `protobuf:"varint,5,opt,name=mi_num_prot_frr_objects,json=miNumProtFrrObjects" json:"mi_num_prot_frr_objects,omitempty"`
	// total number of backup FRR objects
	MiNumBkupFrrObjects uint32 `protobuf:"varint,6,opt,name=mi_num_bkup_frr_objects,json=miNumBkupFrrObjects" json:"mi_num_bkup_frr_objects,omitempty"`
	// total number of successful FRR tunnel ID allocations
	MiNumTunidAllocs uint32 `protobuf:"varint,7,opt,name=mi_num_tunid_allocs,json=miNumTunidAllocs" json:"mi_num_tunid_allocs,omitempty"`
	// total number of FRR tunnel ID allocation failures
	MiNumTunidAllocFailures uint32 `protobuf:"varint,8,opt,name=mi_num_tunid_alloc_failures,json=miNumTunidAllocFailures" json:"mi_num_tunid_alloc_failures,omitempty"`
	// total number of successful FRR tunnel ID frees
	MiNumTunidFrees uint32 `protobuf:"varint,9,opt,name=mi_num_tunid_frees,json=miNumTunidFrees" json:"mi_num_tunid_frees,omitempty"`
	// total number of FRR tunnel ID free failures
	MiNumTunidFreeFailures uint32 `protobuf:"varint,10,opt,name=mi_num_tunid_free_failures,json=miNumTunidFreeFailures" json:"mi_num_tunid_free_failures,omitempty"`
	// number of frr reset queue adds
	MiNumFrrResetQueueAdds uint32 `protobuf:"varint,11,opt,name=mi_num_frr_reset_queue_adds,json=miNumFrrResetQueueAdds" json:"mi_num_frr_reset_queue_adds,omitempty"`
	// number of frr reset queue deletes
	MiNumFrrResetQueueRemove uint32 `protobuf:"varint,12,opt,name=mi_num_frr_reset_queue_remove,json=miNumFrrResetQueueRemove" json:"mi_num_frr_reset_queue_remove,omitempty"`
	// number of frr resets
	MiNumFrrReset uint32 `protobuf:"varint,13,opt,name=mi_num_frr_reset,json=miNumFrrReset" json:"mi_num_frr_reset,omitempty"`
	// number of frr events received in proto thread
	MiNumFrrProtoEvents uint32 `protobuf:"varint,14,opt,name=mi_num_frr_proto_events,json=miNumFrrProtoEvents" json:"mi_num_frr_proto_events,omitempty"`
	// frr log size
	MiNumFrrLogs uint32 `protobuf:"varint,15,opt,name=mi_num_frr_logs,json=miNumFrrLogs" json:"mi_num_frr_logs,omitempty"`
}

func (m *FibShProtoFrrStats) Reset()                    { *m = FibShProtoFrrStats{} }
func (m *FibShProtoFrrStats) String() string            { return proto.CompactTextString(m) }
func (*FibShProtoFrrStats) ProtoMessage()               {}
func (*FibShProtoFrrStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FibShProtoFrrStats) GetMiNumIntfFrr() uint32 {
	if m != nil {
		return m.MiNumIntfFrr
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumParentIntfFrr() uint32 {
	if m != nil {
		return m.MiNumParentIntfFrr
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumPfiIntfDown() uint32 {
	if m != nil {
		return m.MiNumPfiIntfDown
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumBfdDown() uint32 {
	if m != nil {
		return m.MiNumBfdDown
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumProtFrrObjects() uint32 {
	if m != nil {
		return m.MiNumProtFrrObjects
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumBkupFrrObjects() uint32 {
	if m != nil {
		return m.MiNumBkupFrrObjects
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumTunidAllocs() uint32 {
	if m != nil {
		return m.MiNumTunidAllocs
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumTunidAllocFailures() uint32 {
	if m != nil {
		return m.MiNumTunidAllocFailures
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumTunidFrees() uint32 {
	if m != nil {
		return m.MiNumTunidFrees
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumTunidFreeFailures() uint32 {
	if m != nil {
		return m.MiNumTunidFreeFailures
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumFrrResetQueueAdds() uint32 {
	if m != nil {
		return m.MiNumFrrResetQueueAdds
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumFrrResetQueueRemove() uint32 {
	if m != nil {
		return m.MiNumFrrResetQueueRemove
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumFrrReset() uint32 {
	if m != nil {
		return m.MiNumFrrReset
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumFrrProtoEvents() uint32 {
	if m != nil {
		return m.MiNumFrrProtoEvents
	}
	return 0
}

func (m *FibShProtoFrrStats) GetMiNumFrrLogs() uint32 {
	if m != nil {
		return m.MiNumFrrLogs
	}
	return 0
}

// FIB platform capabilities
type FibShPlatCapabilities struct {
	// L3 LBL levels
	FpcNumL3LblLevels uint32 `protobuf:"varint,1,opt,name=fpc_num_l3_lbl_levels,json=fpcNumL3LblLevels" json:"fpc_num_l3_lbl_levels,omitempty"`
	// L3 Hash buckets
	FpcNumL3LblPaths uint32 `protobuf:"varint,2,opt,name=fpc_num_l3_lbl_paths,json=fpcNumL3LblPaths" json:"fpc_num_l3_lbl_paths,omitempty"`
	// L3 Recursive Hash buckets
	FpcNumL3LblRecPaths uint32 `protobuf:"varint,3,opt,name=fpc_num_l3_lbl_rec_paths,json=fpcNumL3LblRecPaths" json:"fpc_num_l3_lbl_rec_paths,omitempty"`
	// L3 Unequal cost hash buckets
	FpcNumL3UcmpPaths uint32 `protobuf:"varint,4,opt,name=fpc_num_l3_ucmp_paths,json=fpcNumL3UcmpPaths" json:"fpc_num_l3_ucmp_paths,omitempty"`
	// Forwarding stages
	FpcNumFwdingStages uint32 `protobuf:"varint,5,opt,name=fpc_num_fwding_stages,json=fpcNumFwdingStages" json:"fpc_num_fwding_stages,omitempty"`
	// Label split
	FpcLocalLabelSplit uint32 `protobuf:"varint,6,opt,name=fpc_local_label_split,json=fpcLocalLabelSplit" json:"fpc_local_label_split,omitempty"`
	// Statistics support
	FpcStatsSupport bool `protobuf:"varint,7,opt,name=fpc_stats_support,json=fpcStatsSupport" json:"fpc_stats_support,omitempty"`
	// Plat ready cb register
	FpcPlatfReadyCbWait bool `protobuf:"varint,8,opt,name=fpc_platf_ready_cb_wait,json=fpcPlatfReadyCbWait" json:"fpc_platf_ready_cb_wait,omitempty"`
	// Path per tunnel class
	FpcNumPathsPerPbtsClass uint32 `protobuf:"varint,9,opt,name=fpc_num_paths_per_pbts_class,json=fpcNumPathsPerPbtsClass" json:"fpc_num_paths_per_pbts_class,omitempty"`
	// V4 update disable
	FpcPlatfV4UpdDisable bool `protobuf:"varint,10,opt,name=fpc_platf_v4_upd_disable,json=fpcPlatfV4UpdDisable" json:"fpc_platf_v4_upd_disable,omitempty"`
	// V6 update disable
	FpcPlatfV6UpdDisable bool `protobuf:"varint,11,opt,name=fpc_platf_v6_upd_disable,json=fpcPlatfV6UpdDisable" json:"fpc_platf_v6_upd_disable,omitempty"`
	// LBA tuples
	FpcLbaTuplesDefault uint32 `protobuf:"varint,12,opt,name=fpc_lba_tuples_default,json=fpcLbaTuplesDefault" json:"fpc_lba_tuples_default,omitempty"`
	// MRAPS support
	FpcMrapsSupport bool `protobuf:"varint,13,opt,name=fpc_mraps_support,json=fpcMrapsSupport" json:"fpc_mraps_support,omitempty"`
	// PBTS default class support
	FpcPbtsDefclassSupport bool `protobuf:"varint,14,opt,name=fpc_pbts_defclass_support,json=fpcPbtsDefclassSupport" json:"fpc_pbts_defclass_support,omitempty"`
	// loadinfo filter support
	FpcLoadinfoFilterSupport bool `protobuf:"varint,15,opt,name=fpc_loadinfo_filter_support,json=fpcLoadinfoFilterSupport" json:"fpc_loadinfo_filter_support,omitempty"`
	// LISP Decap over 4
	FpcLispDecapOverV4 []bool `protobuf:"varint,16,rep,packed,name=fpc_lisp_decap_over_v4,json=fpcLispDecapOverV4" json:"fpc_lisp_decap_over_v4,omitempty"`
	// LISP Decap over 6
	FpcLispDecapOverV6 []bool `protobuf:"varint,17,rep,packed,name=fpc_lisp_decap_over_v6,json=fpcLispDecapOverV6" json:"fpc_lisp_decap_over_v6,omitempty"`
	// LISP UCMP support
	FpcLispUcmp []bool `protobuf:"varint,18,rep,packed,name=fpc_lisp_ucmp,json=fpcLispUcmp" json:"fpc_lisp_ucmp,omitempty"`
	// Fallback VRF support
	FpcResolveViaTable []bool `protobuf:"varint,19,rep,packed,name=fpc_resolve_via_table,json=fpcResolveViaTable" json:"fpc_resolve_via_table,omitempty"`
	// NHID support
	FpcNhid bool `protobuf:"varint,20,opt,name=fpc_nhid,json=fpcNhid" json:"fpc_nhid,omitempty"`
	// Backwalk dependents is required
	FpcPlatfTempBackWalkReqd bool `protobuf:"varint,21,opt,name=fpc_platf_temp_back_walk_reqd,json=fpcPlatfTempBackWalkReqd" json:"fpc_platf_temp_back_walk_reqd,omitempty"`
	// Link MPLS IPv6 NH support
	FpcLinkMplsNhinfoInIpv6ThreadSupport bool `protobuf:"varint,22,opt,name=fpc_link_mpls_nhinfo_in_ipv6_thread_support,json=fpcLinkMplsNhinfoInIpv6ThreadSupport" json:"fpc_link_mpls_nhinfo_in_ipv6_thread_support,omitempty"`
	// Exclude Deag backup Paths
	FpcExcludeDeagBkup bool `protobuf:"varint,23,opt,name=fpc_exclude_deag_bkup,json=fpcExcludeDeagBkup" json:"fpc_exclude_deag_bkup,omitempty"`
	// Per-destination load-balancing support
	FpcDlbSupport bool `protobuf:"varint,24,opt,name=fpc_dlb_support,json=fpcDlbSupport" json:"fpc_dlb_support,omitempty"`
	// Prefix filter level of support
	FpcPrefixFilterSupport uint32 `protobuf:"varint,25,opt,name=fpc_prefix_filter_support,json=fpcPrefixFilterSupport" json:"fpc_prefix_filter_support,omitempty"`
	// Slowpath ingress inject required
	FpcSlowpathIngressInjectReqd bool `protobuf:"varint,26,opt,name=fpc_slowpath_ingress_inject_reqd,json=fpcSlowpathIngressInjectReqd" json:"fpc_slowpath_ingress_inject_reqd,omitempty"`
}

func (m *FibShPlatCapabilities) Reset()                    { *m = FibShPlatCapabilities{} }
func (m *FibShPlatCapabilities) String() string            { return proto.CompactTextString(m) }
func (*FibShPlatCapabilities) ProtoMessage()               {}
func (*FibShPlatCapabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FibShPlatCapabilities) GetFpcNumL3LblLevels() uint32 {
	if m != nil {
		return m.FpcNumL3LblLevels
	}
	return 0
}

func (m *FibShPlatCapabilities) GetFpcNumL3LblPaths() uint32 {
	if m != nil {
		return m.FpcNumL3LblPaths
	}
	return 0
}

func (m *FibShPlatCapabilities) GetFpcNumL3LblRecPaths() uint32 {
	if m != nil {
		return m.FpcNumL3LblRecPaths
	}
	return 0
}

func (m *FibShPlatCapabilities) GetFpcNumL3UcmpPaths() uint32 {
	if m != nil {
		return m.FpcNumL3UcmpPaths
	}
	return 0
}

func (m *FibShPlatCapabilities) GetFpcNumFwdingStages() uint32 {
	if m != nil {
		return m.FpcNumFwdingStages
	}
	return 0
}

func (m *FibShPlatCapabilities) GetFpcLocalLabelSplit() uint32 {
	if m != nil {
		return m.FpcLocalLabelSplit
	}
	return 0
}

func (m *FibShPlatCapabilities) GetFpcStatsSupport() bool {
	if m != nil {
		return m.FpcStatsSupport
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcPlatfReadyCbWait() bool {
	if m != nil {
		return m.FpcPlatfReadyCbWait
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcNumPathsPerPbtsClass() uint32 {
	if m != nil {
		return m.FpcNumPathsPerPbtsClass
	}
	return 0
}

func (m *FibShPlatCapabilities) GetFpcPlatfV4UpdDisable() bool {
	if m != nil {
		return m.FpcPlatfV4UpdDisable
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcPlatfV6UpdDisable() bool {
	if m != nil {
		return m.FpcPlatfV6UpdDisable
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcLbaTuplesDefault() uint32 {
	if m != nil {
		return m.FpcLbaTuplesDefault
	}
	return 0
}

func (m *FibShPlatCapabilities) GetFpcMrapsSupport() bool {
	if m != nil {
		return m.FpcMrapsSupport
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcPbtsDefclassSupport() bool {
	if m != nil {
		return m.FpcPbtsDefclassSupport
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcLoadinfoFilterSupport() bool {
	if m != nil {
		return m.FpcLoadinfoFilterSupport
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcLispDecapOverV4() []bool {
	if m != nil {
		return m.FpcLispDecapOverV4
	}
	return nil
}

func (m *FibShPlatCapabilities) GetFpcLispDecapOverV6() []bool {
	if m != nil {
		return m.FpcLispDecapOverV6
	}
	return nil
}

func (m *FibShPlatCapabilities) GetFpcLispUcmp() []bool {
	if m != nil {
		return m.FpcLispUcmp
	}
	return nil
}

func (m *FibShPlatCapabilities) GetFpcResolveViaTable() []bool {
	if m != nil {
		return m.FpcResolveViaTable
	}
	return nil
}

func (m *FibShPlatCapabilities) GetFpcNhid() bool {
	if m != nil {
		return m.FpcNhid
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcPlatfTempBackWalkReqd() bool {
	if m != nil {
		return m.FpcPlatfTempBackWalkReqd
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcLinkMplsNhinfoInIpv6ThreadSupport() bool {
	if m != nil {
		return m.FpcLinkMplsNhinfoInIpv6ThreadSupport
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcExcludeDeagBkup() bool {
	if m != nil {
		return m.FpcExcludeDeagBkup
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcDlbSupport() bool {
	if m != nil {
		return m.FpcDlbSupport
	}
	return false
}

func (m *FibShPlatCapabilities) GetFpcPrefixFilterSupport() uint32 {
	if m != nil {
		return m.FpcPrefixFilterSupport
	}
	return 0
}

func (m *FibShPlatCapabilities) GetFpcSlowpathIngressInjectReqd() bool {
	if m != nil {
		return m.FpcSlowpathIngressInjectReqd
	}
	return false
}

func init() {
	proto.RegisterType((*FibShMisc_KEYS)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc_KEYS")
	proto.RegisterType((*FibShMisc)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_misc")
	proto.RegisterType((*FibShObjActionStats)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_obj_action_stats")
	proto.RegisterType((*FibShObjStats)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_obj_stats")
	proto.RegisterType((*FibShPlatfUpdStats)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_platf_upd_stats")
	proto.RegisterType((*FibShGtrieFnTiming)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_gtrie_fn_timing")
	proto.RegisterType((*FibShGtrieTiming)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_gtrie_timing")
	proto.RegisterType((*FibShProtoDebugStats)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_debug_stats")
	proto.RegisterType((*FibShProtoPurgeStats)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_purge_stats")
	proto.RegisterType((*FibShRouteDelTs)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_route_del_ts")
	proto.RegisterType((*FibIssuProtoState)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_issu_proto_state")
	proto.RegisterType((*FibIssuState)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_issu_state")
	proto.RegisterType((*FibShProtoFrrStats)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_proto_frr_stats")
	proto.RegisterType((*FibShPlatCapabilities)(nil), "cisco_ios_xr_fib_common_oper.fib.nodes.node.protocols.protocol.misc.fib_sh_plat_capabilities")
}

func init() { proto.RegisterFile("fib_sh_misc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xdd, 0x72, 0x1d, 0x37,
	0x72, 0x2e, 0x4a, 0xb2, 0x48, 0x82, 0x3c, 0xfc, 0x19, 0xca, 0xe2, 0xe8, 0xcf, 0xa2, 0x29, 0xaf,
	0x97, 0x5e, 0xdb, 0xf2, 0x5a, 0x92, 0xe5, 0x5d, 0xff, 0xed, 0x52, 0x24, 0x8f, 0x96, 0xf1, 0x11,
	0x45, 0x0f, 0x8f, 0x64, 0x3b, 0x9b, 0x14, 0x6a, 0x7e, 0x30, 0x87, 0x90, 0x30, 0x3f, 0x02, 0x30,
	0x47, 0xb4, 0x53, 0xa9, 0x4a, 0x52, 0x95, 0x4a, 0xd5, 0xe6, 0x22, 0xb9, 0x4c, 0xe5, 0x26, 0x0f,
	0x90, 0xa7, 0xc8, 0x75, 0x5e, 0x21, 0xaf, 0x90, 0x77, 0x48, 0x75, 0x37, 0x66, 0xce, 0xcc, 0x11,
	0xa5, 0xbd, 0x61, 0x6e, 0x24, 0x12, 0xfd, 0x7d, 0xdd, 0x8d, 0x46, 0xa3, 0x81, 0xc6, 0x90, 0xad,
	0xa6, 0x32, 0xe2, 0xe6, 0x98, 0x67, 0xd2, 0xc4, 0xb7, 0x4b, 0x5d, 0xd8, 0xc2, 0xdb, 0x89, 0xa5,
	0x89, 0x0b, 0x2e, 0x0b, 0xc3, 0x4f, 0x34, 0x07, 0x79, 0x5c, 0x64, 0x59, 0x91, 0xf3, 0xa2, 0x14,
	0xfa, 0x76, 0x2a, 0xa3, 0xdb, 0x79, 0x91, 0x08, 0x83, 0xff, 0x12, 0x25, 0x2e, 0x94, 0x69, 0x7e,
	0xba, 0x0d, 0xaa, 0x36, 0x87, 0x6c, 0xa5, 0xa5, 0x99, 0x7f, 0xbb, 0xf7, 0xe3, 0x91, 0x77, 0x8d,
	0xcd, 0x03, 0x87, 0xe7, 0x61, 0x26, 0xfc, 0x99, 0x8d, 0x99, 0xad, 0xf9, 0x60, 0x0e, 0x06, 0x0e,
	0xc2, 0x4c, 0x78, 0xb7, 0x58, 0xaf, 0xd6, 0x40, 0x80, 0x73, 0x08, 0x58, 0xac, 0x07, 0x01, 0xb4,
	0xf9, 0x3f, 0xab, 0x6c, 0xa1, 0xa5, 0xd6, 0xfb, 0xd3, 0x0c, 0xf3, 0x32, 0xc9, 0x11, 0xc3, 0x93,
	0x68, 0xc4, 0x8d, 0x0d, 0xad, 0xf1, 0xef, 0x6c, 0x9c, 0xdf, 0x5a, 0xb8, 0xf3, 0xd7, 0xb7, 0xcf,
	0x60, 0x22, 0xb7, 0x9d, 0x39, 0x67, 0x42, 0x44, 0x95, 0x33, 0x12, 0x2c, 0x67, 0xf2, 0x10, 0x06,
	0x77, 0xa3, 0xd1, 0x11, 0x0c, 0x78, 0xb7, 0xd8, 0x12, 0xf8, 0x92, 0x4a, 0x2e, 0xd3, 0x63, 0x5e,
	0x95, 0x89, 0x7f, 0x77, 0x63, 0x66, 0xeb, 0x42, 0xb0, 0x90, 0xc9, 0xc3, 0x54, 0xee, 0xa7, 0xc7,
	0x4f, 0xca, 0x64, 0x0a, 0x94, 0x08, 0xe5, 0xdf, 0xeb, 0x82, 0x76, 0x85, 0xf2, 0x7e, 0xc9, 0x56,
	0x5a, 0x20, 0x63, 0x43, 0x25, 0xfc, 0xcf, 0x10, 0xd6, 0xab, 0x61, 0x47, 0x30, 0xe8, 0xdd, 0x66,
	0x97, 0x32, 0xc9, 0x6d, 0x61, 0x79, 0xa9, 0x42, 0x0b, 0x36, 0xb9, 0x95, 0x99, 0xf0, 0xef, 0x23,
	0x78, 0x25, 0x93, 0xc3, 0xc2, 0x1e, 0xaa, 0xd0, 0x3e, 0x29, 0x93, 0xa1, 0xcc, 0x84, 0xf7, 0x01,
	0x5b, 0x75, 0xf8, 0x91, 0xd5, 0x52, 0x10, 0xf8, 0x73, 0x04, 0x2f, 0x21, 0xf8, 0x21, 0x0c, 0x23,
	0x94, 0x7c, 0x00, 0x68, 0x92, 0x2b, 0xa7, 0xf6, 0x37, 0xb5, 0x0f, 0xc3, 0xc2, 0xee, 0xe6, 0x8a,
	0x74, 0x6e, 0xb2, 0x5e, 0x26, 0x79, 0xac, 0x8a, 0xf8, 0x39, 0xa1, 0x7e, 0x5b, 0x4f, 0x68, 0x07,
	0xc6, 0x10, 0xf3, 0x0e, 0x5b, 0x00, 0x4c, 0x59, 0x11, 0xe2, 0x0b, 0x44, 0xcc, 0x67, 0x72, 0xa7,
	0xac, 0x50, 0xfe, 0x0b, 0xb6, 0x9c, 0x49, 0x6e, 0x8e, 0x33, 0xae, 0x85, 0x11, 0x96, 0x5b, 0xe3,
	0x7f, 0x89, 0x98, 0xc5, 0x4c, 0x1e, 0x1d, 0x67, 0x01, 0x0c, 0x0e, 0x8d, 0xf7, 0x09, 0x4e, 0x57,
	0x26, 0x11, 0xd7, 0x22, 0xfe, 0x29, 0x56, 0x82, 0xc7, 0x45, 0x95, 0x5b, 0xff, 0xab, 0x8d, 0x99,
	0xad, 0x5e, 0xb0, 0x9a, 0xc9, 0xfd, 0x24, 0x0a, 0x48, 0xb2, 0x03, 0x02, 0xef, 0x1b, 0x76, 0x7d,
	0x9a, 0xa0, 0x44, 0x98, 0x57, 0xa5, 0x23, 0x7e, 0x8d, 0x44, 0xbf, 0x43, 0x24, 0x00, 0xf1, 0x77,
	0xd8, 0x4d, 0xc7, 0x17, 0x27, 0xb6, 0xe1, 0xa6, 0xa1, 0x54, 0x22, 0x71, 0x2a, 0xbe, 0xd9, 0x38,
	0xbf, 0xd5, 0x0b, 0xae, 0xa2, 0x8a, 0xbd, 0x13, 0xeb, 0xe8, 0x7d, 0x84, 0x90, 0x12, 0x8a, 0x64,
	0x5e, 0x65, 0x3c, 0x1b, 0x65, 0x96, 0x2b, 0x69, 0xac, 0xff, 0x3b, 0x34, 0xdc, 0xcb, 0xe4, 0x41,
	0x95, 0x3d, 0x1a, 0x65, 0x76, 0x20, 0x8d, 0xad, 0xb3, 0x19, 0xcc, 0x95, 0x95, 0x1e, 0x09, 0x1e,
	0xe7, 0x56, 0x1b, 0xff, 0xf7, 0xff, 0x5f, 0xd9, 0x4c, 0x46, 0x9a, 0x6c, 0xde, 0x4f, 0xa2, 0x43,
	0x18, 0xd9, 0x01, 0xab, 0x9e, 0x65, 0xf3, 0x99, 0x84, 0x04, 0x85, 0xc5, 0xd8, 0x46, 0x17, 0x7e,
	0x38, 0x4b, 0x17, 0x74, 0x51, 0x59, 0xe1, 0xf4, 0x07, 0xb3, 0x99, 0xdc, 0x15, 0x6a, 0x68, 0xbc,
	0x0f, 0x31, 0x02, 0x4a, 0x97, 0x29, 0xf9, 0x85, 0xb1, 0xf6, 0x1f, 0x60, 0x8c, 0x97, 0x33, 0x39,
	0xd0, 0x65, 0x8a, 0x9b, 0x0d, 0xe2, 0xeb, 0xb2, 0xb9, 0x05, 0x0e, 0x63, 0xeb, 0xef, 0x20, 0x76,
	0xa9, 0x85, 0xdd, 0x8e, 0xad, 0x4b, 0x40, 0x84, 0xe6, 0x55, 0xe6, 0xef, 0x22, 0x68, 0x9e, 0x40,
	0x07, 0x55, 0xe6, 0xdd, 0x63, 0xeb, 0x2e, 0xf2, 0xca, 0x88, 0x98, 0x8b, 0x3c, 0x8c, 0x60, 0x89,
	0x01, 0xbb, 0x87, 0xd8, 0x35, 0x8c, 0xcf, 0xc0, 0x88, 0x78, 0x8f, 0x64, 0xc0, 0x7a, 0xc8, 0xde,
	0x75, 0x2b, 0x3b, 0x96, 0xda, 0x56, 0xa1, 0xe2, 0x4a, 0xf1, 0x30, 0x49, 0xb4, 0x30, 0x46, 0x18,
	0xf8, 0x49, 0x24, 0x7e, 0x1f, 0x97, 0xfa, 0x3a, 0x2e, 0xf5, 0x53, 0x82, 0x0d, 0xd4, 0x76, 0x0d,
	0xda, 0x06, 0x8c, 0xf7, 0x2d, 0xbb, 0xf5, 0x26, 0x45, 0x89, 0x50, 0xc2, 0x8a, 0xc4, 0x7f, 0x88,
	0xaa, 0xde, 0x79, 0x8d, 0xaa, 0x5d, 0x42, 0xfd, 0x59, 0x65, 0xba, 0x28, 0x4b, 0x91, 0xf8, 0x7f,
	0x78, 0xb3, 0x32, 0x42, 0x79, 0xfb, 0x6c, 0xf3, 0x4d, 0xca, 0xe2, 0x30, 0x3e, 0x16, 0x89, 0xbf,
	0x8f, 0xba, 0x6e, 0xbc, 0x46, 0xd7, 0x0e, 0x82, 0xbc, 0x97, 0x58, 0x28, 0xa4, 0x31, 0x15, 0x2e,
	0x97, 0xf0, 0xff, 0x62, 0x63, 0x66, 0x6b, 0xe1, 0xce, 0xd1, 0x99, 0x65, 0xd5, 0x44, 0x35, 0x54,
	0x9f, 0x7d, 0x63, 0x2a, 0x58, 0x7f, 0xe1, 0xfd, 0x2d, 0x5b, 0xcc, 0x24, 0x4f, 0xb5, 0x76, 0xc7,
	0xc3, 0xb7, 0x98, 0xcd, 0x7f, 0x3c, 0xfb, 0x0d, 0xd5, 0x98, 0x08, 0x58, 0x26, 0xfb, 0x5a, 0xd3,
	0xb9, 0xf0, 0x2f, 0x33, 0x58, 0xb6, 0xb0, 0x42, 0xc7, 0x61, 0x19, 0x46, 0x52, 0x49, 0x2b, 0x85,
	0xf1, 0x07, 0x38, 0xff, 0xb3, 0xdd, 0xd8, 0xd3, 0x46, 0x02, 0x2f, 0x93, 0x70, 0x02, 0xec, 0xb4,
	0xc6, 0x5a, 0x15, 0x49, 0x49, 0x53, 0x72, 0x21, 0x13, 0xe3, 0x3f, 0xc2, 0x34, 0xa7, 0x8a, 0x34,
	0x90, 0xa6, 0xdc, 0x93, 0x89, 0xf1, 0xee, 0xb0, 0xcb, 0x6d, 0xe0, 0x38, 0x54, 0x32, 0x21, 0xf8,
	0x01, 0xc2, 0xbd, 0x06, 0xfe, 0x14, 0x44, 0xc8, 0x79, 0x1f, 0x6b, 0x79, 0x5c, 0x56, 0x4a, 0x18,
	0xc3, 0x65, 0x2e, 0xad, 0xff, 0x78, 0x63, 0x66, 0x6b, 0x0e, 0x74, 0xef, 0xd0, 0xe8, 0x7e, 0x2e,
	0xad, 0xb7, 0x85, 0x4e, 0xd4, 0x38, 0x2a, 0xa6, 0x87, 0x98, 0x47, 0x4b, 0x0d, 0x90, 0x0a, 0x68,
	0x17, 0x89, 0xc1, 0xf0, 0xbf, 0xab, 0xb7, 0xb9, 0x43, 0x1e, 0xc0, 0xa8, 0xf7, 0x07, 0xcc, 0xd6,
	0x52, 0x8b, 0x54, 0x68, 0x1e, 0xca, 0x88, 0xaa, 0x8c, 0xe1, 0xc5, 0x58, 0x68, 0xae, 0x65, 0x84,
	0x21, 0xf5, 0x03, 0x74, 0xe7, 0x3a, 0x9c, 0xdf, 0x00, 0xdc, 0x96, 0x51, 0x80, 0xb0, 0xc7, 0x63,
	0xa1, 0x03, 0x19, 0x3d, 0x2e, 0x85, 0xf6, 0xfa, 0xb8, 0xb5, 0xdf, 0xa0, 0x29, 0x4e, 0x47, 0xfe,
	0x11, 0x2a, 0xba, 0xf6, 0x3a, 0x45, 0x3b, 0xe9, 0xc8, 0x15, 0xb4, 0x93, 0x52, 0x71, 0x95, 0xc8,
	0xba, 0xae, 0xf8, 0x43, 0x24, 0x2e, 0x67, 0xf2, 0x87, 0x52, 0x0d, 0x12, 0xe9, 0x4a, 0xca, 0xe6,
	0x7f, 0x9d, 0x63, 0xeb, 0x6e, 0x21, 0x8b, 0xe8, 0x19, 0x94, 0x33, 0x59, 0xe4, 0x94, 0x51, 0x10,
	0x84, 0xb4, 0x08, 0x0d, 0x9e, 0xc8, 0x55, 0x99, 0x84, 0x56, 0x18, 0xbc, 0x43, 0x5d, 0x08, 0x96,
	0x60, 0x7c, 0x58, 0xc0, 0x21, 0x0f, 0xa3, 0x50, 0x16, 0xdb, 0x48, 0x3a, 0x72, 0xcf, 0x4d, 0x43,
	0xf1, 0xdc, 0xfd, 0x94, 0xbd, 0x3d, 0xad, 0x94, 0xff, 0x2c, 0x74, 0xe1, 0x9f, 0x47, 0xb8, 0xd7,
	0xd5, 0xfc, 0x97, 0x42, 0x17, 0x8d, 0x1f, 0x90, 0x14, 0xa6, 0x8a, 0x63, 0x61, 0x8c, 0x7f, 0x61,
	0xa2, 0xfc, 0xa0, 0xca, 0x8e, 0x68, 0xb4, 0x83, 0x84, 0x32, 0x5e, 0x69, 0xe1, 0xbf, 0xd5, 0x41,
	0xf6, 0x69, 0x14, 0xae, 0x10, 0x88, 0xcc, 0xc2, 0x13, 0xf2, 0xf6, 0x22, 0x5d, 0x21, 0x60, 0xf0,
	0x51, 0x78, 0x82, 0xae, 0xbe, 0xcf, 0x96, 0x27, 0x18, 0x63, 0xc3, 0xac, 0xf4, 0x67, 0xe9, 0x3a,
	0x52, 0xa3, 0x70, 0x70, 0xf3, 0x7f, 0x67, 0x9a, 0x9b, 0x27, 0xc4, 0x90, 0x82, 0x87, 0xe4, 0xd3,
	0x62, 0xd7, 0x4b, 0x8b, 0x76, 0xe8, 0x7e, 0x09, 0x2e, 0x9f, 0x1a, 0xb9, 0x09, 0x10, 0xbd, 0xf9,
	0xa7, 0x19, 0x08, 0xb2, 0xa9, 0x97, 0xc9, 0x15, 0x96, 0xf3, 0x58, 0x58, 0xfe, 0xea, 0x2c, 0x37,
	0xf4, 0x74, 0x1e, 0x40, 0xec, 0xcc, 0xe3, 0xe8, 0xd9, 0x76, 0x6c, 0xb1, 0xba, 0x6c, 0xfe, 0xdb,
	0x39, 0x76, 0xb9, 0xb5, 0xf9, 0x53, 0x74, 0x7c, 0x92, 0x32, 0x65, 0xd5, 0x5d, 0xaa, 0x3a, 0x65,
	0xca, 0x6a, 0x7a, 0xa9, 0x6a, 0x64, 0xbd, 0x54, 0xe7, 0x3a, 0xc8, 0x7a, 0xa9, 0xfe, 0x86, 0xe1,
	0xc8, 0x24, 0xb6, 0x6e, 0xd2, 0x4f, 0xce, 0x7a, 0xd2, 0x34, 0xdb, 0x45, 0x30, 0xf6, 0x38, 0x7a,
	0x46, 0x95, 0xf4, 0x63, 0xb6, 0x86, 0xc6, 0x71, 0x6d, 0x0a, 0x1b, 0x2a, 0x5a, 0x21, 0x4a, 0x3f,
	0x9c, 0x01, 0xac, 0x0f, 0x08, 0x60, 0x91, 0x36, 0xff, 0x71, 0x12, 0x1a, 0xba, 0xee, 0xa6, 0x39,
	0x10, 0x64, 0x3e, 0xf2, 0xd6, 0xd9, 0x6c, 0x3a, 0x4a, 0x2d, 0x4f, 0x73, 0x8c, 0xc8, 0x62, 0x70,
	0x11, 0x7e, 0xed, 0xe7, 0x18, 0x09, 0x10, 0xb4, 0x53, 0xa5, 0x8e, 0xc4, 0x28, 0xb5, 0xad, 0x5c,
	0x81, 0xbd, 0x33, 0x85, 0xec, 0xee, 0x9d, 0x0e, 0x1c, 0xf7, 0x0e, 0xec, 0xcc, 0x16, 0xa5, 0xed,
	0x7d, 0x4b, 0x7b, 0x7d, 0xab, 0x46, 0x68, 0xb3, 0x25, 0xde, 0x72, 0x5b, 0x62, 0x94, 0xda, 0xf6,
	0x96, 0x68, 0x30, 0xb4, 0x25, 0x2e, 0xba, 0x64, 0x75, 0x28, 0xda, 0x12, 0xff, 0x71, 0x8e, 0xad,
	0x75, 0xe2, 0xe0, 0x82, 0x80, 0x7c, 0x7b, 0x4a, 0x7a, 0xf4, 0xd2, 0x91, 0x6d, 0x65, 0x47, 0x0b,
	0xd7, 0x4d, 0x0e, 0x87, 0xab, 0x73, 0xe3, 0x4f, 0x33, 0x6c, 0x0d, 0x80, 0x53, 0xc1, 0x76, 0x19,
	0x72, 0xa6, 0xe7, 0xed, 0x94, 0x89, 0x60, 0x25, 0x1d, 0x51, 0xef, 0xd2, 0xcf, 0x87, 0x34, 0xb9,
	0x0f, 0x99, 0x07, 0xbe, 0x9c, 0x9a, 0x2a, 0x30, 0x9d, 0x4e, 0xa6, 0xfc, 0xf7, 0x65, 0xe6, 0xbf,
	0xae, 0xd1, 0xf3, 0x3e, 0x62, 0x5e, 0x5a, 0x26, 0x7c, 0x14, 0x29, 0x1b, 0x29, 0x2e, 0x72, 0x30,
	0x53, 0x47, 0x6a, 0x25, 0x2d, 0x93, 0x87, 0x28, 0xd8, 0xa3, 0x71, 0xef, 0x2e, 0xbb, 0xdc, 0x42,
	0x6b, 0xf1, 0xac, 0x61, 0x50, 0xcc, 0xd6, 0x1a, 0x46, 0x20, 0x9e, 0xd5, 0x24, 0x67, 0x62, 0xac,
	0xd3, 0xb6, 0x89, 0xf3, 0x8d, 0x89, 0xa7, 0x28, 0x98, 0x32, 0xe1, 0xd0, 0x6d, 0x13, 0x17, 0x1a,
	0x13, 0xc4, 0x68, 0x99, 0xd8, 0x60, 0x8b, 0x40, 0x82, 0x45, 0xb4, 0x91, 0x32, 0x98, 0x4f, 0xbd,
	0x80, 0xa5, 0x25, 0xdc, 0x64, 0x87, 0x91, 0x9a, 0xf6, 0xdc, 0xe8, 0xb8, 0x51, 0x7b, 0x71, 0xe3,
	0x7c, 0xc7, 0xf3, 0x23, 0x1d, 0x9f, 0xee, 0x4b, 0x9b, 0x34, 0xdb, 0x90, 0xc8, 0x97, 0x16, 0x09,
	0x92, 0xbb, 0x4c, 0x78, 0x14, 0x27, 0x8a, 0x67, 0x66, 0x64, 0xfc, 0x39, 0x97, 0xdc, 0x65, 0xf2,
	0x20, 0x4e, 0xd4, 0x23, 0x33, 0x6a, 0x30, 0xd4, 0x26, 0x40, 0x33, 0x3d, 0xdf, 0x60, 0xf0, 0x90,
	0x85, 0x66, 0xba, 0x83, 0x81, 0x5e, 0x9a, 0x75, 0x31, 0xd0, 0x4b, 0x77, 0x30, 0x3a, 0x1e, 0xfb,
	0x0b, 0x5d, 0x4c, 0x10, 0x8f, 0x31, 0xc1, 0x27, 0x7a, 0x74, 0x51, 0x1a, 0x7f, 0xd1, 0x25, 0x78,
	0xad, 0x09, 0x06, 0xa9, 0x4c, 0x26, 0x5c, 0x61, 0xd4, 0xb1, 0x5b, 0x4c, 0xfc, 0x5e, 0x5d, 0x26,
	0x93, 0x01, 0xc4, 0x9b, 0x46, 0xbd, 0x2f, 0xd9, 0x55, 0x0c, 0x8b, 0xd0, 0x06, 0x4a, 0x77, 0x26,
	0x4d, 0x16, 0xda, 0xf8, 0xd8, 0x29, 0x5f, 0x42, 0xce, 0x3a, 0x84, 0x86, 0x00, 0x8f, 0x9c, 0x9c,
	0xcc, 0xbc, 0xc3, 0xc0, 0x3b, 0x1e, 0x26, 0xcf, 0x70, 0xe2, 0xcb, 0xd4, 0x2d, 0xa7, 0x65, 0xb2,
	0x9d, 0x3c, 0x83, 0x69, 0xb7, 0xe4, 0x30, 0xe9, 0x95, 0xb6, 0x1c, 0xa6, 0x7c, 0x0b, 0x6a, 0x74,
	0xc3, 0xe7, 0xf6, 0xc4, 0x5f, 0x6d, 0xe6, 0x4c, 0x2a, 0x86, 0x27, 0xde, 0x5d, 0xb6, 0xde, 0x05,
	0xf1, 0xfc, 0x98, 0xa7, 0x45, 0x95, 0x27, 0xbe, 0xe7, 0x0a, 0xd8, 0x04, 0x7d, 0x70, 0xdc, 0x07,
	0x89, 0xf7, 0x35, 0xbb, 0x3e, 0x45, 0xd2, 0xc2, 0xea, 0x9f, 0x78, 0xac, 0x45, 0x08, 0x0d, 0xca,
	0x5a, 0x33, 0xb1, 0x9a, 0x19, 0x80, 0x7c, 0x87, 0xc4, 0xde, 0xe7, 0xec, 0x4a, 0x4d, 0x6f, 0xa8,
	0x8d, 0xd5, 0x4b, 0xc8, 0xbd, 0x44, 0x5c, 0x47, 0xac, 0xed, 0x7e, 0xc9, 0xae, 0xbd, 0x42, 0x84,
	0x43, 0x42, 0x0b, 0xbc, 0x5f, 0xbe, 0x8d, 0xd4, 0xcb, 0x1d, 0xea, 0xe3, 0xe8, 0x59, 0x80, 0xd2,
	0x3a, 0x03, 0x30, 0x5c, 0x18, 0xfe, 0xcb, 0xed, 0x68, 0xbc, 0x12, 0xf2, 0xcc, 0x8c, 0xfc, 0xf5,
	0x76, 0x48, 0x1f, 0x99, 0x91, 0x77, 0x9d, 0xc1, 0x4e, 0xe1, 0x2e, 0x85, 0x7c, 0x14, 0xcf, 0xa5,
	0x65, 0x32, 0xc4, 0xfc, 0xf9, 0x3d, 0xbb, 0xe1, 0xa4, 0xaf, 0x59, 0xf0, 0x2b, 0x48, 0xb8, 0x82,
	0x84, 0x53, 0x97, 0x1c, 0x4b, 0x67, 0x99, 0x4c, 0x1f, 0xe1, 0xfe, 0x55, 0x6c, 0x11, 0xfe, 0x78,
	0xd6, 0x2d, 0x42, 0xcb, 0x04, 0xd6, 0x17, 0xe8, 0x10, 0xd2, 0x27, 0x65, 0x42, 0xc7, 0xec, 0x3f,
	0xcc, 0x50, 0x9e, 0xb7, 0x0f, 0x0b, 0xff, 0x1a, 0x7a, 0xf2, 0xc3, 0xd9, 0x17, 0x71, 0x57, 0xc1,
	0x21, 0x65, 0xeb, 0xd7, 0x27, 0xa8, 0xdf, 0x1f, 0x53, 0x40, 0xa0, 0x5e, 0xd1, 0x7a, 0xdb, 0xa2,
	0xb2, 0xc6, 0xbf, 0xde, 0xd4, 0xc4, 0x83, 0x2a, 0xc3, 0x85, 0x1e, 0xc2, 0x78, 0x0d, 0x87, 0x4b,
	0x36, 0x9e, 0x53, 0xf2, 0x44, 0x24, 0x55, 0xe9, 0xdf, 0x68, 0xe0, 0x83, 0x04, 0x5a, 0x95, 0x3e,
	0x8d, 0x7b, 0xbf, 0xa1, 0x4c, 0xac, 0xe1, 0x71, 0xa1, 0xb5, 0x88, 0x2d, 0xd0, 0xaa, 0xd2, 0x7f,
	0x07, 0x49, 0x6f, 0x37, 0xa4, 0x1d, 0x92, 0xf6, 0x41, 0x58, 0x33, 0x4b, 0x85, 0xc4, 0x17, 0x95,
	0xa8, 0x44, 0xd2, 0x98, 0xbb, 0xd9, 0x30, 0x0f, 0xd5, 0x41, 0x95, 0x7d, 0x87, 0xd2, 0xda, 0xe6,
	0x7d, 0xe6, 0xb7, 0x98, 0x5d, 0x93, 0x1b, 0x4d, 0xf2, 0x23, 0xb1, 0x63, 0xf1, 0x0e, 0x95, 0xd8,
	0x52, 0xb9, 0x40, 0x84, 0x49, 0xc2, 0xc5, 0x89, 0x34, 0xd6, 0x7f, 0xb7, 0xd9, 0xa8, 0x87, 0x0a,
	0x63, 0xb1, 0x9d, 0x24, 0x7b, 0x20, 0xf1, 0x3e, 0xaa, 0xd3, 0x89, 0xcb, 0x5c, 0xc9, 0x5c, 0x70,
	0x2d, 0x0c, 0x7f, 0xe1, 0x6f, 0xba, 0xe3, 0x0f, 0x08, 0xfb, 0x28, 0x08, 0x84, 0xf9, 0xce, 0xdb,
	0x61, 0x37, 0x1d, 0xfa, 0xa5, 0xb4, 0xc7, 0x3c, 0x0a, 0xe3, 0xe7, 0x55, 0xe9, 0x36, 0xb5, 0xeb,
	0xcc, 0x6e, 0x21, 0xf3, 0x2a, 0x32, 0xbf, 0x97, 0xf6, 0xf8, 0x01, 0x62, 0x68, 0x63, 0x53, 0x97,
	0xe6, 0x6a, 0xc3, 0x94, 0x92, 0x44, 0x28, 0xa7, 0xe1, 0xbd, 0xa6, 0x36, 0xb4, 0x35, 0xec, 0x0a,
	0x45, 0xf4, 0x2f, 0xa8, 0x62, 0x96, 0xaa, 0x66, 0x52, 0xaf, 0xe4, 0xc8, 0xbf, 0x68, 0x76, 0xf8,
	0xa1, 0x22, 0x22, 0xf5, 0x4c, 0xc4, 0xfd, 0x8a, 0xca, 0xc3, 0x84, 0x9b, 0x48, 0xd3, 0x22, 0xbf,
	0xdf, 0xb2, 0xec, 0xac, 0x92, 0x9c, 0xd8, 0xbf, 0x66, 0x6f, 0x3b, 0x76, 0x1a, 0x1a, 0xcb, 0xf3,
	0x34, 0x77, 0xbc, 0x5f, 0x22, 0x6f, 0x15, 0x79, 0xfd, 0xd0, 0xd8, 0x83, 0x34, 0x27, 0x86, 0xdb,
	0xef, 0x90, 0x3d, 0xce, 0x20, 0x5c, 0xd1, 0xc7, 0x93, 0x68, 0x6d, 0x35, 0xfb, 0x7d, 0x90, 0x48,
	0x32, 0xb9, 0xed, 0x10, 0xa4, 0xe1, 0x21, 0x7b, 0xb7, 0xd6, 0xa0, 0xc0, 0xe8, 0xb4, 0x1a, 0xbc,
	0xac, 0x7c, 0x80, 0x5a, 0xae, 0x93, 0x96, 0x41, 0x68, 0x6c, 0x57, 0x13, 0xde, 0x01, 0xf7, 0xd8,
	0x46, 0xad, 0x08, 0xae, 0x81, 0xa7, 0xea, 0xf9, 0x15, 0xea, 0xb9, 0x46, 0x7a, 0x1e, 0x85, 0x27,
	0x7f, 0x46, 0x8d, 0xcc, 0x4f, 0x57, 0xf3, 0x61, 0x47, 0x8d, 0xcc, 0x4f, 0x51, 0xb3, 0xcf, 0x36,
	0x6b, 0x35, 0x74, 0xe9, 0x3a, 0x55, 0xd1, 0x47, 0xa8, 0xe8, 0x06, 0x29, 0xc2, 0x4b, 0xd8, 0x9b,
	0x3d, 0x0a, 0xc7, 0xa3, 0xd3, 0x15, 0x7d, 0xdc, 0xf6, 0x68, 0x7b, 0x3c, 0x3a, 0x45, 0xcd, 0x0e,
	0x7b, 0x07, 0x8f, 0x76, 0x11, 0x57, 0x54, 0x99, 0xe3, 0x22, 0x37, 0x56, 0x87, 0x32, 0xb7, 0x6e,
	0xad, 0x6e, 0x37, 0x4a, 0x82, 0x1a, 0xb4, 0xd3, 0x60, 0x68, 0xb5, 0xdc, 0x0e, 0xac, 0xab, 0x05,
	0xe4, 0xb4, 0x16, 0x69, 0x9c, 0x5b, 0xff, 0x93, 0x66, 0x07, 0x52, 0xa9, 0xd8, 0x15, 0x2a, 0x40,
	0x49, 0x7d, 0xa7, 0xa8, 0xeb, 0x17, 0xdc, 0x88, 0x7e, 0x8d, 0x37, 0xa2, 0xde, 0xa4, 0x76, 0xc1,
	0x5d, 0xa8, 0xbe, 0x7b, 0xc0, 0xf6, 0x7d, 0xc1, 0x8d, 0xfc, 0x59, 0xf8, 0x9f, 0xd2, 0xe3, 0x30,
	0x7a, 0x04, 0xa3, 0x47, 0xf2, 0x67, 0xe1, 0xbd, 0x47, 0x87, 0x3a, 0xe8, 0x0b, 0x95, 0x2a, 0x62,
	0xe3, 0xdf, 0xa1, 0x17, 0x72, 0x52, 0xb7, 0x8d, 0x63, 0xf5, 0x59, 0x87, 0x25, 0x50, 0x0b, 0x61,
	0xea, 0x4f, 0x10, 0x04, 0xea, 0xc3, 0x50, 0x7d, 0xd9, 0x74, 0x16, 0x21, 0x90, 0x45, 0x65, 0xf1,
	0x33, 0x44, 0x0f, 0x2b, 0x25, 0x19, 0x1d, 0xd2, 0x38, 0xb6, 0x39, 0x2d, 0xff, 0xe2, 0x63, 0xe1,
	0xfa, 0x96, 0xcf, 0x90, 0xe0, 0x4d, 0xbc, 0x04, 0x11, 0xde, 0xa6, 0x3f, 0x9f, 0xba, 0x4c, 0xb7,
	0xde, 0x99, 0xbd, 0x6b, 0x6c, 0x3e, 0x2d, 0x4b, 0xf7, 0xb2, 0x3d, 0x83, 0x8f, 0x38, 0x73, 0x69,
	0x59, 0xe2, 0x9b, 0xf3, 0xe6, 0xbf, 0xcf, 0x34, 0x8d, 0x4a, 0xfb, 0x79, 0xd8, 0xf3, 0xd9, 0xac,
	0x85, 0xfd, 0x2a, 0x13, 0xbc, 0x76, 0xf7, 0x82, 0xfa, 0x57, 0xcf, 0x63, 0x17, 0x4a, 0x9d, 0x9e,
	0xe0, 0xdd, 0x7a, 0x31, 0xc0, 0x9f, 0xbd, 0x2b, 0x6c, 0x0e, 0xfe, 0xe7, 0x4a, 0xe4, 0x78, 0x85,
	0xee, 0x05, 0xb3, 0xf0, 0xfb, 0x40, 0xe4, 0xde, 0x0d, 0xc6, 0x50, 0x84, 0x7e, 0xe1, 0x6d, 0xb9,
	0x17, 0xcc, 0xc3, 0x08, 0x7e, 0xc9, 0x01, 0xe7, 0x32, 0x23, 0xe2, 0x76, 0xc3, 0x35, 0x07, 0x03,
	0x38, 0xab, 0xbf, 0x7b, 0x8b, 0x5d, 0x6a, 0x5e, 0x19, 0x69, 0x62, 0xf8, 0xd6, 0xf8, 0xea, 0x97,
	0xab, 0x99, 0x57, 0xbf, 0x5c, 0x41, 0x3b, 0x12, 0xca, 0x88, 0x8b, 0x82, 0xa2, 0xc7, 0xa9, 0x5d,
	0xa3, 0x6f, 0x5c, 0xcb, 0xa1, 0x8c, 0xf6, 0x0a, 0x8c, 0xdd, 0x11, 0x0c, 0xc3, 0x2a, 0x6a, 0x23,
	0x11, 0x8c, 0x4f, 0x6e, 0x38, 0x8d, 0xb9, 0x60, 0x41, 0x1b, 0xb9, 0x57, 0x24, 0xf8, 0xd4, 0x06,
	0x0a, 0x6b, 0x4c, 0x4b, 0xe1, 0x05, 0x52, 0x48, 0xc0, 0x8e, 0x42, 0x65, 0x92, 0x96, 0xc2, 0xb7,
	0x48, 0xa1, 0x32, 0x49, 0x5b, 0x61, 0x8d, 0x69, 0x29, 0xbc, 0x48, 0x0a, 0x09, 0x38, 0x51, 0xf8,
	0x3e, 0x5b, 0x56, 0x99, 0x76, 0x13, 0x22, 0x95, 0xb3, 0xf4, 0xc8, 0x87, 0xc3, 0x8d, 0xd2, 0x4f,
	0xd8, 0xa5, 0x09, 0xae, 0xa5, 0x76, 0x0e, 0xd5, 0xae, 0xd6, 0xe0, 0x89, 0xe2, 0xf7, 0xd8, 0x12,
	0xc0, 0x65, 0x9e, 0x16, 0x4e, 0xef, 0x3c, 0xea, 0x5d, 0xd4, 0x32, 0xda, 0xcf, 0xd3, 0x82, 0xd4,
	0xde, 0x64, 0x0b, 0xd8, 0x3c, 0x60, 0x1a, 0x18, 0xbc, 0xf6, 0xf7, 0x02, 0x06, 0x43, 0x43, 0x1c,
	0xf1, 0x3e, 0x60, 0x2b, 0x71, 0x91, 0x8f, 0x85, 0x1e, 0x41, 0xba, 0x12, 0x6a, 0x01, 0x51, 0xcb,
	0xcd, 0xb8, 0x83, 0xee, 0xb2, 0x9b, 0x60, 0x91, 0x40, 0xbc, 0xc5, 0x9a, 0x78, 0xbb, 0x88, 0xde,
	0x5e, 0xd3, 0x32, 0x22, 0xce, 0x4e, 0xa3, 0xa2, 0xf1, 0xfb, 0x23, 0xe6, 0x35, 0x49, 0x30, 0x89,
	0x49, 0x0f, 0x7d, 0x5f, 0xa9, 0x25, 0x4d, 0x58, 0x3e, 0x63, 0xeb, 0x1d, 0x74, 0xcb, 0xd6, 0x12,
	0xda, 0xba, 0xd4, 0xa2, 0x34, 0x46, 0x36, 0xff, 0xf3, 0x2d, 0xb6, 0xd4, 0x7d, 0xe8, 0xf6, 0xde,
	0x65, 0x8b, 0x32, 0x4b, 0x34, 0x37, 0x55, 0x59, 0x16, 0xda, 0x62, 0xee, 0xcd, 0x05, 0x0b, 0x30,
	0x76, 0x44, 0x43, 0x10, 0x2c, 0xa3, 0xe2, 0x06, 0x71, 0x0e, 0x11, 0xcc, 0xa8, 0xb8, 0x06, 0x40,
	0x5b, 0x23, 0x0d, 0x69, 0xd5, 0xc2, 0xd8, 0x50, 0x5b, 0x97, 0x71, 0x4b, 0xa9, 0x34, 0xfb, 0xc6,
	0x54, 0x01, 0x8d, 0x7a, 0xbf, 0x62, 0xab, 0x68, 0x4d, 0x14, 0x31, 0x97, 0x59, 0xa9, 0x64, 0x2c,
	0x2d, 0xe6, 0xdc, 0x5c, 0xb0, 0x0c, 0x82, 0xbd, 0x22, 0xde, 0x77, 0xc3, 0xa0, 0x15, 0xcc, 0x76,
	0xa0, 0x94, 0x76, 0x4b, 0x46, 0xc5, 0x6d, 0xe4, 0x37, 0xec, 0x3a, 0xa0, 0xb4, 0x88, 0x85, 0x1c,
	0x8b, 0x84, 0xa3, 0x89, 0x57, 0x72, 0xd0, 0x17, 0x45, 0x1c, 0x38, 0xc8, 0x7e, 0x96, 0xe8, 0x49,
	0xec, 0xbf, 0x62, 0xd7, 0x3a, 0x7c, 0x30, 0xdb, 0xa2, 0xcf, 0x22, 0x7d, 0xbd, 0x45, 0x3f, 0x52,
	0xf1, 0x84, 0xfd, 0x05, 0xbb, 0x0a, 0x4b, 0xd0, 0xb2, 0xfe, 0x6a, 0xa2, 0x5e, 0x16, 0x45, 0x32,
	0xb1, 0x3d, 0xe1, 0xde, 0x67, 0x3e, 0x70, 0x8d, 0xc8, 0xed, 0x2b, 0x5e, 0xcf, 0xd3, 0x42, 0x8a,
	0x22, 0x39, 0x12, 0xb9, 0xed, 0x7a, 0x7c, 0x8f, 0xad, 0x37, 0xbc, 0x29, 0x6f, 0x19, 0xd2, 0xd6,
	0x1c, 0xad, 0xe3, 0xe9, 0x07, 0x6c, 0xb5, 0x59, 0x27, 0xa1, 0x75, 0xa1, 0xb9, 0x35, 0xae, 0x9d,
	0xad, 0x17, 0x6a, 0x0f, 0x86, 0x87, 0xc6, 0xfb, 0xfb, 0x19, 0xb6, 0x0c, 0xd8, 0x56, 0x9d, 0xf2,
	0x17, 0xf1, 0x19, 0xe6, 0xc7, 0xb3, 0xfd, 0xdc, 0xd2, 0x32, 0x10, 0xf4, 0x52, 0x69, 0xb0, 0x90,
	0xe2, 0x67, 0x97, 0xcd, 0x7f, 0xbd, 0x38, 0x79, 0x99, 0xec, 0x7e, 0x1e, 0x71, 0xdf, 0x7b, 0xe1,
	0x94, 0x92, 0xb9, 0x4d, 0x41, 0xe0, 0x0a, 0xfb, 0x22, 0x7e, 0x50, 0xd8, 0xcf, 0x6d, 0xda, 0xd7,
	0xba, 0xf5, 0xf9, 0xa1, 0x0c, 0x35, 0xc6, 0xb8, 0x46, 0x9f, 0xa3, 0xc3, 0x07, 0xd1, 0x87, 0x28,
	0xab, 0x39, 0xf4, 0x49, 0x1c, 0x39, 0xa9, 0x24, 0x42, 0x52, 0xbc, 0xac, 0x4f, 0x82, 0x15, 0x62,
	0xa4, 0x12, 0xe0, 0xbb, 0xc5, 0xcb, 0xbc, 0xe5, 0x4a, 0x94, 0x26, 0x04, 0xbd, 0xd0, 0x72, 0xe5,
	0x41, 0x9a, 0x20, 0x8c, 0x3e, 0x10, 0xa2, 0x5a, 0x5d, 0x58, 0x9c, 0x4a, 0x11, 0x3d, 0x13, 0xb1,
	0xad, 0x5f, 0x52, 0xd6, 0x48, 0xb3, 0x2e, 0x6c, 0x5f, 0xeb, 0xc7, 0x24, 0x6a, 0xb1, 0x22, 0xb8,
	0xbd, 0xb4, 0x59, 0x17, 0x5b, 0xac, 0x07, 0xcf, 0xab, 0xb2, 0xc5, 0xfa, 0x98, 0xad, 0x39, 0x96,
	0xad, 0x72, 0x99, 0xd4, 0xe7, 0xfd, 0x6c, 0x6b, 0x06, 0x43, 0x10, 0xb8, 0x33, 0xff, 0x2b, 0x76,
	0xed, 0x55, 0x78, 0xfd, 0x52, 0x47, 0x6f, 0x2b, 0xbd, 0x60, 0x7d, 0x8a, 0xe6, 0xde, 0xec, 0xea,
	0x2f, 0xae, 0x13, 0x36, 0x5d, 0x1b, 0xe6, 0xa9, 0x56, 0x4e, 0x48, 0x74, 0x75, 0xf8, 0x82, 0x5d,
	0x7d, 0x05, 0x3c, 0xb1, 0x44, 0x65, 0xf8, 0x72, 0x97, 0xd4, 0x18, 0xfa, 0xb2, 0x71, 0x13, 0xc2,
	0x40, 0xdf, 0xf9, 0xb1, 0x7d, 0x82, 0x86, 0xa6, 0xae, 0xce, 0x44, 0xee, 0x6b, 0x8d, 0x9f, 0xfc,
	0xb1, 0x7f, 0xda, 0x4e, 0x12, 0xe3, 0xfd, 0x8e, 0xdd, 0x78, 0x0d, 0x59, 0x8b, 0xac, 0x18, 0x0b,
	0x2c, 0xd1, 0xf8, 0x25, 0x7f, 0x9a, 0x1e, 0xa0, 0xbc, 0xf5, 0xc9, 0xab, 0x51, 0x80, 0xd5, 0xb9,
	0xfe, 0xe4, 0x55, 0x73, 0x5a, 0x4b, 0x06, 0x40, 0x4a, 0x5c, 0x31, 0x16, 0xb9, 0xa5, 0x67, 0x9b,
	0x7a, 0xc9, 0xfa, 0x5a, 0x63, 0xaa, 0xef, 0xa1, 0xa8, 0x95, 0x45, 0xc0, 0x52, 0xc5, 0xc8, 0xe0,
	0xb3, 0x4d, 0x9d, 0x45, 0x7d, 0xad, 0x07, 0xc5, 0xc8, 0x6c, 0xfe, 0xf3, 0xc2, 0xe4, 0x6a, 0x34,
	0xfd, 0xa5, 0x8e, 0xfa, 0x90, 0x98, 0xbe, 0xb6, 0xdd, 0xc5, 0x47, 0x26, 0x25, 0xc6, 0x42, 0x19,
	0xb7, 0x35, 0x56, 0xd3, 0x32, 0x3e, 0xa8, 0xb2, 0xc1, 0xdd, 0x41, 0xa4, 0x06, 0x28, 0x80, 0x5c,
	0x9f, 0x62, 0x94, 0xa1, 0x3d, 0x36, 0x6e, 0x77, 0xac, 0xb4, 0x08, 0x87, 0x30, 0xee, 0x7d, 0x06,
	0x1d, 0x68, 0x07, 0xaf, 0x45, 0xec, 0x38, 0xb4, 0x3f, 0xd6, 0x5a, 0x9c, 0x40, 0xc4, 0x44, 0xeb,
	0x3a, 0x56, 0xc5, 0x59, 0xe9, 0x38, 0x17, 0xba, 0x8e, 0x3d, 0x89, 0xb3, 0x92, 0x18, 0x9f, 0x4e,
	0x18, 0xe9, 0xcb, 0x44, 0xe6, 0xf8, 0x94, 0x3a, 0x12, 0xf5, 0x5e, 0xf1, 0x88, 0xd1, 0x47, 0xd1,
	0x11, 0x4a, 0x6a, 0x8a, 0x2a, 0xe2, 0x50, 0x71, 0x15, 0x46, 0x42, 0x71, 0x53, 0x2a, 0x69, 0xdd,
	0x46, 0x01, 0xca, 0x00, 0x64, 0x03, 0x10, 0x1d, 0x81, 0x04, 0x4e, 0x23, 0xa0, 0xd0, 0xb7, 0xff,
	0xfa, 0x78, 0xa3, 0x6b, 0xc8, 0x72, 0x5a, 0xc6, 0xf8, 0x98, 0x51, 0x9f, 0x71, 0xf7, 0xd8, 0x3a,
	0x60, 0xe9, 0xf1, 0x43, 0x8b, 0x30, 0xf9, 0x89, 0xc7, 0x11, 0x7f, 0x19, 0x4a, 0x8b, 0x1b, 0x64,
	0x0e, 0x67, 0x8e, 0xcf, 0x20, 0x01, 0x08, 0x77, 0xa2, 0xef, 0x43, 0xe9, 0x7a, 0xda, 0xd8, 0x55,
	0x20, 0x7b, 0x6c, 0x78, 0x29, 0x34, 0x2f, 0x23, 0x6b, 0x78, 0xac, 0x42, 0x53, 0x6f, 0x93, 0x75,
	0x9a, 0x0e, 0x4e, 0xfd, 0x50, 0xe8, 0xc3, 0xc8, 0x9a, 0x1d, 0x10, 0x53, 0xc7, 0x5f, 0x1b, 0x1d,
	0xdf, 0xc3, 0x47, 0x17, 0xd7, 0x9a, 0xe2, 0x66, 0x99, 0x83, 0x8e, 0x9f, 0xac, 0x3e, 0xbd, 0xf7,
	0xa4, 0x4c, 0x5c, 0x5b, 0x3a, 0xc5, 0xbb, 0xdf, 0xe1, 0x2d, 0x4c, 0xf1, 0xee, 0xb7, 0x78, 0xf8,
	0x18, 0x1b, 0x73, 0x15, 0x85, 0xdc, 0x56, 0xa5, 0xc2, 0xbf, 0x1c, 0x48, 0xc3, 0x4a, 0x59, 0xb7,
	0x3d, 0x60, 0x8e, 0x83, 0x28, 0x1c, 0xa2, 0x6c, 0x97, 0x44, 0x75, 0x14, 0x33, 0x1d, 0x96, 0x93,
	0x28, 0xf6, 0x9a, 0x28, 0x3e, 0x82, 0xf1, 0x3a, 0x8a, 0xbf, 0x65, 0x57, 0xd0, 0x31, 0x88, 0x40,
	0x22, 0x52, 0x0c, 0x42, 0xc3, 0x59, 0x42, 0x0e, 0x78, 0x00, 0x11, 0xd8, 0x75, 0xe2, 0x9a, 0xfa,
	0x35, 0xf4, 0xe8, 0xb0, 0xbe, 0x61, 0x82, 0x97, 0xbb, 0x54, 0x2a, 0x2b, 0x26, 0xf7, 0x96, 0x65,
	0x24, 0xfb, 0xb8, 0xca, 0x84, 0xe8, 0x23, 0xa0, 0xa6, 0xdf, 0x71, 0x53, 0x93, 0xa6, 0xe4, 0x89,
	0x88, 0xc3, 0x92, 0xbe, 0xc4, 0x8e, 0xef, 0xf9, 0x2b, 0x1b, 0xe7, 0xb7, 0xe6, 0x28, 0x3f, 0xa4,
	0x29, 0x77, 0x41, 0xf6, 0x78, 0x2c, 0xf4, 0xd3, 0x7b, 0xaf, 0xe5, 0xdc, 0xf7, 0x57, 0x5f, 0xc3,
	0xb9, 0x4f, 0x0d, 0x94, 0xe3, 0x40, 0xa6, 0xfb, 0x1e, 0x42, 0x17, 0x1c, 0x14, 0x52, 0xbc, 0x4e,
	0x55, 0x2d, 0x4c, 0xa1, 0xc6, 0x82, 0x8f, 0x65, 0x48, 0xb7, 0x47, 0x7f, 0xad, 0x51, 0x1b, 0x90,
	0xec, 0xa9, 0x0c, 0xf1, 0xc6, 0x08, 0x3d, 0x09, 0x26, 0xd2, 0xb1, 0xa4, 0x87, 0xce, 0xb9, 0x60,
	0x16, 0x92, 0xe6, 0x58, 0x26, 0x50, 0xda, 0x26, 0x8b, 0x6d, 0x45, 0x56, 0x62, 0xaf, 0xcb, 0x5f,
	0x86, 0xea, 0x39, 0xd7, 0xe2, 0x45, 0x82, 0xaf, 0x9b, 0x14, 0x1a, 0x5c, 0xf1, 0xa1, 0xc8, 0x4a,
	0x68, 0x74, 0xbf, 0x0f, 0xd5, 0xf3, 0x40, 0xbc, 0x48, 0xbc, 0x1f, 0xd9, 0x87, 0xe4, 0x72, 0xfe,
	0x9c, 0x67, 0xa5, 0x32, 0x60, 0x05, 0x22, 0x2c, 0x73, 0x2e, 0xcb, 0xf1, 0x7d, 0x6e, 0x8f, 0x21,
	0xdf, 0x9b, 0x48, 0x5f, 0x46, 0x75, 0xef, 0xe1, 0x84, 0xf2, 0xe7, 0x8f, 0x4a, 0x65, 0x0e, 0x10,
	0xbf, 0x9f, 0xef, 0x97, 0xe3, 0xfb, 0x43, 0x04, 0xd7, 0x51, 0x77, 0x33, 0x15, 0x27, 0xb1, 0xaa,
	0x12, 0x68, 0xc7, 0xc2, 0x11, 0x9e, 0x64, 0xf8, 0x40, 0x4a, 0x33, 0xdd, 0x23, 0xd9, 0xae, 0x08,
	0x47, 0x70, 0x8c, 0x51, 0x3f, 0x1b, 0xf3, 0x44, 0x45, 0x8d, 0x45, 0x9f, 0x3a, 0x83, 0xb4, 0x8c,
	0x77, 0x55, 0x34, 0x9d, 0x4a, 0x5a, 0xa4, 0xf2, 0x64, 0x3a, 0x1b, 0xae, 0xd0, 0x61, 0x00, 0x53,
	0x46, 0x79, 0x37, 0x17, 0xfa, 0x6c, 0x03, 0xf7, 0xbd, 0x2a, 0x5e, 0xc2, 0xae, 0xe4, 0x32, 0x1f,
	0x69, 0xfa, 0x5b, 0x03, 0x38, 0x3f, 0x29, 0x68, 0x57, 0xe9, 0x1b, 0x3f, 0x94, 0x01, 0x07, 0xdb,
	0x27, 0xd4, 0x3e, 0x82, 0x20, 0x70, 0xd1, 0x45, 0xac, 0xee, 0x77, 0xff, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0xc0, 0xbb, 0xc7, 0x15, 0x04, 0x29, 0x00, 0x00,
}
