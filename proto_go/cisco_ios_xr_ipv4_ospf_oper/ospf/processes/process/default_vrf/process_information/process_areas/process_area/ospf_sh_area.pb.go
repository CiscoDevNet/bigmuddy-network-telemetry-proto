// Code generated by protoc-gen-go.
// source: ospf_sh_area.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area is a generated protocol buffer package.

It is generated from these files:
	ospf_sh_area.proto

It has these top-level messages:
	OspfShArea_KEYS
	OspfShArea
	OspfShAreaRange
*/
package cisco_ios_xr_ipv4_ospf_oper_ospf_processes_process_default_vrf_process_information_process_areas_process_area

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OSPF Area Summary Information
type OspfShArea_KEYS struct {
	ProcessName string `protobuf:"bytes,1,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	AreaId      uint32 `protobuf:"varint,2,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	Address     string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *OspfShArea_KEYS) Reset()                    { *m = OspfShArea_KEYS{} }
func (m *OspfShArea_KEYS) String() string            { return proto.CompactTextString(m) }
func (*OspfShArea_KEYS) ProtoMessage()               {}
func (*OspfShArea_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OspfShArea_KEYS) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *OspfShArea_KEYS) GetAreaId() uint32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *OspfShArea_KEYS) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type OspfShArea struct {
	// Area ID string
	AreaIdString string `protobuf:"bytes,50,opt,name=area_id_string,json=areaIdString" json:"area_id_string,omitempty"`
	// If true, Backbone area is active
	BackboneAreaActive bool `protobuf:"varint,51,opt,name=backbone_area_active,json=backboneAreaActive" json:"backbone_area_active,omitempty"`
	// Number of interfaces in the area
	AreaInterfaceCount uint32 `protobuf:"varint,52,opt,name=area_interface_count,json=areaInterfaceCount" json:"area_interface_count,omitempty"`
	// If true, stub area
	AreaStub bool `protobuf:"varint,53,opt,name=area_stub,json=areaStub" json:"area_stub,omitempty"`
	// If true, totally stubby area
	AreaTotalStub bool `protobuf:"varint,54,opt,name=area_total_stub,json=areaTotalStub" json:"area_total_stub,omitempty"`
	// Default cost for Stub or NSSA area
	StubDefaultCost uint32 `protobuf:"varint,55,opt,name=stub_default_cost,json=stubDefaultCost" json:"stub_default_cost,omitempty"`
	// If true, area is a NSSA
	AreaNssa bool `protobuf:"varint,56,opt,name=area_nssa,json=areaNssa" json:"area_nssa,omitempty"`
	// If true, No redistribution into this NSSA area
	NssaNoRedistribution bool `protobuf:"varint,57,opt,name=nssa_no_redistribution,json=nssaNoRedistribution" json:"nssa_no_redistribution,omitempty"`
	// If true, perform 7/5 translation
	NssaTranslate bool `protobuf:"varint,58,opt,name=nssa_translate,json=nssaTranslate" json:"nssa_translate,omitempty"`
	// If true, generate NSSA default route
	NssaDefault bool `protobuf:"varint,59,opt,name=nssa_default,json=nssaDefault" json:"nssa_default,omitempty"`
	// If true, MPLS-TE enabled
	TeEnabled bool `protobuf:"varint,60,opt,name=te_enabled,json=teEnabled" json:"te_enabled,omitempty"`
	// TE area topology version number
	TeTopologyVersion uint32 `protobuf:"varint,61,opt,name=te_topology_version,json=teTopologyVersion" json:"te_topology_version,omitempty"`
	// If true, advertise intra-area prefixes as external
	ExternalOut bool `protobuf:"varint,62,opt,name=external_out,json=externalOut" json:"external_out,omitempty"`
	// If true, advertise redistributedprefixes as summary
	SummaryIn bool `protobuf:"varint,63,opt,name=summary_in,json=summaryIn" json:"summary_in,omitempty"`
	// If true, Segment Routing enabled
	SegmentRouting uint32 `protobuf:"varint,64,opt,name=segment_routing,json=segmentRouting" json:"segment_routing,omitempty"`
	// If true, All routers in Area are SR Strict-SPF Capable
	SrStrictSpfCap bool `protobuf:"varint,65,opt,name=sr_strict_spf_cap,json=srStrictSpfCap" json:"sr_strict_spf_cap,omitempty"`
	// If true, All routers in Area have SR Strict-SPF SIDs
	SrStrictSpfsiDsAvailable bool `protobuf:"varint,66,opt,name=sr_strict_spfsi_ds_available,json=srStrictSpfsiDsAvailable" json:"sr_strict_spfsi_ds_available,omitempty"`
	// If true, Segment routing Uloop avoidance is currently active in this area
	SrMicroloopAvoidanceActive bool `protobuf:"varint,67,opt,name=sr_microloop_avoidance_active,json=srMicroloopAvoidanceActive" json:"sr_microloop_avoidance_active,omitempty"`
	// Event for which SR uloop is triggered Link Up/Link Down
	SrMicroloopAvoidanceEventType string `protobuf:"bytes,68,opt,name=sr_microloop_avoidance_event_type,json=srMicroloopAvoidanceEventType" json:"sr_microloop_avoidance_event_type,omitempty"`
	// Link State ID of the near end of the topology change
	SrMicroloopAvoidanceNearEndId string `protobuf:"bytes,69,opt,name=sr_microloop_avoidance_near_end_id,json=srMicroloopAvoidanceNearEndId" json:"sr_microloop_avoidance_near_end_id,omitempty"`
	// Link State ID of the far end of the topology change
	SrMicroloopAvoidanceFarEndId string `protobuf:"bytes,70,opt,name=sr_microloop_avoidance_far_end_id,json=srMicroloopAvoidanceFarEndId" json:"sr_microloop_avoidance_far_end_id,omitempty"`
	// Link State ID of the pseudo node, if the change is on a broadcast link
	SrMicroloopAvoidancePseudonodeId string `protobuf:"bytes,71,opt,name=sr_microloop_avoidance_pseudonode_id,json=srMicroloopAvoidancePseudonodeId" json:"sr_microloop_avoidance_pseudonode_id,omitempty"`
	// Authentication type
	AuthenticationType string `protobuf:"bytes,72,opt,name=authentication_type,json=authenticationType" json:"authentication_type,omitempty"`
	// Number of SPF calculations run
	SpfCount uint32 `protobuf:"varint,73,opt,name=spf_count,json=spfCount" json:"spf_count,omitempty"`
	// If true, inbound policy is configured
	AreaPolicyIn bool `protobuf:"varint,74,opt,name=area_policy_in,json=areaPolicyIn" json:"area_policy_in,omitempty"`
	// Inbound summary lsa filtering policy
	AreaPolicyInName string `protobuf:"bytes,75,opt,name=area_policy_in_name,json=areaPolicyInName" json:"area_policy_in_name,omitempty"`
	// If true, outbound policy is configured
	AreaPolicyOut bool `protobuf:"varint,76,opt,name=area_policy_out,json=areaPolicyOut" json:"area_policy_out,omitempty"`
	// Outbound summary lsa filtering policy
	AreaPolicyOutName string `protobuf:"bytes,77,opt,name=area_policy_out_name,json=areaPolicyOutName" json:"area_policy_out_name,omitempty"`
	// List of ranges to summarize
	AreaRangeList []*OspfShAreaRange `protobuf:"bytes,78,rep,name=area_range_list,json=areaRangeList" json:"area_range_list,omitempty"`
	// Number of LSAs in the Area
	AreaLsaCount uint32 `protobuf:"varint,79,opt,name=area_lsa_count,json=areaLsaCount" json:"area_lsa_count,omitempty"`
	// Sum of all area LSAs checksum
	AreaLsaChecksum uint32 `protobuf:"varint,80,opt,name=area_lsa_checksum,json=areaLsaChecksum" json:"area_lsa_checksum,omitempty"`
	// Number of Opaque LSAs in the Area
	AreaOpaqueLsaCount uint32 `protobuf:"varint,81,opt,name=area_opaque_lsa_count,json=areaOpaqueLsaCount" json:"area_opaque_lsa_count,omitempty"`
	// Sum of opaque LSA checksums
	AreaOpaqueLsaChecksum uint32 `protobuf:"varint,82,opt,name=area_opaque_lsa_checksum,json=areaOpaqueLsaChecksum" json:"area_opaque_lsa_checksum,omitempty"`
	// Number of LSA with demand circuit bit not set
	AreaDcBitlessLsaCount uint32 `protobuf:"varint,83,opt,name=area_dc_bitless_lsa_count,json=areaDcBitlessLsaCount" json:"area_dc_bitless_lsa_count,omitempty"`
	// Number of indication LSAs
	IndicationLsaCount uint32 `protobuf:"varint,84,opt,name=indication_lsa_count,json=indicationLsaCount" json:"indication_lsa_count,omitempty"`
	// Number of DoNotAge LSAs
	DnaLsaCount uint32 `protobuf:"varint,85,opt,name=dna_lsa_count,json=dnaLsaCount" json:"dna_lsa_count,omitempty"`
	// Number of LSAs which need to be flooded
	FloodListLength uint32 `protobuf:"varint,86,opt,name=flood_list_length,json=floodListLength" json:"flood_list_length,omitempty"`
	// Number of LFA enabled interfaces
	AreaLfaInterfaceCount uint32 `protobuf:"varint,87,opt,name=area_lfa_interface_count,json=areaLfaInterfaceCount" json:"area_lfa_interface_count,omitempty"`
	// Number of Per Prefix LFA enabled interfaces
	AreaPerPrefixLfaInterfaceCount uint32 `protobuf:"varint,88,opt,name=area_per_prefix_lfa_interface_count,json=areaPerPrefixLfaInterfaceCount" json:"area_per_prefix_lfa_interface_count,omitempty"`
	// Area LFA revision
	AreaLfaRevision uint32 `protobuf:"varint,89,opt,name=area_lfa_revision,json=areaLfaRevision" json:"area_lfa_revision,omitempty"`
	// Num of nbrs currently forming
	AreaAdjStagNumNbrForming uint32 `protobuf:"varint,90,opt,name=area_adj_stag_num_nbr_forming,json=areaAdjStagNumNbrForming" json:"area_adj_stag_num_nbr_forming,omitempty"`
	// Num of full nbrs in area
	AreaNumNbrFull uint32 `protobuf:"varint,91,opt,name=area_num_nbr_full,json=areaNumNbrFull" json:"area_num_nbr_full,omitempty"`
}

func (m *OspfShArea) Reset()                    { *m = OspfShArea{} }
func (m *OspfShArea) String() string            { return proto.CompactTextString(m) }
func (*OspfShArea) ProtoMessage()               {}
func (*OspfShArea) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OspfShArea) GetAreaIdString() string {
	if m != nil {
		return m.AreaIdString
	}
	return ""
}

func (m *OspfShArea) GetBackboneAreaActive() bool {
	if m != nil {
		return m.BackboneAreaActive
	}
	return false
}

func (m *OspfShArea) GetAreaInterfaceCount() uint32 {
	if m != nil {
		return m.AreaInterfaceCount
	}
	return 0
}

func (m *OspfShArea) GetAreaStub() bool {
	if m != nil {
		return m.AreaStub
	}
	return false
}

func (m *OspfShArea) GetAreaTotalStub() bool {
	if m != nil {
		return m.AreaTotalStub
	}
	return false
}

func (m *OspfShArea) GetStubDefaultCost() uint32 {
	if m != nil {
		return m.StubDefaultCost
	}
	return 0
}

func (m *OspfShArea) GetAreaNssa() bool {
	if m != nil {
		return m.AreaNssa
	}
	return false
}

func (m *OspfShArea) GetNssaNoRedistribution() bool {
	if m != nil {
		return m.NssaNoRedistribution
	}
	return false
}

func (m *OspfShArea) GetNssaTranslate() bool {
	if m != nil {
		return m.NssaTranslate
	}
	return false
}

func (m *OspfShArea) GetNssaDefault() bool {
	if m != nil {
		return m.NssaDefault
	}
	return false
}

func (m *OspfShArea) GetTeEnabled() bool {
	if m != nil {
		return m.TeEnabled
	}
	return false
}

func (m *OspfShArea) GetTeTopologyVersion() uint32 {
	if m != nil {
		return m.TeTopologyVersion
	}
	return 0
}

func (m *OspfShArea) GetExternalOut() bool {
	if m != nil {
		return m.ExternalOut
	}
	return false
}

func (m *OspfShArea) GetSummaryIn() bool {
	if m != nil {
		return m.SummaryIn
	}
	return false
}

func (m *OspfShArea) GetSegmentRouting() uint32 {
	if m != nil {
		return m.SegmentRouting
	}
	return 0
}

func (m *OspfShArea) GetSrStrictSpfCap() bool {
	if m != nil {
		return m.SrStrictSpfCap
	}
	return false
}

func (m *OspfShArea) GetSrStrictSpfsiDsAvailable() bool {
	if m != nil {
		return m.SrStrictSpfsiDsAvailable
	}
	return false
}

func (m *OspfShArea) GetSrMicroloopAvoidanceActive() bool {
	if m != nil {
		return m.SrMicroloopAvoidanceActive
	}
	return false
}

func (m *OspfShArea) GetSrMicroloopAvoidanceEventType() string {
	if m != nil {
		return m.SrMicroloopAvoidanceEventType
	}
	return ""
}

func (m *OspfShArea) GetSrMicroloopAvoidanceNearEndId() string {
	if m != nil {
		return m.SrMicroloopAvoidanceNearEndId
	}
	return ""
}

func (m *OspfShArea) GetSrMicroloopAvoidanceFarEndId() string {
	if m != nil {
		return m.SrMicroloopAvoidanceFarEndId
	}
	return ""
}

func (m *OspfShArea) GetSrMicroloopAvoidancePseudonodeId() string {
	if m != nil {
		return m.SrMicroloopAvoidancePseudonodeId
	}
	return ""
}

func (m *OspfShArea) GetAuthenticationType() string {
	if m != nil {
		return m.AuthenticationType
	}
	return ""
}

func (m *OspfShArea) GetSpfCount() uint32 {
	if m != nil {
		return m.SpfCount
	}
	return 0
}

func (m *OspfShArea) GetAreaPolicyIn() bool {
	if m != nil {
		return m.AreaPolicyIn
	}
	return false
}

func (m *OspfShArea) GetAreaPolicyInName() string {
	if m != nil {
		return m.AreaPolicyInName
	}
	return ""
}

func (m *OspfShArea) GetAreaPolicyOut() bool {
	if m != nil {
		return m.AreaPolicyOut
	}
	return false
}

func (m *OspfShArea) GetAreaPolicyOutName() string {
	if m != nil {
		return m.AreaPolicyOutName
	}
	return ""
}

func (m *OspfShArea) GetAreaRangeList() []*OspfShAreaRange {
	if m != nil {
		return m.AreaRangeList
	}
	return nil
}

func (m *OspfShArea) GetAreaLsaCount() uint32 {
	if m != nil {
		return m.AreaLsaCount
	}
	return 0
}

func (m *OspfShArea) GetAreaLsaChecksum() uint32 {
	if m != nil {
		return m.AreaLsaChecksum
	}
	return 0
}

func (m *OspfShArea) GetAreaOpaqueLsaCount() uint32 {
	if m != nil {
		return m.AreaOpaqueLsaCount
	}
	return 0
}

func (m *OspfShArea) GetAreaOpaqueLsaChecksum() uint32 {
	if m != nil {
		return m.AreaOpaqueLsaChecksum
	}
	return 0
}

func (m *OspfShArea) GetAreaDcBitlessLsaCount() uint32 {
	if m != nil {
		return m.AreaDcBitlessLsaCount
	}
	return 0
}

func (m *OspfShArea) GetIndicationLsaCount() uint32 {
	if m != nil {
		return m.IndicationLsaCount
	}
	return 0
}

func (m *OspfShArea) GetDnaLsaCount() uint32 {
	if m != nil {
		return m.DnaLsaCount
	}
	return 0
}

func (m *OspfShArea) GetFloodListLength() uint32 {
	if m != nil {
		return m.FloodListLength
	}
	return 0
}

func (m *OspfShArea) GetAreaLfaInterfaceCount() uint32 {
	if m != nil {
		return m.AreaLfaInterfaceCount
	}
	return 0
}

func (m *OspfShArea) GetAreaPerPrefixLfaInterfaceCount() uint32 {
	if m != nil {
		return m.AreaPerPrefixLfaInterfaceCount
	}
	return 0
}

func (m *OspfShArea) GetAreaLfaRevision() uint32 {
	if m != nil {
		return m.AreaLfaRevision
	}
	return 0
}

func (m *OspfShArea) GetAreaAdjStagNumNbrForming() uint32 {
	if m != nil {
		return m.AreaAdjStagNumNbrForming
	}
	return 0
}

func (m *OspfShArea) GetAreaNumNbrFull() uint32 {
	if m != nil {
		return m.AreaNumNbrFull
	}
	return 0
}

// OSPF Area Range Information
type OspfShAreaRange struct {
	// IP prefix for summarization
	RangePrefix string `protobuf:"bytes,1,opt,name=range_prefix,json=rangePrefix" json:"range_prefix,omitempty"`
	// Network mask
	RangeMask string `protobuf:"bytes,2,opt,name=range_mask,json=rangeMask" json:"range_mask,omitempty"`
	// Cost
	Cost uint32 `protobuf:"varint,3,opt,name=cost" json:"cost,omitempty"`
	// Whether to advertise Summary LSAs for this range
	AdvertiseFlag bool `protobuf:"varint,4,opt,name=advertise_flag,json=advertiseFlag" json:"advertise_flag,omitempty"`
}

func (m *OspfShAreaRange) Reset()                    { *m = OspfShAreaRange{} }
func (m *OspfShAreaRange) String() string            { return proto.CompactTextString(m) }
func (*OspfShAreaRange) ProtoMessage()               {}
func (*OspfShAreaRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OspfShAreaRange) GetRangePrefix() string {
	if m != nil {
		return m.RangePrefix
	}
	return ""
}

func (m *OspfShAreaRange) GetRangeMask() string {
	if m != nil {
		return m.RangeMask
	}
	return ""
}

func (m *OspfShAreaRange) GetCost() uint32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *OspfShAreaRange) GetAdvertiseFlag() bool {
	if m != nil {
		return m.AdvertiseFlag
	}
	return false
}

func init() {
	proto.RegisterType((*OspfShArea_KEYS)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_areas.process_area.ospf_sh_area_KEYS")
	proto.RegisterType((*OspfShArea)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_areas.process_area.ospf_sh_area")
	proto.RegisterType((*OspfShAreaRange)(nil), "cisco_ios_xr_ipv4_ospf_oper.ospf.processes.process.default_vrf.process_information.process_areas.process_area.ospf_sh_area_range")
}

func init() { proto.RegisterFile("ospf_sh_area.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x6d, 0x73, 0x1b, 0x35,
	0x10, 0x1e, 0xd3, 0x4e, 0x5b, 0x2b, 0x6d, 0x52, 0x2b, 0x29, 0x08, 0xda, 0x30, 0x69, 0x28, 0x10,
	0x3a, 0x83, 0x5b, 0xda, 0x40, 0xcb, 0x5b, 0x8b, 0x9b, 0x97, 0xd6, 0x24, 0x71, 0x82, 0x1d, 0x0a,
	0x85, 0x0f, 0x1a, 0xf9, 0x6e, 0xcf, 0x51, 0x73, 0x27, 0x1d, 0x92, 0xce, 0x93, 0x7c, 0xe4, 0x27,
	0xf0, 0x37, 0xf8, 0x8f, 0xcc, 0x30, 0x5a, 0xdd, 0xf9, 0x6c, 0x92, 0x7c, 0xe5, 0xdb, 0xdd, 0xb3,
	0xcf, 0x3e, 0xbb, 0x5a, 0xed, 0xed, 0x1e, 0xa1, 0xda, 0xe6, 0x09, 0xb7, 0x47, 0x5c, 0x18, 0x10,
	0xed, 0xdc, 0x68, 0xa7, 0x69, 0x16, 0x49, 0x1b, 0x69, 0x2e, 0xb5, 0xe5, 0x27, 0x86, 0xcb, 0x7c,
	0xbc, 0xce, 0x91, 0xa5, 0x73, 0x30, 0x6d, 0xff, 0xe4, 0x79, 0x11, 0x58, 0x0b, 0xb6, 0x7a, 0x6a,
	0xc7, 0x90, 0x88, 0x22, 0x75, 0x7c, 0x6c, 0x26, 0x56, 0x2e, 0x55, 0xa2, 0x4d, 0x26, 0x9c, 0xd4,
	0x6a, 0x82, 0xf9, 0x30, 0x76, 0xe6, 0x6d, 0x55, 0x92, 0xd6, 0x74, 0x12, 0x7c, 0x67, 0xeb, 0xcd,
	0x80, 0xde, 0x25, 0xd7, 0x2b, 0x92, 0x12, 0x19, 0xb0, 0xc6, 0x4a, 0x63, 0xad, 0xd9, 0x9f, 0x2b,
	0xb1, 0x9e, 0xc8, 0x80, 0xbe, 0x47, 0xae, 0x22, 0x5f, 0xc6, 0xec, 0x9d, 0x95, 0xc6, 0xda, 0x8d,
	0xfe, 0x15, 0xff, 0xda, 0x8d, 0x29, 0x23, 0x57, 0x45, 0x1c, 0x1b, 0xb0, 0x96, 0x5d, 0x42, 0xb7,
	0xea, 0x75, 0xf5, 0x9f, 0x9b, 0xe4, 0xfa, 0x74, 0x2c, 0x7a, 0x8f, 0xcc, 0x97, 0x1a, 0xdc, 0x3a,
	0x23, 0xd5, 0x88, 0x3d, 0x42, 0x8f, 0xeb, 0x41, 0x6a, 0x80, 0x18, 0x7d, 0x48, 0x96, 0x86, 0x22,
	0x3a, 0x1e, 0x6a, 0x05, 0x21, 0x45, 0x11, 0x39, 0x39, 0x06, 0xf6, 0x78, 0xa5, 0xb1, 0x76, 0xad,
	0x4f, 0x2b, 0x5b, 0xc7, 0x80, 0xe8, 0xa0, 0xc5, 0x7b, 0x04, 0x5d, 0xe5, 0xc0, 0x24, 0x22, 0x02,
	0x1e, 0xe9, 0x42, 0x39, 0xb6, 0x8e, 0x89, 0x52, 0x54, 0xaf, 0x4c, 0x1b, 0xde, 0x42, 0x6f, 0x93,
	0x26, 0x7a, 0x58, 0x57, 0x0c, 0xd9, 0x97, 0x28, 0x7c, 0xcd, 0x03, 0x03, 0x57, 0x0c, 0xe9, 0x27,
	0x64, 0x01, 0x8d, 0x4e, 0x3b, 0x91, 0x06, 0xca, 0x57, 0x48, 0xb9, 0xe1, 0xe1, 0x43, 0x8f, 0x22,
	0xef, 0x3e, 0x69, 0x79, 0x23, 0xaf, 0x6e, 0x23, 0xd2, 0xd6, 0xb1, 0x27, 0x18, 0x73, 0xc1, 0x1b,
	0x36, 0x03, 0xbe, 0xa1, 0x6d, 0x1d, 0x50, 0x59, 0x2b, 0xd8, 0xd3, 0x3a, 0x60, 0xcf, 0x5a, 0x41,
	0xd7, 0xc9, 0xbb, 0x1e, 0xe7, 0x4a, 0x73, 0x03, 0xb1, 0xf4, 0xb5, 0x19, 0x16, 0xfe, 0x22, 0xd9,
	0xd7, 0xc8, 0x5c, 0xf2, 0xd6, 0x9e, 0xee, 0xcf, 0xd8, 0xe8, 0xc7, 0x64, 0x1e, 0xbd, 0x9c, 0x11,
	0xca, 0xa6, 0xc2, 0x01, 0xfb, 0x26, 0x64, 0xe9, 0xd1, 0xc3, 0x0a, 0xf4, 0x77, 0x8b, 0xb4, 0x32,
	0x4b, 0xf6, 0x2d, 0x92, 0xe6, 0x3c, 0x56, 0x26, 0x48, 0x97, 0x09, 0x71, 0xc0, 0x41, 0x89, 0x61,
	0x0a, 0x31, 0xfb, 0x0e, 0x09, 0x4d, 0x07, 0x5b, 0x01, 0xa0, 0x6d, 0xb2, 0xe8, 0x80, 0x3b, 0x9d,
	0xeb, 0x54, 0x8f, 0x4e, 0xf9, 0x18, 0x8c, 0xf5, 0xb9, 0x7d, 0x8f, 0x27, 0x6d, 0x39, 0x38, 0x2c,
	0x2d, 0xaf, 0x83, 0xc1, 0x47, 0x84, 0x13, 0x07, 0x46, 0x89, 0x94, 0xeb, 0xc2, 0xb1, 0x67, 0x21,
	0x62, 0x85, 0xed, 0x17, 0x18, 0xd1, 0x16, 0x59, 0x26, 0xcc, 0x29, 0x97, 0x8a, 0x3d, 0x0f, 0x11,
	0x4b, 0xa4, 0xab, 0xe8, 0xa7, 0x64, 0xc1, 0xc2, 0x28, 0x03, 0xe5, 0xb8, 0xd1, 0x85, 0xf3, 0x9d,
	0xf2, 0x03, 0x46, 0x9b, 0x2f, 0xe1, 0x7e, 0x40, 0xe9, 0x67, 0xa4, 0x65, 0x0d, 0x36, 0x53, 0xe4,
	0xb8, 0x6f, 0xb5, 0x48, 0xe4, 0xac, 0x83, 0x72, 0xf3, 0xd6, 0x0c, 0x10, 0x1f, 0xe4, 0xc9, 0x86,
	0xc8, 0xe9, 0x33, 0x72, 0x67, 0x86, 0x6a, 0x25, 0x8f, 0x2d, 0x17, 0x63, 0x21, 0x53, 0x7f, 0x4c,
	0xf6, 0x02, 0xbd, 0xd8, 0x94, 0x97, 0x95, 0x9b, 0xb6, 0x53, 0xd9, 0x69, 0x87, 0x2c, 0x5b, 0xc3,
	0x33, 0x19, 0x19, 0x9d, 0x6a, 0x9d, 0x73, 0x31, 0xd6, 0x32, 0x16, 0x2a, 0x82, 0xaa, 0x3f, 0x37,
	0x50, 0xe0, 0x03, 0x6b, 0xf6, 0x2a, 0x4e, 0xa7, 0xa2, 0x94, 0x7d, 0xfa, 0x8a, 0xdc, 0xbd, 0x40,
	0x02, 0xc6, 0xfe, 0xac, 0xee, 0x34, 0x07, 0xb6, 0x89, 0x9f, 0xc4, 0xf2, 0x79, 0x32, 0x5b, 0x9e,
	0x75, 0x78, 0x9a, 0x03, 0xed, 0x92, 0xd5, 0x0b, 0x94, 0x14, 0x08, 0xc3, 0x41, 0xc5, 0xfe, 0x43,
	0xdd, 0xba, 0x58, 0xaa, 0x07, 0xc2, 0x6c, 0xa9, 0xb8, 0x1b, 0xd3, 0x97, 0x17, 0x26, 0x95, 0xd4,
	0x4a, 0xdb, 0xa8, 0x74, 0xe7, 0x3c, 0xa5, 0xed, 0x4a, 0xa8, 0x47, 0xee, 0x5d, 0x20, 0x94, 0x5b,
	0x28, 0x62, 0xad, 0x74, 0x0c, 0x5e, 0xeb, 0x25, 0x6a, 0xad, 0x9c, 0xa7, 0x75, 0x30, 0x21, 0x76,
	0x63, 0xfa, 0x80, 0x2c, 0x8a, 0xc2, 0x1d, 0x81, 0x72, 0x32, 0xc2, 0xb1, 0x16, 0xea, 0xf3, 0x0a,
	0xdd, 0xe9, 0xac, 0x09, 0x8b, 0x72, 0x9b, 0x34, 0xb1, 0x05, 0xf0, 0xdb, 0xef, 0x62, 0xbf, 0x5c,
	0xb3, 0x79, 0x12, 0xbe, 0xf8, 0x6a, 0xf6, 0xe4, 0x3a, 0x95, 0x11, 0x76, 0xdd, 0x8f, 0x78, 0x5f,
	0x38, 0x7b, 0x0e, 0x10, 0xec, 0x2a, 0xfa, 0x39, 0x59, 0x9c, 0x65, 0x85, 0x79, 0xb8, 0x83, 0x31,
	0x6f, 0x4e, 0x53, 0x71, 0x28, 0x56, 0x93, 0xa2, 0xa4, 0xfb, 0x66, 0xdf, 0xad, 0x27, 0x45, 0xa0,
	0xfa, 0x76, 0x7f, 0x50, 0x0e, 0xa8, 0x9a, 0x17, 0x74, 0xf7, 0x50, 0xb7, 0x35, 0x43, 0x46, 0xe1,
	0xbf, 0x1b, 0xa5, 0xb2, 0x11, 0x6a, 0x04, 0x3c, 0x95, 0xd6, 0xb1, 0xde, 0xca, 0xa5, 0xb5, 0xb9,
	0x47, 0x7f, 0x36, 0xda, 0xff, 0xeb, 0xc2, 0x68, 0xcf, 0x6c, 0x0b, 0x4c, 0x27, 0x9c, 0xae, 0xef,
	0x1f, 0x77, 0xa5, 0xad, 0x4b, 0x9b, 0x5a, 0x51, 0x16, 0x7f, 0x1f, 0x8b, 0x8f, 0xa5, 0xdd, 0xb5,
	0x22, 0x5c, 0xc0, 0x7d, 0xd2, 0xaa, 0x59, 0x47, 0x10, 0x1d, 0xdb, 0x22, 0x63, 0x07, 0x61, 0x5a,
	0x56, 0xc4, 0x12, 0xa6, 0x5f, 0x90, 0x5b, 0xc8, 0xd5, 0xb9, 0xf8, 0xa3, 0x80, 0x29, 0xe1, 0x9f,
	0xea, 0x89, 0xbe, 0x8f, 0xb6, 0x89, 0xfc, 0x13, 0xc2, 0xce, 0xb8, 0x54, 0x51, 0xfa, 0xe8, 0x75,
	0x6b, 0xd6, 0xab, 0x8a, 0xf5, 0x94, 0xbc, 0x8f, 0x8e, 0x71, 0xc4, 0x87, 0xd2, 0xa5, 0xfe, 0xdc,
	0x75, 0xbc, 0x41, 0xed, 0xb9, 0x19, 0xbd, 0x08, 0xe6, 0x49, 0xc8, 0x87, 0x64, 0x49, 0xaa, 0xb8,
	0x6a, 0xce, 0xda, 0xe9, 0x30, 0x24, 0x59, 0xdb, 0x26, 0x1e, 0xab, 0xe4, 0x46, 0xac, 0xa6, 0x0b,
	0xf5, 0x33, 0x52, 0xe7, 0x62, 0x35, 0x53, 0xa7, 0x24, 0xd5, 0x3a, 0xc6, 0x4b, 0xe7, 0x29, 0xa8,
	0x91, 0x3b, 0x62, 0xaf, 0x43, 0x9d, 0xd0, 0xe0, 0x6b, 0xbe, 0x8b, 0xf0, 0xe4, 0xd0, 0x69, 0x72,
	0x76, 0xf9, 0xfd, 0x52, 0xa7, 0xbe, 0x9b, 0xfc, 0x77, 0xff, 0xed, 0x90, 0x8f, 0x42, 0x43, 0x82,
	0xe1, 0xb9, 0x81, 0x44, 0x9e, 0x9c, 0xab, 0xf1, 0x2b, 0x6a, 0x7c, 0x88, 0xfd, 0x09, 0xe6, 0x00,
	0x89, 0x67, 0xc5, 0x26, 0x37, 0x9b, 0x08, 0x6e, 0x60, 0x2c, 0x71, 0x3b, 0xbc, 0x99, 0xba, 0xd9,
	0x44, 0xf4, 0x4b, 0x98, 0x3e, 0x27, 0xcb, 0x61, 0xa7, 0xc7, 0x6f, 0xb9, 0x75, 0x62, 0xc4, 0x55,
	0x91, 0x71, 0x35, 0x34, 0xdc, 0xf7, 0xa2, 0x9f, 0xf3, 0xbf, 0xa1, 0x1f, 0x1e, 0xab, 0x13, 0xbf,
	0x1d, 0x38, 0x31, 0xea, 0x15, 0x59, 0x6f, 0x68, 0xb6, 0x83, 0xdd, 0x4f, 0xfc, 0xb0, 0x48, 0x2b,
	0xbf, 0x22, 0x4d, 0xd9, 0xef, 0x61, 0x39, 0xe0, 0x42, 0x0d, 0xec, 0x22, 0x4d, 0x57, 0xff, 0x6a,
	0xcc, 0xfe, 0x70, 0x85, 0xee, 0xf5, 0xeb, 0x29, 0x7c, 0x55, 0xe1, 0xe0, 0xd5, 0xcf, 0x0e, 0x62,
	0xe1, 0x88, 0x7e, 0x3d, 0x05, 0x4a, 0x26, 0xec, 0x31, 0xfe, 0xef, 0x34, 0xfb, 0x4d, 0x44, 0xf6,
	0x84, 0x3d, 0xa6, 0x94, 0x5c, 0xc6, 0x5d, 0x7f, 0x09, 0xc3, 0xe2, 0xb3, 0xdf, 0xc6, 0x22, 0x1e,
	0x83, 0x71, 0xd2, 0x02, 0x4f, 0x52, 0x31, 0x62, 0x97, 0xcb, 0x49, 0x50, 0xa1, 0xdb, 0xa9, 0x18,
	0x0d, 0xaf, 0xe0, 0x4f, 0xdf, 0xe3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x32, 0xdc, 0x16,
	0x0a, 0x0a, 0x00, 0x00,
}
