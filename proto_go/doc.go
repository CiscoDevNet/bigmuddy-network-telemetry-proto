/*
This package provides protobuf golang bindings for Model Driven
Telemetry (MDT) messages and gRPC service definitions as well as wrapper
code to facilitate unmarshalling GPB encoded content from routers.

MDT provides a mechanism for an external entity to subscribe to a data
set defined in a YANG model and receive periodic or event-based
updates of the data set from an MDT-capable device.  The data
definition (YANG models), encodings on the wire, and the transports
used are handled as independent layers to provide sufficient
flexibility.


Top Level Messages

The outermost message of model driven telemetry payload can be found
in the message Telemetry in telemetry.proto.

The normal mode of operation in MDT is expected to be the dial-out
mode.  In this mode, MDT is configured on an MDT-capable Device.
Sensor-paths, and mdt-destinations are configured and bound together
into one or more mdt-subscriptions.  These configuration primitives
are defined in the OpenConfig Telemetry model. An MDT-capable Device
continually attempts to establish an MDT Session to each of the
mdt-destinations that are bound into mdt-subscriptions.  For each
established MDT Session, the MDT-capable Device streams Telemetry
Messages per the mdt-subscription configuration.  Such
mdt-subscriptions are considered persistent subscriptions.

The dial out service definition for gRPC can be found in:

  mdt_grpc_dialout/mdt_grpc_dialout.proto

The dial-in mode of operation allows an MDT Collector to establish an
MDT Session, and subscribe dynamically to one or more sensor-paths or
mdt-subscriptions.  The MDT-capable Device will stream Telemetry
messages via the same MDT session (in-band).  Such subscriptions are
considered dynamic or ephemeral subscriptions.  A dynamic subscription
terminates either when the MDT Collector cancels the subscription, or
when the MDT Session terminates.

The dial in service definition for gRPC can be found in:

  mdt_grpc_dialin/mdt_grpc_dialin.proto


Mapping YANG Encoding Path And Model Version To Message Set

An application which has received and decoded a Telemetry message
might find that the TelemetryGPBTable field is populated. This field
points at the TelemetryGPBTable message which itself is a set of
repeated TelemetryRowGPB messages:

 message TelemetryRowGPB {
   uint64 timestamp = 1;
   bytes keys = 10;
   bytes content = 11;
 }

The two fields keys, and content are bytes streams. Both are binary
stream based on protobuf messages and can be unmarshalled against the
matching .proto derived structure. The role of this package is to make
figuring out the appropriate .proto derived structure easy even if
there are thousands of proto files covering the telemetry models
exported by a router.

In order to retrieve the ProtoMsgs object to use to unmarshal the
payload, a ProtoKey object is composed using the YANG encoding path
(retrieved from the encoding-path field in the Telemetry message), and
the model version used if provided (again in the Telemetry
message). The ProtoKey object is used as an argument to
EncodingPathToMessageReflectionSet in order to fetch the pertinent set
of message types ProtoMsgs to unmarshal against. Finally with a
ProtoMsgs in hand, we can retrieve PROTO_KEYS_MSG structure to
unmarshal 'keys' binary stream, or PROTO_CONTENT_MSG to unmarshall
'content'.

Autogenerated Protobuf Documentation

*/
package telemetry
