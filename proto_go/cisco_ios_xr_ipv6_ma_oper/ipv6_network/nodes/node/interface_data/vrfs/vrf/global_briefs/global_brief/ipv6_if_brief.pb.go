// Code generated by protoc-gen-go.
// source: ipv6_if_brief.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv6_ma_oper_ipv6_network_nodes_node_interface_data_vrfs_vrf_global_briefs_global_brief is a generated protocol buffer package.

It is generated from these files:
	ipv6_if_brief.proto

It has these top-level messages:
	Ipv6IfBrief_KEYS
	Ipv6IfBrief
	Ipv6AddrNode
*/
package cisco_ios_xr_ipv6_ma_oper_ipv6_network_nodes_node_interface_data_vrfs_vrf_global_briefs_global_brief

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Brief Summary of IPv6 Interface
type Ipv6IfBrief_KEYS struct {
	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	VrfName       string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *Ipv6IfBrief_KEYS) Reset()                    { *m = Ipv6IfBrief_KEYS{} }
func (m *Ipv6IfBrief_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ipv6IfBrief_KEYS) ProtoMessage()               {}
func (*Ipv6IfBrief_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ipv6IfBrief_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Ipv6IfBrief_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6IfBrief_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type Ipv6IfBrief struct {
	// State of Interface Line
	LineState string `protobuf:"bytes,50,opt,name=line_state,json=lineState" json:"line_state,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,51,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Address List
	AddressList []*Ipv6AddrNode `protobuf:"bytes,52,rep,name=address_list,json=addressList" json:"address_list,omitempty"`
	// Link Local Address
	LinkLocalAddress *Ipv6AddrNode `protobuf:"bytes,53,opt,name=link_local_address,json=linkLocalAddress" json:"link_local_address,omitempty"`
}

func (m *Ipv6IfBrief) Reset()                    { *m = Ipv6IfBrief{} }
func (m *Ipv6IfBrief) String() string            { return proto.CompactTextString(m) }
func (*Ipv6IfBrief) ProtoMessage()               {}
func (*Ipv6IfBrief) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ipv6IfBrief) GetLineState() string {
	if m != nil {
		return m.LineState
	}
	return ""
}

func (m *Ipv6IfBrief) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6IfBrief) GetAddressList() []*Ipv6AddrNode {
	if m != nil {
		return m.AddressList
	}
	return nil
}

func (m *Ipv6IfBrief) GetLinkLocalAddress() *Ipv6AddrNode {
	if m != nil {
		return m.LinkLocalAddress
	}
	return nil
}

// List of IPv6 Addresses
type Ipv6AddrNode struct {
	// IPv6 Address
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// Prefix Length of IPv6 Address
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	// State of Address
	AddressState string `protobuf:"bytes,3,opt,name=address_state,json=addressState" json:"address_state,omitempty"`
	// Anycast address
	IsAnycast bool `protobuf:"varint,4,opt,name=is_anycast,json=isAnycast" json:"is_anycast,omitempty"`
	// Route-tag of the Address
	RouteTag uint32 `protobuf:"varint,5,opt,name=route_tag,json=routeTag" json:"route_tag,omitempty"`
}

func (m *Ipv6AddrNode) Reset()                    { *m = Ipv6AddrNode{} }
func (m *Ipv6AddrNode) String() string            { return proto.CompactTextString(m) }
func (*Ipv6AddrNode) ProtoMessage()               {}
func (*Ipv6AddrNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Ipv6AddrNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Ipv6AddrNode) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *Ipv6AddrNode) GetAddressState() string {
	if m != nil {
		return m.AddressState
	}
	return ""
}

func (m *Ipv6AddrNode) GetIsAnycast() bool {
	if m != nil {
		return m.IsAnycast
	}
	return false
}

func (m *Ipv6AddrNode) GetRouteTag() uint32 {
	if m != nil {
		return m.RouteTag
	}
	return 0
}

func init() {
	proto.RegisterType((*Ipv6IfBrief_KEYS)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_briefs.global_brief.ipv6_if_brief_KEYS")
	proto.RegisterType((*Ipv6IfBrief)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_briefs.global_brief.ipv6_if_brief")
	proto.RegisterType((*Ipv6AddrNode)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_briefs.global_brief.ipv6_addr_node")
}

func init() { proto.RegisterFile("ipv6_if_brief.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x53, 0xc1, 0x4e, 0xe3, 0x30,
	0x14, 0x54, 0xb6, 0xbb, 0xdb, 0xc4, 0x6d, 0xaa, 0x95, 0xf7, 0x12, 0x84, 0x2a, 0x45, 0x45, 0x48,
	0x3d, 0xe5, 0xd0, 0x02, 0xf7, 0x1e, 0x38, 0x51, 0x71, 0x48, 0xb9, 0x70, 0x7a, 0x72, 0x13, 0x27,
	0x58, 0x75, 0xed, 0xc8, 0x36, 0xa1, 0xfc, 0x01, 0x7f, 0xc0, 0x9d, 0x2f, 0xe0, 0x13, 0x91, 0xed,
	0x06, 0x94, 0x1f, 0x80, 0x8b, 0xa5, 0x37, 0x6f, 0x32, 0x33, 0xca, 0xd8, 0xe8, 0x3f, 0x6b, 0xda,
	0x2b, 0x60, 0x15, 0x6c, 0x15, 0xa3, 0x55, 0xd6, 0x28, 0x69, 0x24, 0x2e, 0x0b, 0xa6, 0x0b, 0x09,
	0x4c, 0x6a, 0x38, 0x28, 0x70, 0x8c, 0x3d, 0x01, 0xd9, 0x50, 0x95, 0xb9, 0x41, 0x50, 0xf3, 0x24,
	0xd5, 0x2e, 0x13, 0xb2, 0xa4, 0xda, 0x9d, 0x19, 0x13, 0x86, 0xaa, 0x8a, 0x14, 0x14, 0x4a, 0x62,
	0x48, 0xd6, 0xaa, 0x4a, 0xdb, 0x23, 0xab, 0xb9, 0xdc, 0x12, 0xee, 0xd5, 0x75, 0x6f, 0x9a, 0x69,
	0x84, 0x7b, 0xe6, 0x70, 0x73, 0x7d, 0xbf, 0xc1, 0xa7, 0x28, 0xb2, 0x82, 0x20, 0xc8, 0x9e, 0x26,
	0x41, 0x1a, 0xcc, 0xa3, 0x3c, 0xb4, 0xc0, 0x2d, 0xd9, 0x53, 0x7c, 0x82, 0xc2, 0x56, 0x55, 0x7e,
	0xf7, 0xcb, 0xed, 0x86, 0xad, 0xaa, 0xdc, 0xea, 0x1c, 0x4d, 0xbe, 0x32, 0x38, 0xc2, 0xc0, 0x11,
	0xe2, 0x4f, 0xd4, 0xd2, 0x66, 0x2f, 0x03, 0x14, 0xf7, 0x5c, 0xf1, 0x14, 0x21, 0xce, 0x04, 0x05,
	0x6d, 0x88, 0xa1, 0xc9, 0xc2, 0x7d, 0x14, 0x59, 0x64, 0x63, 0x81, 0x9e, 0xe5, 0xb2, 0x6f, 0xf9,
	0x1a, 0xa0, 0x31, 0x29, 0x4b, 0x45, 0xb5, 0x06, 0xce, 0xb4, 0x49, 0x2e, 0xd2, 0xc1, 0x7c, 0xb4,
	0x30, 0xd9, 0x77, 0xfc, 0x3e, 0x2f, 0x65, 0xed, 0xc1, 0x2a, 0xe4, 0xa3, 0x63, 0x92, 0x35, 0xd3,
	0x06, 0xbf, 0x05, 0x08, 0x73, 0x26, 0x76, 0xc0, 0x65, 0x41, 0x38, 0x1c, 0x57, 0xc9, 0x65, 0x1a,
	0xfc, 0x58, 0xbe, 0x7f, 0x36, 0xcf, 0xda, 0xc6, 0x59, 0xf9, 0x34, 0xb3, 0xf7, 0x00, 0x4d, 0xfa,
	0x24, 0x9c, 0xa0, 0x61, 0x97, 0xd5, 0x57, 0xdf, 0x8d, 0xf8, 0x0c, 0xc5, 0x8d, 0xa2, 0x15, 0x3b,
	0x00, 0xa7, 0xa2, 0x36, 0x0f, 0xae, 0xfe, 0x38, 0x1f, 0x7b, 0x70, 0xed, 0x30, 0x4b, 0xea, 0xfa,
	0xf0, 0x6d, 0xfa, 0x2b, 0xd0, 0x95, 0xe4, 0x0b, 0x9d, 0x22, 0xc4, 0x34, 0x10, 0xf1, 0x5c, 0x10,
	0x6d, 0x92, 0xdf, 0x69, 0x30, 0x0f, 0xf3, 0x88, 0xe9, 0x95, 0x07, 0xec, 0xfd, 0x53, 0xf2, 0xd1,
	0x50, 0x30, 0xa4, 0x4e, 0xfe, 0x38, 0x93, 0xd0, 0x01, 0x77, 0xa4, 0xde, 0xfe, 0x75, 0xef, 0x63,
	0xf9, 0x11, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xda, 0x76, 0x71, 0x36, 0x03, 0x00, 0x00,
}
