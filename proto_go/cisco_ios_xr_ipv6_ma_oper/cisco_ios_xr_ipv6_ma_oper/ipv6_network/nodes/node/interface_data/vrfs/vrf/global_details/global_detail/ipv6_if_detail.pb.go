// Code generated by protoc-gen-go.
// source: ipv6_if_detail.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv6_ma_oper_ipv6_network_nodes_node_interface_data_vrfs_vrf_global_details_global_detail is a generated protocol buffer package.

It is generated from these files:
	ipv6_if_detail.proto

It has these top-level messages:
	Ipv6IfDetail_KEYS
	Ipv6IfDetail
	Str
	TimevalEntry
	Ipv6AddrNode
	Ipv6AclConfig
	Ipv6MultiAclConfig
	Ipv6McastGroup
	RpfConfig
	BgpPaDir
	BgpPaConfig
*/
package cisco_ios_xr_ipv6_ma_oper_ipv6_network_nodes_node_interface_data_vrfs_vrf_global_details_global_detail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Detailed Info of IPv6 Interface
type Ipv6IfDetail_KEYS struct {
	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	VrfName       string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	InterfaceName string `protobuf:"bytes,3,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *Ipv6IfDetail_KEYS) Reset()                    { *m = Ipv6IfDetail_KEYS{} }
func (m *Ipv6IfDetail_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ipv6IfDetail_KEYS) ProtoMessage()               {}
func (*Ipv6IfDetail_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ipv6IfDetail_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Ipv6IfDetail_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6IfDetail_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type Ipv6IfDetail struct {
	// State of Interface Line
	LineState string `protobuf:"bytes,50,opt,name=line_state,json=lineState" json:"line_state,omitempty"`
	// IPv6 Multicast Group
	MulticastGroups []*Ipv6McastGroup `protobuf:"bytes,51,rep,name=multicast_groups,json=multicastGroups" json:"multicast_groups,omitempty"`
	// IPv6 MTU
	Mtu uint32 `protobuf:"varint,52,opt,name=mtu" json:"mtu,omitempty"`
	// IPv6 Operation State
	OperationState string `protobuf:"bytes,53,opt,name=operation_state,json=operationState" json:"operation_state,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,54,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Address List
	AddressList []*Ipv6AddrNode `protobuf:"bytes,55,rep,name=address_list,json=addressList" json:"address_list,omitempty"`
	// Link Local Address
	LinkLocalAddress *Ipv6AddrNode `protobuf:"bytes,56,opt,name=link_local_address,json=linkLocalAddress" json:"link_local_address,omitempty"`
	// IPv6 Access Control List
	AccessControlList *Ipv6AclConfig `protobuf:"bytes,57,opt,name=access_control_list,json=accessControlList" json:"access_control_list,omitempty"`
	// Multi IPv6 Access Control List
	MultiAccessControlList *Ipv6MultiAclConfig `protobuf:"bytes,58,opt,name=multi_access_control_list,json=multiAccessControlList" json:"multi_access_control_list,omitempty"`
	// ICMP unreach Enable
	IsIcmpUnreachEnabled bool `protobuf:"varint,59,opt,name=is_icmp_unreach_enabled,json=isIcmpUnreachEnabled" json:"is_icmp_unreach_enabled,omitempty"`
	// RPF config on the interface
	Rpf *RpfConfig `protobuf:"bytes,60,opt,name=rpf" json:"rpf,omitempty"`
	// BGP PA config on the interface
	BgpPa *BgpPaConfig `protobuf:"bytes,61,opt,name=bgp_pa,json=bgpPa" json:"bgp_pa,omitempty"`
	// Does ICCP RG ID exist on the interface?
	RgIdExists bool `protobuf:"varint,62,opt,name=rg_id_exists,json=rgIdExists" json:"rg_id_exists,omitempty"`
	// Is mLACP state Active (valid if RG ID exists)
	MLacpActive bool `protobuf:"varint,63,opt,name=m_lacp_active,json=mLacpActive" json:"m_lacp_active,omitempty"`
	// Is BGP Flow Tag Source is enable
	FlowTagSrc bool `protobuf:"varint,64,opt,name=flow_tag_src,json=flowTagSrc" json:"flow_tag_src,omitempty"`
	// Is BGP Flow Tag Destination is enable
	FlowTagDst bool `protobuf:"varint,65,opt,name=flow_tag_dst,json=flowTagDst" json:"flow_tag_dst,omitempty"`
	// Address Publish Time
	Utime *TimevalEntry `protobuf:"bytes,66,opt,name=utime" json:"utime,omitempty"`
	// IDB Create Time
	IdbUtime *TimevalEntry `protobuf:"bytes,67,opt,name=idb_utime,json=idbUtime" json:"idb_utime,omitempty"`
	// CAPS Add Time
	CapsUtime *TimevalEntry `protobuf:"bytes,68,opt,name=caps_utime,json=capsUtime" json:"caps_utime,omitempty"`
	// FWD ENABLE Time
	FwdEnUtime *TimevalEntry `protobuf:"bytes,69,opt,name=fwd_en_utime,json=fwdEnUtime" json:"fwd_en_utime,omitempty"`
	// FWD DISABLE Time
	FwdDisUtime *TimevalEntry `protobuf:"bytes,70,opt,name=fwd_dis_utime,json=fwdDisUtime" json:"fwd_dis_utime,omitempty"`
	// IPv6 Client Multicast Group
	ClientMulticastGroups []*Ipv6McastGroup `protobuf:"bytes,71,rep,name=client_multicast_groups,json=clientMulticastGroups" json:"client_multicast_groups,omitempty"`
}

func (m *Ipv6IfDetail) Reset()                    { *m = Ipv6IfDetail{} }
func (m *Ipv6IfDetail) String() string            { return proto.CompactTextString(m) }
func (*Ipv6IfDetail) ProtoMessage()               {}
func (*Ipv6IfDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ipv6IfDetail) GetLineState() string {
	if m != nil {
		return m.LineState
	}
	return ""
}

func (m *Ipv6IfDetail) GetMulticastGroups() []*Ipv6McastGroup {
	if m != nil {
		return m.MulticastGroups
	}
	return nil
}

func (m *Ipv6IfDetail) GetMtu() uint32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Ipv6IfDetail) GetOperationState() string {
	if m != nil {
		return m.OperationState
	}
	return ""
}

func (m *Ipv6IfDetail) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6IfDetail) GetAddressList() []*Ipv6AddrNode {
	if m != nil {
		return m.AddressList
	}
	return nil
}

func (m *Ipv6IfDetail) GetLinkLocalAddress() *Ipv6AddrNode {
	if m != nil {
		return m.LinkLocalAddress
	}
	return nil
}

func (m *Ipv6IfDetail) GetAccessControlList() *Ipv6AclConfig {
	if m != nil {
		return m.AccessControlList
	}
	return nil
}

func (m *Ipv6IfDetail) GetMultiAccessControlList() *Ipv6MultiAclConfig {
	if m != nil {
		return m.MultiAccessControlList
	}
	return nil
}

func (m *Ipv6IfDetail) GetIsIcmpUnreachEnabled() bool {
	if m != nil {
		return m.IsIcmpUnreachEnabled
	}
	return false
}

func (m *Ipv6IfDetail) GetRpf() *RpfConfig {
	if m != nil {
		return m.Rpf
	}
	return nil
}

func (m *Ipv6IfDetail) GetBgpPa() *BgpPaConfig {
	if m != nil {
		return m.BgpPa
	}
	return nil
}

func (m *Ipv6IfDetail) GetRgIdExists() bool {
	if m != nil {
		return m.RgIdExists
	}
	return false
}

func (m *Ipv6IfDetail) GetMLacpActive() bool {
	if m != nil {
		return m.MLacpActive
	}
	return false
}

func (m *Ipv6IfDetail) GetFlowTagSrc() bool {
	if m != nil {
		return m.FlowTagSrc
	}
	return false
}

func (m *Ipv6IfDetail) GetFlowTagDst() bool {
	if m != nil {
		return m.FlowTagDst
	}
	return false
}

func (m *Ipv6IfDetail) GetUtime() *TimevalEntry {
	if m != nil {
		return m.Utime
	}
	return nil
}

func (m *Ipv6IfDetail) GetIdbUtime() *TimevalEntry {
	if m != nil {
		return m.IdbUtime
	}
	return nil
}

func (m *Ipv6IfDetail) GetCapsUtime() *TimevalEntry {
	if m != nil {
		return m.CapsUtime
	}
	return nil
}

func (m *Ipv6IfDetail) GetFwdEnUtime() *TimevalEntry {
	if m != nil {
		return m.FwdEnUtime
	}
	return nil
}

func (m *Ipv6IfDetail) GetFwdDisUtime() *TimevalEntry {
	if m != nil {
		return m.FwdDisUtime
	}
	return nil
}

func (m *Ipv6IfDetail) GetClientMulticastGroups() []*Ipv6McastGroup {
	if m != nil {
		return m.ClientMulticastGroups
	}
	return nil
}

type Str struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *Str) Reset()                    { *m = Str{} }
func (m *Str) String() string            { return proto.CompactTextString(m) }
func (*Str) ProtoMessage()               {}
func (*Str) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Str) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Creatation or Update Time
type TimevalEntry struct {
}

func (m *TimevalEntry) Reset()                    { *m = TimevalEntry{} }
func (m *TimevalEntry) String() string            { return proto.CompactTextString(m) }
func (*TimevalEntry) ProtoMessage()               {}
func (*TimevalEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// List of IPv6 Addresses
type Ipv6AddrNode struct {
	// IPv6 Address
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// Prefix Length of IPv6 Address
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
	// State of Address
	AddressState string `protobuf:"bytes,3,opt,name=address_state,json=addressState" json:"address_state,omitempty"`
	// Anycast address
	IsAnycast bool `protobuf:"varint,4,opt,name=is_anycast,json=isAnycast" json:"is_anycast,omitempty"`
	// Route-tag of the Address
	RouteTag uint32 `protobuf:"varint,5,opt,name=route_tag,json=routeTag" json:"route_tag,omitempty"`
}

func (m *Ipv6AddrNode) Reset()                    { *m = Ipv6AddrNode{} }
func (m *Ipv6AddrNode) String() string            { return proto.CompactTextString(m) }
func (*Ipv6AddrNode) ProtoMessage()               {}
func (*Ipv6AddrNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ipv6AddrNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Ipv6AddrNode) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *Ipv6AddrNode) GetAddressState() string {
	if m != nil {
		return m.AddressState
	}
	return ""
}

func (m *Ipv6AddrNode) GetIsAnycast() bool {
	if m != nil {
		return m.IsAnycast
	}
	return false
}

func (m *Ipv6AddrNode) GetRouteTag() uint32 {
	if m != nil {
		return m.RouteTag
	}
	return 0
}

type Ipv6AclConfig struct {
	// ACL applied to incoming packets
	InBound string `protobuf:"bytes,1,opt,name=in_bound,json=inBound" json:"in_bound,omitempty"`
	// ACL applied to outgoing packets
	OutBound string `protobuf:"bytes,2,opt,name=out_bound,json=outBound" json:"out_bound,omitempty"`
	// Common ACL applied to incoming packets
	CommonInBound string `protobuf:"bytes,3,opt,name=common_in_bound,json=commonInBound" json:"common_in_bound,omitempty"`
	// Common ACL applied to outgoing packets
	CommonOutBound string `protobuf:"bytes,4,opt,name=common_out_bound,json=commonOutBound" json:"common_out_bound,omitempty"`
}

func (m *Ipv6AclConfig) Reset()                    { *m = Ipv6AclConfig{} }
func (m *Ipv6AclConfig) String() string            { return proto.CompactTextString(m) }
func (*Ipv6AclConfig) ProtoMessage()               {}
func (*Ipv6AclConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Ipv6AclConfig) GetInBound() string {
	if m != nil {
		return m.InBound
	}
	return ""
}

func (m *Ipv6AclConfig) GetOutBound() string {
	if m != nil {
		return m.OutBound
	}
	return ""
}

func (m *Ipv6AclConfig) GetCommonInBound() string {
	if m != nil {
		return m.CommonInBound
	}
	return ""
}

func (m *Ipv6AclConfig) GetCommonOutBound() string {
	if m != nil {
		return m.CommonOutBound
	}
	return ""
}

type Ipv6MultiAclConfig struct {
	// Inbound ACLs
	Inbound []*Str `protobuf:"bytes,1,rep,name=inbound" json:"inbound,omitempty"`
	// Outbound ACLs
	Outbound []*Str `protobuf:"bytes,2,rep,name=outbound" json:"outbound,omitempty"`
	// Common ACLs
	Common []*Str `protobuf:"bytes,3,rep,name=common" json:"common,omitempty"`
}

func (m *Ipv6MultiAclConfig) Reset()                    { *m = Ipv6MultiAclConfig{} }
func (m *Ipv6MultiAclConfig) String() string            { return proto.CompactTextString(m) }
func (*Ipv6MultiAclConfig) ProtoMessage()               {}
func (*Ipv6MultiAclConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Ipv6MultiAclConfig) GetInbound() []*Str {
	if m != nil {
		return m.Inbound
	}
	return nil
}

func (m *Ipv6MultiAclConfig) GetOutbound() []*Str {
	if m != nil {
		return m.Outbound
	}
	return nil
}

func (m *Ipv6MultiAclConfig) GetCommon() []*Str {
	if m != nil {
		return m.Common
	}
	return nil
}

// MCast Group
type Ipv6McastGroup struct {
	// IPv6 Address of Multicast Group
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Ipv6McastGroup) Reset()                    { *m = Ipv6McastGroup{} }
func (m *Ipv6McastGroup) String() string            { return proto.CompactTextString(m) }
func (*Ipv6McastGroup) ProtoMessage()               {}
func (*Ipv6McastGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Ipv6McastGroup) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// RPF config information
type RpfConfig struct {
	// Enable RPF config
	Enable bool `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	// Allow Default Route
	AllowDefaultRoute bool `protobuf:"varint,2,opt,name=allow_default_route,json=allowDefaultRoute" json:"allow_default_route,omitempty"`
	// Allow Self Ping
	AllowSelfPing bool `protobuf:"varint,3,opt,name=allow_self_ping,json=allowSelfPing" json:"allow_self_ping,omitempty"`
	// RPF Mode (loose/strict)
	Mode uint32 `protobuf:"varint,4,opt,name=mode" json:"mode,omitempty"`
}

func (m *RpfConfig) Reset()                    { *m = RpfConfig{} }
func (m *RpfConfig) String() string            { return proto.CompactTextString(m) }
func (*RpfConfig) ProtoMessage()               {}
func (*RpfConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RpfConfig) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *RpfConfig) GetAllowDefaultRoute() bool {
	if m != nil {
		return m.AllowDefaultRoute
	}
	return false
}

func (m *RpfConfig) GetAllowSelfPing() bool {
	if m != nil {
		return m.AllowSelfPing
	}
	return false
}

func (m *RpfConfig) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

// BGP PA config for ingress/egress direction
type BgpPaDir struct {
	// Enable BGP PA for ingress/egress
	Enable uint32 `protobuf:"varint,1,opt,name=enable" json:"enable,omitempty"`
	// Enable source accouting
	Source bool `protobuf:"varint,2,opt,name=source" json:"source,omitempty"`
	// Enable destination accouting
	Destination bool `protobuf:"varint,3,opt,name=destination" json:"destination,omitempty"`
}

func (m *BgpPaDir) Reset()                    { *m = BgpPaDir{} }
func (m *BgpPaDir) String() string            { return proto.CompactTextString(m) }
func (*BgpPaDir) ProtoMessage()               {}
func (*BgpPaDir) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BgpPaDir) GetEnable() uint32 {
	if m != nil {
		return m.Enable
	}
	return 0
}

func (m *BgpPaDir) GetSource() bool {
	if m != nil {
		return m.Source
	}
	return false
}

func (m *BgpPaDir) GetDestination() bool {
	if m != nil {
		return m.Destination
	}
	return false
}

// BGP PA config information
type BgpPaConfig struct {
	// BGP PA input config
	Input *BgpPaDir `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
	// BGP PA output config
	Output *BgpPaDir `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
}

func (m *BgpPaConfig) Reset()                    { *m = BgpPaConfig{} }
func (m *BgpPaConfig) String() string            { return proto.CompactTextString(m) }
func (*BgpPaConfig) ProtoMessage()               {}
func (*BgpPaConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BgpPaConfig) GetInput() *BgpPaDir {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *BgpPaConfig) GetOutput() *BgpPaDir {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*Ipv6IfDetail_KEYS)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.ipv6_if_detail_KEYS")
	proto.RegisterType((*Ipv6IfDetail)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.ipv6_if_detail")
	proto.RegisterType((*Str)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.str")
	proto.RegisterType((*TimevalEntry)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.timeval_entry")
	proto.RegisterType((*Ipv6AddrNode)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.ipv6_addr_node")
	proto.RegisterType((*Ipv6AclConfig)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.ipv6_acl_config")
	proto.RegisterType((*Ipv6MultiAclConfig)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.ipv6_multi_acl_config")
	proto.RegisterType((*Ipv6McastGroup)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.ipv6_mcast_group")
	proto.RegisterType((*RpfConfig)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.rpf_config")
	proto.RegisterType((*BgpPaDir)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.bgp_pa_dir")
	proto.RegisterType((*BgpPaConfig)(nil), "cisco_ios_xr_ipv6_ma_oper.ipv6_network.nodes.node.interface_data.vrfs.vrf.global_details.global_detail.bgp_pa_config")
}

func init() { proto.RegisterFile("ipv6_if_detail.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1098 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x97, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x35, 0x71, 0xe2, 0xd8, 0x2f, 0x71, 0x92, 0x4e, 0xd2, 0x74, 0xab, 0xaa, 0x92, 0xb5,
	0x08, 0xc8, 0x01, 0xf9, 0xd0, 0xd2, 0xf2, 0xfb, 0x47, 0xda, 0x84, 0x2a, 0x22, 0x40, 0xb5, 0x69,
	0x0f, 0x5c, 0x18, 0x8d, 0x77, 0x67, 0xb7, 0xa3, 0xec, 0xce, 0xac, 0x66, 0x66, 0xed, 0xf4, 0xc0,
	0x09, 0x10, 0x08, 0x38, 0x20, 0x84, 0x84, 0x2a, 0x8e, 0x20, 0xf5, 0x48, 0x8f, 0xfc, 0x13, 0xfc,
	0x4f, 0x68, 0x66, 0x76, 0x9d, 0x3a, 0x2d, 0xd7, 0xf5, 0xc5, 0xf2, 0xbc, 0xf7, 0xf6, 0xbd, 0xcf,
	0x7b, 0x7a, 0xf6, 0x7c, 0x17, 0x76, 0x78, 0x39, 0xb9, 0x4d, 0x78, 0x4a, 0x12, 0x66, 0x28, 0xcf,
	0x47, 0xa5, 0x92, 0x46, 0xe2, 0x34, 0xe6, 0x3a, 0x96, 0x84, 0x4b, 0x4d, 0xce, 0x14, 0x71, 0x21,
	0x05, 0x25, 0xb2, 0x64, 0x6a, 0xe4, 0x0e, 0x82, 0x99, 0xa9, 0x54, 0xa7, 0x23, 0x21, 0x13, 0xa6,
	0xdd, 0xe7, 0x88, 0x0b, 0xc3, 0x54, 0x4a, 0x63, 0x46, 0x12, 0x6a, 0xe8, 0x68, 0xa2, 0x52, 0x6d,
	0x3f, 0x46, 0x59, 0x2e, 0xc7, 0x34, 0xaf, 0xd3, 0xeb, 0xf9, 0x63, 0x68, 0x60, 0x7b, 0xbe, 0x3e,
	0xf9, 0xf4, 0xf0, 0xcb, 0x13, 0x7c, 0x0d, 0xfa, 0x36, 0x27, 0x11, 0xb4, 0x60, 0x01, 0x1a, 0xa2,
	0xbd, 0x7e, 0xd4, 0xb3, 0x86, 0xcf, 0x69, 0xc1, 0xf0, 0x55, 0xe8, 0x4d, 0x54, 0xea, 0x7d, 0x4b,
	0xce, 0xb7, 0x3a, 0x51, 0xa9, 0x73, 0xbd, 0x0a, 0x1b, 0xe7, 0x18, 0x2e, 0xa0, 0xe3, 0x02, 0x06,
	0x33, 0xab, 0x0d, 0x0b, 0xff, 0xc5, 0xb0, 0x31, 0x5f, 0x16, 0x5f, 0x07, 0xc8, 0xb9, 0x60, 0x44,
	0x1b, 0x6a, 0x58, 0x70, 0xc3, 0x3d, 0xd5, 0xb7, 0x96, 0x13, 0x6b, 0xc0, 0x7f, 0x22, 0xd8, 0x2a,
	0xaa, 0xdc, 0xf0, 0x98, 0x6a, 0x43, 0x32, 0x25, 0xab, 0x52, 0x07, 0x37, 0x87, 0x9d, 0xbd, 0xb5,
	0x1b, 0x67, 0xa3, 0x76, 0x66, 0xe5, 0x93, 0x15, 0xe7, 0x00, 0xd1, 0xe6, 0x8c, 0xe8, 0x9e, 0x03,
	0xc2, 0x5b, 0xd0, 0x29, 0x4c, 0x15, 0xbc, 0x39, 0x44, 0x7b, 0x83, 0xc8, 0x7e, 0xc5, 0xaf, 0xc3,
	0xa6, 0x05, 0xa1, 0x86, 0x4b, 0x51, 0xf7, 0x76, 0xcb, 0xf5, 0xb6, 0x31, 0x33, 0xfb, 0x06, 0x9f,
	0x1f, 0xea, 0xed, 0xf9, 0xa1, 0x3e, 0x41, 0xb0, 0x4e, 0x93, 0x44, 0x31, 0xad, 0x49, 0xce, 0xb5,
	0x09, 0xde, 0x72, 0x7d, 0x4f, 0x5a, 0xed, 0xdb, 0x02, 0x10, 0x9b, 0x23, 0x5a, 0xab, 0x59, 0x8e,
	0xb9, 0x36, 0xf8, 0x2f, 0x04, 0x38, 0xe7, 0xe2, 0x94, 0xe4, 0x32, 0xa6, 0x39, 0xa9, 0x5d, 0xc1,
	0xdb, 0x43, 0xb4, 0x40, 0xc2, 0x2d, 0x4b, 0x74, 0x6c, 0x81, 0xf6, 0x3d, 0x0f, 0x7e, 0x8a, 0x60,
	0x9b, 0xc6, 0xb1, 0x9d, 0x60, 0x2c, 0x85, 0x51, 0x32, 0xf7, 0x93, 0x7c, 0xc7, 0x71, 0x4e, 0xdb,
	0xe5, 0x8c, 0x73, 0x0b, 0x91, 0xf2, 0x2c, 0xba, 0xe4, 0x99, 0xee, 0x7a, 0x24, 0x37, 0xd0, 0x7f,
	0x10, 0x5c, 0x75, 0x6b, 0x45, 0x5e, 0xc6, 0xfb, 0xae, 0xe3, 0xfd, 0xba, 0xdd, 0x8d, 0xaf, 0x69,
	0x66, 0xd4, 0xbb, 0xce, 0xb2, 0xff, 0x02, 0xfa, 0x2d, 0xb8, 0xc2, 0x35, 0xe1, 0x71, 0x51, 0x92,
	0x4a, 0x28, 0x46, 0xe3, 0x47, 0x84, 0x09, 0x3a, 0xce, 0x59, 0x12, 0xbc, 0x37, 0x44, 0x7b, 0xbd,
	0x68, 0x87, 0xeb, 0xa3, 0xb8, 0x28, 0x1f, 0x7a, 0xe7, 0xa1, 0xf7, 0xe1, 0x6f, 0x11, 0x74, 0x54,
	0x99, 0x06, 0xef, 0xbb, 0xde, 0x54, 0x5b, 0xbd, 0xa9, 0x32, 0x6d, 0x1a, 0xb2, 0xe5, 0xf1, 0xcf,
	0x08, 0xba, 0xe3, 0xac, 0x24, 0x25, 0x0d, 0x3e, 0x70, 0x24, 0x55, 0x5b, 0x24, 0xbe, 0x6a, 0x03,
	0xb3, 0x32, 0xce, 0xca, 0xfb, 0x14, 0x0f, 0x61, 0x5d, 0x65, 0x84, 0x27, 0x84, 0x9d, 0x71, 0x6d,
	0x74, 0xf0, 0xa1, 0x9b, 0x20, 0xa8, 0xec, 0x28, 0x39, 0x74, 0x16, 0x1c, 0xc2, 0xa0, 0x20, 0x39,
	0x8d, 0x4b, 0x42, 0x63, 0xc3, 0x27, 0x2c, 0xf8, 0xc8, 0x85, 0xac, 0x15, 0xc7, 0x34, 0x2e, 0xf7,
	0x9d, 0xc9, 0x66, 0x49, 0x73, 0x39, 0x25, 0x86, 0x66, 0x44, 0xab, 0x38, 0xf8, 0xd8, 0x67, 0xb1,
	0xb6, 0x07, 0x34, 0x3b, 0x51, 0xf1, 0x5c, 0x44, 0xa2, 0x4d, 0xb0, 0x3f, 0x17, 0x71, 0xa0, 0x0d,
	0xfe, 0x09, 0xc1, 0x4a, 0x65, 0x78, 0xc1, 0x82, 0x3b, 0xed, 0xce, 0xc5, 0xd6, 0x9c, 0xd0, 0x9c,
	0x30, 0x61, 0xd4, 0xe3, 0xc8, 0x33, 0xe0, 0x5f, 0x11, 0xf4, 0x79, 0x32, 0x26, 0x9e, 0xe8, 0xee,
	0x22, 0x89, 0x7a, 0x3c, 0x19, 0x3f, 0x74, 0x50, 0xbf, 0x21, 0x80, 0x98, 0x96, 0xba, 0xa6, 0x3a,
	0x58, 0x24, 0x55, 0xdf, 0x82, 0x78, 0xac, 0xdf, 0x11, 0xac, 0xa7, 0xd3, 0x84, 0x30, 0x51, 0x83,
	0x1d, 0x2e, 0x12, 0x0c, 0xd2, 0x69, 0x72, 0x28, 0x3c, 0xd9, 0x13, 0x04, 0x03, 0x4b, 0x96, 0xf0,
	0x66, 0x66, 0x9f, 0x2c, 0x12, 0x6d, 0x2d, 0x9d, 0x26, 0x07, 0xbc, 0x9e, 0xda, 0x33, 0x04, 0x57,
	0xe2, 0x9c, 0x33, 0x61, 0xc8, 0x0b, 0x8a, 0xe3, 0xde, 0x82, 0x15, 0xc7, 0x65, 0x0f, 0xf6, 0xd9,
	0xbc, 0xee, 0x08, 0xaf, 0x41, 0x47, 0x1b, 0x85, 0x77, 0x60, 0x65, 0x42, 0xf3, 0xaa, 0x51, 0x6c,
	0xfe, 0x10, 0x6e, 0xc2, 0x60, 0xae, 0xdb, 0xf0, 0x19, 0xaa, 0xd5, 0xd7, 0xec, 0xc6, 0xc4, 0x01,
	0xac, 0x36, 0x57, 0xb7, 0x7f, 0xb6, 0x39, 0xe2, 0x57, 0x60, 0x50, 0x2a, 0x96, 0xf2, 0x33, 0x92,
	0x33, 0x91, 0x99, 0x47, 0x4e, 0xf1, 0x0d, 0xa2, 0x75, 0x6f, 0x3c, 0x76, 0x36, 0x1b, 0xd4, 0x08,
	0x14, 0xaf, 0x71, 0xbc, 0xea, 0x6b, 0x54, 0x8b, 0x57, 0x38, 0xd7, 0x01, 0xb8, 0x26, 0x54, 0x3c,
	0xb6, 0xe0, 0xc1, 0xb2, 0xfb, 0x9f, 0xe9, 0x73, 0xbd, 0xef, 0x0d, 0x56, 0x72, 0x2a, 0x59, 0x19,
	0x66, 0xff, 0x89, 0x82, 0x15, 0x57, 0xa4, 0xe7, 0x0c, 0x0f, 0x68, 0x16, 0xfe, 0x81, 0x60, 0xf3,
	0xc2, 0xe5, 0x69, 0x15, 0x13, 0x17, 0x64, 0x2c, 0x2b, 0x91, 0x34, 0xd0, 0x5c, 0xdc, 0xb1, 0x47,
	0x9b, 0x4b, 0x56, 0xa6, 0xf6, 0x79, 0x89, 0xda, 0x93, 0x95, 0xf1, 0xce, 0xd7, 0x60, 0x33, 0x96,
	0x45, 0x21, 0x05, 0x99, 0x3d, 0x5e, 0x8b, 0x54, 0x6f, 0x3e, 0xaa, 0x93, 0xec, 0xc1, 0x56, 0x1d,
	0x77, 0x9e, 0x6b, 0xd9, 0x6b, 0x37, 0x6f, 0xff, 0xa2, 0xce, 0x18, 0xfe, 0xdd, 0x81, 0xcb, 0x2f,
	0xbd, 0x2a, 0xf1, 0x77, 0x08, 0x56, 0xb9, 0x68, 0x18, 0xed, 0xee, 0x9c, 0xb6, 0xb5, 0x3b, 0xda,
	0xa8, 0xa8, 0xa9, 0x8d, 0xbf, 0x47, 0x60, 0x07, 0xd0, 0x0c, 0xa4, 0x75, 0x90, 0x59, 0x71, 0xfc,
	0x0d, 0x82, 0xae, 0x1f, 0x5f, 0xd0, 0x69, 0x9f, 0xa3, 0x2e, 0x1d, 0xbe, 0x01, 0x5b, 0x17, 0x7f,
	0x5b, 0xff, 0xff, 0x1b, 0x08, 0x7f, 0x41, 0x00, 0xe7, 0x72, 0x01, 0xef, 0x42, 0xd7, 0xeb, 0x1a,
	0x17, 0xd7, 0x8b, 0xea, 0x13, 0x1e, 0xc1, 0x36, 0xcd, 0xed, 0x5d, 0x9a, 0xb0, 0x94, 0x56, 0xb9,
	0x21, 0x6e, 0x7d, 0xdd, 0xfe, 0xf5, 0xa2, 0x4b, 0xce, 0x75, 0xe0, 0x3d, 0x91, 0x75, 0xd8, 0x45,
	0xf4, 0xf1, 0x9a, 0xe5, 0x29, 0x29, 0xb9, 0xc8, 0xdc, 0x22, 0xf6, 0xa2, 0x81, 0x33, 0x9f, 0xb0,
	0x3c, 0xbd, 0xcf, 0x45, 0x86, 0x31, 0x2c, 0x17, 0x32, 0x61, 0x6e, 0xf9, 0x06, 0x91, 0xfb, 0x1e,
	0x7e, 0x05, 0x50, 0xcb, 0x86, 0x84, 0xab, 0x0b, 0x44, 0x83, 0x19, 0xd1, 0x2e, 0x74, 0xb5, 0xac,
	0x54, 0xdc, 0x40, 0xd4, 0x27, 0x3c, 0x84, 0xb5, 0x84, 0x69, 0xc3, 0x85, 0x7b, 0x01, 0xa9, 0xab,
	0x3e, 0x6f, 0x0a, 0x9f, 0x2e, 0xc1, 0x60, 0x4e, 0x97, 0xe0, 0x1f, 0x10, 0xac, 0x70, 0x51, 0x56,
	0xc6, 0xd5, 0x68, 0x51, 0xa8, 0x9d, 0xf7, 0x19, 0x79, 0x00, 0xfc, 0x23, 0x82, 0xae, 0xac, 0x8c,
	0x65, 0x59, 0x5a, 0x18, 0x4b, 0x4d, 0x30, 0xee, 0xba, 0x17, 0xf6, 0x9b, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x7b, 0x97, 0xb3, 0x26, 0xc8, 0x0f, 0x00, 0x00,
}
