// Code generated by protoc-gen-go.
// source: isis_sh_nsr_status_global.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status is a generated protocol buffer package.

It is generated from these files:
	isis_sh_nsr_status_global.proto

It has these top-level messages:
	IsisShNsrStatusGlobal_KEYS
	IsisShNsrStatusGlobal
	IsisShTimestampType
	NsrStatusGen
	NsrStatusNcd
	NsrStatusPm
	NsrStatusDs
	NsrStatusNiiIntf
	NsrStatusTe
	NsrStatusInfraType
	NsrStatusGblType
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_nsr_status

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// IS-IS process NSR status
type IsisShNsrStatusGlobal_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
}

func (m *IsisShNsrStatusGlobal_KEYS) Reset()                    { *m = IsisShNsrStatusGlobal_KEYS{} }
func (m *IsisShNsrStatusGlobal_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShNsrStatusGlobal_KEYS) ProtoMessage()               {}
func (*IsisShNsrStatusGlobal_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShNsrStatusGlobal_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

type IsisShNsrStatusGlobal struct {
	// ISIS VM STATE
	IsisVmState uint32 `protobuf:"varint,50,opt,name=isis_vm_state,json=isisVmState" json:"isis_vm_state,omitempty"`
	// ISIS NSR PEER STATUS
	IsisNsrPeer *NsrStatusGblType `protobuf:"bytes,51,opt,name=isis_nsr_peer,json=isisNsrPeer" json:"isis_nsr_peer,omitempty"`
	// ISIS NSR Infra
	IsisNsrInfra *NsrStatusInfraType `protobuf:"bytes,52,opt,name=isis_nsr_infra,json=isisNsrInfra" json:"isis_nsr_infra,omitempty"`
}

func (m *IsisShNsrStatusGlobal) Reset()                    { *m = IsisShNsrStatusGlobal{} }
func (m *IsisShNsrStatusGlobal) String() string            { return proto.CompactTextString(m) }
func (*IsisShNsrStatusGlobal) ProtoMessage()               {}
func (*IsisShNsrStatusGlobal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShNsrStatusGlobal) GetIsisVmState() uint32 {
	if m != nil {
		return m.IsisVmState
	}
	return 0
}

func (m *IsisShNsrStatusGlobal) GetIsisNsrPeer() *NsrStatusGblType {
	if m != nil {
		return m.IsisNsrPeer
	}
	return nil
}

func (m *IsisShNsrStatusGlobal) GetIsisNsrInfra() *NsrStatusInfraType {
	if m != nil {
		return m.IsisNsrInfra
	}
	return nil
}

// Timestamp for an event
type IsisShTimestampType struct {
	// Timestamp value (seconds)
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Timestamp value (nanoseconds)
	NanoSeconds uint32 `protobuf:"varint,2,opt,name=nano_seconds,json=nanoSeconds" json:"nano_seconds,omitempty"`
}

func (m *IsisShTimestampType) Reset()                    { *m = IsisShTimestampType{} }
func (m *IsisShTimestampType) String() string            { return proto.CompactTextString(m) }
func (*IsisShTimestampType) ProtoMessage()               {}
func (*IsisShTimestampType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisShTimestampType) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *IsisShTimestampType) GetNanoSeconds() uint32 {
	if m != nil {
		return m.NanoSeconds
	}
	return 0
}

type NsrStatusGen struct {
	MyNodeid       uint32 `protobuf:"varint,1,opt,name=my_nodeid,json=myNodeid" json:"my_nodeid,omitempty"`
	MyProcessId    uint32 `protobuf:"varint,2,opt,name=my_process_id,json=myProcessId" json:"my_process_id,omitempty"`
	PmIssuRole     uint32 `protobuf:"varint,3,opt,name=pm_issu_role,json=pmIssuRole" json:"pm_issu_role,omitempty"`
	PmHaRole       uint32 `protobuf:"varint,4,opt,name=pm_ha_role,json=pmHaRole" json:"pm_ha_role,omitempty"`
	SysmgrHaRole   uint32 `protobuf:"varint,5,opt,name=sysmgr_ha_role,json=sysmgrHaRole" json:"sysmgr_ha_role,omitempty"`
	NsrSendReady   uint32 `protobuf:"varint,6,opt,name=nsr_send_ready,json=nsrSendReady" json:"nsr_send_ready,omitempty"`
	NsrSendUnready uint32 `protobuf:"varint,7,opt,name=nsr_send_unready,json=nsrSendUnready" json:"nsr_send_unready,omitempty"`
	NsrSendErr     uint32 `protobuf:"varint,8,opt,name=nsr_send_err,json=nsrSendErr" json:"nsr_send_err,omitempty"`
	NsrRecvErr     uint32 `protobuf:"varint,9,opt,name=nsr_recv_err,json=nsrRecvErr" json:"nsr_recv_err,omitempty"`
	RetryFlag      uint32 `protobuf:"varint,10,opt,name=retry_flag,json=retryFlag" json:"retry_flag,omitempty"`
	NsrEnabled     bool   `protobuf:"varint,11,opt,name=nsr_enabled,json=nsrEnabled" json:"nsr_enabled,omitempty"`
	NsrConfigured  bool   `protobuf:"varint,12,opt,name=nsr_configured,json=nsrConfigured" json:"nsr_configured,omitempty"`
	NsfConfigured  bool   `protobuf:"varint,13,opt,name=nsf_configured,json=nsfConfigured" json:"nsf_configured,omitempty"`
	Failover       bool   `protobuf:"varint,14,opt,name=failover" json:"failover,omitempty"`
	LanidReqNeeded bool   `protobuf:"varint,15,opt,name=lanid_req_needed,json=lanidReqNeeded" json:"lanid_req_needed,omitempty"`
}

func (m *NsrStatusGen) Reset()                    { *m = NsrStatusGen{} }
func (m *NsrStatusGen) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusGen) ProtoMessage()               {}
func (*NsrStatusGen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NsrStatusGen) GetMyNodeid() uint32 {
	if m != nil {
		return m.MyNodeid
	}
	return 0
}

func (m *NsrStatusGen) GetMyProcessId() uint32 {
	if m != nil {
		return m.MyProcessId
	}
	return 0
}

func (m *NsrStatusGen) GetPmIssuRole() uint32 {
	if m != nil {
		return m.PmIssuRole
	}
	return 0
}

func (m *NsrStatusGen) GetPmHaRole() uint32 {
	if m != nil {
		return m.PmHaRole
	}
	return 0
}

func (m *NsrStatusGen) GetSysmgrHaRole() uint32 {
	if m != nil {
		return m.SysmgrHaRole
	}
	return 0
}

func (m *NsrStatusGen) GetNsrSendReady() uint32 {
	if m != nil {
		return m.NsrSendReady
	}
	return 0
}

func (m *NsrStatusGen) GetNsrSendUnready() uint32 {
	if m != nil {
		return m.NsrSendUnready
	}
	return 0
}

func (m *NsrStatusGen) GetNsrSendErr() uint32 {
	if m != nil {
		return m.NsrSendErr
	}
	return 0
}

func (m *NsrStatusGen) GetNsrRecvErr() uint32 {
	if m != nil {
		return m.NsrRecvErr
	}
	return 0
}

func (m *NsrStatusGen) GetRetryFlag() uint32 {
	if m != nil {
		return m.RetryFlag
	}
	return 0
}

func (m *NsrStatusGen) GetNsrEnabled() bool {
	if m != nil {
		return m.NsrEnabled
	}
	return false
}

func (m *NsrStatusGen) GetNsrConfigured() bool {
	if m != nil {
		return m.NsrConfigured
	}
	return false
}

func (m *NsrStatusGen) GetNsfConfigured() bool {
	if m != nil {
		return m.NsfConfigured
	}
	return false
}

func (m *NsrStatusGen) GetFailover() bool {
	if m != nil {
		return m.Failover
	}
	return false
}

func (m *NsrStatusGen) GetLanidReqNeeded() bool {
	if m != nil {
		return m.LanidReqNeeded
	}
	return false
}

type NsrStatusNcd struct {
	VmIdx      uint32 `protobuf:"varint,1,opt,name=vm_idx,json=vmIdx" json:"vm_idx,omitempty"`
	ConnUp     bool   `protobuf:"varint,2,opt,name=conn_up,json=connUp" json:"conn_up,omitempty"`
	EndpHdl    uint32 `protobuf:"varint,3,opt,name=endp_hdl,json=endpHdl" json:"endp_hdl,omitempty"`
	Chksum     uint32 `protobuf:"varint,4,opt,name=chksum" json:"chksum,omitempty"`
	SendSeqnum uint32 `protobuf:"varint,5,opt,name=send_seqnum,json=sendSeqnum" json:"send_seqnum,omitempty"`
	RecvCnt    uint32 `protobuf:"varint,6,opt,name=recv_cnt,json=recvCnt" json:"recv_cnt,omitempty"`
}

func (m *NsrStatusNcd) Reset()                    { *m = NsrStatusNcd{} }
func (m *NsrStatusNcd) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusNcd) ProtoMessage()               {}
func (*NsrStatusNcd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NsrStatusNcd) GetVmIdx() uint32 {
	if m != nil {
		return m.VmIdx
	}
	return 0
}

func (m *NsrStatusNcd) GetConnUp() bool {
	if m != nil {
		return m.ConnUp
	}
	return false
}

func (m *NsrStatusNcd) GetEndpHdl() uint32 {
	if m != nil {
		return m.EndpHdl
	}
	return 0
}

func (m *NsrStatusNcd) GetChksum() uint32 {
	if m != nil {
		return m.Chksum
	}
	return 0
}

func (m *NsrStatusNcd) GetSendSeqnum() uint32 {
	if m != nil {
		return m.SendSeqnum
	}
	return 0
}

func (m *NsrStatusNcd) GetRecvCnt() uint32 {
	if m != nil {
		return m.RecvCnt
	}
	return 0
}

type NsrStatusPm struct {
	Reg        uint32 `protobuf:"varint,1,opt,name=reg" json:"reg,omitempty"`
	ConnCb     uint32 `protobuf:"varint,2,opt,name=conn_cb,json=connCb" json:"conn_cb,omitempty"`
	DisconnCb  uint32 `protobuf:"varint,3,opt,name=disconn_cb,json=disconnCb" json:"disconn_cb,omitempty"`
	ConnStatus bool   `protobuf:"varint,4,opt,name=conn_status,json=connStatus" json:"conn_status,omitempty"`
}

func (m *NsrStatusPm) Reset()                    { *m = NsrStatusPm{} }
func (m *NsrStatusPm) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusPm) ProtoMessage()               {}
func (*NsrStatusPm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NsrStatusPm) GetReg() uint32 {
	if m != nil {
		return m.Reg
	}
	return 0
}

func (m *NsrStatusPm) GetConnCb() uint32 {
	if m != nil {
		return m.ConnCb
	}
	return 0
}

func (m *NsrStatusPm) GetDisconnCb() uint32 {
	if m != nil {
		return m.DisconnCb
	}
	return 0
}

func (m *NsrStatusPm) GetConnStatus() bool {
	if m != nil {
		return m.ConnStatus
	}
	return false
}

type NsrStatusDs struct {
	Conn         uint32                 `protobuf:"varint,1,opt,name=conn" json:"conn,omitempty"`
	ConnTs       *IsisShTimestampType   `protobuf:"bytes,2,opt,name=conn_ts,json=connTs" json:"conn_ts,omitempty"`
	ConnCb       uint32                 `protobuf:"varint,3,opt,name=conn_cb,json=connCb" json:"conn_cb,omitempty"`
	ConnCbTs     *IsisShTimestampType   `protobuf:"bytes,4,opt,name=conn_cb_ts,json=connCbTs" json:"conn_cb_ts,omitempty"`
	Pub          uint32                 `protobuf:"varint,5,opt,name=pub" json:"pub,omitempty"`
	PubTs        *IsisShTimestampType   `protobuf:"bytes,6,opt,name=pub_ts,json=pubTs" json:"pub_ts,omitempty"`
	PubCb        uint32                 `protobuf:"varint,7,opt,name=pub_cb,json=pubCb" json:"pub_cb,omitempty"`
	PubCbTs      *IsisShTimestampType   `protobuf:"bytes,8,opt,name=pub_cb_ts,json=pubCbTs" json:"pub_cb_ts,omitempty"`
	Reg          uint32                 `protobuf:"varint,9,opt,name=reg" json:"reg,omitempty"`
	RegTs        *IsisShTimestampType   `protobuf:"bytes,10,opt,name=reg_ts,json=regTs" json:"reg_ts,omitempty"`
	RegCb        uint32                 `protobuf:"varint,11,opt,name=reg_cb,json=regCb" json:"reg_cb,omitempty"`
	RegCbTs      *IsisShTimestampType   `protobuf:"bytes,12,opt,name=reg_cb_ts,json=regCbTs" json:"reg_cb_ts,omitempty"`
	Unreg        uint32                 `protobuf:"varint,13,opt,name=unreg" json:"unreg,omitempty"`
	UnregTs      *IsisShTimestampType   `protobuf:"bytes,14,opt,name=unreg_ts,json=unregTs" json:"unreg_ts,omitempty"`
	UnregCb      uint32                 `protobuf:"varint,15,opt,name=unreg_cb,json=unregCb" json:"unreg_cb,omitempty"`
	UnregCbTs    *IsisShTimestampType   `protobuf:"bytes,16,opt,name=unreg_cb_ts,json=unregCbTs" json:"unreg_cb_ts,omitempty"`
	DisconnCb    uint32                 `protobuf:"varint,17,opt,name=disconn_cb,json=disconnCb" json:"disconn_cb,omitempty"`
	DisconnCbTs  *IsisShTimestampType   `protobuf:"bytes,18,opt,name=disconn_cb_ts,json=disconnCbTs" json:"disconn_cb_ts,omitempty"`
	NotifyCb     uint32                 `protobuf:"varint,19,opt,name=notify_cb,json=notifyCb" json:"notify_cb,omitempty"`
	NotifyCbTs   *IsisShTimestampType   `protobuf:"bytes,20,opt,name=notify_cb_ts,json=notifyCbTs" json:"notify_cb_ts,omitempty"`
	NotifyPeer   []byte                 `protobuf:"bytes,21,opt,name=notify_peer,json=notifyPeer,proto3" json:"notify_peer,omitempty"`
	NotifyPeerTs []*IsisShTimestampType `protobuf:"bytes,22,rep,name=notify_peer_ts,json=notifyPeerTs" json:"notify_peer_ts,omitempty"`
	DelCb        uint32                 `protobuf:"varint,23,opt,name=del_cb,json=delCb" json:"del_cb,omitempty"`
	DelCbTs      *IsisShTimestampType   `protobuf:"bytes,24,opt,name=del_cb_ts,json=delCbTs" json:"del_cb_ts,omitempty"`
	RemoveSrv    uint32                 `protobuf:"varint,25,opt,name=remove_srv,json=removeSrv" json:"remove_srv,omitempty"`
	RemoveSrvTs  *IsisShTimestampType   `protobuf:"bytes,26,opt,name=remove_srv_ts,json=removeSrvTs" json:"remove_srv_ts,omitempty"`
	ConnStatus   bool                   `protobuf:"varint,27,opt,name=conn_status,json=connStatus" json:"conn_status,omitempty"`
	ConnStatusTs *IsisShTimestampType   `protobuf:"bytes,28,opt,name=conn_status_ts,json=connStatusTs" json:"conn_status_ts,omitempty"`
}

func (m *NsrStatusDs) Reset()                    { *m = NsrStatusDs{} }
func (m *NsrStatusDs) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusDs) ProtoMessage()               {}
func (*NsrStatusDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NsrStatusDs) GetConn() uint32 {
	if m != nil {
		return m.Conn
	}
	return 0
}

func (m *NsrStatusDs) GetConnTs() *IsisShTimestampType {
	if m != nil {
		return m.ConnTs
	}
	return nil
}

func (m *NsrStatusDs) GetConnCb() uint32 {
	if m != nil {
		return m.ConnCb
	}
	return 0
}

func (m *NsrStatusDs) GetConnCbTs() *IsisShTimestampType {
	if m != nil {
		return m.ConnCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetPub() uint32 {
	if m != nil {
		return m.Pub
	}
	return 0
}

func (m *NsrStatusDs) GetPubTs() *IsisShTimestampType {
	if m != nil {
		return m.PubTs
	}
	return nil
}

func (m *NsrStatusDs) GetPubCb() uint32 {
	if m != nil {
		return m.PubCb
	}
	return 0
}

func (m *NsrStatusDs) GetPubCbTs() *IsisShTimestampType {
	if m != nil {
		return m.PubCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetReg() uint32 {
	if m != nil {
		return m.Reg
	}
	return 0
}

func (m *NsrStatusDs) GetRegTs() *IsisShTimestampType {
	if m != nil {
		return m.RegTs
	}
	return nil
}

func (m *NsrStatusDs) GetRegCb() uint32 {
	if m != nil {
		return m.RegCb
	}
	return 0
}

func (m *NsrStatusDs) GetRegCbTs() *IsisShTimestampType {
	if m != nil {
		return m.RegCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetUnreg() uint32 {
	if m != nil {
		return m.Unreg
	}
	return 0
}

func (m *NsrStatusDs) GetUnregTs() *IsisShTimestampType {
	if m != nil {
		return m.UnregTs
	}
	return nil
}

func (m *NsrStatusDs) GetUnregCb() uint32 {
	if m != nil {
		return m.UnregCb
	}
	return 0
}

func (m *NsrStatusDs) GetUnregCbTs() *IsisShTimestampType {
	if m != nil {
		return m.UnregCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetDisconnCb() uint32 {
	if m != nil {
		return m.DisconnCb
	}
	return 0
}

func (m *NsrStatusDs) GetDisconnCbTs() *IsisShTimestampType {
	if m != nil {
		return m.DisconnCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetNotifyCb() uint32 {
	if m != nil {
		return m.NotifyCb
	}
	return 0
}

func (m *NsrStatusDs) GetNotifyCbTs() *IsisShTimestampType {
	if m != nil {
		return m.NotifyCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetNotifyPeer() []byte {
	if m != nil {
		return m.NotifyPeer
	}
	return nil
}

func (m *NsrStatusDs) GetNotifyPeerTs() []*IsisShTimestampType {
	if m != nil {
		return m.NotifyPeerTs
	}
	return nil
}

func (m *NsrStatusDs) GetDelCb() uint32 {
	if m != nil {
		return m.DelCb
	}
	return 0
}

func (m *NsrStatusDs) GetDelCbTs() *IsisShTimestampType {
	if m != nil {
		return m.DelCbTs
	}
	return nil
}

func (m *NsrStatusDs) GetRemoveSrv() uint32 {
	if m != nil {
		return m.RemoveSrv
	}
	return 0
}

func (m *NsrStatusDs) GetRemoveSrvTs() *IsisShTimestampType {
	if m != nil {
		return m.RemoveSrvTs
	}
	return nil
}

func (m *NsrStatusDs) GetConnStatus() bool {
	if m != nil {
		return m.ConnStatus
	}
	return false
}

func (m *NsrStatusDs) GetConnStatusTs() *IsisShTimestampType {
	if m != nil {
		return m.ConnStatusTs
	}
	return nil
}

type NsrStatusNiiIntf struct {
	Exist      bool `protobuf:"varint,1,opt,name=exist" json:"exist,omitempty"`
	BroughtUp  bool `protobuf:"varint,2,opt,name=brought_up,json=broughtUp" json:"brought_up,omitempty"`
	RetryTimer bool `protobuf:"varint,3,opt,name=retry_timer,json=retryTimer" json:"retry_timer,omitempty"`
	Running    bool `protobuf:"varint,4,opt,name=running" json:"running,omitempty"`
	HasAdj     bool `protobuf:"varint,5,opt,name=has_adj,json=hasAdj" json:"has_adj,omitempty"`
}

func (m *NsrStatusNiiIntf) Reset()                    { *m = NsrStatusNiiIntf{} }
func (m *NsrStatusNiiIntf) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusNiiIntf) ProtoMessage()               {}
func (*NsrStatusNiiIntf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NsrStatusNiiIntf) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

func (m *NsrStatusNiiIntf) GetBroughtUp() bool {
	if m != nil {
		return m.BroughtUp
	}
	return false
}

func (m *NsrStatusNiiIntf) GetRetryTimer() bool {
	if m != nil {
		return m.RetryTimer
	}
	return false
}

func (m *NsrStatusNiiIntf) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

func (m *NsrStatusNiiIntf) GetHasAdj() bool {
	if m != nil {
		return m.HasAdj
	}
	return false
}

type NsrStatusTe struct {
	Enabled           uint32 `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	ConnUp            uint32 `protobuf:"varint,2,opt,name=conn_up,json=connUp" json:"conn_up,omitempty"`
	TeLinkCb          uint32 `protobuf:"varint,3,opt,name=te_link_cb,json=teLinkCb" json:"te_link_cb,omitempty"`
	TeTunnelCb        uint32 `protobuf:"varint,4,opt,name=te_tunnel_cb,json=teTunnelCb" json:"te_tunnel_cb,omitempty"`
	AdvSyncData       uint32 `protobuf:"varint,5,opt,name=adv_sync_data,json=advSyncData" json:"adv_sync_data,omitempty"`
	LinkPurgeTimeOn   uint32 `protobuf:"varint,6,opt,name=link_purge_time_on,json=linkPurgeTimeOn" json:"link_purge_time_on,omitempty"`
	TunnelPurgeTimeOn uint32 `protobuf:"varint,7,opt,name=tunnel_purge_time_on,json=tunnelPurgeTimeOn" json:"tunnel_purge_time_on,omitempty"`
	HasInfoFromTe     uint32 `protobuf:"varint,8,opt,name=has_info_from_te,json=hasInfoFromTe" json:"has_info_from_te,omitempty"`
}

func (m *NsrStatusTe) Reset()                    { *m = NsrStatusTe{} }
func (m *NsrStatusTe) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusTe) ProtoMessage()               {}
func (*NsrStatusTe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NsrStatusTe) GetEnabled() uint32 {
	if m != nil {
		return m.Enabled
	}
	return 0
}

func (m *NsrStatusTe) GetConnUp() uint32 {
	if m != nil {
		return m.ConnUp
	}
	return 0
}

func (m *NsrStatusTe) GetTeLinkCb() uint32 {
	if m != nil {
		return m.TeLinkCb
	}
	return 0
}

func (m *NsrStatusTe) GetTeTunnelCb() uint32 {
	if m != nil {
		return m.TeTunnelCb
	}
	return 0
}

func (m *NsrStatusTe) GetAdvSyncData() uint32 {
	if m != nil {
		return m.AdvSyncData
	}
	return 0
}

func (m *NsrStatusTe) GetLinkPurgeTimeOn() uint32 {
	if m != nil {
		return m.LinkPurgeTimeOn
	}
	return 0
}

func (m *NsrStatusTe) GetTunnelPurgeTimeOn() uint32 {
	if m != nil {
		return m.TunnelPurgeTimeOn
	}
	return 0
}

func (m *NsrStatusTe) GetHasInfoFromTe() uint32 {
	if m != nil {
		return m.HasInfoFromTe
	}
	return 0
}

type NsrStatusInfraType struct {
	Gen    *NsrStatusGen       `protobuf:"bytes,1,opt,name=gen" json:"gen,omitempty"`
	Ncd    []*NsrStatusNcd     `protobuf:"bytes,2,rep,name=ncd" json:"ncd,omitempty"`
	Pm     *NsrStatusPm        `protobuf:"bytes,3,opt,name=pm" json:"pm,omitempty"`
	Ds     *NsrStatusDs        `protobuf:"bytes,4,opt,name=ds" json:"ds,omitempty"`
	Te     *NsrStatusTe        `protobuf:"bytes,5,opt,name=te" json:"te,omitempty"`
	NiiIdb []*NsrStatusNiiIntf `protobuf:"bytes,6,rep,name=nii_idb,json=niiIdb" json:"nii_idb,omitempty"`
}

func (m *NsrStatusInfraType) Reset()                    { *m = NsrStatusInfraType{} }
func (m *NsrStatusInfraType) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusInfraType) ProtoMessage()               {}
func (*NsrStatusInfraType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *NsrStatusInfraType) GetGen() *NsrStatusGen {
	if m != nil {
		return m.Gen
	}
	return nil
}

func (m *NsrStatusInfraType) GetNcd() []*NsrStatusNcd {
	if m != nil {
		return m.Ncd
	}
	return nil
}

func (m *NsrStatusInfraType) GetPm() *NsrStatusPm {
	if m != nil {
		return m.Pm
	}
	return nil
}

func (m *NsrStatusInfraType) GetDs() *NsrStatusDs {
	if m != nil {
		return m.Ds
	}
	return nil
}

func (m *NsrStatusInfraType) GetTe() *NsrStatusTe {
	if m != nil {
		return m.Te
	}
	return nil
}

func (m *NsrStatusInfraType) GetNiiIdb() []*NsrStatusNiiIntf {
	if m != nil {
		return m.NiiIdb
	}
	return nil
}

type NsrStatusGblType struct {
	FullSyncAchieved []uint32 `protobuf:"varint,1,rep,packed,name=full_sync_achieved,json=fullSyncAchieved" json:"full_sync_achieved,omitempty"`
	ManSyncCount     []uint32 `protobuf:"varint,2,rep,packed,name=man_sync_count,json=manSyncCount" json:"man_sync_count,omitempty"`
	NsrChgCount      []uint32 `protobuf:"varint,3,rep,packed,name=nsr_chg_count,json=nsrChgCount" json:"nsr_chg_count,omitempty"`
	UptimeValid      []bool   `protobuf:"varint,4,rep,packed,name=uptime_valid,json=uptimeValid" json:"uptime_valid,omitempty"`
	Uptime           []uint32 `protobuf:"varint,5,rep,packed,name=uptime" json:"uptime,omitempty"`
}

func (m *NsrStatusGblType) Reset()                    { *m = NsrStatusGblType{} }
func (m *NsrStatusGblType) String() string            { return proto.CompactTextString(m) }
func (*NsrStatusGblType) ProtoMessage()               {}
func (*NsrStatusGblType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NsrStatusGblType) GetFullSyncAchieved() []uint32 {
	if m != nil {
		return m.FullSyncAchieved
	}
	return nil
}

func (m *NsrStatusGblType) GetManSyncCount() []uint32 {
	if m != nil {
		return m.ManSyncCount
	}
	return nil
}

func (m *NsrStatusGblType) GetNsrChgCount() []uint32 {
	if m != nil {
		return m.NsrChgCount
	}
	return nil
}

func (m *NsrStatusGblType) GetUptimeValid() []bool {
	if m != nil {
		return m.UptimeValid
	}
	return nil
}

func (m *NsrStatusGblType) GetUptime() []uint32 {
	if m != nil {
		return m.Uptime
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShNsrStatusGlobal_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_nsr_status_global_KEYS")
	proto.RegisterType((*IsisShNsrStatusGlobal)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_nsr_status_global")
	proto.RegisterType((*IsisShTimestampType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.isis_sh_timestamp_type")
	proto.RegisterType((*NsrStatusGen)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_gen")
	proto.RegisterType((*NsrStatusNcd)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ncd")
	proto.RegisterType((*NsrStatusPm)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_pm")
	proto.RegisterType((*NsrStatusDs)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_ds")
	proto.RegisterType((*NsrStatusNiiIntf)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_nii_intf")
	proto.RegisterType((*NsrStatusTe)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_te")
	proto.RegisterType((*NsrStatusInfraType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_infra_type")
	proto.RegisterType((*NsrStatusGblType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.nsr_status.nsr_status_gbl_type")
}

func init() { proto.RegisterFile("isis_sh_nsr_status_global.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6e, 0x1b, 0xb7,
	0x16, 0x86, 0x2c, 0x5b, 0x96, 0xa8, 0x9f, 0x38, 0x4c, 0x9c, 0x4c, 0x7e, 0xee, 0x8d, 0xa2, 0x7b,
	0x2f, 0xae, 0x80, 0x16, 0x2e, 0xe0, 0x74, 0x5d, 0x20, 0x50, 0x1d, 0xc4, 0x68, 0xeb, 0x06, 0x23,
	0x39, 0x40, 0x17, 0x05, 0xcb, 0x19, 0x52, 0xd2, 0x24, 0x43, 0xce, 0x98, 0x9c, 0x51, 0xad, 0xb4,
	0xcf, 0xd2, 0x3e, 0x41, 0xd1, 0x55, 0xdf, 0xa1, 0x4f, 0xd2, 0x5d, 0xdf, 0xa1, 0x38, 0x87, 0x1c,
	0x49, 0x36, 0x92, 0x55, 0xac, 0xdd, 0xf0, 0x3b, 0xdf, 0xf0, 0xfb, 0x86, 0x3c, 0x24, 0x0f, 0x87,
	0x3c, 0x49, 0x6c, 0x62, 0x99, 0x9d, 0x33, 0x6d, 0x0d, 0xb3, 0x05, 0x2f, 0x4a, 0xcb, 0x66, 0x69,
	0x16, 0xf1, 0xf4, 0x28, 0x37, 0x59, 0x91, 0xd1, 0x2f, 0xe2, 0xc4, 0xc6, 0x19, 0x4b, 0x32, 0xcb,
	0x2e, 0x0d, 0x8b, 0x53, 0x6d, 0x19, 0xbe, 0x92, 0xe5, 0xd2, 0x1c, 0xc1, 0xd3, 0x51, 0xa2, 0x6d,
	0xc1, 0x75, 0x2c, 0xd7, 0x4f, 0x47, 0xeb, 0xce, 0x06, 0x27, 0xe4, 0xdf, 0x1f, 0x94, 0x60, 0x5f,
	0x9d, 0x7c, 0x37, 0xa6, 0xff, 0x21, 0xdd, 0xea, 0x45, 0xa6, 0xb9, 0x92, 0x41, 0xad, 0x5f, 0x1b,
	0xb6, 0xc2, 0x4e, 0x05, 0x9e, 0x71, 0x25, 0x07, 0x7f, 0xec, 0x90, 0x07, 0x1f, 0xec, 0x87, 0x0e,
	0x48, 0x17, 0x83, 0x0b, 0x85, 0x01, 0x19, 0x1c, 0xf7, 0x6b, 0xc3, 0x6e, 0xd8, 0x06, 0xf0, 0xb5,
	0x1a, 0x03, 0x44, 0x7f, 0xf4, 0x1c, 0x78, 0x3b, 0x97, 0xd2, 0x04, 0xcf, 0xfa, 0xb5, 0x61, 0xfb,
	0x78, 0x7c, 0xf4, 0x71, 0x1f, 0x78, 0xb4, 0xe9, 0x26, 0x4a, 0x59, 0xb1, 0xcc, 0xa5, 0x13, 0x3e,
	0xb3, 0xe6, 0x95, 0x94, 0x86, 0xfe, 0x44, 0x7a, 0x2b, 0xe1, 0x44, 0x4f, 0x0d, 0x0f, 0x3e, 0x47,
	0xe5, 0xf3, 0x1b, 0x54, 0xc6, 0x7e, 0x9d, 0x76, 0xc7, 0x6b, 0x9f, 0x02, 0x34, 0x38, 0x27, 0xf7,
	0xaa, 0x61, 0x2b, 0x12, 0x25, 0x6d, 0xc1, 0x55, 0x8e, 0x3c, 0x1a, 0x90, 0x7d, 0x2b, 0xe3, 0x4c,
	0x0b, 0x8b, 0x03, 0xde, 0x0d, 0xab, 0x26, 0x7d, 0x4a, 0x3a, 0x9a, 0xeb, 0x8c, 0x55, 0xe1, 0x1d,
	0x37, 0x98, 0x80, 0x8d, 0x1d, 0x34, 0xf8, 0x75, 0x97, 0xf4, 0x36, 0x3f, 0x5c, 0x6a, 0xfa, 0x88,
	0xb4, 0xd4, 0x92, 0xe9, 0x4c, 0xc8, 0x44, 0xf8, 0x1e, 0x9b, 0x6a, 0x79, 0x86, 0x6d, 0x98, 0x20,
	0xb5, 0x64, 0xb9, 0xc9, 0x62, 0x69, 0x2d, 0x4b, 0x44, 0xd5, 0xa7, 0x5a, 0xbe, 0x72, 0xd8, 0xa9,
	0xa0, 0x7d, 0xd2, 0xc9, 0x15, 0x4b, 0xac, 0x2d, 0x99, 0xc9, 0x52, 0x19, 0xd4, 0x91, 0x42, 0x72,
	0x75, 0x6a, 0x6d, 0x19, 0x66, 0xa9, 0xa4, 0x8f, 0x09, 0xc9, 0x15, 0x9b, 0x73, 0x17, 0xdf, 0x75,
	0x1a, 0xb9, 0x7a, 0xc9, 0x31, 0xfa, 0x5f, 0xd2, 0xb3, 0x4b, 0xab, 0x66, 0x66, 0xc5, 0xd8, 0x43,
	0x46, 0xc7, 0xa1, 0x6b, 0x16, 0x1a, 0x97, 0x5a, 0x30, 0x23, 0xb9, 0x58, 0x06, 0x0d, 0xc7, 0xd2,
	0xd6, 0x8c, 0xa5, 0x16, 0x21, 0x60, 0x74, 0x48, 0x0e, 0x56, 0xac, 0x52, 0x3b, 0xde, 0x3e, 0xf2,
	0x7a, 0x9e, 0x77, 0xee, 0x50, 0x70, 0xbd, 0x62, 0x4a, 0x63, 0x82, 0xa6, 0x73, 0xed, 0x59, 0x27,
	0xc6, 0x54, 0x0c, 0x23, 0xe3, 0x05, 0x32, 0x5a, 0x2b, 0x46, 0x28, 0xe3, 0x05, 0x30, 0xfe, 0x45,
	0x88, 0x91, 0x85, 0x59, 0xb2, 0x69, 0xca, 0x67, 0x01, 0xc1, 0x78, 0x0b, 0x91, 0x17, 0x29, 0x9f,
	0xd1, 0x27, 0xa4, 0x0d, 0x1d, 0x48, 0xcd, 0xa3, 0x54, 0x8a, 0xa0, 0xdd, 0xaf, 0x0d, 0x9b, 0xf8,
	0xfe, 0x89, 0x43, 0xe8, 0xff, 0xdc, 0x37, 0xc5, 0x99, 0x9e, 0x26, 0xb3, 0xd2, 0x48, 0x11, 0x74,
	0x90, 0xd3, 0xd5, 0xd6, 0x8c, 0x56, 0xa0, 0xa3, 0x4d, 0x37, 0x69, 0xdd, 0x8a, 0x36, 0xdd, 0xa0,
	0x3d, 0x24, 0xcd, 0x29, 0x4f, 0xd2, 0x6c, 0x21, 0x4d, 0xd0, 0x43, 0xc2, 0xaa, 0x0d, 0xe3, 0x92,
	0x72, 0x9d, 0xc0, 0xd0, 0x5d, 0x30, 0x2d, 0xa5, 0x90, 0x22, 0xb8, 0x85, 0x9c, 0x1e, 0xe2, 0xa1,
	0xbc, 0x38, 0x43, 0x74, 0xf0, 0x7b, 0xed, 0x4a, 0x86, 0xe8, 0x58, 0xd0, 0x43, 0xd2, 0x58, 0x28,
	0x96, 0x88, 0x4b, 0x9f, 0x1e, 0x7b, 0x0b, 0x75, 0x2a, 0x2e, 0xe9, 0x7d, 0xb2, 0x1f, 0x67, 0x5a,
	0xb3, 0x32, 0xc7, 0xac, 0x68, 0x86, 0x0d, 0x68, 0x9e, 0xe7, 0xf4, 0x01, 0x69, 0x4a, 0x2d, 0x72,
	0x36, 0x17, 0xa9, 0x4f, 0x86, 0x7d, 0x68, 0xbf, 0x14, 0x29, 0xbd, 0x47, 0x1a, 0xf1, 0xfc, 0xad,
	0x2d, 0x95, 0xcf, 0x02, 0xdf, 0x82, 0xa1, 0xc2, 0x99, 0xb0, 0xf2, 0x42, 0x97, 0xca, 0x27, 0x00,
	0x01, 0x68, 0x8c, 0x08, 0xf4, 0x89, 0x13, 0x11, 0xeb, 0xc2, 0x4f, 0xfc, 0x3e, 0xb4, 0x47, 0xba,
	0x18, 0xbc, 0x23, 0xdd, 0x0d, 0xc3, 0xb9, 0xa2, 0x07, 0xa4, 0x6e, 0xe4, 0xcc, 0x9b, 0x85, 0xc7,
	0x95, 0xd5, 0x38, 0xf2, 0x09, 0x8c, 0x56, 0x47, 0x11, 0xcc, 0xa0, 0x80, 0xc5, 0xec, 0x62, 0xce,
	0x6c, 0xcb, 0x23, 0xa3, 0x08, 0x6c, 0x61, 0xcc, 0xf5, 0x8d, 0x9e, 0x9b, 0x21, 0x01, 0x68, 0xec,
	0x76, 0xc9, 0xbf, 0x6f, 0x5d, 0x11, 0x17, 0x96, 0x52, 0xb2, 0x0b, 0x71, 0xaf, 0x8e, 0xcf, 0x34,
	0xf3, 0xf2, 0x85, 0x5b, 0x93, 0xed, 0xe3, 0xd7, 0x1f, 0xbb, 0x85, 0xbc, 0x7f, 0x6f, 0x70, 0x9f,
	0x35, 0xb1, 0x9b, 0xdf, 0x5b, 0xbf, 0xf2, 0xbd, 0x05, 0x21, 0x3e, 0x00, 0x66, 0x76, 0xb7, 0x6a,
	0xa6, 0xe9, 0x34, 0x27, 0x16, 0x26, 0x24, 0x2f, 0x23, 0x3f, 0xab, 0xf0, 0x48, 0x15, 0x69, 0xe4,
	0x25, 0x7a, 0x68, 0x6c, 0xd5, 0xc3, 0x5e, 0x5e, 0x82, 0x81, 0x43, 0x27, 0x17, 0x47, 0x7e, 0x33,
	0x00, 0x78, 0x14, 0x51, 0x43, 0x5a, 0x0e, 0x06, 0x23, 0xcd, 0xad, 0x1a, 0xd9, 0x47, 0x45, 0x37,
	0x16, 0x90, 0x9c, 0xad, 0x75, 0x72, 0x2a, 0xd2, 0x30, 0x72, 0x06, 0x16, 0xc8, 0x76, 0xc7, 0xc2,
	0xc8, 0x99, 0x1b, 0x0b, 0x90, 0x8b, 0x23, 0xdc, 0x90, 0xba, 0x08, 0xbb, 0xb1, 0x70, 0x30, 0x18,
	0xe9, 0x6c, 0x77, 0x2c, 0x50, 0x71, 0x62, 0xe9, 0x5d, 0xb2, 0x07, 0x9b, 0xf4, 0x0c, 0xf7, 0xb3,
	0x6e, 0xe8, 0x1a, 0xf4, 0x82, 0x34, 0xf1, 0x01, 0x8c, 0xf4, 0xb6, 0x6b, 0x04, 0x75, 0x26, 0x16,
	0x76, 0x17, 0x27, 0x19, 0x47, 0xb8, 0x2d, 0x76, 0x7d, 0x68, 0x14, 0xd1, 0x05, 0x69, 0x57, 0x21,
	0x30, 0x74, 0xb0, 0x55, 0x43, 0x2d, 0xaf, 0x3a, 0xb1, 0xd7, 0x76, 0xa6, 0xdb, 0xd7, 0x77, 0xa6,
	0x77, 0xa4, 0xbb, 0x0e, 0x83, 0x31, 0xba, 0x55, 0x63, 0xed, 0x95, 0xf2, 0xc4, 0x42, 0xc5, 0xa0,
	0xb3, 0x22, 0x99, 0x2e, 0xc1, 0xd9, 0x1d, 0x77, 0x9a, 0x3b, 0x60, 0x14, 0xd1, 0x4b, 0xd2, 0x59,
	0x05, 0xc1, 0xd7, 0xdd, 0xad, 0xfa, 0x22, 0x95, 0xee, 0xc4, 0xe2, 0x71, 0xeb, 0x94, 0xb1, 0x4c,
	0x3c, 0xec, 0xd7, 0x86, 0x9d, 0x8a, 0x80, 0x05, 0xdd, 0xcf, 0xa4, 0xb7, 0x41, 0x00, 0x73, 0xf7,
	0xfa, 0xf5, 0x2d, 0x9a, 0xeb, 0xac, 0xb5, 0xdd, 0xba, 0x13, 0x32, 0x85, 0x21, 0xbb, 0xef, 0xb2,
	0x5d, 0xc8, 0xd4, 0xad, 0x3b, 0x07, 0x83, 0x9f, 0x60, 0xbb, 0xe9, 0x8e, 0x8a, 0x2e, 0xb7, 0x8c,
	0x54, 0xd9, 0x42, 0x32, 0x6b, 0x16, 0xc1, 0x83, 0xaa, 0x6e, 0x01, 0x64, 0x6c, 0x16, 0x90, 0x5b,
	0xeb, 0x30, 0xd8, 0x7a, 0xb8, 0xdd, 0xdc, 0x5a, 0x29, 0xbb, 0x49, 0xdc, 0x3c, 0x71, 0x1f, 0x5d,
	0x3f, 0x71, 0x61, 0x12, 0x37, 0x08, 0xe0, 0xee, 0xf1, 0x56, 0xdd, 0x75, 0xd6, 0xda, 0x13, 0x3b,
	0xf8, 0xa5, 0x46, 0xee, 0x6c, 0x56, 0x47, 0x49, 0xc2, 0x12, 0x5d, 0x4c, 0x61, 0x27, 0x93, 0x97,
	0x89, 0x2d, 0xf0, 0xd8, 0x6f, 0x86, 0xae, 0x01, 0xe3, 0x1c, 0x99, 0xac, 0x9c, 0xcd, 0x8b, 0x75,
	0x91, 0xd4, 0xf2, 0xc8, 0x79, 0x0e, 0xdf, 0xea, 0xca, 0x47, 0x90, 0x34, 0x78, 0x52, 0x37, 0x43,
	0x57, 0x51, 0x4e, 0x00, 0x81, 0x52, 0xdf, 0x94, 0x5a, 0x27, 0x7a, 0xe6, 0x4b, 0x8f, 0xaa, 0x09,
	0x07, 0xfc, 0x9c, 0x5b, 0xc6, 0xc5, 0x1b, 0x3c, 0x55, 0x9b, 0x61, 0x63, 0xce, 0xed, 0x73, 0xf1,
	0x66, 0xf0, 0xdb, 0xce, 0x95, 0x82, 0xa4, 0xc0, 0xfb, 0x42, 0x55, 0x81, 0xd6, 0xaa, 0x62, 0xcc,
	0x95, 0x9f, 0xd7, 0x0a, 0xb8, 0xee, 0xaa, 0x80, 0x7b, 0x4c, 0x48, 0x21, 0x59, 0x9a, 0xe8, 0xb7,
	0xeb, 0x0a, 0xa2, 0x59, 0xc8, 0xaf, 0x13, 0xfd, 0x76, 0x14, 0x41, 0x5d, 0x5c, 0x48, 0x56, 0x94,
	0x5a, 0xbb, 0x74, 0x76, 0x95, 0x1c, 0x29, 0xe4, 0x04, 0xa1, 0x51, 0x04, 0xb7, 0x06, 0x2e, 0x16,
	0xcc, 0x2e, 0x75, 0xcc, 0x04, 0x2f, 0xb8, 0x3f, 0xf9, 0xdb, 0x5c, 0x2c, 0xc6, 0x4b, 0x1d, 0x7f,
	0xc9, 0x0b, 0x4e, 0x3f, 0x21, 0x14, 0x05, 0xf2, 0xd2, 0xcc, 0x24, 0x8e, 0x00, 0xcb, 0xb4, 0x2f,
	0xed, 0x6e, 0x41, 0xe4, 0x15, 0x04, 0x60, 0x1c, 0xbe, 0xd5, 0xf4, 0x33, 0x72, 0xd7, 0xeb, 0x5d,
	0xa5, 0xbb, 0xd3, 0xfc, 0xb6, 0x8b, 0x6d, 0xbe, 0xf0, 0x7f, 0x72, 0x00, 0xe3, 0x93, 0xe8, 0x69,
	0xc6, 0xa6, 0x26, 0x53, 0xac, 0x90, 0xbe, 0xc2, 0xef, 0xce, 0xb9, 0x3d, 0xd5, 0xd3, 0xec, 0x85,
	0xc9, 0xd4, 0x44, 0x0e, 0xfe, 0xda, 0x25, 0x87, 0xef, 0xbd, 0x8f, 0xd1, 0x1f, 0x48, 0x7d, 0x26,
	0x5d, 0x1d, 0xd7, 0x3e, 0x3e, 0xbb, 0xc9, 0xdb, 0xa6, 0xd4, 0x21, 0x74, 0x0d, 0x0a, 0x3a, 0x86,
	0x2b, 0x55, 0xfd, 0x86, 0x15, 0x74, 0x2c, 0x42, 0xe8, 0x9a, 0x7e, 0x4f, 0x76, 0x72, 0x85, 0x13,
	0xd8, 0x3e, 0xfe, 0xe6, 0x06, 0x05, 0x72, 0x15, 0xee, 0xe4, 0x0a, 0xba, 0x17, 0x55, 0x15, 0x79,
	0x93, 0xdd, 0x0b, 0x1b, 0xee, 0x08, 0x0b, 0xdd, 0x17, 0xee, 0x32, 0x78, 0xb3, 0xdd, 0x17, 0x32,
	0xdc, 0x29, 0x24, 0x4d, 0xc9, 0x3e, 0xae, 0x5f, 0x11, 0x05, 0x0d, 0x9c, 0x82, 0x9b, 0xfc, 0xa5,
	0x50, 0xed, 0x0c, 0x61, 0x43, 0x27, 0xc9, 0xa9, 0x88, 0x06, 0x7f, 0x5e, 0xdd, 0x39, 0xaa, 0x5f,
	0x0e, 0xf4, 0x53, 0x42, 0xa7, 0x65, 0x9a, 0xba, 0xc5, 0xc2, 0xe3, 0x79, 0x22, 0x17, 0xb8, 0x52,
	0xeb, 0xc3, 0x6e, 0x78, 0x00, 0x11, 0x58, 0x31, 0xcf, 0x3d, 0x0e, 0xb7, 0x60, 0xc5, 0xb5, 0x23,
	0xc7, 0x59, 0xa9, 0x0b, 0xcc, 0x9e, 0x6e, 0xd8, 0x51, 0x5c, 0x03, 0x71, 0x04, 0x18, 0xac, 0x3f,
	0xbc, 0x57, 0xce, 0x67, 0x9e, 0x54, 0x47, 0x12, 0xdc, 0x46, 0x47, 0xf3, 0x99, 0xe3, 0x3c, 0x25,
	0x9d, 0x32, 0xc7, 0x75, 0xb4, 0xe0, 0x69, 0x22, 0x82, 0xdd, 0x7e, 0x7d, 0xd8, 0x0c, 0xdb, 0x0e,
	0x7b, 0x0d, 0x10, 0x5c, 0xd6, 0x5c, 0x33, 0xd8, 0xc3, 0xf7, 0x7d, 0x2b, 0x6a, 0xe0, 0x1f, 0xa6,
	0x67, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x78, 0x79, 0x17, 0x9b, 0x84, 0x12, 0x00, 0x00,
}
