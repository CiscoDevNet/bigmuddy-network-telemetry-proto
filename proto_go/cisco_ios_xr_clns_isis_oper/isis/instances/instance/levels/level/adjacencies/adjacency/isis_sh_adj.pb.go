// Code generated by protoc-gen-go.
// source: isis_sh_adj.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacencies_adjacency is a generated protocol buffer package.

It is generated from these files:
	isis_sh_adj.proto

It has these top-level messages:
	IsisShAdj_KEYS
	IsisShAdj
	IsisIpv6AddressType
	IsisTopoIdType
	OsiAreaAddressType
	IsisShIntfDet
	IsisIpv4AdjSidBackupInfo
	IsisIpv4AdjSid
	IsisIpv6AdjSidBackupInfo
	IsisIpv6AdjSid
	IsisShAdjIpv4
	IsisShAdjIpv6
	IsisShAdjAf
	IsisShAdjTopo
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_levels_level_adjacencies_adjacency

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An IS-IS adjacency
type IsisShAdj_KEYS struct {
	InstanceName  string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	Level         string `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
	SystemId      string `protobuf:"bytes,3,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	InterfaceName string `protobuf:"bytes,4,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *IsisShAdj_KEYS) Reset()                    { *m = IsisShAdj_KEYS{} }
func (m *IsisShAdj_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShAdj_KEYS) ProtoMessage()               {}
func (*IsisShAdj_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShAdj_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShAdj_KEYS) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShAdj_KEYS) GetSystemId() string {
	if m != nil {
		return m.SystemId
	}
	return ""
}

func (m *IsisShAdj_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type IsisShAdj struct {
	// Neighbor system ID
	AdjacencySystemId string `protobuf:"bytes,50,opt,name=adjacency_system_id,json=adjacencySystemId" json:"adjacency_system_id,omitempty"`
	// Neighbor SNPA
	AdjacencySnpa string `protobuf:"bytes,51,opt,name=adjacency_snpa,json=adjacencySnpa" json:"adjacency_snpa,omitempty"`
	// Local interface
	AdjacencyInterface string `protobuf:"bytes,52,opt,name=adjacency_interface,json=adjacencyInterface" json:"adjacency_interface,omitempty"`
	// Link media type
	AdjacencyMediaType string `protobuf:"bytes,53,opt,name=adjacency_media_type,json=adjacencyMediaType" json:"adjacency_media_type,omitempty"`
	// Adjacency state
	AdjacencyState string `protobuf:"bytes,54,opt,name=adjacency_state,json=adjacencyState" json:"adjacency_state,omitempty"`
	// Adjacency IPv4 BFD state
	AdjacencyBfdState string `protobuf:"bytes,55,opt,name=adjacency_bfd_state,json=adjacencyBfdState" json:"adjacency_bfd_state,omitempty"`
	// Adjacency IPv6 BFD state
	AdjacencyIpv6BfdState string `protobuf:"bytes,56,opt,name=adjacency_ipv6_bfd_state,json=adjacencyIpv6BfdState" json:"adjacency_ipv6_bfd_state,omitempty"`
	// Is IPv4 BFD retry timer running
	AdjIpv4BfdRetryRunning bool `protobuf:"varint,57,opt,name=adj_ipv4_bfd_retry_running,json=adjIpv4BfdRetryRunning" json:"adj_ipv4_bfd_retry_running,omitempty"`
	// Is IPv6 BFD retry timer running
	AdjIpv6BfdRetryRunning bool `protobuf:"varint,58,opt,name=adj_ipv6_bfd_retry_running,json=adjIpv6BfdRetryRunning" json:"adj_ipv6_bfd_retry_running,omitempty"`
	// Time to expiration of IPv4 BFD retry timer (s)
	AdjIpv4BfdRetryExp uint32 `protobuf:"varint,59,opt,name=adj_ipv4_bfd_retry_exp,json=adjIpv4BfdRetryExp" json:"adj_ipv4_bfd_retry_exp,omitempty"`
	// Time to expiration of IPv6 BFD retry timer (s)
	AdjIpv6BfdRetryExp uint32 `protobuf:"varint,60,opt,name=adj_ipv6_bfd_retry_exp,json=adjIpv6BfdRetryExp" json:"adj_ipv6_bfd_retry_exp,omitempty"`
	// IPv4 BFD retry counter
	AdjIpv4BfdRetryCount uint32 `protobuf:"varint,61,opt,name=adj_ipv4_bfd_retry_count,json=adjIpv4BfdRetryCount" json:"adj_ipv4_bfd_retry_count,omitempty"`
	// IPv6 BFD retry counter
	AdjIpv6BfdRetryCount uint32 `protobuf:"varint,62,opt,name=adj_ipv6_bfd_retry_count,json=adjIpv6BfdRetryCount" json:"adj_ipv6_bfd_retry_count,omitempty"`
	// TRUE if AdjacencyUptime is set
	AdjacencyUptimeValidFlag bool `protobuf:"varint,63,opt,name=adjacency_uptime_valid_flag,json=adjacencyUptimeValidFlag" json:"adjacency_uptime_valid_flag,omitempty"`
	// How long the adjacency has been up (s)
	AdjacencyUptime uint32 `protobuf:"varint,64,opt,name=adjacency_uptime,json=adjacencyUptime" json:"adjacency_uptime,omitempty"`
	// Time (s) until adjacency declared down if no IIH received
	AdjacencyHoldtime uint32 `protobuf:"varint,65,opt,name=adjacency_holdtime,json=adjacencyHoldtime" json:"adjacency_holdtime,omitempty"`
	// Adjacency checkpoint object ID
	AdjacencyCheckpointObjectId uint32 `protobuf:"varint,66,opt,name=adjacency_checkpoint_object_id,json=adjacencyCheckpointObjectId" json:"adjacency_checkpoint_object_id,omitempty"`
	// TRUE if neighbor is IETF-NSF capable
	AdjacencyIetfNsfCapableFlag bool `protobuf:"varint,67,opt,name=adjacency_ietf_nsf_capable_flag,json=adjacencyIetfNsfCapableFlag" json:"adjacency_ietf_nsf_capable_flag,omitempty"`
	// Priority of DIS on this LAN. Valid only if aj_media_class is ISIS_MEDIA_CLASS_LAN
	AdjacencyDisPriority uint32 `protobuf:"varint,68,opt,name=adjacency_dis_priority,json=adjacencyDisPriority" json:"adjacency_dis_priority,omitempty"`
	// Neighbor IS priority. Valid only if aj_media_class is ISIS_MEDIA_CLASS_LAN
	AdjacencyNeighborPriority uint32 `protobuf:"varint,69,opt,name=adjacency_neighbor_priority,json=adjacencyNeighborPriority" json:"adjacency_neighbor_priority,omitempty"`
	// Local IS priority. Valid only if aj_media_class is ISIS_MEDIA_CLASS_LAN
	AdjacencyLocalPriority uint32 `protobuf:"varint,70,opt,name=adjacency_local_priority,json=adjacencyLocalPriority" json:"adjacency_local_priority,omitempty"`
	// TRUE if local system is DIS. Valid only if AdjacencyMediaType is ISIS_MEDIA_CLASS_LAN
	LocalDisFlag bool `protobuf:"varint,71,opt,name=local_dis_flag,json=localDisFlag" json:"local_dis_flag,omitempty"`
	// TRUE if neighbor is DIS. Valid only if AdjacencyMediaType is ISIS_MEDIA_CLASS_LAN
	NeighborDisFlag bool `protobuf:"varint,72,opt,name=neighbor_dis_flag,json=neighborDisFlag" json:"neighbor_dis_flag,omitempty"`
	// Area addresses active over this adjacency
	AdjacencyAreaAddresses []*OsiAreaAddressType `protobuf:"bytes,73,rep,name=adjacency_area_addresses,json=adjacencyAreaAddresses" json:"adjacency_area_addresses,omitempty"`
	// Per-topology data
	AdjacencyTopologies []*IsisShAdjTopo `protobuf:"bytes,74,rep,name=adjacency_topologies,json=adjacencyTopologies" json:"adjacency_topologies,omitempty"`
	// Per-address-family data
	AdjacencyPerAddressFamilyData []*IsisShAdjAf `protobuf:"bytes,75,rep,name=adjacency_per_address_family_data,json=adjacencyPerAddressFamilyData" json:"adjacency_per_address_family_data,omitempty"`
	// ISIS NSR STANDBY
	NsrStandby uint32 `protobuf:"varint,76,opt,name=nsr_standby,json=nsrStandby" json:"nsr_standby,omitempty"`
}

func (m *IsisShAdj) Reset()                    { *m = IsisShAdj{} }
func (m *IsisShAdj) String() string            { return proto.CompactTextString(m) }
func (*IsisShAdj) ProtoMessage()               {}
func (*IsisShAdj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShAdj) GetAdjacencySystemId() string {
	if m != nil {
		return m.AdjacencySystemId
	}
	return ""
}

func (m *IsisShAdj) GetAdjacencySnpa() string {
	if m != nil {
		return m.AdjacencySnpa
	}
	return ""
}

func (m *IsisShAdj) GetAdjacencyInterface() string {
	if m != nil {
		return m.AdjacencyInterface
	}
	return ""
}

func (m *IsisShAdj) GetAdjacencyMediaType() string {
	if m != nil {
		return m.AdjacencyMediaType
	}
	return ""
}

func (m *IsisShAdj) GetAdjacencyState() string {
	if m != nil {
		return m.AdjacencyState
	}
	return ""
}

func (m *IsisShAdj) GetAdjacencyBfdState() string {
	if m != nil {
		return m.AdjacencyBfdState
	}
	return ""
}

func (m *IsisShAdj) GetAdjacencyIpv6BfdState() string {
	if m != nil {
		return m.AdjacencyIpv6BfdState
	}
	return ""
}

func (m *IsisShAdj) GetAdjIpv4BfdRetryRunning() bool {
	if m != nil {
		return m.AdjIpv4BfdRetryRunning
	}
	return false
}

func (m *IsisShAdj) GetAdjIpv6BfdRetryRunning() bool {
	if m != nil {
		return m.AdjIpv6BfdRetryRunning
	}
	return false
}

func (m *IsisShAdj) GetAdjIpv4BfdRetryExp() uint32 {
	if m != nil {
		return m.AdjIpv4BfdRetryExp
	}
	return 0
}

func (m *IsisShAdj) GetAdjIpv6BfdRetryExp() uint32 {
	if m != nil {
		return m.AdjIpv6BfdRetryExp
	}
	return 0
}

func (m *IsisShAdj) GetAdjIpv4BfdRetryCount() uint32 {
	if m != nil {
		return m.AdjIpv4BfdRetryCount
	}
	return 0
}

func (m *IsisShAdj) GetAdjIpv6BfdRetryCount() uint32 {
	if m != nil {
		return m.AdjIpv6BfdRetryCount
	}
	return 0
}

func (m *IsisShAdj) GetAdjacencyUptimeValidFlag() bool {
	if m != nil {
		return m.AdjacencyUptimeValidFlag
	}
	return false
}

func (m *IsisShAdj) GetAdjacencyUptime() uint32 {
	if m != nil {
		return m.AdjacencyUptime
	}
	return 0
}

func (m *IsisShAdj) GetAdjacencyHoldtime() uint32 {
	if m != nil {
		return m.AdjacencyHoldtime
	}
	return 0
}

func (m *IsisShAdj) GetAdjacencyCheckpointObjectId() uint32 {
	if m != nil {
		return m.AdjacencyCheckpointObjectId
	}
	return 0
}

func (m *IsisShAdj) GetAdjacencyIetfNsfCapableFlag() bool {
	if m != nil {
		return m.AdjacencyIetfNsfCapableFlag
	}
	return false
}

func (m *IsisShAdj) GetAdjacencyDisPriority() uint32 {
	if m != nil {
		return m.AdjacencyDisPriority
	}
	return 0
}

func (m *IsisShAdj) GetAdjacencyNeighborPriority() uint32 {
	if m != nil {
		return m.AdjacencyNeighborPriority
	}
	return 0
}

func (m *IsisShAdj) GetAdjacencyLocalPriority() uint32 {
	if m != nil {
		return m.AdjacencyLocalPriority
	}
	return 0
}

func (m *IsisShAdj) GetLocalDisFlag() bool {
	if m != nil {
		return m.LocalDisFlag
	}
	return false
}

func (m *IsisShAdj) GetNeighborDisFlag() bool {
	if m != nil {
		return m.NeighborDisFlag
	}
	return false
}

func (m *IsisShAdj) GetAdjacencyAreaAddresses() []*OsiAreaAddressType {
	if m != nil {
		return m.AdjacencyAreaAddresses
	}
	return nil
}

func (m *IsisShAdj) GetAdjacencyTopologies() []*IsisShAdjTopo {
	if m != nil {
		return m.AdjacencyTopologies
	}
	return nil
}

func (m *IsisShAdj) GetAdjacencyPerAddressFamilyData() []*IsisShAdjAf {
	if m != nil {
		return m.AdjacencyPerAddressFamilyData
	}
	return nil
}

func (m *IsisShAdj) GetNsrStandby() uint32 {
	if m != nil {
		return m.NsrStandby
	}
	return 0
}

type IsisIpv6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisIpv6AddressType) Reset()                    { *m = IsisIpv6AddressType{} }
func (m *IsisIpv6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv6AddressType) ProtoMessage()               {}
func (*IsisIpv6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisIpv6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Identification of an IS-IS topology
type IsisTopoIdType struct {
	// AF name
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// Sub-AF name
	SafName string `protobuf:"bytes,2,opt,name=saf_name,json=safName" json:"saf_name,omitempty"`
	// VRF Name
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Topology Name
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName" json:"topology_name,omitempty"`
}

func (m *IsisTopoIdType) Reset()                    { *m = IsisTopoIdType{} }
func (m *IsisTopoIdType) String() string            { return proto.CompactTextString(m) }
func (*IsisTopoIdType) ProtoMessage()               {}
func (*IsisTopoIdType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IsisTopoIdType) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisTopoIdType) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *IsisTopoIdType) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *IsisTopoIdType) GetTopologyName() string {
	if m != nil {
		return m.TopologyName
	}
	return ""
}

type OsiAreaAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *OsiAreaAddressType) Reset()                    { *m = OsiAreaAddressType{} }
func (m *OsiAreaAddressType) String() string            { return proto.CompactTextString(m) }
func (*OsiAreaAddressType) ProtoMessage()               {}
func (*OsiAreaAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OsiAreaAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Interface Detail
type IsisShIntfDet struct {
	// Local interface handle
	InterfaceHandle string `protobuf:"bytes,1,opt,name=interface_handle,json=interfaceHandle" json:"interface_handle,omitempty"`
	// Interface name
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *IsisShIntfDet) Reset()                    { *m = IsisShIntfDet{} }
func (m *IsisShIntfDet) String() string            { return proto.CompactTextString(m) }
func (*IsisShIntfDet) ProtoMessage()               {}
func (*IsisShIntfDet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IsisShIntfDet) GetInterfaceHandle() string {
	if m != nil {
		return m.InterfaceHandle
	}
	return ""
}

func (m *IsisShIntfDet) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

// IPv4 Adjacency SID backup information
type IsisIpv4AdjSidBackupInfo struct {
	// Number of labels in the backup path label stack
	BackupLabelStackSize uint32 `protobuf:"varint,1,opt,name=backup_label_stack_size,json=backupLabelStackSize" json:"backup_label_stack_size,omitempty"`
	// Backup path label stack
	BackupLabelStack []uint32 `protobuf:"varint,2,rep,packed,name=backup_label_stack,json=backupLabelStack" json:"backup_label_stack,omitempty"`
	// Neighbor address used as adjacency backup target
	BackupNodeAddress string `protobuf:"bytes,3,opt,name=backup_node_address,json=backupNodeAddress" json:"backup_node_address,omitempty"`
	// Backup path nexthop address
	BackupNexthop string `protobuf:"bytes,4,opt,name=backup_nexthop,json=backupNexthop" json:"backup_nexthop,omitempty"`
	// Backup path interface
	BackupInterface string `protobuf:"bytes,5,opt,name=backup_interface,json=backupInterface" json:"backup_interface,omitempty"`
}

func (m *IsisIpv4AdjSidBackupInfo) Reset()                    { *m = IsisIpv4AdjSidBackupInfo{} }
func (m *IsisIpv4AdjSidBackupInfo) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv4AdjSidBackupInfo) ProtoMessage()               {}
func (*IsisIpv4AdjSidBackupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IsisIpv4AdjSidBackupInfo) GetBackupLabelStackSize() uint32 {
	if m != nil {
		return m.BackupLabelStackSize
	}
	return 0
}

func (m *IsisIpv4AdjSidBackupInfo) GetBackupLabelStack() []uint32 {
	if m != nil {
		return m.BackupLabelStack
	}
	return nil
}

func (m *IsisIpv4AdjSidBackupInfo) GetBackupNodeAddress() string {
	if m != nil {
		return m.BackupNodeAddress
	}
	return ""
}

func (m *IsisIpv4AdjSidBackupInfo) GetBackupNexthop() string {
	if m != nil {
		return m.BackupNexthop
	}
	return ""
}

func (m *IsisIpv4AdjSidBackupInfo) GetBackupInterface() string {
	if m != nil {
		return m.BackupInterface
	}
	return ""
}

// IPv4 Adjacency SID
type IsisIpv4AdjSid struct {
	// Adjacency SID value
	AdjacencySidValue uint32 `protobuf:"varint,1,opt,name=adjacency_sid_value,json=adjacencySidValue" json:"adjacency_sid_value,omitempty"`
	// Adjacency SID Backup Info
	AdjacencySidBackup *IsisIpv4AdjSidBackupInfo `protobuf:"bytes,2,opt,name=adjacency_sid_backup,json=adjacencySidBackup" json:"adjacency_sid_backup,omitempty"`
	// Adjacency SID Backup Info TE
	AdjacencySidBackupTe *IsisIpv4AdjSidBackupInfo `protobuf:"bytes,3,opt,name=adjacency_sid_backup_te,json=adjacencySidBackupTe" json:"adjacency_sid_backup_te,omitempty"`
}

func (m *IsisIpv4AdjSid) Reset()                    { *m = IsisIpv4AdjSid{} }
func (m *IsisIpv4AdjSid) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv4AdjSid) ProtoMessage()               {}
func (*IsisIpv4AdjSid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IsisIpv4AdjSid) GetAdjacencySidValue() uint32 {
	if m != nil {
		return m.AdjacencySidValue
	}
	return 0
}

func (m *IsisIpv4AdjSid) GetAdjacencySidBackup() *IsisIpv4AdjSidBackupInfo {
	if m != nil {
		return m.AdjacencySidBackup
	}
	return nil
}

func (m *IsisIpv4AdjSid) GetAdjacencySidBackupTe() *IsisIpv4AdjSidBackupInfo {
	if m != nil {
		return m.AdjacencySidBackupTe
	}
	return nil
}

// IPv4 Adjacency SID backup information
type IsisIpv6AdjSidBackupInfo struct {
	// Number of labels in the backup path label stack
	BackupLabelStackSize uint32 `protobuf:"varint,1,opt,name=backup_label_stack_size,json=backupLabelStackSize" json:"backup_label_stack_size,omitempty"`
	// Backup path label stack
	BackupLabelStack []uint32 `protobuf:"varint,2,rep,packed,name=backup_label_stack,json=backupLabelStack" json:"backup_label_stack,omitempty"`
	// Neighbor address used as adjacency backup target
	BackupNodeAddress string `protobuf:"bytes,3,opt,name=backup_node_address,json=backupNodeAddress" json:"backup_node_address,omitempty"`
	// Backup path nexthop address
	BackupNexthop string `protobuf:"bytes,4,opt,name=backup_nexthop,json=backupNexthop" json:"backup_nexthop,omitempty"`
	// Backup path interface
	BackupInterface string `protobuf:"bytes,5,opt,name=backup_interface,json=backupInterface" json:"backup_interface,omitempty"`
}

func (m *IsisIpv6AdjSidBackupInfo) Reset()                    { *m = IsisIpv6AdjSidBackupInfo{} }
func (m *IsisIpv6AdjSidBackupInfo) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv6AdjSidBackupInfo) ProtoMessage()               {}
func (*IsisIpv6AdjSidBackupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *IsisIpv6AdjSidBackupInfo) GetBackupLabelStackSize() uint32 {
	if m != nil {
		return m.BackupLabelStackSize
	}
	return 0
}

func (m *IsisIpv6AdjSidBackupInfo) GetBackupLabelStack() []uint32 {
	if m != nil {
		return m.BackupLabelStack
	}
	return nil
}

func (m *IsisIpv6AdjSidBackupInfo) GetBackupNodeAddress() string {
	if m != nil {
		return m.BackupNodeAddress
	}
	return ""
}

func (m *IsisIpv6AdjSidBackupInfo) GetBackupNexthop() string {
	if m != nil {
		return m.BackupNexthop
	}
	return ""
}

func (m *IsisIpv6AdjSidBackupInfo) GetBackupInterface() string {
	if m != nil {
		return m.BackupInterface
	}
	return ""
}

// IPv6 Adjacency SID
type IsisIpv6AdjSid struct {
	// Adjacency SID value
	AdjacencySidValue uint32 `protobuf:"varint,1,opt,name=adjacency_sid_value,json=adjacencySidValue" json:"adjacency_sid_value,omitempty"`
	// Adjacency SID Backup Info
	AdjacencySidBackup *IsisIpv6AdjSidBackupInfo `protobuf:"bytes,2,opt,name=adjacency_sid_backup,json=adjacencySidBackup" json:"adjacency_sid_backup,omitempty"`
	// Adjacency SID Backup Info TE
	AdjacencySidBackupTe *IsisIpv6AdjSidBackupInfo `protobuf:"bytes,3,opt,name=adjacency_sid_backup_te,json=adjacencySidBackupTe" json:"adjacency_sid_backup_te,omitempty"`
}

func (m *IsisIpv6AdjSid) Reset()                    { *m = IsisIpv6AdjSid{} }
func (m *IsisIpv6AdjSid) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv6AdjSid) ProtoMessage()               {}
func (*IsisIpv6AdjSid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *IsisIpv6AdjSid) GetAdjacencySidValue() uint32 {
	if m != nil {
		return m.AdjacencySidValue
	}
	return 0
}

func (m *IsisIpv6AdjSid) GetAdjacencySidBackup() *IsisIpv6AdjSidBackupInfo {
	if m != nil {
		return m.AdjacencySidBackup
	}
	return nil
}

func (m *IsisIpv6AdjSid) GetAdjacencySidBackupTe() *IsisIpv6AdjSidBackupInfo {
	if m != nil {
		return m.AdjacencySidBackupTe
	}
	return nil
}

// IPv4 Specific Per-Adjacency Data
type IsisShAdjIpv4 struct {
	// Adjacency next hop
	NextHop string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	// Adjacency interface addresses
	InterfaceAddresses [][]byte `protobuf:"bytes,2,rep,name=interface_addresses,json=interfaceAddresses,proto3" json:"interface_addresses,omitempty"`
	// Adjacency SID
	AdjacencySid *IsisIpv4AdjSid `protobuf:"bytes,3,opt,name=adjacency_sid,json=adjacencySid" json:"adjacency_sid,omitempty"`
	// Adjacency SID not eligible for FRR protection
	NonFrrAdjacencySid *IsisIpv4AdjSid `protobuf:"bytes,4,opt,name=non_frr_adjacency_sid,json=nonFrrAdjacencySid" json:"non_frr_adjacency_sid,omitempty"`
	// Underlying interface list for bundle interfaces
	UnderlyingInterfaceList []*IsisShIntfDet `protobuf:"bytes,5,rep,name=underlying_interface_list,json=underlyingInterfaceList" json:"underlying_interface_list,omitempty"`
	// Per bundle member Adjacency sid
	UnderlyingAdjacencySidList []uint32 `protobuf:"varint,6,rep,packed,name=underlying_adjacency_sid_list,json=underlyingAdjacencySidList" json:"underlying_adjacency_sid_list,omitempty"`
}

func (m *IsisShAdjIpv4) Reset()                    { *m = IsisShAdjIpv4{} }
func (m *IsisShAdjIpv4) String() string            { return proto.CompactTextString(m) }
func (*IsisShAdjIpv4) ProtoMessage()               {}
func (*IsisShAdjIpv4) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IsisShAdjIpv4) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *IsisShAdjIpv4) GetInterfaceAddresses() [][]byte {
	if m != nil {
		return m.InterfaceAddresses
	}
	return nil
}

func (m *IsisShAdjIpv4) GetAdjacencySid() *IsisIpv4AdjSid {
	if m != nil {
		return m.AdjacencySid
	}
	return nil
}

func (m *IsisShAdjIpv4) GetNonFrrAdjacencySid() *IsisIpv4AdjSid {
	if m != nil {
		return m.NonFrrAdjacencySid
	}
	return nil
}

func (m *IsisShAdjIpv4) GetUnderlyingInterfaceList() []*IsisShIntfDet {
	if m != nil {
		return m.UnderlyingInterfaceList
	}
	return nil
}

func (m *IsisShAdjIpv4) GetUnderlyingAdjacencySidList() []uint32 {
	if m != nil {
		return m.UnderlyingAdjacencySidList
	}
	return nil
}

// IPv6 Specific Per-Adjacency Data
type IsisShAdjIpv6 struct {
	// Adjacency next hop
	NextHop string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	// Adjacency interface addresses
	InterfaceAddresses []*IsisIpv6AddressType `protobuf:"bytes,2,rep,name=interface_addresses,json=interfaceAddresses" json:"interface_addresses,omitempty"`
	// Adjacency SID
	AdjacencySid *IsisIpv6AdjSid `protobuf:"bytes,3,opt,name=adjacency_sid,json=adjacencySid" json:"adjacency_sid,omitempty"`
	// Adjacency SID not eligible for FRR protection
	NonFrrAdjacencySid *IsisIpv6AdjSid `protobuf:"bytes,4,opt,name=non_frr_adjacency_sid,json=nonFrrAdjacencySid" json:"non_frr_adjacency_sid,omitempty"`
	// Underlying interface list for bundle interfaces
	UnderlyingInterfaceList []*IsisShIntfDet `protobuf:"bytes,5,rep,name=underlying_interface_list,json=underlyingInterfaceList" json:"underlying_interface_list,omitempty"`
	// Per bundle member Adjacency sid
	UnderlyingAdjacencySidList []uint32 `protobuf:"varint,6,rep,packed,name=underlying_adjacency_sid_list,json=underlyingAdjacencySidList" json:"underlying_adjacency_sid_list,omitempty"`
}

func (m *IsisShAdjIpv6) Reset()                    { *m = IsisShAdjIpv6{} }
func (m *IsisShAdjIpv6) String() string            { return proto.CompactTextString(m) }
func (*IsisShAdjIpv6) ProtoMessage()               {}
func (*IsisShAdjIpv6) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IsisShAdjIpv6) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *IsisShAdjIpv6) GetInterfaceAddresses() []*IsisIpv6AddressType {
	if m != nil {
		return m.InterfaceAddresses
	}
	return nil
}

func (m *IsisShAdjIpv6) GetAdjacencySid() *IsisIpv6AdjSid {
	if m != nil {
		return m.AdjacencySid
	}
	return nil
}

func (m *IsisShAdjIpv6) GetNonFrrAdjacencySid() *IsisIpv6AdjSid {
	if m != nil {
		return m.NonFrrAdjacencySid
	}
	return nil
}

func (m *IsisShAdjIpv6) GetUnderlyingInterfaceList() []*IsisShIntfDet {
	if m != nil {
		return m.UnderlyingInterfaceList
	}
	return nil
}

func (m *IsisShAdjIpv6) GetUnderlyingAdjacencySidList() []uint32 {
	if m != nil {
		return m.UnderlyingAdjacencySidList
	}
	return nil
}

type IsisShAdjAf struct {
	AfName string `protobuf:"bytes,1,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// IPV4 neighbor info
	Ipv4 *IsisShAdjIpv4 `protobuf:"bytes,2,opt,name=ipv4" json:"ipv4,omitempty"`
	// IPV6 neighbor info
	Ipv6 *IsisShAdjIpv6 `protobuf:"bytes,3,opt,name=ipv6" json:"ipv6,omitempty"`
}

func (m *IsisShAdjAf) Reset()                    { *m = IsisShAdjAf{} }
func (m *IsisShAdjAf) String() string            { return proto.CompactTextString(m) }
func (*IsisShAdjAf) ProtoMessage()               {}
func (*IsisShAdjAf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IsisShAdjAf) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisShAdjAf) GetIpv4() *IsisShAdjIpv4 {
	if m != nil {
		return m.Ipv4
	}
	return nil
}

func (m *IsisShAdjAf) GetIpv6() *IsisShAdjIpv6 {
	if m != nil {
		return m.Ipv6
	}
	return nil
}

// Per-topology per-adjacency data
type IsisShAdjTopo struct {
	// Topology ID
	Id *IsisTopoIdType `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Status of topology in adjacency
	TopologyStatus string `protobuf:"bytes,2,opt,name=topology_status,json=topologyStatus" json:"topology_status,omitempty"`
	// TRUE if suppressed parallel point-to-point link
	ParallelP2PLinkSuppressedFlag bool `protobuf:"varint,3,opt,name=parallel_p2_p_link_suppressed_flag,json=parallelP2PLinkSuppressedFlag" json:"parallel_p2_p_link_suppressed_flag,omitempty"`
}

func (m *IsisShAdjTopo) Reset()                    { *m = IsisShAdjTopo{} }
func (m *IsisShAdjTopo) String() string            { return proto.CompactTextString(m) }
func (*IsisShAdjTopo) ProtoMessage()               {}
func (*IsisShAdjTopo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IsisShAdjTopo) GetId() *IsisTopoIdType {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *IsisShAdjTopo) GetTopologyStatus() string {
	if m != nil {
		return m.TopologyStatus
	}
	return ""
}

func (m *IsisShAdjTopo) GetParallelP2PLinkSuppressedFlag() bool {
	if m != nil {
		return m.ParallelP2PLinkSuppressedFlag
	}
	return false
}

func init() {
	proto.RegisterType((*IsisShAdj_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_sh_adj_KEYS")
	proto.RegisterType((*IsisShAdj)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_sh_adj")
	proto.RegisterType((*IsisIpv6AddressType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_ipv6_address_type")
	proto.RegisterType((*IsisTopoIdType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_topo_id_type")
	proto.RegisterType((*OsiAreaAddressType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.osi_area_address_type")
	proto.RegisterType((*IsisShIntfDet)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_sh_intf_det")
	proto.RegisterType((*IsisIpv4AdjSidBackupInfo)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_ipv4_adj_sid_backup_info")
	proto.RegisterType((*IsisIpv4AdjSid)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_ipv4_adj_sid")
	proto.RegisterType((*IsisIpv6AdjSidBackupInfo)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_ipv6_adj_sid_backup_info")
	proto.RegisterType((*IsisIpv6AdjSid)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_ipv6_adj_sid")
	proto.RegisterType((*IsisShAdjIpv4)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_sh_adj_ipv4")
	proto.RegisterType((*IsisShAdjIpv6)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_sh_adj_ipv6")
	proto.RegisterType((*IsisShAdjAf)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_sh_adj_af")
	proto.RegisterType((*IsisShAdjTopo)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.levels.level.adjacencies.adjacency.isis_sh_adj_topo")
}

func init() { proto.RegisterFile("isis_sh_adj.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcf, 0x6f, 0x1c, 0xb5,
	0x17, 0xd7, 0x6c, 0x92, 0xa6, 0x75, 0xb2, 0x49, 0xe3, 0x6f, 0xda, 0x4c, 0x5b, 0xe5, 0xdb, 0xb0,
	0x05, 0x35, 0x20, 0xba, 0xa0, 0x6d, 0x3a, 0x2d, 0x85, 0x16, 0xf2, 0xa3, 0x21, 0x4b, 0x43, 0x88,
	0x76, 0x4b, 0x24, 0x4e, 0x96, 0x77, 0xec, 0xd9, 0x75, 0x32, 0xeb, 0x19, 0x8d, 0xbd, 0xab, 0x6c,
	0xc5, 0x85, 0x0b, 0xdc, 0x90, 0x38, 0x53, 0x89, 0x0b, 0x88, 0x0b, 0x07, 0xfe, 0x2d, 0xc4, 0x3f,
	0xc0, 0x11, 0xd9, 0xf3, 0xc3, 0xde, 0x4d, 0x82, 0xc4, 0x21, 0x4b, 0x2b, 0xf5, 0x94, 0x8c, 0xdf,
	0xe7, 0xe3, 0xf7, 0x79, 0xcf, 0xcf, 0xf6, 0xf3, 0x82, 0x05, 0x26, 0x98, 0x40, 0xa2, 0x83, 0x30,
	0x39, 0xac, 0xc6, 0x49, 0x24, 0x23, 0x78, 0xe0, 0x33, 0xe1, 0x47, 0x88, 0x45, 0x02, 0x1d, 0x27,
	0xc8, 0x0f, 0xb9, 0x40, 0x1a, 0x14, 0xc5, 0x34, 0xa9, 0xaa, 0xff, 0xaa, 0x8c, 0x0b, 0x89, 0xb9,
	0x4f, 0xcd, 0x7f, 0xd5, 0x90, 0xf6, 0x69, 0x28, 0xd2, 0x3f, 0x55, 0x4c, 0x0e, 0xb1, 0x4f, 0xb9,
	0xcf, 0xa8, 0x28, 0xfe, 0x1f, 0x54, 0x7e, 0x70, 0xc0, 0x65, 0xcb, 0x1b, 0x7a, 0xfa, 0xe4, 0xab,
	0x26, 0xbc, 0x05, 0xca, 0xf9, 0x1c, 0x88, 0xe3, 0x2e, 0x75, 0x9d, 0x15, 0x67, 0xf5, 0x52, 0x63,
	0x36, 0x1f, 0xdc, 0xc3, 0x5d, 0x0a, 0x17, 0xc1, 0x94, 0x9e, 0xd8, 0x2d, 0x69, 0x63, 0xfa, 0x01,
	0x6f, 0x80, 0x4b, 0x62, 0x20, 0x24, 0xed, 0x22, 0x46, 0xdc, 0x09, 0x6d, 0xb9, 0x98, 0x0e, 0xd4,
	0x09, 0x7c, 0x0b, 0xcc, 0x31, 0x2e, 0x69, 0x12, 0xe0, 0x7c, 0xe2, 0x49, 0x8d, 0x28, 0x17, 0xa3,
	0x6a, 0xe6, 0xca, 0x9f, 0x65, 0x30, 0x63, 0x69, 0x82, 0x55, 0xf0, 0xbf, 0x42, 0x30, 0x32, 0xb3,
	0xd7, 0x34, 0x77, 0xa1, 0x30, 0x35, 0x2d, 0x37, 0x16, 0x9e, 0xc7, 0xd8, 0xbd, 0x9b, 0xba, 0x31,
	0x50, 0x1e, 0x63, 0xf8, 0x9e, 0x3d, 0x6d, 0xa1, 0xc0, 0x5d, 0xd3, 0x58, 0x58, 0x98, 0xea, 0xb9,
	0x05, 0xbe, 0x0f, 0x16, 0x0d, 0xa1, 0x4b, 0x09, 0xc3, 0x48, 0x0e, 0x62, 0xea, 0xde, 0x1b, 0x61,
	0x7c, 0xae, 0x4c, 0xcf, 0x06, 0x31, 0x85, 0xb7, 0xc1, 0xbc, 0xa5, 0x44, 0x62, 0x49, 0x5d, 0x4f,
	0x83, 0x8d, 0xc0, 0xa6, 0x1a, 0x1d, 0x0e, 0xb1, 0x15, 0x90, 0x0c, 0x7c, 0x7f, 0x24, 0xc4, 0x8d,
	0x80, 0xa4, 0xf8, 0xfb, 0xc0, 0xb5, 0xb4, 0xc7, 0x7d, 0xcf, 0x22, 0x3d, 0xd0, 0xa4, 0x2b, 0x26,
	0x80, 0xb8, 0xef, 0x15, 0xc4, 0x87, 0xe0, 0xba, 0x5a, 0x66, 0x16, 0xf7, 0xd7, 0x34, 0x25, 0xa1,
	0x32, 0x19, 0xa0, 0xa4, 0xc7, 0x39, 0xe3, 0x6d, 0xf7, 0x83, 0x15, 0x67, 0xf5, 0x62, 0xe3, 0x2a,
	0x26, 0x87, 0xf5, 0xb8, 0xbf, 0xb6, 0x11, 0x90, 0x86, 0x32, 0x37, 0x52, 0xab, 0xc5, 0xf5, 0x4e,
	0xe1, 0x3e, 0xb4, 0xb9, 0xde, 0x28, 0xb7, 0x06, 0xae, 0x9e, 0xe2, 0x97, 0x1e, 0xc7, 0xee, 0x87,
	0x2b, 0xce, 0x6a, 0x59, 0x67, 0xcf, 0xf6, 0xf9, 0xe4, 0x38, 0xb6, 0x38, 0xde, 0x08, 0xe7, 0x23,
	0x9b, 0xe3, 0xd9, 0x1c, 0x4f, 0x27, 0x66, 0xd4, 0x8f, 0x1f, 0xf5, 0xb8, 0x74, 0x1f, 0x69, 0xd6,
	0xe2, 0x88, 0xa7, 0x4d, 0x65, 0xb3, 0x78, 0xde, 0x09, 0xde, 0x63, 0x9b, 0xe7, 0x0d, 0xf3, 0x1e,
	0x81, 0x1b, 0x66, 0x21, 0x7a, 0xb1, 0x64, 0x5d, 0x8a, 0xfa, 0x38, 0x64, 0x04, 0x05, 0x21, 0x6e,
	0xbb, 0x1f, 0xeb, 0xa4, 0x98, 0xb5, 0xfa, 0x52, 0x23, 0x0e, 0x14, 0x60, 0x3b, 0xc4, 0x6d, 0xf8,
	0x36, 0xb8, 0x3c, 0x4a, 0x77, 0x3f, 0xd1, 0xee, 0xe6, 0x47, 0x38, 0xf0, 0x0e, 0x30, 0x15, 0x86,
	0x3a, 0x51, 0x48, 0x34, 0x78, 0x5d, 0x83, 0x4d, 0x85, 0xec, 0x64, 0x06, 0xb8, 0x09, 0xfe, 0x6f,
	0xe0, 0x7e, 0x87, 0xfa, 0x47, 0x71, 0xc4, 0xb8, 0x44, 0x51, 0xeb, 0x90, 0xfa, 0x52, 0xed, 0x9f,
	0x0d, 0x4d, 0x35, 0xf2, 0x37, 0x0b, 0xd0, 0x17, 0x1a, 0x53, 0x27, 0x70, 0x0b, 0xdc, 0xb4, 0xca,
	0x8c, 0xca, 0x00, 0x71, 0x11, 0x20, 0x1f, 0xc7, 0xb8, 0x15, 0xd2, 0x34, 0xc2, 0x4d, 0x1d, 0xa1,
	0x99, 0xa5, 0x4e, 0x65, 0xb0, 0x27, 0x82, 0xcd, 0x14, 0xa3, 0x83, 0x5c, 0xd3, 0xeb, 0x98, 0xcd,
	0x42, 0x98, 0x40, 0x71, 0xc2, 0xa2, 0x84, 0xc9, 0x81, 0xbb, 0x55, 0x64, 0x36, 0xb5, 0x6e, 0x31,
	0xb1, 0x9f, 0xd9, 0xe0, 0x63, 0x3b, 0xb3, 0x9c, 0xb2, 0x76, 0xa7, 0x15, 0x25, 0x86, 0xfa, 0x44,
	0x53, 0xaf, 0x15, 0x90, 0xbd, 0x0c, 0x51, 0xf0, 0x1f, 0xd8, 0x5b, 0x24, 0x8c, 0x7c, 0x1c, 0x1a,
	0xf2, 0xb6, 0x26, 0x1b, 0x55, 0xbb, 0xca, 0x5c, 0x30, 0xdf, 0x04, 0x73, 0x29, 0x5e, 0x69, 0xd5,
	0x41, 0x7e, 0xaa, 0x83, 0x9c, 0xd5, 0xa3, 0x5b, 0x4c, 0xe8, 0xa8, 0xde, 0x01, 0x0b, 0x85, 0xaa,
	0x02, 0xb8, 0xa3, 0x81, 0xf3, 0xb9, 0x21, 0xc7, 0xfe, 0xea, 0xd8, 0x62, 0x70, 0x42, 0x31, 0xc2,
	0x84, 0x24, 0x54, 0x08, 0x2a, 0xdc, 0xfa, 0xca, 0xc4, 0xea, 0x4c, 0xad, 0x5b, 0x3d, 0x9f, 0x13,
	0xbe, 0x1a, 0x09, 0x36, 0xe4, 0x51, 0x9f, 0x59, 0x56, 0xec, 0xeb, 0x09, 0xc5, 0xeb, 0xb9, 0x18,
	0xf8, 0xa3, 0x63, 0x1f, 0x72, 0x32, 0x8a, 0xa3, 0x30, 0x6a, 0x33, 0x2a, 0xdc, 0xcf, 0xb4, 0xca,
	0xce, 0x79, 0xa9, 0xb4, 0xef, 0x20, 0xe5, 0xb5, 0x61, 0xce, 0xc3, 0x67, 0x85, 0x08, 0xf8, 0xbb,
	0x03, 0xde, 0x30, 0xea, 0x62, 0x9a, 0x14, 0x41, 0x05, 0xb8, 0xcb, 0xc2, 0x01, 0x22, 0x58, 0x62,
	0xf7, 0xa9, 0x96, 0x1a, 0x8c, 0x43, 0x2a, 0x0e, 0x1a, 0xcb, 0x85, 0x65, 0x9f, 0x26, 0x59, 0x22,
	0xb7, 0xb5, 0x9a, 0x2d, 0x2c, 0x31, 0xbc, 0x09, 0x66, 0xb8, 0x48, 0xd4, 0xd1, 0xcc, 0x49, 0x6b,
	0xe0, 0xee, 0xea, 0xca, 0x03, 0x5c, 0x24, 0xcd, 0x74, 0xa4, 0x52, 0x05, 0x57, 0xf5, 0x8c, 0xfa,
	0xe8, 0xb1, 0xd7, 0x48, 0xdd, 0xb0, 0x7d, 0x1c, 0xf6, 0xf2, 0xeb, 0x37, 0xfd, 0xa8, 0x7c, 0xe7,
	0x64, 0xfd, 0x81, 0x4a, 0x13, 0x62, 0x24, 0xc5, 0x2e, 0x81, 0x69, 0x1c, 0xd8, 0x97, 0xf5, 0x05,
	0x1c, 0xe8, 0x6b, 0xfa, 0x1a, 0xb8, 0x28, 0x72, 0x4b, 0x7a, 0x53, 0x4f, 0x0b, 0x63, 0xea, 0x27,
	0x99, 0x29, 0xbd, 0xaa, 0xa7, 0xfb, 0x49, 0x6a, 0xba, 0x05, 0xca, 0xd9, 0xda, 0x0f, 0xec, 0x8b,
	0x7a, 0x36, 0x1f, 0xd4, 0xf7, 0xf4, 0x1d, 0x70, 0xe5, 0xd4, 0xe2, 0x3a, 0x43, 0x38, 0x31, 0x9d,
	0x06, 0xe3, 0x32, 0x40, 0x84, 0x4a, 0x75, 0xfe, 0x99, 0x8e, 0xa0, 0x83, 0x39, 0x09, 0x73, 0xd2,
	0x7c, 0x31, 0xbe, 0xa3, 0x87, 0x4f, 0x69, 0x1e, 0x4a, 0xa7, 0x35, 0x0f, 0xdf, 0x96, 0xc0, 0x72,
	0x9e, 0xcf, 0x35, 0xbd, 0x46, 0x82, 0x11, 0xd4, 0xc2, 0xfe, 0x51, 0x2f, 0x46, 0x8c, 0x07, 0x11,
	0xbc, 0x07, 0x96, 0xb2, 0xcf, 0x10, 0xb7, 0x68, 0xa8, 0x96, 0xc6, 0x3f, 0x42, 0x82, 0x3d, 0x4f,
	0x5d, 0x97, 0x1b, 0x8b, 0xa9, 0x79, 0x57, 0x59, 0x9b, 0xca, 0xd8, 0x64, 0xcf, 0x29, 0x7c, 0x17,
	0xc0, 0x93, 0x34, 0xb7, 0xb4, 0x32, 0xb1, 0x5a, 0x6e, 0x5c, 0x1e, 0x65, 0xa8, 0x0b, 0x3d, 0x43,
	0xf3, 0x88, 0xd0, 0x3c, 0x3d, 0x59, 0x9a, 0x17, 0x52, 0xd3, 0x5e, 0x44, 0x68, 0x56, 0x30, 0x2a,
	0xba, 0x1c, 0x4f, 0x8f, 0x65, 0x27, 0x8a, 0xf3, 0xd6, 0x28, 0x83, 0xa6, 0x83, 0x2a, 0x5f, 0x45,
	0x28, 0x79, 0xc3, 0x32, 0x95, 0xe6, 0x2b, 0x1d, 0x2f, 0xba, 0x95, 0xca, 0x8b, 0x89, 0xac, 0x4e,
	0xec, 0x44, 0x8c, 0xf4, 0x52, 0x8c, 0x20, 0xb3, 0x50, 0xf6, 0x35, 0xd2, 0x64, 0xe4, 0x40, 0x19,
	0xd4, 0xc9, 0xb5, 0x38, 0x4c, 0x48, 0xfd, 0xe8, 0xe4, 0xcf, 0xd4, 0x7a, 0xe7, 0xba, 0xc9, 0xce,
	0x5a, 0x42, 0xab, 0xd7, 0x6a, 0x32, 0xb2, 0xa1, 0x0d, 0xf0, 0x37, 0x07, 0x2c, 0x9d, 0xa6, 0x14,
	0xc9, 0xb4, 0xba, 0xff, 0x33, 0xb1, 0x8b, 0x27, 0xc5, 0x3e, 0x1b, 0xae, 0x53, 0xef, 0x75, 0x9d,
	0x8e, 0x24, 0xe2, 0x95, 0xab, 0x53, 0xef, 0x55, 0xaa, 0x53, 0xef, 0x5f, 0xd4, 0xe9, 0x5f, 0x93,
	0xc3, 0x0f, 0x44, 0x55, 0xe6, 0xea, 0xe6, 0x50, 0xcb, 0x8f, 0xd4, 0xfa, 0xa7, 0xc7, 0xf5, 0xb4,
	0xfa, 0xde, 0x89, 0x62, 0xf5, 0xaa, 0x32, 0xc7, 0xb4, 0x69, 0x72, 0x54, 0xfd, 0xcd, 0x36, 0x60,
	0x61, 0x32, 0x1d, 0xc7, 0xf7, 0x0e, 0x28, 0x0f, 0xe5, 0x23, 0xcb, 0x02, 0x1b, 0xdb, 0x6e, 0x6d,
	0xcc, 0xda, 0x91, 0xc3, 0x17, 0x0e, 0xb8, 0xc2, 0x23, 0x8e, 0x82, 0x44, 0xb5, 0x17, 0xb6, 0xb0,
	0xc9, 0x71, 0x0b, 0x83, 0x3c, 0xe2, 0xdb, 0x49, 0xb2, 0x6e, 0xcb, 0xfb, 0xd9, 0x01, 0xd7, 0x7a,
	0x9c, 0xd0, 0x24, 0x1c, 0x30, 0xde, 0x36, 0xfb, 0x0b, 0x85, 0x4c, 0x48, 0x77, 0x6a, 0x3c, 0x6d,
	0x5a, 0x7e, 0x81, 0x37, 0x96, 0x8c, 0x94, 0x62, 0x4b, 0xef, 0x32, 0x21, 0xe1, 0x3a, 0x58, 0xb6,
	0x54, 0x0e, 0x17, 0xbc, 0x56, 0x7a, 0x41, 0x9f, 0x48, 0xd7, 0x0d, 0xc8, 0x8e, 0x52, 0x4d, 0x51,
	0xf9, 0x63, 0xea, 0x44, 0xe9, 0x79, 0xff, 0x54, 0x7a, 0x3f, 0x39, 0x67, 0xd7, 0xde, 0x4c, 0x8d,
	0x8f, 0x63, 0x57, 0x59, 0x1d, 0xf6, 0x4b, 0x55, 0xeb, 0xde, 0xcb, 0x5a, 0xeb, 0xde, 0xeb, 0x5a,
	0xd7, 0xb5, 0xfe, 0x4b, 0x09, 0xcc, 0x0d, 0x3f, 0x2c, 0xce, 0x6e, 0xe9, 0xbf, 0x06, 0x93, 0xea,
	0x94, 0xc8, 0xae, 0xb6, 0xb1, 0x3c, 0xc9, 0x94, 0xbf, 0x86, 0xf6, 0x9a, 0x79, 0xf7, 0xb2, 0xca,
	0x1d, 0x97, 0x77, 0x4f, 0x7b, 0xf7, 0x2a, 0xdf, 0x94, 0x86, 0xcf, 0x04, 0xf5, 0x20, 0x81, 0x03,
	0x50, 0x62, 0x44, 0x27, 0xe9, 0xbc, 0x2b, 0xd6, 0x7e, 0x73, 0x35, 0x4a, 0x8c, 0xc0, 0xdb, 0x60,
	0xbe, 0x78, 0x28, 0x09, 0x89, 0x65, 0x4f, 0x64, 0xcf, 0x92, 0xb9, 0x7c, 0xb8, 0xa9, 0x47, 0x61,
	0x1d, 0x54, 0x62, 0x9c, 0xe0, 0x30, 0xa4, 0x21, 0x8a, 0x6b, 0x28, 0x46, 0x21, 0xe3, 0x47, 0x48,
	0xf4, 0xe2, 0x58, 0x9f, 0x0d, 0xd9, 0xef, 0x45, 0x13, 0xfa, 0xf7, 0x83, 0xe5, 0x1c, 0xb9, 0x5f,
	0xdb, 0xdf, 0x65, 0xfc, 0xa8, 0x59, 0xa0, 0xb6, 0x43, 0xdc, 0x6e, 0x5d, 0xd0, 0x3f, 0x09, 0xdf,
	0xfd, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x19, 0x0d, 0x8f, 0x27, 0x16, 0x00, 0x00,
}
