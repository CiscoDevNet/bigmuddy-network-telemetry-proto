// Code generated by protoc-gen-go.
// source: isis_sh_ipv4_route.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4_routes_ipv4_route is a generated protocol buffer package.

It is generated from these files:
	isis_sh_ipv4_route.proto

It has these top-level messages:
	IsisShIpv4Route_KEYS
	IsisShIpv4Route
	IsisNodalSidType
	IsisStringType
	IsisIpv4PrefixType
	IsisSnpaType
	IsisShInterfaceName
	IsisShRepEl
	IsisShIpv4FrrBackup
	IsisShIpv4Path
	IsisShIpv4UcmpPath
	IsisShRedistEntryProto
	IsisShRouteConnDetails
	IsisShRouteConnStatus
	IsisShRouteRedistLevelDetails
	IsisShRouteRedistDetails
	IsisShRouteRedistStatus
	IsisShIpv4RouteNativeSource
	IsisShIpv4RouteNativePreference
	IsisShIpv4RouteNativeDetails
	IsisShIpv4RouteNativeStatus
	IsisShIpv4RouteSummarizationStatus
	IsisShIpv4RouteAdv
*/
package cisco_ios_xr_clns_isis_oper_isis_instances_instance_topologies_topology_ipv4_routes_ipv4_route

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// IS-IS IPv4 route
type IsisShIpv4Route_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	SafName      string `protobuf:"bytes,3,opt,name=saf_name,json=safName" json:"saf_name,omitempty"`
	TopologyName string `protobuf:"bytes,4,opt,name=topology_name,json=topologyName" json:"topology_name,omitempty"`
	Prefix       string `protobuf:"bytes,5,opt,name=prefix" json:"prefix,omitempty"`
	PrefixLength uint32 `protobuf:"varint,6,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
}

func (m *IsisShIpv4Route_KEYS) Reset()                    { *m = IsisShIpv4Route_KEYS{} }
func (m *IsisShIpv4Route_KEYS) String() string            { return proto.CompactTextString(m) }
func (*IsisShIpv4Route_KEYS) ProtoMessage()               {}
func (*IsisShIpv4Route_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IsisShIpv4Route_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *IsisShIpv4Route_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *IsisShIpv4Route_KEYS) GetSafName() string {
	if m != nil {
		return m.SafName
	}
	return ""
}

func (m *IsisShIpv4Route_KEYS) GetTopologyName() string {
	if m != nil {
		return m.TopologyName
	}
	return ""
}

func (m *IsisShIpv4Route_KEYS) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *IsisShIpv4Route_KEYS) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type IsisShIpv4Route struct {
	// Status of IS-IS directly connected routes to the prefix
	ConnectedStatus *IsisShRouteConnStatus `protobuf:"bytes,50,opt,name=connected_status,json=connectedStatus" json:"connected_status,omitempty"`
	// Status of other protocols' routes redistributed into IS-IS
	RedistributedStatus *IsisShRouteRedistStatus `protobuf:"bytes,51,opt,name=redistributed_status,json=redistributedStatus" json:"redistributed_status,omitempty"`
	// Status of native IS-IS routes to the prefix
	NativeStatus *IsisShIpv4RouteNativeStatus `protobuf:"bytes,52,opt,name=native_status,json=nativeStatus" json:"native_status,omitempty"`
	// Per level details of how the local system advertises the prefix
	PerLevelAdvertisingDetails []*IsisShIpv4RouteAdv `protobuf:"bytes,53,rep,name=per_level_advertising_details,json=perLevelAdvertisingDetails" json:"per_level_advertising_details,omitempty"`
}

func (m *IsisShIpv4Route) Reset()                    { *m = IsisShIpv4Route{} }
func (m *IsisShIpv4Route) String() string            { return proto.CompactTextString(m) }
func (*IsisShIpv4Route) ProtoMessage()               {}
func (*IsisShIpv4Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IsisShIpv4Route) GetConnectedStatus() *IsisShRouteConnStatus {
	if m != nil {
		return m.ConnectedStatus
	}
	return nil
}

func (m *IsisShIpv4Route) GetRedistributedStatus() *IsisShRouteRedistStatus {
	if m != nil {
		return m.RedistributedStatus
	}
	return nil
}

func (m *IsisShIpv4Route) GetNativeStatus() *IsisShIpv4RouteNativeStatus {
	if m != nil {
		return m.NativeStatus
	}
	return nil
}

func (m *IsisShIpv4Route) GetPerLevelAdvertisingDetails() []*IsisShIpv4RouteAdv {
	if m != nil {
		return m.PerLevelAdvertisingDetails
	}
	return nil
}

type IsisNodalSidType struct {
	SidValue  uint32 `protobuf:"varint,1,opt,name=sid_value,json=sidValue" json:"sid_value,omitempty"`
	Rflag     uint32 `protobuf:"varint,2,opt,name=rflag" json:"rflag,omitempty"`
	Nflag     uint32 `protobuf:"varint,3,opt,name=nflag" json:"nflag,omitempty"`
	Pflag     uint32 `protobuf:"varint,4,opt,name=pflag" json:"pflag,omitempty"`
	Eflag     uint32 `protobuf:"varint,5,opt,name=eflag" json:"eflag,omitempty"`
	Vflag     uint32 `protobuf:"varint,6,opt,name=vflag" json:"vflag,omitempty"`
	Lflag     uint32 `protobuf:"varint,7,opt,name=lflag" json:"lflag,omitempty"`
	Algorithm uint32 `protobuf:"varint,8,opt,name=algorithm" json:"algorithm,omitempty"`
}

func (m *IsisNodalSidType) Reset()                    { *m = IsisNodalSidType{} }
func (m *IsisNodalSidType) String() string            { return proto.CompactTextString(m) }
func (*IsisNodalSidType) ProtoMessage()               {}
func (*IsisNodalSidType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IsisNodalSidType) GetSidValue() uint32 {
	if m != nil {
		return m.SidValue
	}
	return 0
}

func (m *IsisNodalSidType) GetRflag() uint32 {
	if m != nil {
		return m.Rflag
	}
	return 0
}

func (m *IsisNodalSidType) GetNflag() uint32 {
	if m != nil {
		return m.Nflag
	}
	return 0
}

func (m *IsisNodalSidType) GetPflag() uint32 {
	if m != nil {
		return m.Pflag
	}
	return 0
}

func (m *IsisNodalSidType) GetEflag() uint32 {
	if m != nil {
		return m.Eflag
	}
	return 0
}

func (m *IsisNodalSidType) GetVflag() uint32 {
	if m != nil {
		return m.Vflag
	}
	return 0
}

func (m *IsisNodalSidType) GetLflag() uint32 {
	if m != nil {
		return m.Lflag
	}
	return 0
}

func (m *IsisNodalSidType) GetAlgorithm() uint32 {
	if m != nil {
		return m.Algorithm
	}
	return 0
}

type IsisStringType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisStringType) Reset()                    { *m = IsisStringType{} }
func (m *IsisStringType) String() string            { return proto.CompactTextString(m) }
func (*IsisStringType) ProtoMessage()               {}
func (*IsisStringType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IsisStringType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 address and prefix length
type IsisIpv4PrefixType struct {
	// prefix
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
}

func (m *IsisIpv4PrefixType) Reset()                    { *m = IsisIpv4PrefixType{} }
func (m *IsisIpv4PrefixType) String() string            { return proto.CompactTextString(m) }
func (*IsisIpv4PrefixType) ProtoMessage()               {}
func (*IsisIpv4PrefixType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IsisIpv4PrefixType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *IsisIpv4PrefixType) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type IsisSnpaType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisSnpaType) Reset()                    { *m = IsisSnpaType{} }
func (m *IsisSnpaType) String() string            { return proto.CompactTextString(m) }
func (*IsisSnpaType) ProtoMessage()               {}
func (*IsisSnpaType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IsisSnpaType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type IsisShInterfaceName struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IsisShInterfaceName) Reset()                    { *m = IsisShInterfaceName{} }
func (m *IsisShInterfaceName) String() string            { return proto.CompactTextString(m) }
func (*IsisShInterfaceName) ProtoMessage()               {}
func (*IsisShInterfaceName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IsisShInterfaceName) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// OSPF Repair Element
type IsisShRepEl struct {
	// RepairElementNodeID
	RepairElementNodeId string `protobuf:"bytes,1,opt,name=repair_element_node_id,json=repairElementNodeId" json:"repair_element_node_id,omitempty"`
	// RepairIPv4Addr
	RepairIpv4Addr string `protobuf:"bytes,2,opt,name=repair_ipv4_addr,json=repairIpv4Addr" json:"repair_ipv4_addr,omitempty"`
	// RepairIPv6Addr
	RepairIpv6Addr string `protobuf:"bytes,3,opt,name=repair_ipv6_addr,json=repairIpv6Addr" json:"repair_ipv6_addr,omitempty"`
	// Repair Label
	RepairLabel uint32 `protobuf:"varint,4,opt,name=repair_label,json=repairLabel" json:"repair_label,omitempty"`
	// Repair Element Type
	RepairElementType uint32 `protobuf:"varint,5,opt,name=repair_element_type,json=repairElementType" json:"repair_element_type,omitempty"`
	// Repair Strict SPF Label
	RepairStrictSpfLabel uint32 `protobuf:"varint,6,opt,name=repair_strict_spf_label,json=repairStrictSpfLabel" json:"repair_strict_spf_label,omitempty"`
}

func (m *IsisShRepEl) Reset()                    { *m = IsisShRepEl{} }
func (m *IsisShRepEl) String() string            { return proto.CompactTextString(m) }
func (*IsisShRepEl) ProtoMessage()               {}
func (*IsisShRepEl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IsisShRepEl) GetRepairElementNodeId() string {
	if m != nil {
		return m.RepairElementNodeId
	}
	return ""
}

func (m *IsisShRepEl) GetRepairIpv4Addr() string {
	if m != nil {
		return m.RepairIpv4Addr
	}
	return ""
}

func (m *IsisShRepEl) GetRepairIpv6Addr() string {
	if m != nil {
		return m.RepairIpv6Addr
	}
	return ""
}

func (m *IsisShRepEl) GetRepairLabel() uint32 {
	if m != nil {
		return m.RepairLabel
	}
	return 0
}

func (m *IsisShRepEl) GetRepairElementType() uint32 {
	if m != nil {
		return m.RepairElementType
	}
	return 0
}

func (m *IsisShRepEl) GetRepairStrictSpfLabel() uint32 {
	if m != nil {
		return m.RepairStrictSpfLabel
	}
	return 0
}

// FRR backup path
type IsisShIpv4FrrBackup struct {
	// Next hop neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId" json:"neighbor_id,omitempty"`
	// Interface to send the packet out of
	EgressInterface string `protobuf:"bytes,2,opt,name=egress_interface,json=egressInterface" json:"egress_interface,omitempty"`
	// Next hop neighbor's forwarding address
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Tunnel Interface to send the packet out of
	TunnelEgressInterface string `protobuf:"bytes,4,opt,name=tunnel_egress_interface,json=tunnelEgressInterface" json:"tunnel_egress_interface,omitempty"`
	// Next hop neighbor's SNPA
	NeighborSnpa *IsisSnpaType `protobuf:"bytes,5,opt,name=neighbor_snpa,json=neighborSnpa" json:"neighbor_snpa,omitempty"`
	// Remote LFA PQ Node's ID
	RemoteLfaSystemId string `protobuf:"bytes,6,opt,name=remote_lfa_system_id,json=remoteLfaSystemId" json:"remote_lfa_system_id,omitempty"`
	// Remote LFA Router ID
	RemoteLfaRouterId string `protobuf:"bytes,7,opt,name=remote_lfa_router_id,json=remoteLfaRouterId" json:"remote_lfa_router_id,omitempty"`
	// Remote LFA PQ Node's ID
	RemoteLfaSystemPid string `protobuf:"bytes,8,opt,name=remote_lfa_system_pid,json=remoteLfaSystemPid" json:"remote_lfa_system_pid,omitempty"`
	// Remote LFA Router ID
	RemoteLfaRouterPid string `protobuf:"bytes,9,opt,name=remote_lfa_router_pid,json=remoteLfaRouterPid" json:"remote_lfa_router_pid,omitempty"`
	// Distance to the network via this backup path
	TotalBackupDistance uint32 `protobuf:"varint,10,opt,name=total_backup_distance,json=totalBackupDistance" json:"total_backup_distance,omitempty"`
	// Segment routing sid value received from first hop
	SegmentRoutingSidValue uint32 `protobuf:"varint,11,opt,name=segment_routing_sid_value,json=segmentRoutingSidValue" json:"segment_routing_sid_value,omitempty"`
	// Number of SIDs in TI-LFA/rLFA
	NumSid uint32 `protobuf:"varint,12,opt,name=num_sid,json=numSid" json:"num_sid,omitempty"`
	// Segment routing sid values for TI-LFA/rLFA
	SegmentRoutingSidValues []uint32 `protobuf:"varint,13,rep,packed,name=segment_routing_sid_values,json=segmentRoutingSidValues" json:"segment_routing_sid_values,omitempty"`
	// Backup Repair List Size
	BackupRepairListSize uint32 `protobuf:"varint,14,opt,name=backup_repair_list_size,json=backupRepairListSize" json:"backup_repair_list_size,omitempty"`
	// Ti LFA computation which provided backup path
	TilfaComputation string `protobuf:"bytes,15,opt,name=tilfa_computation,json=tilfaComputation" json:"tilfa_computation,omitempty"`
	// Backup Repair List
	BackupRepairList []*IsisShRepEl `protobuf:"bytes,16,rep,name=backup_repair_list,json=backupRepairList" json:"backup_repair_list,omitempty"`
	// PrefixSourceNodeID
	PrefixSourceNodeId string `protobuf:"bytes,17,opt,name=prefix_source_node_id,json=prefixSourceNodeId" json:"prefix_source_node_id,omitempty"`
	// Is the backup path via downstream node?
	IsDownstream bool `protobuf:"varint,18,opt,name=is_downstream,json=isDownstream" json:"is_downstream,omitempty"`
	// Is the backup path line card disjoint with primary?
	IsLcDisjoint bool `protobuf:"varint,19,opt,name=is_lc_disjoint,json=isLcDisjoint" json:"is_lc_disjoint,omitempty"`
	// Is the backup path node protecting?
	IsNodeProtecting bool `protobuf:"varint,20,opt,name=is_node_protecting,json=isNodeProtecting" json:"is_node_protecting,omitempty"`
	// Is the backup path an ECMP to the network?
	IsPrimaryPath bool `protobuf:"varint,21,opt,name=is_primary_path,json=isPrimaryPath" json:"is_primary_path,omitempty"`
	// Is the backup path SRLG disjoint with primary?
	IsSrlgDisjoint bool `protobuf:"varint,22,opt,name=is_srlg_disjoint,json=isSrlgDisjoint" json:"is_srlg_disjoint,omitempty"`
	// Is the backup path via a Remote LFA?
	IsRemoteLfa bool `protobuf:"varint,23,opt,name=is_remote_lfa,json=isRemoteLfa" json:"is_remote_lfa,omitempty"`
	// Is the backup path via a TI-LFA?
	IsEpcfrrLfa bool `protobuf:"varint,24,opt,name=is_epcfrr_lfa,json=isEpcfrrLfa" json:"is_epcfrr_lfa,omitempty"`
	// Is the backup path TI-LFA strict SPF?
	IsStrictSpflfa bool `protobuf:"varint,25,opt,name=is_strict_spflfa,json=isStrictSpflfa" json:"is_strict_spflfa,omitempty"`
	// Is SR TE tunnel requested
	IsTunnelRequested bool `protobuf:"varint,26,opt,name=is_tunnel_requested,json=isTunnelRequested" json:"is_tunnel_requested,omitempty"`
	// Weight configured on the interface
	Weight uint32 `protobuf:"varint,27,opt,name=weight" json:"weight,omitempty"`
}

func (m *IsisShIpv4FrrBackup) Reset()                    { *m = IsisShIpv4FrrBackup{} }
func (m *IsisShIpv4FrrBackup) String() string            { return proto.CompactTextString(m) }
func (*IsisShIpv4FrrBackup) ProtoMessage()               {}
func (*IsisShIpv4FrrBackup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *IsisShIpv4FrrBackup) GetNeighborId() string {
	if m != nil {
		return m.NeighborId
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetEgressInterface() string {
	if m != nil {
		return m.EgressInterface
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetTunnelEgressInterface() string {
	if m != nil {
		return m.TunnelEgressInterface
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetNeighborSnpa() *IsisSnpaType {
	if m != nil {
		return m.NeighborSnpa
	}
	return nil
}

func (m *IsisShIpv4FrrBackup) GetRemoteLfaSystemId() string {
	if m != nil {
		return m.RemoteLfaSystemId
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetRemoteLfaRouterId() string {
	if m != nil {
		return m.RemoteLfaRouterId
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetRemoteLfaSystemPid() string {
	if m != nil {
		return m.RemoteLfaSystemPid
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetRemoteLfaRouterPid() string {
	if m != nil {
		return m.RemoteLfaRouterPid
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetTotalBackupDistance() uint32 {
	if m != nil {
		return m.TotalBackupDistance
	}
	return 0
}

func (m *IsisShIpv4FrrBackup) GetSegmentRoutingSidValue() uint32 {
	if m != nil {
		return m.SegmentRoutingSidValue
	}
	return 0
}

func (m *IsisShIpv4FrrBackup) GetNumSid() uint32 {
	if m != nil {
		return m.NumSid
	}
	return 0
}

func (m *IsisShIpv4FrrBackup) GetSegmentRoutingSidValues() []uint32 {
	if m != nil {
		return m.SegmentRoutingSidValues
	}
	return nil
}

func (m *IsisShIpv4FrrBackup) GetBackupRepairListSize() uint32 {
	if m != nil {
		return m.BackupRepairListSize
	}
	return 0
}

func (m *IsisShIpv4FrrBackup) GetTilfaComputation() string {
	if m != nil {
		return m.TilfaComputation
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetBackupRepairList() []*IsisShRepEl {
	if m != nil {
		return m.BackupRepairList
	}
	return nil
}

func (m *IsisShIpv4FrrBackup) GetPrefixSourceNodeId() string {
	if m != nil {
		return m.PrefixSourceNodeId
	}
	return ""
}

func (m *IsisShIpv4FrrBackup) GetIsDownstream() bool {
	if m != nil {
		return m.IsDownstream
	}
	return false
}

func (m *IsisShIpv4FrrBackup) GetIsLcDisjoint() bool {
	if m != nil {
		return m.IsLcDisjoint
	}
	return false
}

func (m *IsisShIpv4FrrBackup) GetIsNodeProtecting() bool {
	if m != nil {
		return m.IsNodeProtecting
	}
	return false
}

func (m *IsisShIpv4FrrBackup) GetIsPrimaryPath() bool {
	if m != nil {
		return m.IsPrimaryPath
	}
	return false
}

func (m *IsisShIpv4FrrBackup) GetIsSrlgDisjoint() bool {
	if m != nil {
		return m.IsSrlgDisjoint
	}
	return false
}

func (m *IsisShIpv4FrrBackup) GetIsRemoteLfa() bool {
	if m != nil {
		return m.IsRemoteLfa
	}
	return false
}

func (m *IsisShIpv4FrrBackup) GetIsEpcfrrLfa() bool {
	if m != nil {
		return m.IsEpcfrrLfa
	}
	return false
}

func (m *IsisShIpv4FrrBackup) GetIsStrictSpflfa() bool {
	if m != nil {
		return m.IsStrictSpflfa
	}
	return false
}

func (m *IsisShIpv4FrrBackup) GetIsTunnelRequested() bool {
	if m != nil {
		return m.IsTunnelRequested
	}
	return false
}

func (m *IsisShIpv4FrrBackup) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

// IPv4 path to a destination
type IsisShIpv4Path struct {
	// Next hop neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId" json:"neighbor_id,omitempty"`
	// Interface to send the packet out of
	EgressInterface string `protobuf:"bytes,2,opt,name=egress_interface,json=egressInterface" json:"egress_interface,omitempty"`
	// Next hop neighbor's forwarding address
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Next hop neighbor's SNPA
	NeighborSnpa *IsisSnpaType `protobuf:"bytes,4,opt,name=neighbor_snpa,json=neighborSnpa" json:"neighbor_snpa,omitempty"`
	// Tag associated with the path
	Tag uint32 `protobuf:"varint,5,opt,name=tag" json:"tag,omitempty"`
	// FRR backup for this path
	FrrBackup *IsisShIpv4FrrBackup `protobuf:"bytes,6,opt,name=frr_backup,json=frrBackup" json:"frr_backup,omitempty"`
	// Uloop Explicit List
	UloopExplicitList []*IsisShRepEl `protobuf:"bytes,7,rep,name=uloop_explicit_list,json=uloopExplicitList" json:"uloop_explicit_list,omitempty"`
	// Explicit path tunnel interface
	TunnelInterface string `protobuf:"bytes,8,opt,name=tunnel_interface,json=tunnelInterface" json:"tunnel_interface,omitempty"`
	// Segment routing sid value received from first hop
	SegmentRoutingSidValue uint32 `protobuf:"varint,9,opt,name=segment_routing_sid_value,json=segmentRoutingSidValue" json:"segment_routing_sid_value,omitempty"`
	// Weight configured on the interface
	Weight uint32 `protobuf:"varint,10,opt,name=weight" json:"weight,omitempty"`
	// Is path via a TE tunnel
	IsTeTunnelInterface bool `protobuf:"varint,11,opt,name=is_te_tunnel_interface,json=isTeTunnelInterface" json:"is_te_tunnel_interface,omitempty"`
	// Is path via an SR-exclude TE tunnel
	IsSrExcludeTunnelInterface bool `protobuf:"varint,12,opt,name=is_sr_exclude_tunnel_interface,json=isSrExcludeTunnelInterface" json:"is_sr_exclude_tunnel_interface,omitempty"`
}

func (m *IsisShIpv4Path) Reset()                    { *m = IsisShIpv4Path{} }
func (m *IsisShIpv4Path) String() string            { return proto.CompactTextString(m) }
func (*IsisShIpv4Path) ProtoMessage()               {}
func (*IsisShIpv4Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *IsisShIpv4Path) GetNeighborId() string {
	if m != nil {
		return m.NeighborId
	}
	return ""
}

func (m *IsisShIpv4Path) GetEgressInterface() string {
	if m != nil {
		return m.EgressInterface
	}
	return ""
}

func (m *IsisShIpv4Path) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *IsisShIpv4Path) GetNeighborSnpa() *IsisSnpaType {
	if m != nil {
		return m.NeighborSnpa
	}
	return nil
}

func (m *IsisShIpv4Path) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *IsisShIpv4Path) GetFrrBackup() *IsisShIpv4FrrBackup {
	if m != nil {
		return m.FrrBackup
	}
	return nil
}

func (m *IsisShIpv4Path) GetUloopExplicitList() []*IsisShRepEl {
	if m != nil {
		return m.UloopExplicitList
	}
	return nil
}

func (m *IsisShIpv4Path) GetTunnelInterface() string {
	if m != nil {
		return m.TunnelInterface
	}
	return ""
}

func (m *IsisShIpv4Path) GetSegmentRoutingSidValue() uint32 {
	if m != nil {
		return m.SegmentRoutingSidValue
	}
	return 0
}

func (m *IsisShIpv4Path) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *IsisShIpv4Path) GetIsTeTunnelInterface() bool {
	if m != nil {
		return m.IsTeTunnelInterface
	}
	return false
}

func (m *IsisShIpv4Path) GetIsSrExcludeTunnelInterface() bool {
	if m != nil {
		return m.IsSrExcludeTunnelInterface
	}
	return false
}

// IPv4 path to a destination
type IsisShIpv4UcmpPath struct {
	// Next hop neighbor ID
	NeighborId string `protobuf:"bytes,1,opt,name=neighbor_id,json=neighborId" json:"neighbor_id,omitempty"`
	// Interface to send the packet out of
	EgressInterface string `protobuf:"bytes,2,opt,name=egress_interface,json=egressInterface" json:"egress_interface,omitempty"`
	// Next hop neighbor's forwarding address
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Next hop neighbor's SNPA
	NeighborSnpa *IsisSnpaType `protobuf:"bytes,4,opt,name=neighbor_snpa,json=neighborSnpa" json:"neighbor_snpa,omitempty"`
	// Tag associated with the path
	Tag uint32 `protobuf:"varint,5,opt,name=tag" json:"tag,omitempty"`
	// Distance to the network via this UCMP next hop
	TotalUcmpDistance uint32 `protobuf:"varint,6,opt,name=total_ucmp_distance,json=totalUcmpDistance" json:"total_ucmp_distance,omitempty"`
	// FRR backup for this path
	FrrBackup *IsisShIpv4FrrBackup `protobuf:"bytes,7,opt,name=frr_backup,json=frrBackup" json:"frr_backup,omitempty"`
	// Segment routing sid value received from first hop
	SegmentRoutingSidValue uint32 `protobuf:"varint,8,opt,name=segment_routing_sid_value,json=segmentRoutingSidValue" json:"segment_routing_sid_value,omitempty"`
	// Weight configured on the interface
	Weight uint32 `protobuf:"varint,9,opt,name=weight" json:"weight,omitempty"`
	// Is path via a TE tunnel
	IsTeTunnelInterface bool `protobuf:"varint,10,opt,name=is_te_tunnel_interface,json=isTeTunnelInterface" json:"is_te_tunnel_interface,omitempty"`
	// Is path via an SR-exclude TE tunnel
	IsSrExcludeTunnelInterface bool `protobuf:"varint,11,opt,name=is_sr_exclude_tunnel_interface,json=isSrExcludeTunnelInterface" json:"is_sr_exclude_tunnel_interface,omitempty"`
}

func (m *IsisShIpv4UcmpPath) Reset()                    { *m = IsisShIpv4UcmpPath{} }
func (m *IsisShIpv4UcmpPath) String() string            { return proto.CompactTextString(m) }
func (*IsisShIpv4UcmpPath) ProtoMessage()               {}
func (*IsisShIpv4UcmpPath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IsisShIpv4UcmpPath) GetNeighborId() string {
	if m != nil {
		return m.NeighborId
	}
	return ""
}

func (m *IsisShIpv4UcmpPath) GetEgressInterface() string {
	if m != nil {
		return m.EgressInterface
	}
	return ""
}

func (m *IsisShIpv4UcmpPath) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *IsisShIpv4UcmpPath) GetNeighborSnpa() *IsisSnpaType {
	if m != nil {
		return m.NeighborSnpa
	}
	return nil
}

func (m *IsisShIpv4UcmpPath) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *IsisShIpv4UcmpPath) GetTotalUcmpDistance() uint32 {
	if m != nil {
		return m.TotalUcmpDistance
	}
	return 0
}

func (m *IsisShIpv4UcmpPath) GetFrrBackup() *IsisShIpv4FrrBackup {
	if m != nil {
		return m.FrrBackup
	}
	return nil
}

func (m *IsisShIpv4UcmpPath) GetSegmentRoutingSidValue() uint32 {
	if m != nil {
		return m.SegmentRoutingSidValue
	}
	return 0
}

func (m *IsisShIpv4UcmpPath) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *IsisShIpv4UcmpPath) GetIsTeTunnelInterface() bool {
	if m != nil {
		return m.IsTeTunnelInterface
	}
	return false
}

func (m *IsisShIpv4UcmpPath) GetIsSrExcludeTunnelInterface() bool {
	if m != nil {
		return m.IsSrExcludeTunnelInterface
	}
	return false
}

type IsisShRedistEntryProto struct {
	Protocol        string          `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	IsisInstanceId  *IsisStringType `protobuf:"bytes,2,opt,name=isis_instance_id,json=isisInstanceId" json:"isis_instance_id,omitempty"`
	OspfProcessId   *IsisStringType `protobuf:"bytes,3,opt,name=ospf_process_id,json=ospfProcessId" json:"ospf_process_id,omitempty"`
	OspFv3ProcessId *IsisStringType `protobuf:"bytes,4,opt,name=osp_fv3_process_id,json=ospFv3ProcessId" json:"osp_fv3_process_id,omitempty"`
	BgpAsNumber     *IsisStringType `protobuf:"bytes,5,opt,name=bgp_as_number,json=bgpAsNumber" json:"bgp_as_number,omitempty"`
	EigrpAsNumber   *IsisStringType `protobuf:"bytes,6,opt,name=eigrp_as_number,json=eigrpAsNumber" json:"eigrp_as_number,omitempty"`
	ApplicationName *IsisStringType `protobuf:"bytes,7,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
}

func (m *IsisShRedistEntryProto) Reset()                    { *m = IsisShRedistEntryProto{} }
func (m *IsisShRedistEntryProto) String() string            { return proto.CompactTextString(m) }
func (*IsisShRedistEntryProto) ProtoMessage()               {}
func (*IsisShRedistEntryProto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IsisShRedistEntryProto) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *IsisShRedistEntryProto) GetIsisInstanceId() *IsisStringType {
	if m != nil {
		return m.IsisInstanceId
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetOspfProcessId() *IsisStringType {
	if m != nil {
		return m.OspfProcessId
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetOspFv3ProcessId() *IsisStringType {
	if m != nil {
		return m.OspFv3ProcessId
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetBgpAsNumber() *IsisStringType {
	if m != nil {
		return m.BgpAsNumber
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetEigrpAsNumber() *IsisStringType {
	if m != nil {
		return m.EigrpAsNumber
	}
	return nil
}

func (m *IsisShRedistEntryProto) GetApplicationName() *IsisStringType {
	if m != nil {
		return m.ApplicationName
	}
	return nil
}

// Details of an IS-IS directly connected prefix
type IsisShRouteConnDetails struct {
	// Interfaces
	Interfaces []*IsisShInterfaceName `protobuf:"bytes,1,rep,name=interfaces" json:"interfaces,omitempty"`
}

func (m *IsisShRouteConnDetails) Reset()                    { *m = IsisShRouteConnDetails{} }
func (m *IsisShRouteConnDetails) String() string            { return proto.CompactTextString(m) }
func (*IsisShRouteConnDetails) ProtoMessage()               {}
func (*IsisShRouteConnDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IsisShRouteConnDetails) GetInterfaces() []*IsisShInterfaceName {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

// Status of an IS-IS directly connected prefix
type IsisShRouteConnStatus struct {
	IsValid string `protobuf:"bytes,1,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	// Details of the directly connected prefix
	ConnectedDetails *IsisShRouteConnDetails `protobuf:"bytes,2,opt,name=connected_details,json=connectedDetails" json:"connected_details,omitempty"`
}

func (m *IsisShRouteConnStatus) Reset()                    { *m = IsisShRouteConnStatus{} }
func (m *IsisShRouteConnStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShRouteConnStatus) ProtoMessage()               {}
func (*IsisShRouteConnStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IsisShRouteConnStatus) GetIsValid() string {
	if m != nil {
		return m.IsValid
	}
	return ""
}

func (m *IsisShRouteConnStatus) GetConnectedDetails() *IsisShRouteConnDetails {
	if m != nil {
		return m.ConnectedDetails
	}
	return nil
}

type IsisShRouteRedistLevelDetails struct {
	Level string                  `protobuf:"bytes,1,opt,name=level" json:"level,omitempty"`
	Owner *IsisShRedistEntryProto `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
}

func (m *IsisShRouteRedistLevelDetails) Reset()                    { *m = IsisShRouteRedistLevelDetails{} }
func (m *IsisShRouteRedistLevelDetails) String() string            { return proto.CompactTextString(m) }
func (*IsisShRouteRedistLevelDetails) ProtoMessage()               {}
func (*IsisShRouteRedistLevelDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IsisShRouteRedistLevelDetails) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShRouteRedistLevelDetails) GetOwner() *IsisShRedistEntryProto {
	if m != nil {
		return m.Owner
	}
	return nil
}

type IsisShRouteRedistDetails struct {
	Value []*IsisShRouteRedistLevelDetails `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *IsisShRouteRedistDetails) Reset()                    { *m = IsisShRouteRedistDetails{} }
func (m *IsisShRouteRedistDetails) String() string            { return proto.CompactTextString(m) }
func (*IsisShRouteRedistDetails) ProtoMessage()               {}
func (*IsisShRouteRedistDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IsisShRouteRedistDetails) GetValue() []*IsisShRouteRedistLevelDetails {
	if m != nil {
		return m.Value
	}
	return nil
}

// Status of redistributed routes to a prefix
type IsisShRouteRedistStatus struct {
	IsValid string `protobuf:"bytes,1,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	// Per level details of the redistributed route
	RedistributionDetails *IsisShRouteRedistDetails `protobuf:"bytes,2,opt,name=redistribution_details,json=redistributionDetails" json:"redistribution_details,omitempty"`
}

func (m *IsisShRouteRedistStatus) Reset()                    { *m = IsisShRouteRedistStatus{} }
func (m *IsisShRouteRedistStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShRouteRedistStatus) ProtoMessage()               {}
func (*IsisShRouteRedistStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *IsisShRouteRedistStatus) GetIsValid() string {
	if m != nil {
		return m.IsValid
	}
	return ""
}

func (m *IsisShRouteRedistStatus) GetRedistributionDetails() *IsisShRouteRedistDetails {
	if m != nil {
		return m.RedistributionDetails
	}
	return nil
}

// Source of a native route
type IsisShIpv4RouteNativeSource struct {
	// ID of the LSP advertising the prefix
	SourceLspId string `protobuf:"bytes,1,opt,name=source_lsp_id,json=sourceLspId" json:"source_lsp_id,omitempty"`
	// Source address of the IS advertising the prefix
	SourceAddress string `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
	// Tags associated with the prefix item
	Tags []uint32 `protobuf:"varint,3,rep,packed,name=tags" json:"tags,omitempty"`
	// Nodal SIDs with the prefix item
	NodalSids []*IsisNodalSidType `protobuf:"bytes,4,rep,name=nodal_sids,json=nodalSids" json:"nodal_sids,omitempty"`
}

func (m *IsisShIpv4RouteNativeSource) Reset()                    { *m = IsisShIpv4RouteNativeSource{} }
func (m *IsisShIpv4RouteNativeSource) String() string            { return proto.CompactTextString(m) }
func (*IsisShIpv4RouteNativeSource) ProtoMessage()               {}
func (*IsisShIpv4RouteNativeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *IsisShIpv4RouteNativeSource) GetSourceLspId() string {
	if m != nil {
		return m.SourceLspId
	}
	return ""
}

func (m *IsisShIpv4RouteNativeSource) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

func (m *IsisShIpv4RouteNativeSource) GetTags() []uint32 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *IsisShIpv4RouteNativeSource) GetNodalSids() []*IsisNodalSidType {
	if m != nil {
		return m.NodalSids
	}
	return nil
}

// Paths and sources for a native route at a particular preference
type IsisShIpv4RouteNativePreference struct {
	// Origin of route
	Origin string `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
	// Distance to network
	Metric uint32 `protobuf:"varint,2,opt,name=metric" json:"metric,omitempty"`
	// Multicast-intact distance to network
	MulticastMetric uint32 `protobuf:"varint,3,opt,name=multicast_metric,json=multicastMetric" json:"multicast_metric,omitempty"`
	// Is the metric an external metric?
	IsExternalMetric bool `protobuf:"varint,4,opt,name=is_external_metric,json=isExternalMetric" json:"is_external_metric,omitempty"`
	// Administrative Distance
	AdministrativeDistance uint32 `protobuf:"varint,5,opt,name=administrative_distance,json=administrativeDistance" json:"administrative_distance,omitempty"`
	// First hops toward the prefix
	Paths []*IsisShIpv4Path `protobuf:"bytes,6,rep,name=paths" json:"paths,omitempty"`
	// UCMP first hops toward the prefix
	UcmpNextHops []*IsisShIpv4UcmpPath `protobuf:"bytes,7,rep,name=ucmp_next_hops,json=ucmpNextHops" json:"ucmp_next_hops,omitempty"`
	// Multicast intact first hops toward the prefix
	MulticastPaths []*IsisShIpv4Path `protobuf:"bytes,8,rep,name=multicast_paths,json=multicastPaths" json:"multicast_paths,omitempty"`
	// SR-TE native first hops toward the prefix
	SRtePaths []*IsisShIpv4Path `protobuf:"bytes,9,rep,name=s_rte_paths,json=sRtePaths" json:"s_rte_paths,omitempty"`
	// SR microloop avoidance paths
	ExplicitPaths []*IsisShIpv4Path `protobuf:"bytes,10,rep,name=explicit_paths,json=explicitPaths" json:"explicit_paths,omitempty"`
	// Sources advertising the prefix
	Sources []*IsisShIpv4RouteNativeSource `protobuf:"bytes,11,rep,name=sources" json:"sources,omitempty"`
	// Multicast-intact sources advertising the prefix
	MulticastSources []*IsisShIpv4RouteNativeSource `protobuf:"bytes,12,rep,name=multicast_sources,json=multicastSources" json:"multicast_sources,omitempty"`
}

func (m *IsisShIpv4RouteNativePreference) Reset()         { *m = IsisShIpv4RouteNativePreference{} }
func (m *IsisShIpv4RouteNativePreference) String() string { return proto.CompactTextString(m) }
func (*IsisShIpv4RouteNativePreference) ProtoMessage()    {}
func (*IsisShIpv4RouteNativePreference) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *IsisShIpv4RouteNativePreference) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *IsisShIpv4RouteNativePreference) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *IsisShIpv4RouteNativePreference) GetMulticastMetric() uint32 {
	if m != nil {
		return m.MulticastMetric
	}
	return 0
}

func (m *IsisShIpv4RouteNativePreference) GetIsExternalMetric() bool {
	if m != nil {
		return m.IsExternalMetric
	}
	return false
}

func (m *IsisShIpv4RouteNativePreference) GetAdministrativeDistance() uint32 {
	if m != nil {
		return m.AdministrativeDistance
	}
	return 0
}

func (m *IsisShIpv4RouteNativePreference) GetPaths() []*IsisShIpv4Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

func (m *IsisShIpv4RouteNativePreference) GetUcmpNextHops() []*IsisShIpv4UcmpPath {
	if m != nil {
		return m.UcmpNextHops
	}
	return nil
}

func (m *IsisShIpv4RouteNativePreference) GetMulticastPaths() []*IsisShIpv4Path {
	if m != nil {
		return m.MulticastPaths
	}
	return nil
}

func (m *IsisShIpv4RouteNativePreference) GetSRtePaths() []*IsisShIpv4Path {
	if m != nil {
		return m.SRtePaths
	}
	return nil
}

func (m *IsisShIpv4RouteNativePreference) GetExplicitPaths() []*IsisShIpv4Path {
	if m != nil {
		return m.ExplicitPaths
	}
	return nil
}

func (m *IsisShIpv4RouteNativePreference) GetSources() []*IsisShIpv4RouteNativeSource {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *IsisShIpv4RouteNativePreference) GetMulticastSources() []*IsisShIpv4RouteNativeSource {
	if m != nil {
		return m.MulticastSources
	}
	return nil
}

// Details of a native IS-IS route to a prefix
type IsisShIpv4RouteNativeDetails struct {
	// Primary paths to prefix
	Primary *IsisShIpv4RouteNativePreference `protobuf:"bytes,1,opt,name=primary" json:"primary,omitempty"`
	// Backup paths to prefix
	Backups []*IsisShIpv4RouteNativePreference `protobuf:"bytes,2,rep,name=backups" json:"backups,omitempty"`
	// Relative importance of the prefix
	Priority string `protobuf:"bytes,3,opt,name=priority" json:"priority,omitempty"`
}

func (m *IsisShIpv4RouteNativeDetails) Reset()                    { *m = IsisShIpv4RouteNativeDetails{} }
func (m *IsisShIpv4RouteNativeDetails) String() string            { return proto.CompactTextString(m) }
func (*IsisShIpv4RouteNativeDetails) ProtoMessage()               {}
func (*IsisShIpv4RouteNativeDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *IsisShIpv4RouteNativeDetails) GetPrimary() *IsisShIpv4RouteNativePreference {
	if m != nil {
		return m.Primary
	}
	return nil
}

func (m *IsisShIpv4RouteNativeDetails) GetBackups() []*IsisShIpv4RouteNativePreference {
	if m != nil {
		return m.Backups
	}
	return nil
}

func (m *IsisShIpv4RouteNativeDetails) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

// Status of a native IS-IS route to a prefix
type IsisShIpv4RouteNativeStatus struct {
	IsValid string `protobuf:"bytes,1,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	// Details of the native route
	NativeDetails *IsisShIpv4RouteNativeDetails `protobuf:"bytes,2,opt,name=native_details,json=nativeDetails" json:"native_details,omitempty"`
}

func (m *IsisShIpv4RouteNativeStatus) Reset()                    { *m = IsisShIpv4RouteNativeStatus{} }
func (m *IsisShIpv4RouteNativeStatus) String() string            { return proto.CompactTextString(m) }
func (*IsisShIpv4RouteNativeStatus) ProtoMessage()               {}
func (*IsisShIpv4RouteNativeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *IsisShIpv4RouteNativeStatus) GetIsValid() string {
	if m != nil {
		return m.IsValid
	}
	return ""
}

func (m *IsisShIpv4RouteNativeStatus) GetNativeDetails() *IsisShIpv4RouteNativeDetails {
	if m != nil {
		return m.NativeDetails
	}
	return nil
}

// Summarization status
type IsisShIpv4RouteSummarizationStatus struct {
	IsValid string `protobuf:"bytes,1,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	// Summarizing Prefix
	SummaryPrefix *IsisIpv4PrefixType `protobuf:"bytes,2,opt,name=summary_prefix,json=summaryPrefix" json:"summary_prefix,omitempty"`
}

func (m *IsisShIpv4RouteSummarizationStatus) Reset()         { *m = IsisShIpv4RouteSummarizationStatus{} }
func (m *IsisShIpv4RouteSummarizationStatus) String() string { return proto.CompactTextString(m) }
func (*IsisShIpv4RouteSummarizationStatus) ProtoMessage()    {}
func (*IsisShIpv4RouteSummarizationStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

func (m *IsisShIpv4RouteSummarizationStatus) GetIsValid() string {
	if m != nil {
		return m.IsValid
	}
	return ""
}

func (m *IsisShIpv4RouteSummarizationStatus) GetSummaryPrefix() *IsisIpv4PrefixType {
	if m != nil {
		return m.SummaryPrefix
	}
	return nil
}

// How a prefix is advertised in a particular level
type IsisShIpv4RouteAdv struct {
	// Level in which the prefix is advertised
	Level string `protobuf:"bytes,1,opt,name=level" json:"level,omitempty"`
	// The origin of the advertisement
	AdvertisingOrigin string `protobuf:"bytes,2,opt,name=advertising_origin,json=advertisingOrigin" json:"advertising_origin,omitempty"`
	// Metric with which the prefix is advertised
	Metric uint32 `protobuf:"varint,3,opt,name=metric" json:"metric,omitempty"`
	// Has the prefix been propagated from another level?
	IsPropagated bool `protobuf:"varint,4,opt,name=is_propagated,json=isPropagated" json:"is_propagated,omitempty"`
	// Is the metric an external metric?
	IsExternalMetric bool `protobuf:"varint,5,opt,name=is_external_metric,json=isExternalMetric" json:"is_external_metric,omitempty"`
	// Status of summarization for the prefix
	SummarizationStatus *IsisShIpv4RouteSummarizationStatus `protobuf:"bytes,6,opt,name=summarization_status,json=summarizationStatus" json:"summarization_status,omitempty"`
	// Is the prefix external to the IS-IS domain?
	IsExternalReachability bool `protobuf:"varint,7,opt,name=is_external_reachability,json=isExternalReachability" json:"is_external_reachability,omitempty"`
	// Is the up/down bit set?
	IsInterarea bool `protobuf:"varint,8,opt,name=is_interarea,json=isInterarea" json:"is_interarea,omitempty"`
	// Tags associated with the prefix
	Tags []uint32 `protobuf:"varint,9,rep,packed,name=tags" json:"tags,omitempty"`
	// Nodal SIDs with the prefix item
	NodalSids []*IsisNodalSidType `protobuf:"bytes,10,rep,name=nodal_sids,json=nodalSids" json:"nodal_sids,omitempty"`
}

func (m *IsisShIpv4RouteAdv) Reset()                    { *m = IsisShIpv4RouteAdv{} }
func (m *IsisShIpv4RouteAdv) String() string            { return proto.CompactTextString(m) }
func (*IsisShIpv4RouteAdv) ProtoMessage()               {}
func (*IsisShIpv4RouteAdv) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *IsisShIpv4RouteAdv) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *IsisShIpv4RouteAdv) GetAdvertisingOrigin() string {
	if m != nil {
		return m.AdvertisingOrigin
	}
	return ""
}

func (m *IsisShIpv4RouteAdv) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *IsisShIpv4RouteAdv) GetIsPropagated() bool {
	if m != nil {
		return m.IsPropagated
	}
	return false
}

func (m *IsisShIpv4RouteAdv) GetIsExternalMetric() bool {
	if m != nil {
		return m.IsExternalMetric
	}
	return false
}

func (m *IsisShIpv4RouteAdv) GetSummarizationStatus() *IsisShIpv4RouteSummarizationStatus {
	if m != nil {
		return m.SummarizationStatus
	}
	return nil
}

func (m *IsisShIpv4RouteAdv) GetIsExternalReachability() bool {
	if m != nil {
		return m.IsExternalReachability
	}
	return false
}

func (m *IsisShIpv4RouteAdv) GetIsInterarea() bool {
	if m != nil {
		return m.IsInterarea
	}
	return false
}

func (m *IsisShIpv4RouteAdv) GetTags() []uint32 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *IsisShIpv4RouteAdv) GetNodalSids() []*IsisNodalSidType {
	if m != nil {
		return m.NodalSids
	}
	return nil
}

func init() {
	proto.RegisterType((*IsisShIpv4Route_KEYS)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_route_KEYS")
	proto.RegisterType((*IsisShIpv4Route)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_route")
	proto.RegisterType((*IsisNodalSidType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_nodal_sid_type")
	proto.RegisterType((*IsisStringType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_string_type")
	proto.RegisterType((*IsisIpv4PrefixType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_ipv4_prefix_type")
	proto.RegisterType((*IsisSnpaType)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_snpa_type")
	proto.RegisterType((*IsisShInterfaceName)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_interface_name")
	proto.RegisterType((*IsisShRepEl)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_rep_el")
	proto.RegisterType((*IsisShIpv4FrrBackup)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_frr_backup")
	proto.RegisterType((*IsisShIpv4Path)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_path")
	proto.RegisterType((*IsisShIpv4UcmpPath)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_ucmp_path")
	proto.RegisterType((*IsisShRedistEntryProto)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_redist_entry_proto")
	proto.RegisterType((*IsisShRouteConnDetails)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_route_conn_details")
	proto.RegisterType((*IsisShRouteConnStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_route_conn_status")
	proto.RegisterType((*IsisShRouteRedistLevelDetails)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_route_redist_level_details")
	proto.RegisterType((*IsisShRouteRedistDetails)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_route_redist_details")
	proto.RegisterType((*IsisShRouteRedistStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_route_redist_status")
	proto.RegisterType((*IsisShIpv4RouteNativeSource)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_route_native_source")
	proto.RegisterType((*IsisShIpv4RouteNativePreference)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_route_native_preference")
	proto.RegisterType((*IsisShIpv4RouteNativeDetails)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_route_native_details")
	proto.RegisterType((*IsisShIpv4RouteNativeStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_route_native_status")
	proto.RegisterType((*IsisShIpv4RouteSummarizationStatus)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_route_summarization_status")
	proto.RegisterType((*IsisShIpv4RouteAdv)(nil), "cisco_ios_xr_clns_isis_oper.isis.instances.instance.topologies.topology.ipv4_routes.ipv4_route.isis_sh_ipv4_route_adv")
}

func init() { proto.RegisterFile("isis_sh_ipv4_route.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x4b, 0x8f, 0x63, 0x39,
	0xf5, 0x97, 0xbb, 0x1e, 0xa9, 0x9c, 0x24, 0xf5, 0x70, 0xbd, 0x6e, 0xd7, 0xcc, 0xff, 0x4f, 0x75,
	0x66, 0x18, 0x6a, 0x04, 0x14, 0xa2, 0xba, 0xa7, 0x01, 0xb1, 0xea, 0xa1, 0x0b, 0x11, 0x51, 0x34,
	0xa5, 0x9b, 0x66, 0x24, 0x36, 0x5c, 0xb9, 0x72, 0x9d, 0x94, 0xe1, 0xe6, 0xde, 0x3b, 0xb6, 0x93,
	0xae, 0x6a, 0x58, 0xf0, 0x92, 0x66, 0xc3, 0x82, 0x97, 0x46, 0x03, 0x33, 0xc0, 0x02, 0x34, 0x08,
	0x09, 0xcd, 0x06, 0xb1, 0x00, 0xbe, 0x02, 0x2c, 0x90, 0xf8, 0x00, 0x23, 0xcd, 0x8a, 0x0d, 0x9f,
	0x01, 0xf9, 0xd8, 0xbe, 0x37, 0x49, 0x3d, 0xba, 0x25, 0x44, 0xd2, 0x0b, 0x76, 0xd7, 0xe7, 0x1c,
	0xdb, 0x3f, 0x1f, 0x1f, 0xff, 0x7c, 0x7c, 0x12, 0x08, 0x84, 0x12, 0x2a, 0x52, 0xa7, 0x91, 0xc8,
	0x87, 0x77, 0x22, 0x99, 0x0d, 0x34, 0xdf, 0xcf, 0x65, 0xa6, 0x33, 0xfa, 0xb5, 0x8e, 0x50, 0x9d,
	0x2c, 0x12, 0x99, 0x8a, 0xce, 0x64, 0xd4, 0x49, 0x52, 0x15, 0xa1, 0x6d, 0x96, 0x73, 0xb9, 0x6f,
	0xbe, 0xf6, 0x45, 0xaa, 0x34, 0x4b, 0x3b, 0xbc, 0xfc, 0xda, 0xd7, 0x59, 0x9e, 0x25, 0x59, 0x4f,
	0x70, 0xe5, 0x3f, 0xcf, 0xf7, 0xcb, 0x91, 0xd5, 0xc8, 0x77, 0xf3, 0x1f, 0x04, 0xb6, 0x2f, 0x4e,
	0x1e, 0x7d, 0xf1, 0xf0, 0xab, 0x6d, 0xfa, 0x02, 0x34, 0xfc, 0x90, 0x51, 0xca, 0xfa, 0x3c, 0x20,
	0xbb, 0x64, 0xaf, 0x1a, 0xd6, 0xbd, 0xf0, 0x01, 0xeb, 0x73, 0xba, 0x0d, 0x15, 0xd6, 0xb5, 0xea,
	0x1b, 0xa8, 0x5e, 0x64, 0x5d, 0x54, 0xdc, 0x84, 0x25, 0xe5, 0x35, 0x73, 0xa8, 0xa9, 0x28, 0xa7,
	0x7a, 0x01, 0x1a, 0x1e, 0x97, 0xd5, 0xcf, 0xdb, 0x81, 0xbd, 0x10, 0x8d, 0xb6, 0x60, 0x31, 0x97,
	0xbc, 0x2b, 0xce, 0x82, 0x05, 0x3b, 0xae, 0x6d, 0x99, 0xce, 0xf6, 0x2b, 0x4a, 0x78, 0xda, 0xd3,
	0xa7, 0xc1, 0xe2, 0x2e, 0xd9, 0x6b, 0x84, 0x75, 0x2b, 0x3c, 0x42, 0x59, 0xf3, 0xef, 0x0b, 0x40,
	0x2f, 0x2e, 0x8b, 0xfe, 0x86, 0xc0, 0x6a, 0x27, 0x4b, 0x53, 0xde, 0xd1, 0x3c, 0x8e, 0x94, 0x66,
	0x7a, 0xa0, 0x82, 0x83, 0x5d, 0xb2, 0x57, 0x3b, 0x38, 0xdf, 0xff, 0xef, 0x7a, 0x7a, 0xdf, 0xc3,
	0xb1, 0x0e, 0x36, 0x28, 0x1c, 0x80, 0x70, 0xa5, 0x80, 0xd4, 0x46, 0x01, 0x7d, 0x8f, 0xc0, 0x86,
	0xe4, 0xb1, 0x50, 0x5a, 0x8a, 0x93, 0xc1, 0x08, 0xd4, 0xdb, 0x08, 0xf5, 0x9b, 0xd3, 0x85, 0x6a,
	0x91, 0x78, 0xb0, 0xeb, 0x63, 0xc0, 0x1c, 0xe0, 0x77, 0x09, 0x34, 0x52, 0xa6, 0xc5, 0x90, 0x7b,
	0xa4, 0x77, 0x10, 0xe9, 0xb7, 0xc9, 0xb4, 0xa0, 0x8e, 0xc4, 0xee, 0x18, 0x90, 0xb0, 0x6e, 0x9b,
	0x0e, 0xe8, 0x9f, 0x08, 0xfc, 0x5f, 0xce, 0x65, 0x94, 0xf0, 0x21, 0x4f, 0x22, 0x16, 0x0f, 0xb9,
	0xd4, 0x42, 0x89, 0xb4, 0x17, 0xc5, 0x5c, 0x33, 0x91, 0xa8, 0xe0, 0x95, 0xdd, 0xb9, 0xbd, 0xda,
	0xc1, 0x70, 0x06, 0xb8, 0x59, 0x3c, 0x0c, 0x77, 0x72, 0x2e, 0x8f, 0x0c, 0xb6, 0x7b, 0x25, 0xb4,
	0xfb, 0x16, 0x99, 0x39, 0xaa, 0xeb, 0xd8, 0x2d, 0xcd, 0x62, 0x96, 0x44, 0x4a, 0xc4, 0x91, 0x3e,
	0xcf, 0x39, 0x7d, 0x0e, 0xaa, 0xe6, 0x7b, 0xc8, 0x92, 0x81, 0x3d, 0xa2, 0x8d, 0x70, 0x49, 0x89,
	0xf8, 0x35, 0xd3, 0xa6, 0x1b, 0xb0, 0x20, 0xbb, 0x09, 0xeb, 0xe1, 0xe1, 0x6c, 0x84, 0xb6, 0x61,
	0xa4, 0x29, 0x4a, 0xe7, 0xac, 0x34, 0xf5, 0xd2, 0x1c, 0xa5, 0xf3, 0x56, 0x9a, 0x7b, 0x29, 0x47,
	0xe9, 0x82, 0x95, 0x72, 0x2f, 0x1d, 0xa2, 0xd4, 0x9e, 0x3e, 0xdb, 0x30, 0xd2, 0x04, 0xa5, 0x15,
	0x2b, 0xc5, 0x06, 0x7d, 0x1e, 0xaa, 0x2c, 0xe9, 0x65, 0x52, 0xe8, 0xd3, 0x7e, 0xb0, 0x84, 0x9a,
	0x52, 0xd0, 0xdc, 0x83, 0x55, 0xeb, 0x0c, 0x2d, 0xcd, 0x3e, 0xe0, 0x92, 0xcc, 0xe8, 0xc5, 0x72,
	0xaa, 0xa1, 0x6d, 0x34, 0x1f, 0xc2, 0x26, 0x5a, 0xa2, 0xcf, 0x1c, 0x07, 0xa0, 0x79, 0x49, 0x15,
	0xe4, 0x7a, 0xaa, 0xb8, 0x71, 0x09, 0x55, 0xbc, 0x04, 0xcb, 0x76, 0xfe, 0x34, 0x67, 0xd7, 0xcd,
	0xbe, 0x0f, 0x5b, 0xc5, 0xa6, 0xa5, 0x9a, 0xcb, 0x2e, 0x73, 0xb4, 0x78, 0x85, 0xfd, 0xaf, 0x6f,
	0xf8, 0x81, 0x4f, 0x23, 0xc9, 0xf3, 0x88, 0x27, 0xf4, 0x36, 0x6c, 0x49, 0x9e, 0x33, 0x21, 0x23,
	0x9e, 0xf0, 0x3e, 0x4f, 0xb5, 0xd9, 0x4a, 0x1e, 0x89, 0xd8, 0xf5, 0x5c, 0xb7, 0xda, 0x43, 0xab,
	0x7c, 0x90, 0xc5, 0xbc, 0x15, 0xd3, 0x3d, 0x58, 0x75, 0x9d, 0x70, 0xdd, 0x2c, 0x8e, 0xa5, 0x63,
	0xda, 0x65, 0x2b, 0x6f, 0xe5, 0xc3, 0x3b, 0xf7, 0xe2, 0x58, 0x8e, 0x5b, 0xde, 0xb5, 0x96, 0x73,
	0x13, 0x96, 0x77, 0xd1, 0xf2, 0x16, 0xd4, 0x9d, 0x65, 0xc2, 0x4e, 0x78, 0xe2, 0x36, 0xbc, 0x66,
	0x65, 0x47, 0x46, 0x44, 0xf7, 0x61, 0x7d, 0x02, 0xab, 0xf1, 0x8d, 0x0b, 0x82, 0xb5, 0x31, 0xa0,
	0x0f, 0x8d, 0xd3, 0x5e, 0x81, 0x6d, 0x67, 0x6f, 0x36, 0xb2, 0xa3, 0x23, 0x95, 0x77, 0xdd, 0xe8,
	0x36, 0x44, 0x36, 0xac, 0xba, 0x8d, 0xda, 0x76, 0xde, 0xc5, 0x69, 0x9a, 0xef, 0xd6, 0x26, 0xee,
	0x9f, 0xae, 0x94, 0xd1, 0x09, 0xeb, 0x7c, 0x63, 0x90, 0xd3, 0x0f, 0x41, 0x2d, 0xe5, 0xa2, 0x77,
	0x7a, 0x92, 0xc9, 0xd2, 0x47, 0xe0, 0x45, 0xad, 0x98, 0xbe, 0x0c, 0xab, 0xbc, 0x27, 0xb9, 0x52,
	0xe5, 0x8e, 0x38, 0xd7, 0xac, 0x58, 0x79, 0xcb, 0x8b, 0x8d, 0x69, 0x31, 0x96, 0x71, 0x0c, 0x57,
	0xca, 0xf9, 0x66, 0xc5, 0xcb, 0xef, 0x59, 0x31, 0xbd, 0x0b, 0xdb, 0x7a, 0x90, 0xa6, 0x3c, 0x89,
	0x2e, 0x0c, 0x6e, 0xef, 0xa9, 0x4d, 0xab, 0x3e, 0x9c, 0x98, 0xe2, 0x27, 0x86, 0x04, 0xfd, 0x1c,
	0x26, 0x9a, 0xd0, 0x59, 0xb5, 0x83, 0x74, 0x3a, 0x5c, 0xe2, 0xc3, 0x37, 0xac, 0x7b, 0x10, 0xed,
	0x34, 0x67, 0xf4, 0x13, 0xe6, 0x2a, 0xe9, 0x67, 0x9a, 0x47, 0x49, 0x97, 0x45, 0xea, 0x5c, 0x69,
	0xde, 0x37, 0xde, 0x5c, 0xc4, 0xa5, 0xac, 0x59, 0xdd, 0x51, 0x97, 0xb5, 0x51, 0xd3, 0x8a, 0x27,
	0x3a, 0xe0, 0x0c, 0xe8, 0xfe, 0xca, 0x44, 0x87, 0x10, 0x35, 0xad, 0x98, 0x7e, 0x12, 0x36, 0x2f,
	0xce, 0x90, 0x8b, 0x18, 0x8f, 0x7a, 0x35, 0xa4, 0x13, 0x53, 0x1c, 0x8b, 0xc9, 0x2e, 0x6e, 0x0e,
	0xd3, 0xa5, 0x3a, 0xd1, 0xc5, 0x4e, 0x62, 0xba, 0x1c, 0xc0, 0xa6, 0xce, 0x34, 0x4b, 0x5c, 0x70,
	0x44, 0xe6, 0x12, 0x32, 0x8e, 0x0a, 0x00, 0xa3, 0x6b, 0x1d, 0x95, 0xaf, 0xa2, 0xee, 0xbe, 0x53,
	0xd1, 0xcf, 0xc0, 0x4d, 0xc5, 0x7b, 0x18, 0xbc, 0x66, 0x0e, 0x43, 0x2f, 0x25, 0x53, 0xd6, 0xb0,
	0xdf, 0x96, 0x33, 0x08, 0xad, 0xbe, 0xed, 0x79, 0x73, 0x1b, 0x2a, 0xe9, 0xa0, 0x6f, 0xcc, 0x83,
	0x3a, 0x1a, 0x2e, 0xa6, 0x83, 0x7e, 0x5b, 0xc4, 0xf4, 0xb3, 0xb0, 0x73, 0xe5, 0x98, 0x2a, 0x68,
	0xec, 0xce, 0xed, 0x35, 0xc2, 0xed, 0xcb, 0x07, 0x55, 0xe6, 0x90, 0x38, 0xf8, 0xfe, 0xf8, 0xe1,
	0xcd, 0x2a, 0x1e, 0xf3, 0x60, 0xd9, 0x1e, 0x12, 0xab, 0x0e, 0xed, 0x41, 0x14, 0x4a, 0xb7, 0xc5,
	0x63, 0x4e, 0x3f, 0x0a, 0x6b, 0x5a, 0x18, 0x4f, 0x75, 0xb2, 0x7e, 0x3e, 0xd0, 0x4c, 0x8b, 0x2c,
	0x0d, 0x56, 0xd0, 0x55, 0xab, 0xa8, 0xf8, 0x5c, 0x29, 0xa7, 0xef, 0x10, 0xa0, 0x17, 0x27, 0x09,
	0x56, 0xf1, 0x5e, 0x4b, 0xa7, 0x96, 0x3a, 0x20, 0xe3, 0x85, 0xab, 0x93, 0xeb, 0x31, 0x5b, 0xef,
	0x38, 0x59, 0x65, 0x03, 0x69, 0x28, 0xd4, 0x51, 0xe0, 0x9a, 0xdd, 0x7a, 0xab, 0x6c, 0xa3, 0xce,
	0x31, 0xa0, 0xc9, 0x43, 0x55, 0x14, 0x67, 0x8f, 0x52, 0xa5, 0x25, 0x67, 0xfd, 0x80, 0xee, 0x92,
	0xbd, 0xa5, 0xb0, 0x2e, 0xd4, 0xfd, 0x42, 0x46, 0x5f, 0x34, 0x6c, 0x1b, 0x25, 0x1d, 0x13, 0x18,
	0x5f, 0xcf, 0x44, 0xaa, 0x83, 0x75, 0x6f, 0x75, 0xd4, 0xb9, 0xef, 0x64, 0xf4, 0x63, 0x26, 0x2d,
	0xb4, 0x53, 0x9a, 0xfc, 0x9a, 0x77, 0xcc, 0xfe, 0x04, 0x1b, 0x68, 0xb9, 0x2a, 0x94, 0x99, 0xf0,
	0xb8, 0x90, 0xd3, 0x97, 0x60, 0x45, 0xa8, 0x28, 0x97, 0xa2, 0xcf, 0xe4, 0x79, 0x94, 0x33, 0x7d,
	0x1a, 0x6c, 0xa2, 0x69, 0x43, 0xa8, 0x63, 0x2b, 0x3d, 0x66, 0xfa, 0x94, 0xe2, 0x15, 0x16, 0x29,
	0x99, 0xf4, 0xca, 0xd9, 0xb7, 0xd0, 0x70, 0x59, 0xa8, 0xb6, 0x4c, 0x7a, 0xc5, 0xfc, 0x4d, 0x5c,
	0x4a, 0x19, 0xfb, 0xc1, 0x36, 0x9a, 0xd5, 0x84, 0x0a, 0x7d, 0xc8, 0x3b, 0x1b, 0x9e, 0x77, 0x0c,
	0x15, 0x1a, 0x9b, 0xc0, 0xdb, 0x1c, 0xa2, 0xcc, 0xd8, 0xb8, 0x19, 0x0b, 0xa6, 0x35, 0x66, 0x37,
	0x8b, 0x19, 0x3d, 0xc5, 0x26, 0x5d, 0x66, 0x78, 0x5c, 0xa8, 0xc8, 0x11, 0x9a, 0xe4, 0xaf, 0x0f,
	0xb8, 0xd2, 0x3c, 0x0e, 0x76, 0xd0, 0x78, 0x4d, 0xa8, 0x87, 0xa8, 0x09, 0xbd, 0xc2, 0xdc, 0xa5,
	0x8f, 0x0c, 0x7f, 0xe8, 0xe0, 0x39, 0x1b, 0xf7, 0xb6, 0xd5, 0xfc, 0x60, 0x11, 0xd6, 0xc6, 0x88,
	0xda, 0xb8, 0x63, 0x56, 0x14, 0x7d, 0x91, 0x6a, 0xe7, 0x9f, 0x01, 0xaa, 0x5d, 0x85, 0x39, 0x5d,
	0xe4, 0x49, 0xe6, 0x93, 0xbe, 0x49, 0x00, 0xca, 0x0b, 0x0d, 0x39, 0xb7, 0x76, 0xf0, 0x68, 0xaa,
	0xb9, 0x65, 0x39, 0x7d, 0x58, 0xed, 0x4a, 0x69, 0x19, 0x92, 0xfe, 0x92, 0xc0, 0xfa, 0x20, 0xc9,
	0xb2, 0x3c, 0xe2, 0x67, 0x79, 0x22, 0x3a, 0x42, 0x5b, 0x96, 0xa8, 0xcc, 0x84, 0x25, 0xd6, 0x10,
	0xca, 0xa1, 0x43, 0x82, 0x34, 0xf1, 0x32, 0xac, 0xba, 0x98, 0x2d, 0xe3, 0xc6, 0xde, 0x27, 0x2b,
	0x56, 0x5e, 0xc6, 0xcd, 0xb5, 0x2c, 0x5f, 0xbd, 0x96, 0xe5, 0xcb, 0x60, 0x87, 0xd1, 0x60, 0x37,
	0x89, 0x9a, 0x39, 0x34, 0x3c, 0xba, 0x80, 0xa1, 0x86, 0xe7, 0x66, 0x5d, 0xa8, 0x87, 0xfc, 0xe1,
	0x04, 0x8e, 0x57, 0xe1, 0xff, 0x91, 0x05, 0x22, 0x7e, 0xd6, 0x49, 0x06, 0xf1, 0x25, 0x9d, 0xeb,
	0xd8, 0x79, 0xc7, 0x70, 0xc2, 0xa1, 0xb5, 0x99, 0x18, 0xa3, 0xf9, 0xd7, 0x85, 0x91, 0x2c, 0xd3,
	0xf8, 0x6b, 0xd0, 0xe9, 0xe7, 0xff, 0x3b, 0x6a, 0x4f, 0x71, 0xd4, 0xf6, 0xc1, 0xa6, 0x00, 0xd6,
	0x63, 0x45, 0x76, 0x60, 0x73, 0xcf, 0x35, 0x54, 0x7d, 0xa5, 0xd3, 0x2f, 0x73, 0x83, 0x89, 0xa3,
	0x59, 0x79, 0x66, 0x8e, 0xe6, 0xb5, 0xe1, 0xbc, 0xf4, 0x94, 0xe1, 0x5c, 0x7d, 0xca, 0x70, 0x86,
	0xff, 0x24, 0x9c, 0x6b, 0x4f, 0x0c, 0xe7, 0xf7, 0x2b, 0xb0, 0x53, 0x9e, 0x75, 0x2c, 0x23, 0xf0,
	0x54, 0x9b, 0xbb, 0x14, 0x8b, 0x5b, 0x3b, 0xb0, 0x84, 0x1f, 0x9d, 0x2c, 0x71, 0xf1, 0x5c, 0xb4,
	0xe9, 0xcf, 0x89, 0x7b, 0x17, 0x16, 0x25, 0x28, 0x11, 0x63, 0x38, 0xd7, 0x0e, 0xf2, 0xe9, 0xec,
	0x52, 0xf9, 0x1e, 0x0d, 0xf1, 0x21, 0xd7, 0x72, 0x23, 0xb5, 0x62, 0xfa, 0x16, 0x81, 0x95, 0xcc,
	0x3c, 0x70, 0x72, 0x99, 0x75, 0xf0, 0xc4, 0xc5, 0x78, 0x7e, 0x66, 0x81, 0xad, 0x61, 0x80, 0x1c,
	0x5b, 0x1c, 0xad, 0x98, 0xfe, 0x82, 0x00, 0xcd, 0x54, 0x1e, 0x75, 0x87, 0xb7, 0x47, 0xd1, 0xcd,
	0xcf, 0x08, 0x9d, 0x71, 0xd3, 0xe7, 0x87, 0xb7, 0x4b, 0x7c, 0x3f, 0x25, 0xd0, 0x38, 0xe9, 0xe5,
	0x11, 0x53, 0x51, 0x3a, 0xe8, 0x9f, 0x70, 0xe9, 0x5e, 0x49, 0xd3, 0x87, 0x56, 0x3b, 0xe9, 0xe5,
	0xf7, 0xd4, 0x03, 0x04, 0x81, 0x3b, 0xca, 0x45, 0x4f, 0x8e, 0x02, 0x5b, 0x9c, 0xd5, 0x8e, 0x22,
	0x90, 0x02, 0xda, 0xdb, 0x04, 0x56, 0x59, 0x6e, 0xee, 0x46, 0x4c, 0xf0, 0x6d, 0xc5, 0xb4, 0x32,
	0xab, 0xfd, 0x1c, 0x41, 0xf2, 0x80, 0xf5, 0x79, 0xf3, 0x8f, 0x64, 0xe4, 0x88, 0x97, 0xa5, 0x4d,
	0x57, 0x4e, 0x43, 0x9a, 0x2d, 0x18, 0x43, 0x05, 0x64, 0xca, 0xd5, 0xb5, 0xb1, 0x42, 0x4d, 0x38,
	0x82, 0xa4, 0xf9, 0x3e, 0x81, 0x9b, 0x57, 0x96, 0x64, 0xe9, 0x4d, 0x58, 0x12, 0xca, 0x70, 0x6e,
	0x71, 0xd3, 0x56, 0x84, 0x7a, 0xcd, 0x34, 0xe9, 0x6f, 0x09, 0xac, 0x95, 0x35, 0x64, 0x5f, 0x36,
	0xb4, 0xcc, 0xf4, 0x78, 0x06, 0x45, 0x64, 0x87, 0x20, 0x2c, 0x0b, 0xdb, 0xbe, 0x60, 0xf8, 0x37,
	0x02, 0xcd, 0x4b, 0x4b, 0xb9, 0xb6, 0xfa, 0xe9, 0xb7, 0x68, 0x03, 0x16, 0x50, 0xe0, 0xcb, 0x57,
	0xd8, 0xa0, 0x3f, 0x24, 0xb0, 0x90, 0x3d, 0x4a, 0xb9, 0x9c, 0xfa, 0xd2, 0x2e, 0xdc, 0x13, 0xa1,
	0x05, 0xd2, 0xfc, 0x33, 0x81, 0xe7, 0x2f, 0x5d, 0x8f, 0x5f, 0xc9, 0xcf, 0x48, 0x59, 0x89, 0x33,
	0x71, 0xf6, 0x5d, 0x32, 0x93, 0x4a, 0xf9, 0x98, 0x7b, 0x7d, 0x39, 0xf0, 0x5f, 0x04, 0x9e, 0xbb,
	0xa6, 0xae, 0x7e, 0x5d, 0xc4, 0xfd, 0x81, 0xc0, 0xd6, 0x48, 0xd5, 0xdd, 0x70, 0xc0, 0x78, 0xd8,
	0x7d, 0x6b, 0x26, 0xcb, 0xf4, 0x0b, 0xdc, 0x1c, 0xc7, 0xe6, 0xa3, 0xef, 0xcd, 0x1b, 0xb0, 0x7b,
	0x4d, 0x75, 0x1e, 0x1f, 0xf8, 0xe6, 0xad, 0xeb, 0xca, 0x00, 0x89, 0xca, 0xcb, 0xb4, 0xb6, 0x66,
	0x85, 0x47, 0x2a, 0x6f, 0xc5, 0xf4, 0xc3, 0xb0, 0xec, 0x6c, 0x7c, 0xaa, 0x6a, 0xb3, 0x5a, 0xd7,
	0xd3, 0x27, 0xaa, 0x14, 0xe6, 0x35, 0xeb, 0x99, 0x3c, 0x76, 0x6e, 0xaf, 0x11, 0xe2, 0x37, 0xfd,
	0x31, 0x01, 0x28, 0xaa, 0xe5, 0x2a, 0x98, 0xc7, 0xa8, 0x50, 0x53, 0xf1, 0xd6, 0x78, 0x91, 0x3e,
	0xac, 0x62, 0xbb, 0x2d, 0x62, 0xd5, 0xfc, 0x3d, 0xc0, 0x8b, 0x57, 0x3b, 0x26, 0x97, 0xbc, 0xcb,
	0x25, 0x37, 0x29, 0xea, 0x16, 0x2c, 0x66, 0x52, 0xf4, 0x44, 0xea, 0xcb, 0xda, 0xb6, 0x65, 0xe4,
	0x7d, 0x6e, 0xde, 0xf8, 0xae, 0x9e, 0xed, 0x5a, 0x26, 0xab, 0xef, 0x0f, 0x12, 0x2d, 0x3a, 0x4c,
	0xe9, 0xc8, 0x59, 0xd8, 0x02, 0xff, 0x4a, 0x21, 0xff, 0x92, 0x35, 0xb5, 0x75, 0x10, 0x7e, 0xa6,
	0xb9, 0x4c, 0x59, 0xe2, 0x8d, 0xe7, 0x7d, 0x1d, 0xe4, 0xd0, 0x29, 0x9c, 0xf5, 0xa7, 0x60, 0x9b,
	0xc5, 0x7d, 0x91, 0x9a, 0x5d, 0xb6, 0x28, 0x8b, 0xfc, 0xda, 0x66, 0xe0, 0x5b, 0xe3, 0xea, 0x22,
	0xc9, 0x7e, 0x83, 0xc0, 0x82, 0x79, 0xbc, 0xa8, 0x60, 0x11, 0x5d, 0xff, 0xfa, 0x54, 0xf3, 0x6b,
	0x33, 0x73, 0x68, 0xe7, 0xa7, 0xef, 0x10, 0x58, 0xc6, 0x97, 0x41, 0xca, 0xcf, 0x74, 0x74, 0x9a,
	0xe5, 0xca, 0xbd, 0x75, 0xa7, 0xfb, 0x4b, 0x4f, 0xf1, 0x9c, 0x0b, 0xeb, 0xe6, 0xf3, 0x01, 0x3f,
	0xd3, 0x5f, 0xc8, 0x72, 0x65, 0xb2, 0xdd, 0x72, 0x8f, 0x22, 0xeb, 0xb2, 0xa5, 0x59, 0xb9, 0x6c,
	0xb9, 0x40, 0x72, 0x8c, 0xbe, 0xfb, 0x11, 0x81, 0x9a, 0x8a, 0xa4, 0xe6, 0x0e, 0x58, 0x75, 0x56,
	0xc0, 0xaa, 0x2a, 0xd4, 0xdc, 0x62, 0x7a, 0x8b, 0xc0, 0x72, 0x51, 0xba, 0xb0, 0xb0, 0x60, 0x56,
	0xb0, 0x1a, 0x1e, 0x88, 0x85, 0xf6, 0x36, 0x81, 0x8a, 0xa5, 0x26, 0x15, 0xd4, 0x10, 0xd3, 0x4c,
	0x7f, 0x06, 0x45, 0x24, 0xa1, 0x47, 0x44, 0xdf, 0x23, 0xb0, 0x56, 0x46, 0x9a, 0xc7, 0x59, 0x7f,
	0x56, 0x70, 0x96, 0x0c, 0x66, 0x4b, 0xc0, 0xaa, 0xf9, 0xbd, 0x39, 0xb8, 0x75, 0x75, 0x37, 0x7f,
	0xf5, 0xff, 0x8a, 0x40, 0xc5, 0x15, 0x6a, 0x91, 0x2d, 0x6b, 0x07, 0xdf, 0x9f, 0xe1, 0x62, 0x4a,
	0x12, 0x0f, 0x3d, 0x2a, 0x44, 0x68, 0x5f, 0xfb, 0xe6, 0x02, 0x9b, 0x7b, 0x86, 0x10, 0x3a, 0x54,
	0xf6, 0x39, 0x2e, 0x32, 0x29, 0xf4, 0xb9, 0xab, 0x06, 0x15, 0xed, 0xe6, 0x3f, 0xc9, 0xb5, 0xb7,
	0xf9, 0x13, 0x73, 0x98, 0xdf, 0x11, 0x58, 0x1e, 0xdf, 0x32, 0x97, 0xbb, 0x7c, 0x67, 0x86, 0x4e,
	0xf0, 0x19, 0x8c, 0xfb, 0xef, 0x82, 0xcf, 0x5c, 0x3e, 0x20, 0xf0, 0x91, 0x4b, 0x3a, 0xa9, 0x41,
	0xbf, 0xcf, 0xa4, 0x78, 0x6c, 0x5f, 0x61, 0x4f, 0x5e, 0xb2, 0xb9, 0x72, 0x6c, 0x9f, 0x73, 0xf7,
	0x6b, 0xb5, 0x5b, 0xf2, 0x60, 0x2a, 0x2b, 0x9e, 0xfc, 0x95, 0x3c, 0x6c, 0x38, 0x30, 0xc7, 0x28,
	0x6b, 0xfe, 0x60, 0xb2, 0xd4, 0x58, 0xfc, 0x0b, 0xe1, 0x8a, 0x17, 0xc1, 0xc7, 0x81, 0x8e, 0xfe,
	0x61, 0xc2, 0xa5, 0x26, 0x36, 0x17, 0x5b, 0x1b, 0xd1, 0x7c, 0x79, 0x32, 0x4b, 0x99, 0x1b, 0xcb,
	0x52, 0xec, 0xaf, 0x39, 0xb9, 0xcc, 0x72, 0xd6, 0x63, 0x9a, 0xc7, 0x2e, 0xeb, 0xa8, 0x0b, 0x75,
	0x5c, 0xc8, 0xae, 0xc8, 0x4f, 0x16, 0xae, 0xc8, 0x4f, 0xfe, 0x42, 0x60, 0xe3, 0xb2, 0xdd, 0x71,
	0x2f, 0xf8, 0x37, 0x66, 0x11, 0x62, 0x97, 0xe1, 0x09, 0xd7, 0xc7, 0xa4, 0xee, 0x3f, 0x29, 0x9f,
	0x86, 0x60, 0x74, 0xad, 0x92, 0xb3, 0xce, 0x29, 0x3b, 0x11, 0x89, 0x39, 0x86, 0x15, 0x5c, 0xf1,
	0x56, 0xb9, 0xe2, 0x70, 0x44, 0x4b, 0x6f, 0x41, 0x5d, 0xb8, 0x6a, 0x2f, 0x93, 0x9c, 0x61, 0x75,
	0x10, 0x7f, 0x28, 0x6a, 0x79, 0x51, 0x91, 0x15, 0x57, 0xaf, 0xce, 0x8a, 0xe1, 0x59, 0xc8, 0x8a,
	0x4f, 0x16, 0xf1, 0xa9, 0x77, 0xfb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xd9, 0x7f, 0x56,
	0x0b, 0x27, 0x00, 0x00,
}
