// Code generated by protoc-gen-go.
// source: node_mem_info_detail.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_nto_misc_oper_memory_summary_nodes_node_detail is a generated protocol buffer package.

It is generated from these files:
	node_mem_info_detail.proto

It has these top-level messages:
	NodeMemInfoDetail_KEYS
	NodeMemInfoDetail
	SharedWindow
*/
package cisco_ios_xr_nto_misc_oper_memory_summary_nodes_node_detail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Detail Node memory information
type NodeMemInfoDetail_KEYS struct {
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
}

func (m *NodeMemInfoDetail_KEYS) Reset()                    { *m = NodeMemInfoDetail_KEYS{} }
func (m *NodeMemInfoDetail_KEYS) String() string            { return proto.CompactTextString(m) }
func (*NodeMemInfoDetail_KEYS) ProtoMessage()               {}
func (*NodeMemInfoDetail_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeMemInfoDetail_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type NodeMemInfoDetail struct {
	// Page size in bytes
	PageSize uint32 `protobuf:"varint,50,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Physical memory size in bytes
	RamMemory uint64 `protobuf:"varint,51,opt,name=ram_memory,json=ramMemory" json:"ram_memory,omitempty"`
	// Physical memory available in bytes
	FreePhysicalMemory uint64 `protobuf:"varint,52,opt,name=free_physical_memory,json=freePhysicalMemory" json:"free_physical_memory,omitempty"`
	// Private Physical memory in bytes
	PrivatePhysicalMemory uint64 `protobuf:"varint,53,opt,name=private_physical_memory,json=privatePhysicalMemory" json:"private_physical_memory,omitempty"`
	// Application memory size in bytes
	SystemRamMemory uint64 `protobuf:"varint,54,opt,name=system_ram_memory,json=systemRamMemory" json:"system_ram_memory,omitempty"`
	// Application memory available in bytes
	FreeApplicationMemory uint64 `protobuf:"varint,55,opt,name=free_application_memory,json=freeApplicationMemory" json:"free_application_memory,omitempty"`
	// Image memory size in bytes
	ImageMemory uint64 `protobuf:"varint,56,opt,name=image_memory,json=imageMemory" json:"image_memory,omitempty"`
	// Boot RAM size in bytes
	BootRamSize uint64 `protobuf:"varint,57,opt,name=boot_ram_size,json=bootRamSize" json:"boot_ram_size,omitempty"`
	// Reserved memory size in bytes
	ReservedMemory uint64 `protobuf:"varint,58,opt,name=reserved_memory,json=reservedMemory" json:"reserved_memory,omitempty"`
	// IO memory size in bytes
	IoMemory uint64 `protobuf:"varint,59,opt,name=io_memory,json=ioMemory" json:"io_memory,omitempty"`
	// Flash System size in bytes
	FlashSystem uint64 `protobuf:"varint,60,opt,name=flash_system,json=flashSystem" json:"flash_system,omitempty"`
	// Available Shared windows
	SharedWindows []*SharedWindow `protobuf:"bytes,61,rep,name=shared_windows,json=sharedWindows" json:"shared_windows,omitempty"`
	// Total Shared window
	TotalSharedWindow uint64 `protobuf:"varint,62,opt,name=total_shared_window,json=totalSharedWindow" json:"total_shared_window,omitempty"`
	// Allocated Memory Size
	AllocatedMemory uint64 `protobuf:"varint,63,opt,name=allocated_memory,json=allocatedMemory" json:"allocated_memory,omitempty"`
	// Program Text Size
	ProgramText uint64 `protobuf:"varint,64,opt,name=program_text,json=programText" json:"program_text,omitempty"`
	// Program Data Size
	ProgramData uint64 `protobuf:"varint,65,opt,name=program_data,json=programData" json:"program_data,omitempty"`
	// Program Stack Size
	ProgramStack uint64 `protobuf:"varint,66,opt,name=program_stack,json=programStack" json:"program_stack,omitempty"`
}

func (m *NodeMemInfoDetail) Reset()                    { *m = NodeMemInfoDetail{} }
func (m *NodeMemInfoDetail) String() string            { return proto.CompactTextString(m) }
func (*NodeMemInfoDetail) ProtoMessage()               {}
func (*NodeMemInfoDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeMemInfoDetail) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *NodeMemInfoDetail) GetRamMemory() uint64 {
	if m != nil {
		return m.RamMemory
	}
	return 0
}

func (m *NodeMemInfoDetail) GetFreePhysicalMemory() uint64 {
	if m != nil {
		return m.FreePhysicalMemory
	}
	return 0
}

func (m *NodeMemInfoDetail) GetPrivatePhysicalMemory() uint64 {
	if m != nil {
		return m.PrivatePhysicalMemory
	}
	return 0
}

func (m *NodeMemInfoDetail) GetSystemRamMemory() uint64 {
	if m != nil {
		return m.SystemRamMemory
	}
	return 0
}

func (m *NodeMemInfoDetail) GetFreeApplicationMemory() uint64 {
	if m != nil {
		return m.FreeApplicationMemory
	}
	return 0
}

func (m *NodeMemInfoDetail) GetImageMemory() uint64 {
	if m != nil {
		return m.ImageMemory
	}
	return 0
}

func (m *NodeMemInfoDetail) GetBootRamSize() uint64 {
	if m != nil {
		return m.BootRamSize
	}
	return 0
}

func (m *NodeMemInfoDetail) GetReservedMemory() uint64 {
	if m != nil {
		return m.ReservedMemory
	}
	return 0
}

func (m *NodeMemInfoDetail) GetIoMemory() uint64 {
	if m != nil {
		return m.IoMemory
	}
	return 0
}

func (m *NodeMemInfoDetail) GetFlashSystem() uint64 {
	if m != nil {
		return m.FlashSystem
	}
	return 0
}

func (m *NodeMemInfoDetail) GetSharedWindows() []*SharedWindow {
	if m != nil {
		return m.SharedWindows
	}
	return nil
}

func (m *NodeMemInfoDetail) GetTotalSharedWindow() uint64 {
	if m != nil {
		return m.TotalSharedWindow
	}
	return 0
}

func (m *NodeMemInfoDetail) GetAllocatedMemory() uint64 {
	if m != nil {
		return m.AllocatedMemory
	}
	return 0
}

func (m *NodeMemInfoDetail) GetProgramText() uint64 {
	if m != nil {
		return m.ProgramText
	}
	return 0
}

func (m *NodeMemInfoDetail) GetProgramData() uint64 {
	if m != nil {
		return m.ProgramData
	}
	return 0
}

func (m *NodeMemInfoDetail) GetProgramStack() uint64 {
	if m != nil {
		return m.ProgramStack
	}
	return 0
}

// Shared window information
type SharedWindow struct {
	// Name of shared window
	SharedWindow string `protobuf:"bytes,1,opt,name=shared_window,json=sharedWindow" json:"shared_window,omitempty"`
	// Size of shared window
	WindowSize uint64 `protobuf:"varint,2,opt,name=window_size,json=windowSize" json:"window_size,omitempty"`
}

func (m *SharedWindow) Reset()                    { *m = SharedWindow{} }
func (m *SharedWindow) String() string            { return proto.CompactTextString(m) }
func (*SharedWindow) ProtoMessage()               {}
func (*SharedWindow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SharedWindow) GetSharedWindow() string {
	if m != nil {
		return m.SharedWindow
	}
	return ""
}

func (m *SharedWindow) GetWindowSize() uint64 {
	if m != nil {
		return m.WindowSize
	}
	return 0
}

func init() {
	proto.RegisterType((*NodeMemInfoDetail_KEYS)(nil), "cisco_ios_xr_nto_misc_oper.memory_summary.nodes.node.detail.node_mem_info_detail_KEYS")
	proto.RegisterType((*NodeMemInfoDetail)(nil), "cisco_ios_xr_nto_misc_oper.memory_summary.nodes.node.detail.node_mem_info_detail")
	proto.RegisterType((*SharedWindow)(nil), "cisco_ios_xr_nto_misc_oper.memory_summary.nodes.node.detail.shared_window")
}

func init() { proto.RegisterFile("node_mem_info_detail.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0x57, 0x01, 0x4d, 0xeb, 0xeb, 0xba, 0x31, 0x33, 0xb4, 0xc0, 0x84, 0x28, 0xe5, 0x40, 0xe1,
	0x10, 0xa1, 0x0d, 0xca, 0x60, 0xfc, 0x1b, 0x82, 0x0b, 0x08, 0x84, 0x12, 0x10, 0xe2, 0x64, 0xbd,
	0x25, 0xee, 0x6a, 0x11, 0xc7, 0xc1, 0x36, 0x5b, 0xbb, 0x6f, 0xc0, 0xb7, 0x46, 0x7e, 0x4e, 0xd6,
	0x06, 0x76, 0xe3, 0x52, 0xa9, 0xbf, 0x7f, 0xfe, 0xbd, 0xe7, 0x18, 0x6e, 0x96, 0x3a, 0x17, 0x5c,
	0x09, 0xc5, 0x65, 0x39, 0xd1, 0x3c, 0x17, 0x0e, 0x65, 0x11, 0x57, 0x46, 0x3b, 0xcd, 0x0e, 0x32,
	0x69, 0x33, 0xcd, 0xa5, 0xb6, 0x7c, 0x66, 0x78, 0xe9, 0x34, 0x57, 0xd2, 0x66, 0x5c, 0x57, 0xc2,
	0xc4, 0x4a, 0x28, 0x6d, 0xe6, 0xdc, 0xfe, 0x52, 0x0a, 0xcd, 0x3c, 0xf6, 0x29, 0x96, 0x7e, 0xe3,
	0x10, 0x31, 0xdc, 0x87, 0x1b, 0x17, 0x45, 0xf3, 0x0f, 0xef, 0xbe, 0xa7, 0x6c, 0x07, 0xba, 0x44,
	0x96, 0xa8, 0x44, 0xd4, 0x19, 0x74, 0x46, 0xdd, 0x64, 0xd5, 0x03, 0x9f, 0x50, 0x89, 0xe1, 0xef,
	0x15, 0xd8, 0xba, 0xc8, 0xea, 0x5d, 0x15, 0x1e, 0x0b, 0x6e, 0xe5, 0x99, 0x88, 0x76, 0x07, 0x9d,
	0x51, 0x3f, 0x59, 0xf5, 0x40, 0x2a, 0xcf, 0x04, 0xbb, 0x05, 0x60, 0x50, 0xf1, 0xd0, 0x2b, 0xda,
	0x1b, 0x74, 0x46, 0x57, 0x92, 0xae, 0x41, 0xf5, 0x91, 0x00, 0xf6, 0x10, 0xb6, 0x26, 0x46, 0x08,
	0x5e, 0x4d, 0xe7, 0x56, 0x66, 0x58, 0x34, 0xc2, 0x47, 0x24, 0x64, 0x9e, 0xfb, 0x5c, 0x53, 0xb5,
	0x63, 0x0c, 0xdb, 0x95, 0x91, 0x27, 0xe8, 0xfe, 0x35, 0x3d, 0x26, 0xd3, 0xf5, 0x9a, 0xfe, 0xcb,
	0xf7, 0x00, 0x36, 0xed, 0xdc, 0x3a, 0xa1, 0xf8, 0x52, 0x9f, 0x31, 0x39, 0x36, 0x02, 0x91, 0x9c,
	0xb7, 0x1a, 0xc3, 0x36, 0xb5, 0xc2, 0xaa, 0x2a, 0x64, 0x86, 0x4e, 0xea, 0xb2, 0x71, 0x3c, 0x09,
	0x67, 0x78, 0xfa, 0x70, 0xc1, 0xd6, 0xbe, 0x3b, 0xb0, 0x26, 0x95, 0x5f, 0x45, 0x2d, 0xde, 0x27,
	0x71, 0x8f, 0xb0, 0x5a, 0x32, 0x84, 0xfe, 0x91, 0xd6, 0x8e, 0x4a, 0xd0, 0xc2, 0x9e, 0x06, 0x8d,
	0x07, 0x13, 0x54, 0xb4, 0xb3, 0x7b, 0xb0, 0x61, 0x84, 0x15, 0xe6, 0x44, 0xe4, 0x4d, 0xd2, 0x33,
	0x52, 0xad, 0x37, 0x70, 0x1d, 0xb6, 0x03, 0x5d, 0xa9, 0x1b, 0xc9, 0x01, 0x49, 0x56, 0xa5, 0x5e,
	0x94, 0x99, 0x14, 0x68, 0xa7, 0x3c, 0x4c, 0x17, 0x3d, 0x0f, 0x07, 0x11, 0x96, 0x12, 0xc4, 0x7e,
	0xc2, 0xba, 0x9d, 0xa2, 0x11, 0x39, 0x3f, 0x95, 0x65, 0xae, 0x4f, 0x6d, 0xf4, 0x62, 0x70, 0x79,
	0xd4, 0xdb, 0x7d, 0x1f, 0xff, 0xc7, 0x27, 0x16, 0xb7, 0x22, 0x93, 0x7e, 0xf8, 0xfb, 0x2d, 0x1c,
	0xc0, 0x62, 0xb8, 0xe6, 0xb4, 0xc3, 0x82, 0xb7, 0x54, 0xd1, 0x4b, 0x2a, 0xb7, 0x49, 0x54, 0xba,
	0x64, 0x60, 0xf7, 0xe1, 0x2a, 0x16, 0x85, 0xce, 0xd0, 0x2d, 0x96, 0xf1, 0x2a, 0xdc, 0xda, 0x39,
	0xbe, 0x18, 0xb8, 0x32, 0xfa, 0xd8, 0x6f, 0xd6, 0x89, 0x99, 0x8b, 0x5e, 0x87, 0x81, 0x6b, 0xec,
	0x8b, 0x98, 0xb9, 0x65, 0x49, 0x8e, 0x0e, 0xa3, 0xc3, 0x96, 0xe4, 0x2d, 0x3a, 0x64, 0x77, 0xa1,
	0xdf, 0x48, 0xac, 0xc3, 0xec, 0x47, 0xf4, 0x86, 0x34, 0x8d, 0x2f, 0xf5, 0xd8, 0xf0, 0x2b, 0xf4,
	0x5b, 0xfd, 0xbd, 0xab, 0x3d, 0x50, 0x78, 0x3d, 0x6b, 0xcb, 0xc3, 0xb3, 0xdb, 0xd0, 0x0b, 0x6c,
	0xb8, 0xf9, 0x4b, 0x14, 0x0c, 0x01, 0xf2, 0x17, 0x7f, 0xb4, 0x42, 0x0f, 0x7c, 0xef, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x25, 0x88, 0xfc, 0xb7, 0xfe, 0x03, 0x00, 0x00,
}
