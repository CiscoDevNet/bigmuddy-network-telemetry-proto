// Code generated by protoc-gen-go.
// source: bgp_updgen_nbr_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_default_vrf_afs_af_update_generation_neighbors_update_generation_neighbor is a generated protocol buffer package.

It is generated from these files:
	bgp_updgen_nbr_bag.proto

It has these top-level messages:
	BgpUpdgenNbrBag_KEYS
	BgpUpdgenNbrBag
	BgpTimespec
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	BgpIpv4SrpolicyAddrT
	BgpIpv6SrpolicyAddrT
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
	BgpUpdgenStatsBag
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_default_vrf_afs_af_update_generation_neighbors_update_generation_neighbor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP Update generation Neighbor information
type BgpUpdgenNbrBag_KEYS struct {
	InstanceName     string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	AfName           string `protobuf:"bytes,2,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	UpdateGroupIndex uint32 `protobuf:"varint,3,opt,name=update_group_index,json=updateGroupIndex" json:"update_group_index,omitempty"`
	SubGroupIndex    uint32 `protobuf:"varint,4,opt,name=sub_group_index,json=subGroupIndex" json:"sub_group_index,omitempty"`
	SubGroupId       uint32 `protobuf:"varint,5,opt,name=sub_group_id,json=subGroupId" json:"sub_group_id,omitempty"`
	FilterGroupIndex uint32 `protobuf:"varint,6,opt,name=filter_group_index,json=filterGroupIndex" json:"filter_group_index,omitempty"`
	NeighborAddress  string `protobuf:"bytes,7,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
}

func (m *BgpUpdgenNbrBag_KEYS) Reset()                    { *m = BgpUpdgenNbrBag_KEYS{} }
func (m *BgpUpdgenNbrBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdgenNbrBag_KEYS) ProtoMessage()               {}
func (*BgpUpdgenNbrBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpUpdgenNbrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpUpdgenNbrBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpUpdgenNbrBag_KEYS) GetUpdateGroupIndex() uint32 {
	if m != nil {
		return m.UpdateGroupIndex
	}
	return 0
}

func (m *BgpUpdgenNbrBag_KEYS) GetSubGroupIndex() uint32 {
	if m != nil {
		return m.SubGroupIndex
	}
	return 0
}

func (m *BgpUpdgenNbrBag_KEYS) GetSubGroupId() uint32 {
	if m != nil {
		return m.SubGroupId
	}
	return 0
}

func (m *BgpUpdgenNbrBag_KEYS) GetFilterGroupIndex() uint32 {
	if m != nil {
		return m.FilterGroupIndex
	}
	return 0
}

func (m *BgpUpdgenNbrBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

type BgpUpdgenNbrBag struct {
	// ProcessID
	ProcessId uint32 `protobuf:"varint,50,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	// VRF Name
	UpdateVrfName string `protobuf:"bytes,51,opt,name=update_vrf_name,json=updateVrfName" json:"update_vrf_name,omitempty"`
	// Address family identifier
	UpdateGroupAfName string `protobuf:"bytes,52,opt,name=update_group_af_name,json=updateGroupAfName" json:"update_group_af_name,omitempty"`
	// Neighbor address
	UpdateNeighborAddress *BgpAddrtype `protobuf:"bytes,53,opt,name=update_neighbor_address,json=updateNeighborAddress" json:"update_neighbor_address,omitempty"`
	// Filter-group index
	UpdateFilterGroupIndex uint32 `protobuf:"varint,54,opt,name=update_filter_group_index,json=updateFilterGroupIndex" json:"update_filter_group_index,omitempty"`
	// Refresh Filter-group index
	RefreshFilterGroupIndex uint32 `protobuf:"varint,55,opt,name=refresh_filter_group_index,json=refreshFilterGroupIndex" json:"refresh_filter_group_index,omitempty"`
	// Sub-group index
	SubGroupIndex uint32 `protobuf:"varint,56,opt,name=sub_group_index,json=subGroupIndex" json:"sub_group_index,omitempty"`
	// Refresh Sub-group index
	RefreshSubGroupIndex uint32 `protobuf:"varint,57,opt,name=refresh_sub_group_index,json=refreshSubGroupIndex" json:"refresh_sub_group_index,omitempty"`
	// Refresh sub-group ID
	RefreshSubGroupId uint32 `protobuf:"varint,58,opt,name=refresh_sub_group_id,json=refreshSubGroupId" json:"refresh_sub_group_id,omitempty"`
	// Update-group index
	UpdateGroupIndex uint32 `protobuf:"varint,59,opt,name=update_group_index,json=updateGroupIndex" json:"update_group_index,omitempty"`
	// Main table version
	UpdateMainTableVersion uint32 `protobuf:"varint,60,opt,name=update_main_table_version,json=updateMainTableVersion" json:"update_main_table_version,omitempty"`
	// VRF Table RIB version
	UpdateVrfTableRibVersion uint32 `protobuf:"varint,61,opt,name=update_vrf_table_rib_version,json=updateVrfTableRibVersion" json:"update_vrf_table_rib_version,omitempty"`
	// OutQueue messages
	UpdateOutQueueMessages uint32 `protobuf:"varint,62,opt,name=update_out_queue_messages,json=updateOutQueueMessages" json:"update_out_queue_messages,omitempty"`
	// OutQueue size
	UpdateOutQueueSize uint32 `protobuf:"varint,63,opt,name=update_out_queue_size,json=updateOutQueueSize" json:"update_out_queue_size,omitempty"`
	// Refresh OutQueue messages
	RefreshUpdateOutQueueMessages uint32 `protobuf:"varint,64,opt,name=refresh_update_out_queue_messages,json=refreshUpdateOutQueueMessages" json:"refresh_update_out_queue_messages,omitempty"`
	// Refresh OutQueue size
	RefreshUpdateOutQueueSize uint32 `protobuf:"varint,65,opt,name=refresh_update_out_queue_size,json=refreshUpdateOutQueueSize" json:"refresh_update_out_queue_size,omitempty"`
	// Filter-group messages
	UpdateFilterGroupMessages uint32 `protobuf:"varint,66,opt,name=update_filter_group_messages,json=updateFilterGroupMessages" json:"update_filter_group_messages,omitempty"`
	// Last added time
	LastSubGroupAddTimestamp *BgpTimespec `protobuf:"bytes,67,opt,name=last_sub_group_add_timestamp,json=lastSubGroupAddTimestamp" json:"last_sub_group_add_timestamp,omitempty"`
	// Last removed time
	LastSubGroupRemoveTimestamp *BgpTimespec `protobuf:"bytes,68,opt,name=last_sub_group_remove_timestamp,json=lastSubGroupRemoveTimestamp" json:"last_sub_group_remove_timestamp,omitempty"`
	// Last added time
	LastFilterGroupAddTimestamp *BgpTimespec `protobuf:"bytes,69,opt,name=last_filter_group_add_timestamp,json=lastFilterGroupAddTimestamp" json:"last_filter_group_add_timestamp,omitempty"`
	// Last removed time
	LastFilterGroupRemoveTimestamp *BgpTimespec `protobuf:"bytes,70,opt,name=last_filter_group_remove_timestamp,json=lastFilterGroupRemoveTimestamp" json:"last_filter_group_remove_timestamp,omitempty"`
	// Version
	Version uint32 `protobuf:"varint,71,opt,name=version" json:"version,omitempty"`
	// Pending target version
	PendingTargetVersion uint32 `protobuf:"varint,72,opt,name=pending_target_version,json=pendingTargetVersion" json:"pending_target_version,omitempty"`
	// Resume version
	NextResumeVersion uint32 `protobuf:"varint,73,opt,name=next_resume_version,json=nextResumeVersion" json:"next_resume_version,omitempty"`
	// Ack version
	AckVersion uint32 `protobuf:"varint,74,opt,name=ack_version,json=ackVersion" json:"ack_version,omitempty"`
	// Synced ack version
	SyncedAckVersion uint32 `protobuf:"varint,75,opt,name=synced_ack_version,json=syncedAckVersion" json:"synced_ack_version,omitempty"`
	// Outstanding version count
	OutstandingVersionCount uint32 `protobuf:"varint,76,opt,name=outstanding_version_count,json=outstandingVersionCount" json:"outstanding_version_count,omitempty"`
	// Refresh version
	UpdateRefreshVersion uint32 `protobuf:"varint,77,opt,name=update_refresh_version,json=updateRefreshVersion" json:"update_refresh_version,omitempty"`
	// Requested refresh target version
	RefreshRequestedTargetVersion uint32 `protobuf:"varint,78,opt,name=refresh_requested_target_version,json=refreshRequestedTargetVersion" json:"refresh_requested_target_version,omitempty"`
	// Refresh target version
	UpdateRefreshTargetVersion uint32 `protobuf:"varint,79,opt,name=update_refresh_target_version,json=updateRefreshTargetVersion" json:"update_refresh_target_version,omitempty"`
	// Pending refresh target version
	RefreshPendingTargetVersion uint32 `protobuf:"varint,80,opt,name=refresh_pending_target_version,json=refreshPendingTargetVersion" json:"refresh_pending_target_version,omitempty"`
	// Refresh resume version
	RefreshNextResumeVersion uint32 `protobuf:"varint,81,opt,name=refresh_next_resume_version,json=refreshNextResumeVersion" json:"refresh_next_resume_version,omitempty"`
	// Refresh Ack version
	RefreshAckVersion uint32 `protobuf:"varint,82,opt,name=refresh_ack_version,json=refreshAckVersion" json:"refresh_ack_version,omitempty"`
	// First default-origination time
	FirstDefaultOriginateTimestamp *BgpTimespec `protobuf:"bytes,83,opt,name=first_default_originate_timestamp,json=firstDefaultOriginateTimestamp" json:"first_default_originate_timestamp,omitempty"`
	// Last default-origination time
	LastDefaultOriginateTimestamp *BgpTimespec `protobuf:"bytes,84,opt,name=last_default_originate_timestamp,json=lastDefaultOriginateTimestamp" json:"last_default_originate_timestamp,omitempty"`
	// Time since last default-origination event (in seconds)
	LastDefaultOriginateAge uint32 `protobuf:"varint,85,opt,name=last_default_originate_age,json=lastDefaultOriginateAge" json:"last_default_originate_age,omitempty"`
	// Default-origination state
	DefaultOriginateState int32 `protobuf:"zigzag32,86,opt,name=default_originate_state,json=defaultOriginateState" json:"default_originate_state,omitempty"`
	// Default-origination context
	DefaultOriginateInternalContext int32 `protobuf:"zigzag32,87,opt,name=default_originate_internal_context,json=defaultOriginateInternalContext" json:"default_originate_internal_context,omitempty"`
	// Number of EORs outstanding
	IsEorOutstanding bool `protobuf:"varint,88,opt,name=is_eor_outstanding,json=isEorOutstanding" json:"is_eor_outstanding,omitempty"`
	// Refresh Outbound count
	OutboundRefreshCount uint32 `protobuf:"varint,89,opt,name=outbound_refresh_count,json=outboundRefreshCount" json:"outbound_refresh_count,omitempty"`
	// Refresh Inbound count
	InboundRefreshCount uint32 `protobuf:"varint,90,opt,name=inbound_refresh_count,json=inboundRefreshCount" json:"inbound_refresh_count,omitempty"`
	// Last update-group timer start
	LastUpdateGroupStartTimestamp *BgpTimespec `protobuf:"bytes,91,opt,name=last_update_group_start_timestamp,json=lastUpdateGroupStartTimestamp" json:"last_update_group_start_timestamp,omitempty"`
	// Last update-group timer expiry
	LastUpdateGroupExpiryTimestamp *BgpTimespec `protobuf:"bytes,92,opt,name=last_update_group_expiry_timestamp,json=lastUpdateGroupExpiryTimestamp" json:"last_update_group_expiry_timestamp,omitempty"`
	// Is update-group timer running
	IsUpdateGroupTimerRunning bool `protobuf:"varint,93,opt,name=is_update_group_timer_running,json=isUpdateGroupTimerRunning" json:"is_update_group_timer_running,omitempty"`
	// Current Update-group address-family identifier
	CurrentUpdateGroupAfName string `protobuf:"bytes,94,opt,name=current_update_group_af_name,json=currentUpdateGroupAfName" json:"current_update_group_af_name,omitempty"`
	// Last Update-group address-family identifier
	LastUpdateGroupAfName string `protobuf:"bytes,95,opt,name=last_update_group_af_name,json=lastUpdateGroupAfName" json:"last_update_group_af_name,omitempty"`
	// First update queued time
	FirstUpdateQueuedTimestamp *BgpTimespec `protobuf:"bytes,96,opt,name=first_update_queued_timestamp,json=firstUpdateQueuedTimestamp" json:"first_update_queued_timestamp,omitempty"`
	// Last update queued time
	LastUpdateQueuedTimestamp *BgpTimespec `protobuf:"bytes,97,opt,name=last_update_queued_timestamp,json=lastUpdateQueuedTimestamp" json:"last_update_queued_timestamp,omitempty"`
	// Time since last update queued event (in seconds)
	LastUpdateQueuedAge uint32 `protobuf:"varint,98,opt,name=last_update_queued_age,json=lastUpdateQueuedAge" json:"last_update_queued_age,omitempty"`
	// Last refresh update queued time
	LastRefreshUpdateQueuedTimestamp *BgpTimespec `protobuf:"bytes,99,opt,name=last_refresh_update_queued_timestamp,json=lastRefreshUpdateQueuedTimestamp" json:"last_refresh_update_queued_timestamp,omitempty"`
	// Time since last refresh update queued event (in seconds)
	LastRefreshUpdateQueuedAge uint32 `protobuf:"varint,100,opt,name=last_refresh_update_queued_age,json=lastRefreshUpdateQueuedAge" json:"last_refresh_update_queued_age,omitempty"`
	// First update write time
	FirstUpdateWriteTimestamp *BgpTimespec `protobuf:"bytes,101,opt,name=first_update_write_timestamp,json=firstUpdateWriteTimestamp" json:"first_update_write_timestamp,omitempty"`
	// Last update write time
	LastUpdateWriteTimestamp *BgpTimespec `protobuf:"bytes,102,opt,name=last_update_write_timestamp,json=lastUpdateWriteTimestamp" json:"last_update_write_timestamp,omitempty"`
	// Time since last update write event (in seconds)
	LastUpdateWriteAge uint32 `protobuf:"varint,103,opt,name=last_update_write_age,json=lastUpdateWriteAge" json:"last_update_write_age,omitempty"`
	// Last refresh update write time
	LastRefreshUpdateWriteTimestamp *BgpTimespec `protobuf:"bytes,104,opt,name=last_refresh_update_write_timestamp,json=lastRefreshUpdateWriteTimestamp" json:"last_refresh_update_write_timestamp,omitempty"`
	// Time since last refresh update write event (in seconds)
	LastRefreshUpdateWriteAge uint32 `protobuf:"varint,105,opt,name=last_refresh_update_write_age,json=lastRefreshUpdateWriteAge" json:"last_refresh_update_write_age,omitempty"`
	// Update statistics
	UpdateStatistics *BgpUpdgenStatsBag `protobuf:"bytes,106,opt,name=update_statistics,json=updateStatistics" json:"update_statistics,omitempty"`
}

func (m *BgpUpdgenNbrBag) Reset()                    { *m = BgpUpdgenNbrBag{} }
func (m *BgpUpdgenNbrBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdgenNbrBag) ProtoMessage()               {}
func (*BgpUpdgenNbrBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpUpdgenNbrBag) GetProcessId() uint32 {
	if m != nil {
		return m.ProcessId
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateVrfName() string {
	if m != nil {
		return m.UpdateVrfName
	}
	return ""
}

func (m *BgpUpdgenNbrBag) GetUpdateGroupAfName() string {
	if m != nil {
		return m.UpdateGroupAfName
	}
	return ""
}

func (m *BgpUpdgenNbrBag) GetUpdateNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.UpdateNeighborAddress
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetUpdateFilterGroupIndex() uint32 {
	if m != nil {
		return m.UpdateFilterGroupIndex
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetRefreshFilterGroupIndex() uint32 {
	if m != nil {
		return m.RefreshFilterGroupIndex
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetSubGroupIndex() uint32 {
	if m != nil {
		return m.SubGroupIndex
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetRefreshSubGroupIndex() uint32 {
	if m != nil {
		return m.RefreshSubGroupIndex
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetRefreshSubGroupId() uint32 {
	if m != nil {
		return m.RefreshSubGroupId
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateGroupIndex() uint32 {
	if m != nil {
		return m.UpdateGroupIndex
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateMainTableVersion() uint32 {
	if m != nil {
		return m.UpdateMainTableVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateVrfTableRibVersion() uint32 {
	if m != nil {
		return m.UpdateVrfTableRibVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateOutQueueMessages() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessages
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateOutQueueSize() uint32 {
	if m != nil {
		return m.UpdateOutQueueSize
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetRefreshUpdateOutQueueMessages() uint32 {
	if m != nil {
		return m.RefreshUpdateOutQueueMessages
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetRefreshUpdateOutQueueSize() uint32 {
	if m != nil {
		return m.RefreshUpdateOutQueueSize
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateFilterGroupMessages() uint32 {
	if m != nil {
		return m.UpdateFilterGroupMessages
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetLastSubGroupAddTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastSubGroupAddTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastSubGroupRemoveTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastSubGroupRemoveTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastFilterGroupAddTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastFilterGroupAddTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastFilterGroupRemoveTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastFilterGroupRemoveTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetPendingTargetVersion() uint32 {
	if m != nil {
		return m.PendingTargetVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetNextResumeVersion() uint32 {
	if m != nil {
		return m.NextResumeVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetAckVersion() uint32 {
	if m != nil {
		return m.AckVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetSyncedAckVersion() uint32 {
	if m != nil {
		return m.SyncedAckVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetOutstandingVersionCount() uint32 {
	if m != nil {
		return m.OutstandingVersionCount
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateRefreshVersion() uint32 {
	if m != nil {
		return m.UpdateRefreshVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetRefreshRequestedTargetVersion() uint32 {
	if m != nil {
		return m.RefreshRequestedTargetVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateRefreshTargetVersion() uint32 {
	if m != nil {
		return m.UpdateRefreshTargetVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetRefreshPendingTargetVersion() uint32 {
	if m != nil {
		return m.RefreshPendingTargetVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetRefreshNextResumeVersion() uint32 {
	if m != nil {
		return m.RefreshNextResumeVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetRefreshAckVersion() uint32 {
	if m != nil {
		return m.RefreshAckVersion
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetFirstDefaultOriginateTimestamp() *BgpTimespec {
	if m != nil {
		return m.FirstDefaultOriginateTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastDefaultOriginateTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastDefaultOriginateTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastDefaultOriginateAge() uint32 {
	if m != nil {
		return m.LastDefaultOriginateAge
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetDefaultOriginateState() int32 {
	if m != nil {
		return m.DefaultOriginateState
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetDefaultOriginateInternalContext() int32 {
	if m != nil {
		return m.DefaultOriginateInternalContext
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetIsEorOutstanding() bool {
	if m != nil {
		return m.IsEorOutstanding
	}
	return false
}

func (m *BgpUpdgenNbrBag) GetOutboundRefreshCount() uint32 {
	if m != nil {
		return m.OutboundRefreshCount
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetInboundRefreshCount() uint32 {
	if m != nil {
		return m.InboundRefreshCount
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetLastUpdateGroupStartTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateGroupStartTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastUpdateGroupExpiryTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateGroupExpiryTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetIsUpdateGroupTimerRunning() bool {
	if m != nil {
		return m.IsUpdateGroupTimerRunning
	}
	return false
}

func (m *BgpUpdgenNbrBag) GetCurrentUpdateGroupAfName() string {
	if m != nil {
		return m.CurrentUpdateGroupAfName
	}
	return ""
}

func (m *BgpUpdgenNbrBag) GetLastUpdateGroupAfName() string {
	if m != nil {
		return m.LastUpdateGroupAfName
	}
	return ""
}

func (m *BgpUpdgenNbrBag) GetFirstUpdateQueuedTimestamp() *BgpTimespec {
	if m != nil {
		return m.FirstUpdateQueuedTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastUpdateQueuedTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateQueuedTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastUpdateQueuedAge() uint32 {
	if m != nil {
		return m.LastUpdateQueuedAge
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetLastRefreshUpdateQueuedTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastRefreshUpdateQueuedTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastRefreshUpdateQueuedAge() uint32 {
	if m != nil {
		return m.LastRefreshUpdateQueuedAge
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetFirstUpdateWriteTimestamp() *BgpTimespec {
	if m != nil {
		return m.FirstUpdateWriteTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastUpdateWriteTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateWriteTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastUpdateWriteAge() uint32 {
	if m != nil {
		return m.LastUpdateWriteAge
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetLastRefreshUpdateWriteTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastRefreshUpdateWriteTimestamp
	}
	return nil
}

func (m *BgpUpdgenNbrBag) GetLastRefreshUpdateWriteAge() uint32 {
	if m != nil {
		return m.LastRefreshUpdateWriteAge
	}
	return 0
}

func (m *BgpUpdgenNbrBag) GetUpdateStatistics() *BgpUpdgenStatsBag {
	if m != nil {
		return m.UpdateStatistics
	}
	return nil
}

type BgpTimespec struct {
	// Seconds part of time value
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Nanoseconds part of time value
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *BgpTimespec) Reset()                    { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string            { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()               {}
func (*BgpTimespec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()                    { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()                    { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
	// IPV4 Policy Addr
	Ipv4SrPolicyAddress *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress" json:"ipv4_sr_policy_address,omitempty"`
	// IPV6 Policy Addr
	Ipv6SrPolicyAddress *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress" json:"ipv6_sr_policy_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

// BGP Update generation common statistics information
type BgpUpdgenStatsBag struct {
	// OutQueue High Messages
	UpdateOutQueueMessagesHigh uint32 `protobuf:"varint,1,opt,name=update_out_queue_messages_high,json=updateOutQueueMessagesHigh" json:"update_out_queue_messages_high,omitempty"`
	// OutQueue Cumulative Messages
	UpdateOutQueueMessagesCumulative uint32 `protobuf:"varint,2,opt,name=update_out_queue_messages_cumulative,json=updateOutQueueMessagesCumulative" json:"update_out_queue_messages_cumulative,omitempty"`
	// OutQueue Discarded Messages
	UpdateOutQueueMessagesDiscarded uint32 `protobuf:"varint,3,opt,name=update_out_queue_messages_discarded,json=updateOutQueueMessagesDiscarded" json:"update_out_queue_messages_discarded,omitempty"`
	// OutQueue Cleared Messages
	UpdateOutQueueMessagesCleared uint32 `protobuf:"varint,4,opt,name=update_out_queue_messages_cleared,json=updateOutQueueMessagesCleared" json:"update_out_queue_messages_cleared,omitempty"`
	// OutQueue Hi Size
	UpdateOutQueueSizeHigh uint32 `protobuf:"varint,5,opt,name=update_out_queue_size_high,json=updateOutQueueSizeHigh" json:"update_out_queue_size_high,omitempty"`
	// OutQueue Cumulative Size
	UpdateOutQueueSizeCumulative uint64 `protobuf:"varint,6,opt,name=update_out_queue_size_cumulative,json=updateOutQueueSizeCumulative" json:"update_out_queue_size_cumulative,omitempty"`
	// OutQueue Discarded Size
	UpdateOutQueueSizeDiscarded uint64 `protobuf:"varint,7,opt,name=update_out_queue_size_discarded,json=updateOutQueueSizeDiscarded" json:"update_out_queue_size_discarded,omitempty"`
	// OutQueue Cleared Size
	UpdateOutQueueSizeCleared uint64 `protobuf:"varint,8,opt,name=update_out_queue_size_cleared,json=updateOutQueueSizeCleared" json:"update_out_queue_size_cleared,omitempty"`
	// Last Discarded time
	LastUpdateDiscardTimestamp *BgpTimespec `protobuf:"bytes,9,opt,name=last_update_discard_timestamp,json=lastUpdateDiscardTimestamp" json:"last_update_discard_timestamp,omitempty"`
	// Time since last Discard event (in seconds)
	LastUpdateDiscardAge uint32 `protobuf:"varint,10,opt,name=last_update_discard_age,json=lastUpdateDiscardAge" json:"last_update_discard_age,omitempty"`
	// Last Cleared time
	LastUpdateClearedTimestamp *BgpTimespec `protobuf:"bytes,11,opt,name=last_update_cleared_timestamp,json=lastUpdateClearedTimestamp" json:"last_update_cleared_timestamp,omitempty"`
	// Time since last Clear event (in seconds)
	LastUpdateCleardAge uint32 `protobuf:"varint,12,opt,name=last_update_cleard_age,json=lastUpdateCleardAge" json:"last_update_cleard_age,omitempty"`
	// Throttle Count
	UpdateThrottleCount uint32 `protobuf:"varint,13,opt,name=update_throttle_count,json=updateThrottleCount" json:"update_throttle_count,omitempty"`
	// Last Throttled time
	LastUpdateThrottleTimestamp *BgpTimespec `protobuf:"bytes,14,opt,name=last_update_throttle_timestamp,json=lastUpdateThrottleTimestamp" json:"last_update_throttle_timestamp,omitempty"`
	// Time since last Throttle event (in seconds)
	LastUpdateThrottleAge uint32 `protobuf:"varint,15,opt,name=last_update_throttle_age,json=lastUpdateThrottleAge" json:"last_update_throttle_age,omitempty"`
	// Recovery Count
	UpdateRecoveryCount uint32 `protobuf:"varint,16,opt,name=update_recovery_count,json=updateRecoveryCount" json:"update_recovery_count,omitempty"`
	// Last Recovery time
	LastUpdateRecoveryTimestamp *BgpTimespec `protobuf:"bytes,17,opt,name=last_update_recovery_timestamp,json=lastUpdateRecoveryTimestamp" json:"last_update_recovery_timestamp,omitempty"`
	// Time since last Recovery event (in seconds)
	LastUpdateRecoveryAge uint32 `protobuf:"varint,18,opt,name=last_update_recovery_age,json=lastUpdateRecoveryAge" json:"last_update_recovery_age,omitempty"`
	// Memory allocation failure count
	UpdateMemoryAllocationFailCount uint32 `protobuf:"varint,19,opt,name=update_memory_allocation_fail_count,json=updateMemoryAllocationFailCount" json:"update_memory_allocation_fail_count,omitempty"`
	// Memory allocation failure time
	LastUpdateMemoryAllocationFailTimestamp *BgpTimespec `protobuf:"bytes,20,opt,name=last_update_memory_allocation_fail_timestamp,json=lastUpdateMemoryAllocationFailTimestamp" json:"last_update_memory_allocation_fail_timestamp,omitempty"`
	// Time since last memory allocation failure event (in seconds)
	LastUpdateMemoryAllocationFailAge uint32 `protobuf:"varint,21,opt,name=last_update_memory_allocation_fail_age,json=lastUpdateMemoryAllocationFailAge" json:"last_update_memory_allocation_fail_age,omitempty"`
}

func (m *BgpUpdgenStatsBag) Reset()                    { *m = BgpUpdgenStatsBag{} }
func (m *BgpUpdgenStatsBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdgenStatsBag) ProtoMessage()               {}
func (*BgpUpdgenStatsBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueMessagesHigh() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessagesHigh
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueMessagesCumulative() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessagesCumulative
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueMessagesDiscarded() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessagesDiscarded
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueMessagesCleared() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessagesCleared
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueSizeHigh() uint32 {
	if m != nil {
		return m.UpdateOutQueueSizeHigh
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueSizeCumulative() uint64 {
	if m != nil {
		return m.UpdateOutQueueSizeCumulative
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueSizeDiscarded() uint64 {
	if m != nil {
		return m.UpdateOutQueueSizeDiscarded
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueSizeCleared() uint64 {
	if m != nil {
		return m.UpdateOutQueueSizeCleared
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateDiscardTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateDiscardTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateDiscardAge() uint32 {
	if m != nil {
		return m.LastUpdateDiscardAge
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateClearedTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateClearedTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateCleardAge() uint32 {
	if m != nil {
		return m.LastUpdateCleardAge
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateThrottleCount() uint32 {
	if m != nil {
		return m.UpdateThrottleCount
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateThrottleTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateThrottleTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateThrottleAge() uint32 {
	if m != nil {
		return m.LastUpdateThrottleAge
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateRecoveryCount() uint32 {
	if m != nil {
		return m.UpdateRecoveryCount
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateRecoveryTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateRecoveryTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateRecoveryAge() uint32 {
	if m != nil {
		return m.LastUpdateRecoveryAge
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateMemoryAllocationFailCount() uint32 {
	if m != nil {
		return m.UpdateMemoryAllocationFailCount
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateMemoryAllocationFailTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateMemoryAllocationFailTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateMemoryAllocationFailAge() uint32 {
	if m != nil {
		return m.LastUpdateMemoryAllocationFailAge
	}
	return 0
}

func init() {
	proto.RegisterType((*BgpUpdgenNbrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.bgp_updgen_nbr_bag_KEYS")
	proto.RegisterType((*BgpUpdgenNbrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.bgp_updgen_nbr_bag")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.bgp_timespec")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.IPV6AddressType")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.bgp_addrtype")
	proto.RegisterType((*BgpUpdgenStatsBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.default_vrf.afs.af.update_generation_neighbors.update_generation_neighbor.bgp_updgen_stats_bag")
}

func init() { proto.RegisterFile("bgp_updgen_nbr_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5b, 0xd9, 0x6e, 0xdc, 0xd6,
	0x19, 0x06, 0xbd, 0xfb, 0x97, 0x64, 0x49, 0x94, 0x46, 0x1a, 0xc9, 0x96, 0x35, 0x92, 0x83, 0x44,
	0x6d, 0x5d, 0x19, 0x91, 0xe5, 0x71, 0x62, 0x67, 0xb1, 0x2c, 0xcb, 0xb6, 0x62, 0x49, 0x96, 0x39,
	0xb2, 0xd2, 0x74, 0x63, 0x39, 0xc3, 0x33, 0x23, 0x36, 0x1c, 0x72, 0x72, 0x0e, 0x39, 0xb6, 0xfc,
	0x0c, 0x7d, 0x82, 0x02, 0x2d, 0xba, 0x20, 0x45, 0xaf, 0xfa, 0x00, 0xbd, 0x2b, 0x7a, 0x53, 0xa0,
	0x0b, 0x8a, 0xa6, 0x57, 0x69, 0x10, 0x34, 0x40, 0x17, 0x14, 0x7d, 0x83, 0x5e, 0x15, 0x67, 0x23,
	0x0f, 0x37, 0x59, 0xb9, 0xe3, 0x5c, 0x59, 0xc3, 0x7f, 0x39, 0xe7, 0xfb, 0xfe, 0x85, 0x67, 0xa1,
	0xa1, 0xda, 0xec, 0xf4, 0xcc, 0xb0, 0x67, 0x77, 0x90, 0x67, 0x7a, 0x4d, 0x6c, 0x36, 0xad, 0xce,
	0x72, 0x0f, 0xfb, 0x81, 0xaf, 0xff, 0x40, 0x6b, 0x39, 0xa4, 0xe5, 0x9b, 0x8e, 0x4f, 0xcc, 0xe7,
	0xd8, 0x74, 0x7a, 0xfd, 0x55, 0x93, 0x2a, 0xfb, 0x3d, 0x84, 0x97, 0x9b, 0x9d, 0xde, 0xb2, 0xe3,
	0x91, 0xc0, 0xf2, 0x5a, 0x88, 0x44, 0x7f, 0x45, 0x7f, 0x98, 0xf4, 0x1f, 0xbb, 0x79, 0xb8, 0x6c,
	0xa3, 0xb6, 0x15, 0xba, 0x81, 0xd9, 0xc7, 0xed, 0x65, 0xab, 0x4d, 0x96, 0xad, 0xf6, 0x72, 0xd8,
	0xb3, 0xad, 0x00, 0x99, 0x1d, 0xe4, 0x21, 0x6c, 0x05, 0x8e, 0xef, 0x99, 0x1e, 0x72, 0x3a, 0x07,
	0x4d, 0x1f, 0x93, 0x23, 0x64, 0x8b, 0xbf, 0x3c, 0x01, 0xd3, 0xd9, 0xb9, 0x9a, 0x8f, 0x36, 0x3e,
	0x68, 0xe8, 0x57, 0x60, 0x24, 0x1a, 0xd9, 0xb3, 0xba, 0xa8, 0xaa, 0xd5, 0xb4, 0xa5, 0xf3, 0xc6,
	0xb0, 0x7c, 0xb8, 0x63, 0x75, 0x91, 0x3e, 0x0d, 0x67, 0xad, 0x36, 0x17, 0x9f, 0x60, 0xe2, 0x33,
	0x56, 0x9b, 0x09, 0xae, 0x82, 0x2e, 0xc7, 0xc5, 0x7e, 0xd8, 0x33, 0x1d, 0xcf, 0x46, 0xcf, 0xab,
	0x27, 0x6b, 0xda, 0xd2, 0x88, 0x31, 0xc6, 0x25, 0x0f, 0xa8, 0x60, 0x93, 0x3e, 0xd7, 0x5f, 0x85,
	0x51, 0x12, 0x36, 0x13, 0xaa, 0xa7, 0x98, 0xea, 0x08, 0x09, 0x9b, 0x8a, 0x5e, 0x0d, 0x86, 0x15,
	0x3d, 0xbb, 0x7a, 0x9a, 0x29, 0x41, 0xa4, 0x64, 0xd3, 0x71, 0xdb, 0x8e, 0x1b, 0x20, 0x9c, 0x70,
	0x76, 0x86, 0x8f, 0xcb, 0x25, 0x8a, 0xbf, 0xaf, 0xc0, 0x98, 0xe4, 0xc2, 0xb4, 0x6c, 0x1b, 0x23,
	0x42, 0xaa, 0x67, 0x19, 0x8e, 0x51, 0xf9, 0x7c, 0x8d, 0x3f, 0x5e, 0xfc, 0xd5, 0x32, 0xe8, 0x59,
	0xaa, 0xf4, 0x39, 0x80, 0x1e, 0xf6, 0x5b, 0x88, 0x10, 0x3a, 0x9f, 0x15, 0x36, 0xce, 0x79, 0xf1,
	0x64, 0xd3, 0xa6, 0xc0, 0x04, 0x0d, 0x7d, 0x2c, 0x78, 0xba, 0xce, 0xfc, 0x8f, 0xf0, 0xc7, 0xfb,
	0x98, 0xd3, 0x75, 0x0d, 0x26, 0x13, 0x74, 0x49, 0x52, 0x57, 0x99, 0xf2, 0xb8, 0x42, 0xd8, 0x1a,
	0x37, 0xf8, 0x44, 0x83, 0x69, 0x61, 0x91, 0x41, 0x70, 0xa3, 0xa6, 0x2d, 0x0d, 0xad, 0xfc, 0x50,
	0x5b, 0x2e, 0x53, 0xae, 0xd1, 0x11, 0xd9, 0x0c, 0x83, 0xc3, 0x1e, 0x32, 0x2a, 0x5c, 0x71, 0x27,
	0x49, 0xb2, 0xfe, 0x26, 0xcc, 0x08, 0x0f, 0x39, 0x41, 0xac, 0x33, 0x72, 0xa7, 0xb8, 0xc2, 0xfd,
	0x74, 0x28, 0x6f, 0xc3, 0x2c, 0x46, 0x6d, 0x8c, 0xc8, 0x41, 0x9e, 0xed, 0x4d, 0x66, 0x3b, 0x2d,
	0x34, 0x32, 0xc6, 0x39, 0xf9, 0xf7, 0x46, 0x5e, 0xfe, 0xdd, 0x00, 0xe9, 0xc2, 0x4c, 0xeb, 0xbf,
	0xc9, 0xf4, 0x27, 0x85, 0xb8, 0x91, 0x30, 0xbb, 0x06, 0x93, 0x39, 0x66, 0x76, 0xf5, 0x16, 0xb3,
	0x19, 0x4f, 0xdb, 0xd8, 0x05, 0xd5, 0x73, 0xbb, 0xa0, 0x7a, 0x62, 0xd6, 0xba, 0x96, 0xe3, 0x99,
	0x81, 0xd5, 0x74, 0x91, 0xd9, 0x47, 0x98, 0x38, 0xbe, 0x57, 0x7d, 0x4b, 0x65, 0x6d, 0xdb, 0x72,
	0xbc, 0x3d, 0x2a, 0xde, 0xe7, 0x52, 0xfd, 0x1d, 0xb8, 0xa4, 0xe4, 0x27, 0xb7, 0xc4, 0x4e, 0x33,
	0xb2, 0x7e, 0x9b, 0x59, 0x57, 0xa3, 0x64, 0x65, 0xc6, 0x86, 0xd3, 0x94, 0xf6, 0xf1, 0xd0, 0x7e,
	0x18, 0x98, 0x1f, 0x85, 0x28, 0x44, 0x66, 0x17, 0x11, 0x62, 0x75, 0x10, 0xa9, 0xbe, 0xa3, 0x0e,
	0xfd, 0x38, 0x0c, 0x9e, 0x50, 0xf1, 0xb6, 0x90, 0xea, 0xaf, 0x43, 0x25, 0x63, 0x4a, 0x9c, 0x17,
	0xa8, 0xfa, 0x2e, 0x33, 0xd3, 0x93, 0x66, 0x0d, 0xe7, 0x05, 0xd2, 0x1f, 0xc2, 0x82, 0xe4, 0xb1,
	0x78, 0xd4, 0x3b, 0xcc, 0x7c, 0x4e, 0x28, 0x3e, 0xcd, 0x1f, 0xfc, 0x0e, 0xcc, 0x15, 0x7a, 0x62,
	0x93, 0x58, 0x63, 0x5e, 0x66, 0x72, 0xbd, 0xb0, 0xb9, 0xbc, 0x1b, 0x31, 0x97, 0x48, 0xb7, 0x68,
	0x1a, 0x77, 0xb9, 0x83, 0x4c, 0xb6, 0x46, 0x53, 0xf8, 0x9b, 0x06, 0x97, 0x5c, 0x8b, 0x04, 0x4a,
	0x4a, 0x58, 0xb6, 0x6d, 0x06, 0x4e, 0x17, 0x91, 0xc0, 0xea, 0xf6, 0xaa, 0xeb, 0xa5, 0x2d, 0x63,
	0x36, 0xc7, 0x1e, 0x6a, 0x19, 0x55, 0x0a, 0x40, 0xe6, 0xed, 0x9a, 0x6d, 0xef, 0xc9, 0xc9, 0xeb,
	0x5f, 0x68, 0x30, 0x9f, 0x42, 0x87, 0x51, 0xd7, 0xef, 0x23, 0x05, 0xe0, 0xbd, 0xf2, 0x03, 0xbc,
	0xa8, 0x02, 0x34, 0x18, 0x80, 0x1c, 0x8c, 0x89, 0x0c, 0x48, 0x06, 0x71, 0x63, 0x40, 0x30, 0x2a,
	0x19, 0x9a, 0x88, 0xe3, 0xbf, 0x35, 0x58, 0xcc, 0x62, 0xcc, 0x84, 0xf2, 0x7e, 0xf9, 0x61, 0x5e,
	0x4e, 0xc1, 0x4c, 0x47, 0xb3, 0x0a, 0x67, 0x65, 0xd7, 0x7b, 0xc0, 0x6a, 0x57, 0xfe, 0xd4, 0x57,
	0x61, 0xaa, 0x87, 0x3c, 0xdb, 0xf1, 0x3a, 0x66, 0x60, 0xe1, 0x0e, 0x0a, 0xa2, 0xf6, 0xf8, 0x90,
	0x37, 0x7d, 0x21, 0xdd, 0x63, 0x42, 0xd9, 0x1a, 0x97, 0x61, 0xc2, 0x43, 0xcf, 0x03, 0x13, 0x23,
	0x12, 0x76, 0xe3, 0x7e, 0xbc, 0xc9, 0x7b, 0x3e, 0x15, 0x19, 0x4c, 0x22, 0xf5, 0xe7, 0x61, 0xc8,
	0x6a, 0x7d, 0x18, 0xe9, 0xbd, 0xc7, 0x97, 0x36, 0x56, 0xeb, 0x43, 0xa9, 0x70, 0x15, 0x74, 0x72,
	0xe8, 0xb5, 0x90, 0x6d, 0xaa, 0x7a, 0x8f, 0xf8, 0x4b, 0x81, 0x4b, 0xd6, 0x62, 0xed, 0x5b, 0x30,
	0xe3, 0x87, 0x01, 0xe3, 0x94, 0x4e, 0x5c, 0xa8, 0x9b, 0x2d, 0x3f, 0xf4, 0x82, 0xea, 0x16, 0x7f,
	0x1d, 0x2a, 0x0a, 0xc2, 0x6c, 0x9d, 0x8a, 0x29, 0x60, 0xc1, 0xaa, 0x6c, 0x92, 0x72, 0xb4, 0x6d,
	0x0e, 0x98, 0x4b, 0x0d, 0x2e, 0x94, 0x23, 0x3e, 0x80, 0x9a, 0x54, 0xc7, 0xe8, 0xa3, 0x10, 0x91,
	0x00, 0xd9, 0x69, 0xc2, 0x76, 0x12, 0xcd, 0xd9, 0x90, 0x6a, 0x49, 0xe6, 0xd6, 0x60, 0x2e, 0x35,
	0x7c, 0xca, 0xcb, 0x63, 0xe6, 0x65, 0x36, 0x31, 0x8b, 0xa4, 0x8b, 0x75, 0xb8, 0x2c, 0x6d, 0x0b,
	0x42, 0xb7, 0xcb, 0x7c, 0x5c, 0x14, 0x5a, 0xbb, 0x79, 0x11, 0x7c, 0x1b, 0xa4, 0xd8, 0xcc, 0x8b,
	0xe4, 0x13, 0xfe, 0x6e, 0x14, 0x2a, 0x3b, 0x99, 0x80, 0x2e, 0xc3, 0x84, 0x34, 0x57, 0x03, 0x66,
	0x24, 0x5e, 0xfa, 0x4a, 0xc4, 0xfe, 0xa5, 0xc1, 0x42, 0xdb, 0xc1, 0x24, 0x30, 0x65, 0x05, 0xf8,
	0xd8, 0xe9, 0x38, 0x1e, 0x25, 0x22, 0xae, 0xb4, 0xc6, 0x00, 0x54, 0x1a, 0x43, 0x71, 0x8f, 0x3b,
	0x7f, 0x2c, 0x31, 0xc4, 0x95, 0xf6, 0x0f, 0x0d, 0x6a, 0xac, 0xa7, 0x1c, 0x85, 0x73, 0xaf, 0xfc,
	0x38, 0xe7, 0x28, 0x88, 0x62, 0x98, 0xb7, 0x61, 0xb6, 0x00, 0xa5, 0xd5, 0x41, 0xd5, 0xa7, 0xbc,
	0x04, 0xf3, 0x5c, 0xac, 0x75, 0x90, 0x5e, 0x87, 0xe9, 0xac, 0x1d, 0x09, 0xac, 0x00, 0x55, 0xf7,
	0x6b, 0xda, 0xd2, 0xb8, 0x51, 0xb1, 0x53, 0x56, 0x0d, 0x2a, 0xd4, 0x1f, 0xc1, 0x62, 0xd6, 0xce,
	0xf1, 0x02, 0x84, 0x3d, 0xcb, 0x35, 0x5b, 0xbe, 0x17, 0xa0, 0xe7, 0x41, 0xf5, 0x7d, 0xe6, 0x62,
	0x3e, 0xed, 0x62, 0x53, 0xe8, 0xad, 0x73, 0x35, 0xda, 0x71, 0x1c, 0x62, 0x22, 0x1f, 0x9b, 0x4a,
	0xa7, 0xa8, 0x7e, 0xa3, 0xa6, 0x2d, 0x9d, 0x33, 0xc6, 0x1c, 0xb2, 0xe1, 0xe3, 0xc7, 0xf1, 0x73,
	0xda, 0x35, 0xfc, 0x30, 0x68, 0xfa, 0xa1, 0x67, 0x47, 0x85, 0xcb, 0xdb, 0xcd, 0x07, 0xbc, 0x6b,
	0x48, 0xa9, 0xa8, 0x58, 0xde, 0x6b, 0x56, 0xa0, 0xe2, 0x78, 0x79, 0x46, 0xdf, 0x64, 0x46, 0x13,
	0x42, 0x98, 0xb0, 0xf9, 0xa7, 0x06, 0x0b, 0x8c, 0xda, 0xc4, 0x22, 0x99, 0x04, 0x16, 0x0e, 0x94,
	0x0c, 0xfa, 0xd6, 0x80, 0x64, 0xd0, 0xd3, 0x78, 0x3d, 0xdf, 0xa0, 0x10, 0x72, 0x5e, 0xbe, 0x09,
	0x9c, 0xe8, 0x79, 0xcf, 0xc1, 0x87, 0x0a, 0xd0, 0x6f, 0x0f, 0xc8, 0xcb, 0x57, 0x01, 0xba, 0xc1,
	0x30, 0xc4, 0x48, 0xef, 0xc0, 0x9c, 0x43, 0x92, 0x30, 0xa9, 0x2d, 0x36, 0x71, 0xe8, 0x79, 0x34,
	0xe9, 0xbe, 0xc3, 0x92, 0x6e, 0xc6, 0x21, 0x8a, 0x13, 0x6a, 0x8e, 0x0d, 0xae, 0x40, 0x77, 0x32,
	0xad, 0x10, 0x63, 0xe4, 0xa5, 0xd8, 0x92, 0x3b, 0xe9, 0xef, 0xb2, 0x9d, 0x74, 0x55, 0xe8, 0x3c,
	0xcd, 0x6c, 0xa8, 0xdf, 0x80, 0x99, 0x2c, 0xd5, 0xd2, 0xd8, 0x64, 0xc6, 0x95, 0x14, 0x08, 0x61,
	0xf9, 0xb9, 0x06, 0x73, 0xbc, 0x6f, 0x0b, 0x5b, 0xb6, 0x8d, 0x50, 0x17, 0x81, 0xdf, 0x2b, 0x7f,
	0x80, 0x66, 0x19, 0x02, 0x0e, 0x8e, 0x6d, 0x72, 0x94, 0x35, 0xe0, 0x67, 0x72, 0xa7, 0x52, 0x84,
	0xcf, 0x2a, 0x3f, 0xbe, 0x99, 0x38, 0x76, 0x69, 0x78, 0xd7, 0x61, 0x2a, 0x07, 0x1d, 0xed, 0xd1,
	0x4d, 0xde, 0x82, 0xd2, 0xa6, 0xb4, 0x3f, 0xff, 0x57, 0x83, 0x57, 0x98, 0x55, 0x6a, 0x1b, 0x99,
	0xe1, 0xa6, 0x55, 0x7e, 0x6e, 0xd8, 0xcb, 0xd8, 0x50, 0x77, 0xba, 0x69, 0x8a, 0xee, 0xc2, 0xe5,
	0x23, 0xc0, 0x52, 0xaa, 0x6c, 0xbe, 0x24, 0x2b, 0xf0, 0x44, 0x19, 0xa3, 0x59, 0x94, 0x28, 0x93,
	0x67, 0xd8, 0x49, 0xbc, 0xf1, 0xd1, 0x00, 0x64, 0x91, 0x52, 0x25, 0xef, 0xd3, 0xe9, 0xc7, 0x14,
	0x7d, 0xaa, 0xc1, 0x45, 0x35, 0x8d, 0xd2, 0xe8, 0xda, 0x03, 0xb2, 0x9b, 0xcf, 0x05, 0xf7, 0x3a,
	0x54, 0xb2, 0xd8, 0x68, 0xd8, 0x3b, 0xfc, 0xac, 0x26, 0x65, 0x48, 0xc3, 0xfd, 0x1f, 0x0d, 0xae,
	0xe4, 0xe5, 0x4c, 0x9a, 0x97, 0x83, 0xf2, 0xf3, 0x32, 0x9f, 0xc9, 0xea, 0x14, 0x3d, 0x77, 0x60,
	0xae, 0x18, 0x2a, 0xa5, 0xc9, 0xe1, 0x87, 0x41, 0xf9, 0x7e, 0x28, 0x5b, 0x7f, 0xd6, 0x40, 0x1c,
	0xf2, 0xb2, 0x45, 0x9e, 0x43, 0x02, 0xa7, 0x45, 0xaa, 0xdf, 0x67, 0xdc, 0xfc, 0xac, 0x84, 0xdc,
	0x88, 0x53, 0x70, 0x3a, 0x57, 0x62, 0x36, 0xad, 0x8e, 0x3c, 0x95, 0x6c, 0x44, 0x93, 0x5f, 0x7c,
	0x0f, 0x86, 0x55, 0x16, 0xe9, 0xfe, 0x9a, 0xa0, 0x96, 0xef, 0xd9, 0x84, 0xdd, 0x24, 0x8c, 0x18,
	0xf2, 0xa7, 0x5e, 0x83, 0x21, 0xcf, 0xf2, 0x7c, 0x29, 0x3d, 0xc1, 0xa4, 0xea, 0xa3, 0xc5, 0xaf,
	0x43, 0x65, 0x73, 0x77, 0x7f, 0x75, 0x2f, 0xf4, 0x3c, 0xe4, 0x8a, 0xc3, 0xe2, 0xbd, 0xc3, 0x1e,
	0xd2, 0x27, 0xe1, 0x74, 0xdf, 0x72, 0x43, 0x79, 0x39, 0xc1, 0x7f, 0x2c, 0x7e, 0x15, 0x74, 0xaa,
	0xbe, 0x7d, 0x6f, 0xef, 0xe5, 0xba, 0xd7, 0x60, 0xda, 0xd8, 0x5b, 0xf7, 0x3d, 0x12, 0x60, 0xcb,
	0xf1, 0x82, 0x97, 0x1b, 0xbc, 0x06, 0xa3, 0x9b, 0xbb, 0xfb, 0xf5, 0x97, 0x2b, 0xee, 0xf0, 0x7b,
	0x20, 0x16, 0x2e, 0x82, 0x7b, 0xbe, 0xeb, 0xb4, 0x0e, 0xd9, 0x09, 0xb8, 0xc9, 0x57, 0xbd, 0x99,
	0xe7, 0x88, 0x70, 0x6a, 0x86, 0x8d, 0x09, 0x2a, 0x6c, 0x08, 0x99, 0xbc, 0x81, 0x88, 0xfd, 0xd5,
	0x0b, 0xfc, 0xd5, 0x8f, 0xf2, 0x57, 0x4f, 0xfb, 0xbb, 0x09, 0x63, 0xd4, 0x9f, 0xbb, 0xd2, 0xef,
	0x79, 0xd2, 0xcf, 0x15, 0x18, 0x89, 0x7f, 0xc7, 0xf6, 0xc3, 0xec, 0xa1, 0x34, 0xbc, 0x0a, 0x93,
	0x5b, 0x2b, 0xfb, 0xbb, 0x3b, 0x1b, 0xfb, 0xbb, 0x3b, 0x2f, 0xa7, 0xe1, 0x2d, 0xa8, 0xc4, 0xc3,
	0x74, 0x49, 0xef, 0xd9, 0x97, 0x1a, 0xeb, 0x6b, 0x30, 0x41, 0xd9, 0xde, 0x3e, 0xd6, 0x50, 0x5c,
	0x79, 0xf5, 0x78, 0xca, 0x4b, 0x30, 0xb6, 0xd5, 0x30, 0xb7, 0x1a, 0xc7, 0x4a, 0x91, 0xcd, 0xdd,
	0xfe, 0xea, 0x7d, 0xd7, 0x7f, 0x46, 0x33, 0xf9, 0xb8, 0x06, 0xf5, 0xe3, 0x1b, 0x7c, 0x7c, 0x85,
	0x17, 0x8b, 0xbc, 0x1f, 0xd1, 0xc7, 0xe0, 0xa4, 0xd5, 0x76, 0x84, 0x12, 0xfd, 0x53, 0x5f, 0x80,
	0x61, 0x96, 0x31, 0x92, 0x2c, 0x7e, 0xdd, 0x36, 0x44, 0x9f, 0xc9, 0xdb, 0x13, 0xba, 0x5d, 0xa3,
	0x2a, 0xdd, 0x16, 0x6d, 0x46, 0x52, 0xf1, 0x24, 0x53, 0x1c, 0xa3, 0x92, 0x6d, 0x2a, 0x48, 0x6b,
	0xbb, 0x56, 0x13, 0xb9, 0x91, 0xf6, 0xa9, 0x58, 0x7b, 0x8b, 0x0a, 0xa4, 0xf6, 0x5f, 0x35, 0x60,
	0x49, 0x69, 0x06, 0xac, 0x06, 0x23, 0xfd, 0xd3, 0xac, 0x45, 0xfd, 0xbc, 0x64, 0x2d, 0x2a, 0xb7,
	0x59, 0x18, 0xe3, 0x74, 0x5a, 0x89, 0xc7, 0xfa, 0xef, 0x35, 0x18, 0xe3, 0x9c, 0xd9, 0x31, 0x63,
	0x67, 0x18, 0xa6, 0x9f, 0x94, 0x10, 0x53, 0xb2, 0xa3, 0x19, 0x17, 0x58, 0x50, 0xed, 0x28, 0xa4,
	0x4b, 0x02, 0x8c, 0x5a, 0x54, 0xfc, 0x3a, 0x93, 0x69, 0xee, 0x47, 0x65, 0x15, 0xf5, 0x9f, 0x7e,
	0xcf, 0xb3, 0x78, 0xbe, 0x08, 0xf5, 0x73, 0x4c, 0x7d, 0x42, 0xa8, 0x5b, 0xdb, 0xb1, 0x48, 0xff,
	0x8d, 0xc6, 0x52, 0xb0, 0x1e, 0xb9, 0x3e, 0xcf, 0x78, 0xfa, 0x51, 0xf9, 0x78, 0x52, 0x9b, 0x33,
	0x2b, 0x11, 0xf9, 0x40, 0xff, 0x83, 0xc6, 0xb2, 0xbe, 0x9e, 0xaa, 0x11, 0x18, 0x08, 0x24, 0x34,
	0xb8, 0xf5, 0x44, 0x0d, 0x47, 0x70, 0x92, 0x45, 0x3c, 0x34, 0x38, 0x70, 0x12, 0x4d, 0xe6, 0x77,
	0xbc, 0x1a, 0xeb, 0x89, 0x04, 0x1e, 0x1e, 0x08, 0x30, 0xb4, 0xc0, 0xea, 0x4a, 0x81, 0x7d, 0xa2,
	0xc1, 0x54, 0x04, 0x25, 0x99, 0x6c, 0x23, 0x03, 0x01, 0x68, 0x42, 0x00, 0x4a, 0xe4, 0xdb, 0x1f,
	0x35, 0xd0, 0xdd, 0x15, 0x8a, 0xa9, 0xdf, 0x73, 0x49, 0x84, 0xe8, 0x02, 0x43, 0xf4, 0xe3, 0x12,
	0xae, 0x53, 0xd5, 0xc5, 0x8d, 0x31, 0xe6, 0xae, 0xec, 0xf3, 0x99, 0x4b, 0x3c, 0x9f, 0x6a, 0x50,
	0xc1, 0x81, 0xd9, 0x8a, 0x96, 0x7f, 0x11, 0xa4, 0x51, 0x06, 0xe9, 0xe3, 0x92, 0x41, 0x2a, 0x58,
	0xa9, 0x1a, 0x13, 0x38, 0xc8, 0x08, 0xf4, 0x3f, 0x69, 0x30, 0xce, 0x7b, 0x9d, 0x5a, 0x4e, 0x63,
	0x0c, 0xd8, 0x4f, 0x4b, 0x98, 0x7d, 0xa9, 0x65, 0x9b, 0x31, 0xca, 0xda, 0x5d, 0xbc, 0x16, 0x94,
	0x80, 0x56, 0x93, 0x80, 0xc6, 0xcb, 0x0a, 0x68, 0x35, 0x0f, 0xd0, 0xaa, 0x0a, 0xe8, 0x2f, 0x1a,
	0x4c, 0xf0, 0x72, 0x32, 0x91, 0x0a, 0x49, 0x2f, 0xe5, 0xbe, 0x2f, 0x6f, 0xcd, 0x2f, 0x6a, 0x6a,
	0x43, 0x01, 0xf5, 0x5b, 0x0d, 0x46, 0x5c, 0x62, 0x2a, 0xed, 0x61, 0xa2, 0x94, 0xed, 0x21, 0xbd,
	0xf8, 0x37, 0x86, 0x5c, 0xb2, 0x45, 0x94, 0xfe, 0x2d, 0x43, 0x13, 0xed, 0x59, 0x28, 0x96, 0xc9,
	0x52, 0xae, 0x77, 0x73, 0x37, 0x58, 0x22, 0x36, 0xdb, 0xa4, 0xf7, 0x4c, 0xed, 0x77, 0x6c, 0xae,
	0x6d, 0xb1, 0x35, 0x89, 0x70, 0x55, 0x4a, 0xd9, 0xef, 0x0a, 0xb6, 0x5d, 0x7c, 0x7d, 0x9a, 0x12,
	0x48, 0x70, 0xf5, 0x2c, 0xb8, 0xa9, 0xb2, 0x82, 0xab, 0x17, 0x81, 0x4b, 0x0b, 0xf4, 0x2f, 0x34,
	0x98, 0x89, 0xd6, 0xf6, 0x19, 0x80, 0xd3, 0x03, 0x15, 0xbd, 0x29, 0xb1, 0xbb, 0x28, 0xc0, 0x58,
	0xcf, 0xc7, 0x58, 0x1d, 0xa8, 0x20, 0x4e, 0x89, 0xe5, 0x53, 0x1a, 0xe3, 0x67, 0x7c, 0x5d, 0xb8,
	0x6a, 0x12, 0x6c, 0xa6, 0x8e, 0x6a, 0x66, 0x18, 0xc0, 0x5f, 0x94, 0xb0, 0xb5, 0xe4, 0x1d, 0x61,
	0xc9, 0x33, 0xaa, 0x5d, 0xf5, 0x4c, 0x49, 0xc2, 0xab, 0xe7, 0xc0, 0x9b, 0x2d, 0x33, 0xbc, 0x7a,
	0x2e, 0xbc, 0x7a, 0x0a, 0xde, 0xe2, 0xaf, 0xc7, 0x61, 0x32, 0xef, 0xf8, 0x53, 0xbf, 0x0b, 0x97,
	0x0b, 0xbf, 0x48, 0x34, 0x0f, 0x9c, 0xce, 0x81, 0x38, 0xf3, 0x9c, 0xcd, 0xff, 0x18, 0xf2, 0xa1,
	0xd3, 0x39, 0xd0, 0x77, 0xe0, 0x95, 0x62, 0x1f, 0xad, 0xb0, 0x1b, 0xba, 0x56, 0xe0, 0xf4, 0x91,
	0x38, 0x1f, 0xad, 0xe5, 0x7b, 0x5a, 0x8f, 0xf4, 0xf4, 0x2d, 0xb8, 0x52, 0xec, 0xcf, 0x76, 0x48,
	0xcb, 0xc2, 0x36, 0xb2, 0xc5, 0x37, 0xd9, 0xf3, 0xf9, 0xee, 0xee, 0x49, 0x35, 0xfd, 0x21, 0x2c,
	0x1c, 0x31, 0x3b, 0x17, 0x59, 0x18, 0xd9, 0xe2, 0xa3, 0xed, 0xb9, 0x82, 0xa9, 0x71, 0x25, 0xfd,
	0x16, 0xcc, 0xe6, 0x7e, 0x73, 0xc9, 0x79, 0x3a, 0x9d, 0xf7, 0xd1, 0x68, 0xc3, 0x79, 0x81, 0x18,
	0x47, 0xf7, 0xa1, 0x96, 0x6f, 0xab, 0xf0, 0x73, 0xa6, 0xa6, 0x2d, 0x9d, 0x32, 0x2e, 0x65, 0x3d,
	0x28, 0xdc, 0xdc, 0x83, 0xf9, 0x7c, 0x3f, 0x31, 0x2f, 0x67, 0x99, 0x9b, 0x8b, 0x59, 0x37, 0x31,
	0x27, 0x77, 0xa2, 0x0f, 0x95, 0xd2, 0xb3, 0x11, 0x7c, 0x9c, 0x63, 0x3e, 0x66, 0x72, 0xa6, 0x22,
	0xb8, 0xf8, 0x5c, 0x13, 0x57, 0x07, 0xc2, 0x8f, 0x18, 0x5e, 0xb9, 0x1f, 0x39, 0x3f, 0x00, 0x77,
	0xc7, 0xf1, 0xf5, 0x8f, 0xe0, 0x26, 0xbe, 0x1a, 0xb9, 0x01, 0xd3, 0x79, 0xf8, 0xac, 0x0e, 0x62,
	0x87, 0x2e, 0x23, 0xc6, 0x64, 0xc6, 0x78, 0xad, 0x83, 0x32, 0xbc, 0x08, 0x42, 0x15, 0x5e, 0x86,
	0x06, 0x8a, 0x17, 0x11, 0xef, 0xc2, 0x4b, 0x67, 0x86, 0x8f, 0xd3, 0x32, 0x9c, 0xbe, 0x74, 0x66,
	0xb6, 0x8c, 0x95, 0x95, 0xe8, 0x93, 0xe9, 0xe0, 0x00, 0xfb, 0x41, 0xe0, 0x22, 0xf1, 0xad, 0xcc,
	0x08, 0xb7, 0xe1, 0xc2, 0x3d, 0x21, 0xe3, 0xdf, 0xca, 0xfc, 0x5d, 0x13, 0x77, 0xb7, 0x69, 0xcb,
	0x98, 0xca, 0x0b, 0x03, 0xf2, 0x8d, 0xea, 0xd3, 0x04, 0xbc, 0x98, 0xcb, 0x9b, 0x50, 0xcd, 0x45,
	0x48, 0xd9, 0x1c, 0x65, 0xcc, 0x54, 0xb2, 0xe6, 0x49, 0x3e, 0x31, 0x6a, 0xf9, 0x7d, 0x84, 0x0f,
	0x05, 0x9f, 0x63, 0x2a, 0x9f, 0x86, 0x90, 0xe5, 0xf3, 0x19, 0x59, 0xc6, 0x7c, 0x8e, 0x0f, 0x14,
	0x9f, 0x12, 0x5e, 0x21, 0x9f, 0x11, 0x42, 0xca, 0xa7, 0x9e, 0xe6, 0x53, 0x9a, 0x53, 0x3e, 0xe3,
	0x37, 0x4e, 0x17, 0x75, 0x7d, 0x6a, 0xe1, 0xba, 0x7e, 0x8b, 0xcf, 0xa3, 0x6d, 0x39, 0xae, 0x60,
	0x77, 0x42, 0x7d, 0xe3, 0x6c, 0x33, 0xcd, 0xb5, 0x48, 0xf1, 0xbe, 0xe5, 0xb8, 0x9c, 0xe9, 0xff,
	0x69, 0x70, 0x55, 0x9d, 0x47, 0x81, 0xcf, 0x98, 0xf7, 0xc9, 0xf2, 0xf3, 0xfe, 0x5a, 0x4c, 0x5c,
	0x1e, 0xf0, 0x38, 0x06, 0x4f, 0xe0, 0xd5, 0x63, 0x60, 0xa7, 0x11, 0xa9, 0x30, 0x36, 0x17, 0x8e,
	0x76, 0xbc, 0xd6, 0x41, 0xcd, 0x33, 0xec, 0xbf, 0xa0, 0x5d, 0xff, 0x7f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x77, 0xfd, 0x9e, 0xa6, 0x9e, 0x36, 0x00, 0x00,
}
