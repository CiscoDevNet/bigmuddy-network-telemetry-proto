// Code generated by protoc-gen-go.
// source: bgp_upderr_nbr_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_update_inbound_error_neighbors_update_inbound_error_neighbor is a generated protocol buffer package.

It is generated from these files:
	bgp_upderr_nbr_bag.proto

It has these top-level messages:
	BgpUpderrNbrBag_KEYS
	BgpUpderrNbrBag
	BgpTimespec
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	BgpIpv4SrpolicyAddrT
	BgpIpv6SrpolicyAddrT
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
	BgpUpderrResetDataBag
	BgpUpderrElemBag
	BgpUpderrMsgBag
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_update_inbound_error_neighbors_update_inbound_error_neighbor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP Update error-handling Neighbor information
type BgpUpderrNbrBag_KEYS struct {
	InstanceName    string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	VrfName         string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
}

func (m *BgpUpderrNbrBag_KEYS) Reset()                    { *m = BgpUpderrNbrBag_KEYS{} }
func (m *BgpUpderrNbrBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpUpderrNbrBag_KEYS) ProtoMessage()               {}
func (*BgpUpderrNbrBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpUpderrNbrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpUpderrNbrBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpUpderrNbrBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

type BgpUpderrNbrBag struct {
	// VRF Name
	UpdateVrfName string `protobuf:"bytes,50,opt,name=update_vrf_name,json=updateVrfName" json:"update_vrf_name,omitempty"`
	// Neighbor address
	UpdateNeighborAddress *BgpAddrtype `protobuf:"bytes,51,opt,name=update_neighbor_address,json=updateNeighborAddress" json:"update_neighbor_address,omitempty"`
	// Configure error-handling to avoid resets
	UpdateErrorHandlingAvoidReset bool `protobuf:"varint,52,opt,name=update_error_handling_avoid_reset,json=updateErrorHandlingAvoidReset" json:"update_error_handling_avoid_reset,omitempty"`
	// Total update messages count
	TotalUpdateMessageCount uint32 `protobuf:"varint,53,opt,name=total_update_message_count,json=totalUpdateMessageCount" json:"total_update_message_count,omitempty"`
	// Malformed messages count
	UpdateMalformedMessageCount uint32 `protobuf:"varint,54,opt,name=update_malformed_message_count,json=updateMalformedMessageCount" json:"update_malformed_message_count,omitempty"`
	// First malformed message received time: time elapsed since 00:00:00 UTC, January 1, 1970
	FirstUpdateMalformedTimestamp *BgpTimespec `protobuf:"bytes,55,opt,name=first_update_malformed_timestamp,json=firstUpdateMalformedTimestamp" json:"first_update_malformed_timestamp,omitempty"`
	// Last malformed message received time: time elapsed since 00:00:00 UTC, January 1, 1970
	LastUpdateMalformedTimestamp *BgpTimespec `protobuf:"bytes,56,opt,name=last_update_malformed_timestamp,json=lastUpdateMalformedTimestamp" json:"last_update_malformed_timestamp,omitempty"`
	// Time since last malformed message received event (in seconds)
	LastUpdateMalformedAge uint32 `protobuf:"varint,57,opt,name=last_update_malformed_age,json=lastUpdateMalformedAge" json:"last_update_malformed_age,omitempty"`
	// Memory allocation failure count
	UpdateMemoryAllocationFailCount uint32 `protobuf:"varint,58,opt,name=update_memory_allocation_fail_count,json=updateMemoryAllocationFailCount" json:"update_memory_allocation_fail_count,omitempty"`
	// First memory allocation failure time: time elapsed since 00:00:00 UTC, January 1, 1970
	FirstUpdateMemoryAllocationFailTimestamp *BgpTimespec `protobuf:"bytes,59,opt,name=first_update_memory_allocation_fail_timestamp,json=firstUpdateMemoryAllocationFailTimestamp" json:"first_update_memory_allocation_fail_timestamp,omitempty"`
	// Last memory allocation failure time: time elapsed since 00:00:00 UTC, January 1, 1970
	LastUpdateMemoryAllocationFailTimestamp *BgpTimespec `protobuf:"bytes,60,opt,name=last_update_memory_allocation_fail_timestamp,json=lastUpdateMemoryAllocationFailTimestamp" json:"last_update_memory_allocation_fail_timestamp,omitempty"`
	// Time since last memory allocation failure event (in seconds)
	LastUpdateMemoryAllocationFailAge uint32 `protobuf:"varint,61,opt,name=last_update_memory_allocation_fail_age,json=lastUpdateMemoryAllocationFailAge" json:"last_update_memory_allocation_fail_age,omitempty"`
	// Error-handling reset count
	UpdateErrorHandlingResetCount uint32 `protobuf:"varint,62,opt,name=update_error_handling_reset_count,json=updateErrorHandlingResetCount" json:"update_error_handling_reset_count,omitempty"`
	// First error-handling reset time: time elapsed since 00:00:00 UTC, January 1, 1970
	FirstUpdateErrorHandlingResetTimestamp *BgpTimespec `protobuf:"bytes,63,opt,name=first_update_error_handling_reset_timestamp,json=firstUpdateErrorHandlingResetTimestamp" json:"first_update_error_handling_reset_timestamp,omitempty"`
	// Last error-handling reset time: time elapsed since 00:00:00 UTC, January 1, 1970
	LastErrorHandlingResetTimestamp *BgpTimespec `protobuf:"bytes,64,opt,name=last_error_handling_reset_timestamp,json=lastErrorHandlingResetTimestamp" json:"last_error_handling_reset_timestamp,omitempty"`
	// Time since last error-handling reset event (in seconds)
	LastErrorHandlingResetAge uint32 `protobuf:"varint,65,opt,name=last_error_handling_reset_age,json=lastErrorHandlingResetAge" json:"last_error_handling_reset_age,omitempty"`
	// List of malformed messages
	UpdateErrorMessageList []*BgpUpderrMsgBag `protobuf:"bytes,66,rep,name=update_error_message_list,json=updateErrorMessageList" json:"update_error_message_list,omitempty"`
	// Malformed messages list count
	UpdateErrorMessageListCount uint32 `protobuf:"varint,67,opt,name=update_error_message_list_count,json=updateErrorMessageListCount" json:"update_error_message_list_count,omitempty"`
	// Discarded attribute count
	UpdateAttributeDiscardCount uint32 `protobuf:"varint,68,opt,name=update_attribute_discard_count,json=updateAttributeDiscardCount" json:"update_attribute_discard_count,omitempty"`
	// Total update messages count since session establishment
	EstablishmentTotalUpdateMessageCount uint32 `protobuf:"varint,69,opt,name=establishment_total_update_message_count,json=establishmentTotalUpdateMessageCount" json:"establishment_total_update_message_count,omitempty"`
	// Number of occurence of each action type since session establishment
	EstablishmentActionCount []uint32 `protobuf:"varint,70,rep,packed,name=establishment_action_count,json=establishmentActionCount" json:"establishment_action_count,omitempty"`
}

func (m *BgpUpderrNbrBag) Reset()                    { *m = BgpUpderrNbrBag{} }
func (m *BgpUpderrNbrBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpderrNbrBag) ProtoMessage()               {}
func (*BgpUpderrNbrBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpUpderrNbrBag) GetUpdateVrfName() string {
	if m != nil {
		return m.UpdateVrfName
	}
	return ""
}

func (m *BgpUpderrNbrBag) GetUpdateNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.UpdateNeighborAddress
	}
	return nil
}

func (m *BgpUpderrNbrBag) GetUpdateErrorHandlingAvoidReset() bool {
	if m != nil {
		return m.UpdateErrorHandlingAvoidReset
	}
	return false
}

func (m *BgpUpderrNbrBag) GetTotalUpdateMessageCount() uint32 {
	if m != nil {
		return m.TotalUpdateMessageCount
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetUpdateMalformedMessageCount() uint32 {
	if m != nil {
		return m.UpdateMalformedMessageCount
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetFirstUpdateMalformedTimestamp() *BgpTimespec {
	if m != nil {
		return m.FirstUpdateMalformedTimestamp
	}
	return nil
}

func (m *BgpUpderrNbrBag) GetLastUpdateMalformedTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateMalformedTimestamp
	}
	return nil
}

func (m *BgpUpderrNbrBag) GetLastUpdateMalformedAge() uint32 {
	if m != nil {
		return m.LastUpdateMalformedAge
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetUpdateMemoryAllocationFailCount() uint32 {
	if m != nil {
		return m.UpdateMemoryAllocationFailCount
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetFirstUpdateMemoryAllocationFailTimestamp() *BgpTimespec {
	if m != nil {
		return m.FirstUpdateMemoryAllocationFailTimestamp
	}
	return nil
}

func (m *BgpUpderrNbrBag) GetLastUpdateMemoryAllocationFailTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateMemoryAllocationFailTimestamp
	}
	return nil
}

func (m *BgpUpderrNbrBag) GetLastUpdateMemoryAllocationFailAge() uint32 {
	if m != nil {
		return m.LastUpdateMemoryAllocationFailAge
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetUpdateErrorHandlingResetCount() uint32 {
	if m != nil {
		return m.UpdateErrorHandlingResetCount
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetFirstUpdateErrorHandlingResetTimestamp() *BgpTimespec {
	if m != nil {
		return m.FirstUpdateErrorHandlingResetTimestamp
	}
	return nil
}

func (m *BgpUpderrNbrBag) GetLastErrorHandlingResetTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastErrorHandlingResetTimestamp
	}
	return nil
}

func (m *BgpUpderrNbrBag) GetLastErrorHandlingResetAge() uint32 {
	if m != nil {
		return m.LastErrorHandlingResetAge
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetUpdateErrorMessageList() []*BgpUpderrMsgBag {
	if m != nil {
		return m.UpdateErrorMessageList
	}
	return nil
}

func (m *BgpUpderrNbrBag) GetUpdateErrorMessageListCount() uint32 {
	if m != nil {
		return m.UpdateErrorMessageListCount
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetUpdateAttributeDiscardCount() uint32 {
	if m != nil {
		return m.UpdateAttributeDiscardCount
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetEstablishmentTotalUpdateMessageCount() uint32 {
	if m != nil {
		return m.EstablishmentTotalUpdateMessageCount
	}
	return 0
}

func (m *BgpUpderrNbrBag) GetEstablishmentActionCount() []uint32 {
	if m != nil {
		return m.EstablishmentActionCount
	}
	return nil
}

type BgpTimespec struct {
	// Seconds part of time value
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Nanoseconds part of time value
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *BgpTimespec) Reset()                    { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string            { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()               {}
func (*BgpTimespec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()                    { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()                    { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
	// IPV4 Policy Addr
	Ipv4SrPolicyAddress *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress" json:"ipv4_sr_policy_address,omitempty"`
	// IPV6 Policy Addr
	Ipv6SrPolicyAddress *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress" json:"ipv6_sr_policy_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

// BGP Update error-handling session reset information
type BgpUpderrResetDataBag struct {
	// Reset Reason
	UpdateErrorResetReason string `protobuf:"bytes,1,opt,name=update_error_reset_reason,json=updateErrorResetReason" json:"update_error_reset_reason,omitempty"`
	// Notification code
	UpdateErrorResetNotificationCode uint32 `protobuf:"varint,2,opt,name=update_error_reset_notification_code,json=updateErrorResetNotificationCode" json:"update_error_reset_notification_code,omitempty"`
	// Notification sub code
	UpdateErrorResetNotificationSubCode uint32 `protobuf:"varint,3,opt,name=update_error_reset_notification_sub_code,json=updateErrorResetNotificationSubCode" json:"update_error_reset_notification_sub_code,omitempty"`
	// Notification data
	UpdateErrorResetNotificationData []byte `protobuf:"bytes,4,opt,name=update_error_reset_notification_data,json=updateErrorResetNotificationData,proto3" json:"update_error_reset_notification_data,omitempty"`
	// Notification data length
	UpdateErrorResetNotificationDataLength uint32 `protobuf:"varint,5,opt,name=update_error_reset_notification_data_length,json=updateErrorResetNotificationDataLength" json:"update_error_reset_notification_data_length,omitempty"`
}

func (m *BgpUpderrResetDataBag) Reset()                    { *m = BgpUpderrResetDataBag{} }
func (m *BgpUpderrResetDataBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpderrResetDataBag) ProtoMessage()               {}
func (*BgpUpderrResetDataBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BgpUpderrResetDataBag) GetUpdateErrorResetReason() string {
	if m != nil {
		return m.UpdateErrorResetReason
	}
	return ""
}

func (m *BgpUpderrResetDataBag) GetUpdateErrorResetNotificationCode() uint32 {
	if m != nil {
		return m.UpdateErrorResetNotificationCode
	}
	return 0
}

func (m *BgpUpderrResetDataBag) GetUpdateErrorResetNotificationSubCode() uint32 {
	if m != nil {
		return m.UpdateErrorResetNotificationSubCode
	}
	return 0
}

func (m *BgpUpderrResetDataBag) GetUpdateErrorResetNotificationData() []byte {
	if m != nil {
		return m.UpdateErrorResetNotificationData
	}
	return nil
}

func (m *BgpUpderrResetDataBag) GetUpdateErrorResetNotificationDataLength() uint32 {
	if m != nil {
		return m.UpdateErrorResetNotificationDataLength
	}
	return 0
}

// BGP Update error-handling element information
type BgpUpderrElemBag struct {
	// Attribute Flags [RFC4271: BGP4]
	UpdateAttributeFlags uint32 `protobuf:"varint,1,opt,name=update_attribute_flags,json=updateAttributeFlags" json:"update_attribute_flags,omitempty"`
	// Attribute code [RFC4271: BGP4]
	UpdateAttributeCode uint32 `protobuf:"varint,2,opt,name=update_attribute_code,json=updateAttributeCode" json:"update_attribute_code,omitempty"`
	// Attribute Length [RFC4271: BGP4]
	UpdateAttributeLength uint32 `protobuf:"varint,3,opt,name=update_attribute_length,json=updateAttributeLength" json:"update_attribute_length,omitempty"`
	// Error data
	UpdateErrorData []byte `protobuf:"bytes,4,opt,name=update_error_data,json=updateErrorData,proto3" json:"update_error_data,omitempty"`
	// Error data length
	UpdateErrorDataLength uint32 `protobuf:"varint,5,opt,name=update_error_data_length,json=updateErrorDataLength" json:"update_error_data_length,omitempty"`
	// Error action
	UpdateErrorAction string `protobuf:"bytes,6,opt,name=update_error_action,json=updateErrorAction" json:"update_error_action,omitempty"`
}

func (m *BgpUpderrElemBag) Reset()                    { *m = BgpUpderrElemBag{} }
func (m *BgpUpderrElemBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpderrElemBag) ProtoMessage()               {}
func (*BgpUpderrElemBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BgpUpderrElemBag) GetUpdateAttributeFlags() uint32 {
	if m != nil {
		return m.UpdateAttributeFlags
	}
	return 0
}

func (m *BgpUpderrElemBag) GetUpdateAttributeCode() uint32 {
	if m != nil {
		return m.UpdateAttributeCode
	}
	return 0
}

func (m *BgpUpderrElemBag) GetUpdateAttributeLength() uint32 {
	if m != nil {
		return m.UpdateAttributeLength
	}
	return 0
}

func (m *BgpUpderrElemBag) GetUpdateErrorData() []byte {
	if m != nil {
		return m.UpdateErrorData
	}
	return nil
}

func (m *BgpUpderrElemBag) GetUpdateErrorDataLength() uint32 {
	if m != nil {
		return m.UpdateErrorDataLength
	}
	return 0
}

func (m *BgpUpderrElemBag) GetUpdateErrorAction() string {
	if m != nil {
		return m.UpdateErrorAction
	}
	return ""
}

// BGP Update error message information
type BgpUpderrMsgBag struct {
	// Error final action
	UpdateErrorFinalAction string `protobuf:"bytes,1,opt,name=update_error_final_action,json=updateErrorFinalAction" json:"update_error_final_action,omitempty"`
	// Message timestamp: time elapsed since 00:00:00 UTC, January 1, 1970
	UpdateMessageTimestamp *BgpTimespec `protobuf:"bytes,2,opt,name=update_message_timestamp,json=updateMessageTimestamp" json:"update_message_timestamp,omitempty"`
	// Discarded attribute count
	UpdateAttributeDiscardCount uint32 `protobuf:"varint,3,opt,name=update_attribute_discard_count,json=updateAttributeDiscardCount" json:"update_attribute_discard_count,omitempty"`
	// Reset data
	UpdateMessageResetData *BgpUpderrResetDataBag `protobuf:"bytes,4,opt,name=update_message_reset_data,json=updateMessageResetData" json:"update_message_reset_data,omitempty"`
	// Error element list
	UpdateErrorElementList []*BgpUpderrElemBag `protobuf:"bytes,5,rep,name=update_error_element_list,json=updateErrorElementList" json:"update_error_element_list,omitempty"`
	// NLRI address-family
	UpdateErrorNlriAddressFamily string `protobuf:"bytes,6,opt,name=update_error_nlri_address_family,json=updateErrorNlriAddressFamily" json:"update_error_nlri_address_family,omitempty"`
	// List of NLRIs in string format
	UpdateErrorNlriString string `protobuf:"bytes,7,opt,name=update_error_nlri_string,json=updateErrorNlriString" json:"update_error_nlri_string,omitempty"`
	// Indicates whether NLRI string was truncated due to lack of space
	UpdateErrorNlriStringTruncated bool `protobuf:"varint,8,opt,name=update_error_nlri_string_truncated,json=updateErrorNlriStringTruncated" json:"update_error_nlri_string_truncated,omitempty"`
	// Raw Message data in binary format
	UpdateMessageData []uint32 `protobuf:"varint,9,rep,packed,name=update_message_data,json=updateMessageData" json:"update_message_data,omitempty"`
}

func (m *BgpUpderrMsgBag) Reset()                    { *m = BgpUpderrMsgBag{} }
func (m *BgpUpderrMsgBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpderrMsgBag) ProtoMessage()               {}
func (*BgpUpderrMsgBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *BgpUpderrMsgBag) GetUpdateErrorFinalAction() string {
	if m != nil {
		return m.UpdateErrorFinalAction
	}
	return ""
}

func (m *BgpUpderrMsgBag) GetUpdateMessageTimestamp() *BgpTimespec {
	if m != nil {
		return m.UpdateMessageTimestamp
	}
	return nil
}

func (m *BgpUpderrMsgBag) GetUpdateAttributeDiscardCount() uint32 {
	if m != nil {
		return m.UpdateAttributeDiscardCount
	}
	return 0
}

func (m *BgpUpderrMsgBag) GetUpdateMessageResetData() *BgpUpderrResetDataBag {
	if m != nil {
		return m.UpdateMessageResetData
	}
	return nil
}

func (m *BgpUpderrMsgBag) GetUpdateErrorElementList() []*BgpUpderrElemBag {
	if m != nil {
		return m.UpdateErrorElementList
	}
	return nil
}

func (m *BgpUpderrMsgBag) GetUpdateErrorNlriAddressFamily() string {
	if m != nil {
		return m.UpdateErrorNlriAddressFamily
	}
	return ""
}

func (m *BgpUpderrMsgBag) GetUpdateErrorNlriString() string {
	if m != nil {
		return m.UpdateErrorNlriString
	}
	return ""
}

func (m *BgpUpderrMsgBag) GetUpdateErrorNlriStringTruncated() bool {
	if m != nil {
		return m.UpdateErrorNlriStringTruncated
	}
	return false
}

func (m *BgpUpderrMsgBag) GetUpdateMessageData() []uint32 {
	if m != nil {
		return m.UpdateMessageData
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpUpderrNbrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_upderr_nbr_bag_KEYS")
	proto.RegisterType((*BgpUpderrNbrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_upderr_nbr_bag")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_timespec")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.IPV6AddressType")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_addrtype")
	proto.RegisterType((*BgpUpderrResetDataBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_upderr_reset_data_bag")
	proto.RegisterType((*BgpUpderrElemBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_upderr_elem_bag")
	proto.RegisterType((*BgpUpderrMsgBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.update_inbound_error_neighbors.update_inbound_error_neighbor.bgp_upderr_msg_bag")
}

func init() { proto.RegisterFile("bgp_upderr_nbr_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1922 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x57, 0xc7, 0x64, 0xe3, 0x3c, 0x7b, 0xd6, 0x76, 0x4d, 0xc6, 0x1e, 0x87, 0xcd, 0x66, 0x32,
	0x5e, 0x65, 0x87, 0x4d, 0xd6, 0x48, 0xb3, 0x43, 0x87, 0xb0, 0x01, 0xd6, 0xf8, 0x43, 0x9b, 0xc5,
	0xb6, 0x4c, 0xdb, 0xb1, 0x84, 0x38, 0xb4, 0x6a, 0xa6, 0x6b, 0x26, 0x2d, 0xf5, 0x74, 0xb7, 0xba,
	0x7b, 0x26, 0xf8, 0xce, 0x81, 0xbf, 0x00, 0x09, 0xb4, 0x0b, 0x82, 0xbd, 0xf1, 0x3f, 0x20, 0x2e,
	0x48, 0x7c, 0x08, 0xb1, 0x70, 0x58, 0xb4, 0x1c, 0xf8, 0xb8, 0xf0, 0x1f, 0x20, 0xc4, 0x11, 0xd5,
	0xab, 0xaa, 0xfe, 0x9a, 0x9e, 0x8f, 0xbd, 0x75, 0x2e, 0x89, 0xa7, 0xdf, 0xaf, 0x7e, 0x5d, 0xbf,
	0x7a, 0xaf, 0xde, 0xbc, 0x7a, 0x35, 0x50, 0xef, 0x0e, 0x7c, 0x73, 0xe4, 0x5b, 0x2c, 0x08, 0x4c,
	0xb7, 0x1b, 0x98, 0x5d, 0x3a, 0xd8, 0xf5, 0x03, 0x2f, 0xf2, 0xc8, 0x0f, 0xb5, 0x9e, 0x1d, 0xf6,
	0x3c, 0xd3, 0xf6, 0x42, 0xf3, 0xfb, 0x81, 0x69, 0xfb, 0xe3, 0x8e, 0xc9, 0xc1, 0x9e, 0xcf, 0x82,
	0xdd, 0xee, 0xc0, 0xdf, 0xb5, 0xdd, 0x30, 0xa2, 0x6e, 0x8f, 0x85, 0xf1, 0x5f, 0xf1, 0x1f, 0x26,
	0xff, 0xcf, 0xea, 0x5e, 0xed, 0x8e, 0x83, 0x7e, 0xc8, 0xff, 0xd9, 0x1d, 0xf9, 0x16, 0x8d, 0x98,
	0x69, 0xbb, 0x5d, 0x6f, 0xe4, 0x5a, 0x26, 0x0b, 0x02, 0x2f, 0x30, 0x5d, 0x66, 0x0f, 0x9e, 0x77,
	0xbd, 0x20, 0x9c, 0x6d, 0x6e, 0xfe, 0x40, 0x83, 0xad, 0xc9, 0x79, 0x9a, 0xdf, 0x3e, 0xfc, 0xee,
	0x39, 0xd9, 0x81, 0x4a, 0xfc, 0x56, 0x97, 0x0e, 0x59, 0x5d, 0x6b, 0x68, 0xad, 0x9b, 0xc6, 0xaa,
	0x7a, 0x78, 0x4a, 0x87, 0x8c, 0x6c, 0xc3, 0xf2, 0x38, 0xe8, 0x0b, 0xfb, 0x35, 0xb4, 0xdf, 0x18,
	0x07, 0x7d, 0x34, 0x7d, 0x09, 0xd6, 0xd5, 0x7b, 0x4c, 0x6a, 0x59, 0x01, 0x0b, 0xc3, 0xfa, 0x12,
	0x42, 0xd6, 0xd4, 0xf3, 0x3d, 0xf1, 0xb8, 0xf9, 0x69, 0x0d, 0xc8, 0xe4, 0x34, 0xc8, 0x7d, 0x58,
	0x93, 0xd3, 0x8f, 0xdf, 0xd1, 0x46, 0x82, 0x8a, 0x78, 0x7c, 0x29, 0xdf, 0xf4, 0x89, 0x06, 0x5b,
	0x12, 0x38, 0xf1, 0xc6, 0x77, 0x1a, 0x5a, 0x6b, 0xa5, 0xfd, 0x23, 0x6d, 0xb7, 0x2c, 0x6b, 0xce,
	0xdf, 0x86, 0xb3, 0x8b, 0xae, 0x7c, 0x66, 0xd4, 0x04, 0xf6, 0x34, 0xbb, 0x20, 0xe4, 0x7d, 0xb8,
	0x27, 0x49, 0xc4, 0xe0, 0xe7, 0xd4, 0xb5, 0x1c, 0xdb, 0x1d, 0x98, 0x74, 0xec, 0xd9, 0x96, 0x19,
	0xb0, 0x90, 0x45, 0xf5, 0x4e, 0x43, 0x6b, 0x2d, 0x1b, 0x77, 0x04, 0xf0, 0x90, 0xe3, 0xde, 0x97,
	0xb0, 0x3d, 0x8e, 0x32, 0x38, 0x88, 0xbc, 0x0b, 0xb7, 0x23, 0x2f, 0xa2, 0x8e, 0x29, 0xf9, 0x86,
	0x2c, 0x0c, 0xe9, 0x80, 0x99, 0x3d, 0x6f, 0xe4, 0x46, 0xf5, 0xaf, 0x34, 0xb4, 0x56, 0xc5, 0xd8,
	0x42, 0xc4, 0x33, 0x04, 0x9c, 0x08, 0xfb, 0x3e, 0x37, 0x93, 0x7d, 0x78, 0x5d, 0x0d, 0xa3, 0x4e,
	0xdf, 0x0b, 0x86, 0xcc, 0xca, 0x11, 0xe8, 0x48, 0xf0, 0x45, 0x81, 0x3a, 0x51, 0xa0, 0x0c, 0xc9,
	0xbf, 0x34, 0x68, 0xf4, 0xed, 0x20, 0x8c, 0xcc, 0x09, 0xae, 0xc8, 0x1e, 0xb2, 0x30, 0xa2, 0x43,
	0xbf, 0xfe, 0xa8, 0x94, 0x6e, 0xc2, 0xf9, 0xf9, 0xac, 0x67, 0xdc, 0x41, 0x01, 0xcf, 0xb2, 0x2a,
	0x2f, 0xd4, 0xec, 0xc9, 0x3f, 0x34, 0xb8, 0xeb, 0xd0, 0xd9, 0x0a, 0xbf, 0x5a, 0x6e, 0x85, 0xaf,
	0xf1, 0xf9, 0x4f, 0x15, 0xf8, 0x18, 0xb6, 0x8b, 0xf5, 0xd1, 0x01, 0xab, 0x3f, 0xc6, 0x18, 0xd8,
	0x2c, 0x20, 0xd8, 0x1b, 0x30, 0x72, 0x0c, 0x3b, 0x71, 0xe8, 0x0d, 0xbd, 0xe0, 0xca, 0xa4, 0x8e,
	0xe3, 0xf5, 0x68, 0x64, 0x7b, 0xae, 0xd9, 0xa7, 0xb6, 0x23, 0x03, 0xe9, 0x6b, 0x48, 0x72, 0x57,
	0x06, 0x12, 0x22, 0xf7, 0x62, 0xe0, 0x11, 0xb5, 0x1d, 0x11, 0x4c, 0xff, 0xd3, 0xe0, 0xed, 0x6c,
	0x30, 0x15, 0x93, 0x26, 0xeb, 0xfe, 0x6e, 0xb9, 0xd7, 0xbd, 0x95, 0x8e, 0xac, 0x02, 0xd9, 0x89,
	0x0f, 0xfe, 0xab, 0xc1, 0xc3, 0x8c, 0x13, 0xe6, 0x29, 0x7f, 0x52, 0x6e, 0xe5, 0x6f, 0xa6, 0x02,
	0x66, 0xa6, 0xf0, 0xef, 0xc0, 0xfd, 0x05, 0x74, 0xf3, 0x48, 0xfc, 0x3a, 0x06, 0xd1, 0xbd, 0xd9,
	0xc4, 0x3c, 0x28, 0xa7, 0xe6, 0x57, 0xcc, 0xac, 0x32, 0x24, 0xbf, 0x81, 0x6c, 0x45, 0xf9, 0x15,
	0x53, 0xab, 0x08, 0xc8, 0xff, 0x68, 0xf0, 0x20, 0x13, 0x90, 0x85, 0x84, 0x89, 0x53, 0xbe, 0x59,
	0x6e, 0xa7, 0xdc, 0x4f, 0x85, 0xe3, 0xa4, 0xe4, 0xc4, 0x27, 0xff, 0xd6, 0x60, 0x07, 0x9d, 0x32,
	0x47, 0xee, 0x7b, 0xe5, 0x96, 0x8b, 0x59, 0x7b, 0x96, 0xce, 0xf7, 0xe0, 0xce, 0x74, 0x99, 0x3c,
	0xe4, 0xf6, 0x30, 0x48, 0xb6, 0x8b, 0x79, 0x78, 0xa8, 0x7d, 0xa6, 0xc1, 0x76, 0x26, 0x34, 0xd4,
	0x17, 0xa8, 0x63, 0x87, 0x51, 0xfd, 0x5b, 0x8d, 0xa5, 0xd6, 0x4a, 0xfb, 0xc3, 0x92, 0xad, 0x8f,
	0xac, 0xc3, 0x86, 0xe1, 0x80, 0xd7, 0x61, 0xc6, 0x66, 0x6a, 0x0b, 0xc8, 0xaf, 0xf6, 0x63, 0x3b,
	0x8c, 0xc8, 0x01, 0xdc, 0x9d, 0xaa, 0x4c, 0xee, 0xa1, 0xfd, 0x74, 0x7d, 0x90, 0x27, 0xc8, 0x17,
	0x19, 0x34, 0x8a, 0x02, 0xbb, 0x3b, 0x8a, 0x98, 0x69, 0xd9, 0x61, 0x8f, 0x06, 0x96, 0x24, 0x39,
	0x48, 0x93, 0xec, 0x29, 0xd0, 0x81, 0xc0, 0x08, 0x92, 0x4b, 0x68, 0x71, 0x8f, 0x75, 0x1d, 0x3b,
	0x7c, 0x3e, 0x64, 0x6e, 0x64, 0xce, 0x28, 0x7a, 0x0e, 0x91, 0xee, 0x8d, 0x0c, 0xfe, 0x62, 0x4a,
	0x05, 0xf4, 0x04, 0x6e, 0x67, 0x79, 0x69, 0x0f, 0x53, 0x8e, 0x60, 0x3a, 0x6a, 0x2c, 0xb5, 0x2a,
	0x46, 0x3d, 0x83, 0xd8, 0x43, 0x00, 0x8e, 0x6e, 0x7e, 0x00, 0xab, 0xe9, 0x70, 0x23, 0x75, 0xb8,
	0x11, 0xb2, 0x9e, 0xe7, 0x5a, 0x21, 0x16, 0xd3, 0x15, 0x43, 0x7d, 0x24, 0x0d, 0x58, 0x71, 0xa9,
	0xeb, 0x29, 0xeb, 0x35, 0xb4, 0xa6, 0x1f, 0x35, 0xdf, 0x86, 0xda, 0xd3, 0xb3, 0xcb, 0xce, 0xc5,
	0xc8, 0x75, 0x99, 0x23, 0xeb, 0xc4, 0x8b, 0x2b, 0x9f, 0x91, 0x5b, 0x70, 0x7d, 0x4c, 0x9d, 0x91,
	0xaa, 0xcf, 0xc5, 0x87, 0xe6, 0x5b, 0x40, 0x38, 0xfc, 0xe4, 0xe0, 0x62, 0x3e, 0xf6, 0xcb, 0xb0,
	0x65, 0x5c, 0xec, 0x7b, 0x6e, 0x18, 0x05, 0xd4, 0x76, 0xa3, 0xf9, 0x03, 0xde, 0x84, 0xb5, 0xa7,
	0x67, 0x97, 0xfa, 0x7c, 0xe0, 0xa9, 0x38, 0x06, 0x61, 0x3c, 0x87, 0x81, 0xef, 0x39, 0x76, 0xef,
	0x0a, 0x8b, 0x5f, 0x33, 0x22, 0x6d, 0xa8, 0x4d, 0x3e, 0xe7, 0x25, 0x3b, 0x67, 0x58, 0x35, 0xaa,
	0xdc, 0x78, 0x2e, 0x6d, 0xea, 0xa0, 0x90, 0xf0, 0xe9, 0x53, 0xf8, 0xf4, 0x59, 0x7c, 0x7a, 0x9e,
	0xef, 0x11, 0xac, 0x73, 0x3e, 0xa7, 0x3d, 0xf6, 0x5d, 0xc5, 0xb3, 0x03, 0x95, 0xe4, 0x73, 0x32,
	0x7e, 0x15, 0x1f, 0xaa, 0x81, 0x0f, 0xe1, 0xd6, 0x71, 0xfb, 0xf2, 0xec, 0xf4, 0xf0, 0xf2, 0xec,
	0x74, 0xfe, 0x32, 0x3c, 0x81, 0x5a, 0xf2, 0x9a, 0x61, 0xe8, 0xbf, 0xf8, 0x5c, 0xef, 0x7a, 0x00,
	0x55, 0xbe, 0xda, 0x27, 0x0b, 0xbd, 0x4a, 0x80, 0x3b, 0x8b, 0x81, 0x5b, 0xb0, 0x7e, 0x7c, 0x6e,
	0x1e, 0x9f, 0x2f, 0x14, 0x22, 0x4f, 0xcf, 0xc6, 0x9d, 0x23, 0xc7, 0x7b, 0xc1, 0x23, 0x79, 0xd1,
	0x01, 0xfa, 0xe2, 0x03, 0x3e, 0x6d, 0x8a, 0xcd, 0xa2, 0x8e, 0x46, 0x64, 0x1d, 0x96, 0x68, 0xdf,
	0x96, 0x20, 0xfe, 0x27, 0xb9, 0x07, 0xab, 0x18, 0x31, 0x6a, 0xb1, 0xc4, 0x81, 0x73, 0x85, 0x3f,
	0x53, 0x07, 0xa7, 0x87, 0x40, 0x10, 0x32, 0xec, 0xf1, 0xac, 0x9d, 0x3d, 0x76, 0xae, 0x73, 0xcb,
	0x09, 0x37, 0xe4, 0xd1, 0x0e, 0xed, 0x32, 0x27, 0x46, 0x7f, 0x21, 0x41, 0x1f, 0x73, 0x83, 0x42,
	0xff, 0x59, 0x03, 0x0c, 0x4a, 0x33, 0xc2, 0x3d, 0x18, 0xe3, 0xaf, 0xe3, 0x77, 0xdc, 0xcf, 0x4a,
	0x94, 0xc3, 0x0b, 0x13, 0x85, 0xb1, 0xc1, 0xa7, 0x94, 0x79, 0x4c, 0x7e, 0xab, 0xc1, 0xba, 0x58,
	0x2f, 0x2b, 0x59, 0xad, 0x57, 0x50, 0xcf, 0x87, 0x25, 0xd3, 0x93, 0xcd, 0x64, 0xc6, 0xab, 0xe8,
	0x4c, 0x2b, 0x76, 0x65, 0x4b, 0x0a, 0x49, 0x6f, 0xa6, 0x1b, 0xe8, 0x48, 0x44, 0x5e, 0xc6, 0xdb,
	0x29, 0xce, 0x3b, 0x63, 0xdf, 0xa5, 0x22, 0x4e, 0x24, 0x7c, 0x19, 0xe1, 0x55, 0x09, 0xa7, 0x27,
	0x89, 0x89, 0xfc, 0x4a, 0xc3, 0xd0, 0xd3, 0x63, 0xea, 0x9b, 0xb8, 0x46, 0x3f, 0x2e, 0xd7, 0x1a,
	0xa5, 0x13, 0x32, 0x6e, 0x0b, 0xf5, 0x80, 0xfc, 0x4e, 0xc3, 0x48, 0xd7, 0x73, 0xfb, 0x02, 0x4a,
	0xaf, 0x82, 0x3b, 0x55, 0xcf, 0xec, 0xd9, 0x58, 0x4a, 0x76, 0xd3, 0xae, 0xbc, 0x1c, 0x52, 0x32,
	0x09, 0xe5, 0x37, 0x62, 0xf7, 0xe9, 0x99, 0xa0, 0x5d, 0x2d, 0xbd, 0x10, 0xbe, 0xa1, 0xf4, 0xd4,
	0x86, 0xfa, 0x44, 0x83, 0xcd, 0x58, 0x46, 0x36, 0xc0, 0x2a, 0xa5, 0x17, 0x53, 0x95, 0x62, 0x32,
	0x31, 0xf6, 0x7b, 0x0d, 0x88, 0xd3, 0xe6, 0x7a, 0xc6, 0xbe, 0x13, 0xc6, 0x6a, 0x5e, 0x45, 0x35,
	0x3f, 0x29, 0x59, 0xb1, 0x9e, 0x2e, 0x5e, 0x8c, 0x75, 0xa7, 0x7d, 0x29, 0x66, 0xad, 0xb4, 0xfc,
	0x55, 0x83, 0x5a, 0xc0, 0xcb, 0x71, 0x55, 0xde, 0xc5, 0x72, 0xd6, 0x50, 0xce, 0xcf, 0x4b, 0x24,
	0x67, 0x4a, 0x15, 0x6a, 0x54, 0x83, 0x68, 0xc2, 0x40, 0xfe, 0xa0, 0xc1, 0x86, 0xc8, 0x69, 0xe9,
	0xed, 0xb3, 0x8e, 0xa2, 0x3e, 0x2a, 0x59, 0xc4, 0xe5, 0xca, 0x31, 0x63, 0x0d, 0xd3, 0x5a, 0x52,
	0xe3, 0x29, 0x31, 0x9d, 0xac, 0x98, 0x8d, 0x32, 0x8a, 0xe9, 0x14, 0x89, 0xe9, 0xa4, 0xc5, 0xfc,
	0x49, 0x83, 0xaa, 0xd8, 0x3e, 0x26, 0x4b, 0xcb, 0x21, 0x28, 0xe7, 0xa7, 0x25, 0x92, 0x53, 0x54,
	0xc3, 0xcb, 0x3d, 0x74, 0x98, 0x12, 0xf4, 0x6b, 0x0d, 0x2a, 0x4e, 0x68, 0xa6, 0x52, 0x41, 0xb5,
	0x74, 0xa9, 0x20, 0x5f, 0xc8, 0x1b, 0x2b, 0x4e, 0x78, 0x1c, 0xa6, 0x72, 0xb4, 0x72, 0x49, 0x7c,
	0xfe, 0xe0, 0x3a, 0x6e, 0x95, 0xae, 0x76, 0x2d, 0x3c, 0x28, 0x49, 0x9f, 0x9c, 0x84, 0xfe, 0x8b,
	0x74, 0x5e, 0xc3, 0x79, 0xf6, 0xe5, 0x11, 0x23, 0xd6, 0x54, 0x2b, 0x5d, 0x5e, 0x9b, 0x72, 0x74,
	0x12, 0xb5, 0x66, 0xce, 0xa0, 0x84, 0xe9, 0x93, 0xc2, 0x36, 0xcb, 0x28, 0x4c, 0x9f, 0x26, 0x2c,
	0x6f, 0x20, 0x7f, 0xd7, 0x60, 0x3b, 0xae, 0xd1, 0x27, 0xc4, 0x6d, 0xbd, 0x34, 0x5e, 0xdb, 0x94,
	0x27, 0x84, 0x29, 0xfa, 0xf4, 0x62, 0x7d, 0xf5, 0x97, 0xc6, 0x79, 0x9b, 0xb2, 0x24, 0xca, 0xeb,
	0xfb, 0x4c, 0xd4, 0x79, 0x1d, 0x33, 0x0c, 0xcc, 0x5c, 0x8b, 0x65, 0x1b, 0xc5, 0xfd, 0xa2, 0x64,
	0x69, 0xa4, 0xa8, 0xed, 0xa4, 0xfa, 0x4a, 0x67, 0xe9, 0x3e, 0x90, 0x92, 0xa6, 0x17, 0x48, 0xbb,
	0x5d, 0x56, 0x69, 0x7a, 0xa1, 0x34, 0x3d, 0x27, 0xad, 0xf9, 0xcb, 0x25, 0xd8, 0x4e, 0xf5, 0x74,
	0x45, 0xe7, 0xda, 0xa2, 0x11, 0xc5, 0x2b, 0xf6, 0xc7, 0xb9, 0xe6, 0xb4, 0x30, 0x07, 0x8c, 0x86,
	0x9e, 0x2b, 0x5b, 0x2f, 0xe9, 0xee, 0x2f, 0x76, 0xb5, 0x0d, 0xb4, 0x92, 0x53, 0x78, 0xa3, 0x60,
	0xa8, 0xeb, 0x45, 0x76, 0xdf, 0x96, 0x17, 0x33, 0x3d, 0xcf, 0x62, 0xb2, 0x97, 0xd9, 0xc8, 0xb3,
	0x9c, 0xa6, 0x80, 0xfb, 0x9e, 0xc5, 0xc8, 0x33, 0x68, 0xcd, 0xe3, 0x0b, 0x47, 0x5d, 0xc1, 0xb9,
	0x84, 0x9c, 0x3b, 0xb3, 0x38, 0xcf, 0x47, 0x5d, 0xa4, 0x5d, 0x60, 0x9a, 0x7c, 0x35, 0xb0, 0xeb,
	0xb3, 0x3a, 0x7b, 0x9a, 0x07, 0x34, 0xa2, 0xe4, 0x7b, 0xf0, 0x60, 0x11, 0x3e, 0xd3, 0x61, 0xee,
	0x20, 0x7a, 0x8e, 0xcd, 0xa1, 0x8a, 0x71, 0x7f, 0x1e, 0xed, 0x31, 0xa2, 0x9b, 0x7f, 0xbc, 0x06,
	0xd5, 0x94, 0xb3, 0x98, 0xc3, 0x86, 0xe8, 0xa6, 0x0e, 0x6c, 0x4e, 0xf4, 0xc8, 0xfb, 0x0e, 0x1d,
	0xa8, 0x3e, 0xf2, 0xad, 0x5c, 0x6f, 0xfc, 0x88, 0xdb, 0x48, 0x1b, 0x6a, 0x13, 0xa3, 0x52, 0x2e,
	0xa9, 0xe6, 0x06, 0xe1, 0x72, 0xe9, 0xf1, 0x4f, 0x29, 0x92, 0x31, 0x52, 0x8a, 0x58, 0xf4, 0x5a,
	0x6e, 0x94, 0x98, 0x39, 0x79, 0x0b, 0x36, 0x32, 0xcb, 0x92, 0x5a, 0xd3, 0xb5, 0x94, 0x78, 0x5c,
	0xc2, 0x47, 0x50, 0x9f, 0xc0, 0x66, 0xd7, 0xab, 0x96, 0x1b, 0x22, 0x5f, 0xb2, 0x0b, 0xd5, 0xcc,
	0x40, 0xd1, 0x8c, 0xc7, 0x86, 0xd5, 0x4d, 0x63, 0x23, 0x35, 0x46, 0x34, 0xe1, 0x9b, 0x1f, 0x2f,
	0x67, 0x7e, 0x57, 0x22, 0xef, 0x33, 0x26, 0x82, 0xbe, 0x6f, 0xbb, 0xd4, 0x51, 0x64, 0x93, 0x41,
	0x7f, 0xc4, 0xcd, 0x82, 0x91, 0xfc, 0x45, 0x8b, 0xe7, 0xae, 0x2e, 0x15, 0x92, 0xcb, 0xae, 0x6b,
	0xe5, 0xbe, 0xec, 0xda, 0x1c, 0xa5, 0xef, 0x37, 0x92, 0x3b, 0xae, 0xf9, 0x17, 0x30, 0x4b, 0xf3,
	0x2f, 0x60, 0xfe, 0x99, 0x5c, 0x73, 0xa9, 0x85, 0x49, 0x52, 0x0d, 0x06, 0xc2, 0x4a, 0xfb, 0xe3,
	0x72, 0x5e, 0x73, 0x65, 0x53, 0x62, 0x6e, 0x99, 0x70, 0xb7, 0x62, 0xd4, 0xfe, 0x2d, 0x7f, 0x91,
	0xc7, 0x77, 0x27, 0x73, 0x23, 0x71, 0x91, 0x77, 0x1d, 0x2f, 0xf2, 0x3e, 0x2a, 0xa7, 0x42, 0x95,
	0x47, 0x32, 0x61, 0x7d, 0x28, 0xa6, 0x8f, 0x37, 0x79, 0x47, 0xd0, 0xc8, 0x48, 0x73, 0x9d, 0xc0,
	0x56, 0xdf, 0x80, 0x66, 0x9f, 0x0e, 0x6d, 0xe7, 0x4a, 0xee, 0xb2, 0xd7, 0x52, 0x0c, 0xa7, 0x4e,
	0x60, 0xcb, 0xaf, 0x99, 0x23, 0xc4, 0x4c, 0xec, 0x6c, 0xe4, 0x09, 0xa3, 0xc0, 0x76, 0x07, 0xb2,
	0x1b, 0x5b, 0xcb, 0x8d, 0x3f, 0x47, 0x23, 0xf9, 0x00, 0x9a, 0xd3, 0x06, 0x9a, 0x51, 0x30, 0x72,
	0x7b, 0x34, 0x62, 0x16, 0x76, 0x68, 0x97, 0x8d, 0xd7, 0x0b, 0x29, 0x2e, 0x14, 0x2a, 0x95, 0x25,
	0x54, 0x24, 0x62, 0x0c, 0xde, 0xc4, 0xcb, 0xba, 0x8d, 0x8c, 0x77, 0xb9, 0x63, 0xbb, 0xaf, 0xe0,
	0xcf, 0xf2, 0xde, 0xf9, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0x03, 0x29, 0x6f, 0xb2, 0x27,
	0x00, 0x00,
}
