// Code generated by protoc-gen-go.
// source: bgp_bmp_srvr_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_vrfs_vrf_bmp_server_summaries_server_summary is a generated protocol buffer package.

It is generated from these files:
	bgp_bmp_srvr_bag.proto

It has these top-level messages:
	BgpBmpSrvrBag_KEYS
	BgpBmpSrvrBag
	BgpTimespec
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	BgpIpv4SrpolicyAddrT
	BgpIpv6SrpolicyAddrT
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
	BgpPrefixtype
	BgpBmpSrvrAfi_
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_vrfs_vrf_bmp_server_summaries_server_summary

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BMP Server Details
type BgpBmpSrvrBag_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	VrfName      string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	ServerId     uint32 `protobuf:"varint,3,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
}

func (m *BgpBmpSrvrBag_KEYS) Reset()                    { *m = BgpBmpSrvrBag_KEYS{} }
func (m *BgpBmpSrvrBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpBmpSrvrBag_KEYS) ProtoMessage()               {}
func (*BgpBmpSrvrBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpBmpSrvrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpBmpSrvrBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpBmpSrvrBag_KEYS) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type BgpBmpSrvrBag struct {
	// BMP Server ID
	BmpServerId uint32 `protobuf:"varint,50,opt,name=bmp_server_id,json=bmpServerId" json:"bmp_server_id,omitempty"`
	// BMP Server Hostname
	BmpServerHostname string `protobuf:"bytes,51,opt,name=bmp_server_hostname,json=bmpServerHostname" json:"bmp_server_hostname,omitempty"`
	// BMP Server Port Number
	BmpServerPort uint32 `protobuf:"varint,52,opt,name=bmp_server_port,json=bmpServerPort" json:"bmp_server_port,omitempty"`
	// Connection state of the BMP server
	BmpServerState string `protobuf:"bytes,53,opt,name=bmp_server_state,json=bmpServerState" json:"bmp_server_state,omitempty"`
	// Connection to the BMP server Flapping
	BmpServerIsFlapping bool `protobuf:"varint,54,opt,name=bmp_server_is_flapping,json=bmpServerIsFlapping" json:"bmp_server_is_flapping,omitempty"`
	// Age of current state of BMP Server
	BmpServerStateAge *BgpTimespec `protobuf:"bytes,55,opt,name=bmp_server_state_age,json=bmpServerStateAge" json:"bmp_server_state_age,omitempty"`
	// Timespec of current state of BMP Server
	BmpServerStateTimeSpec *BgpTimespec `protobuf:"bytes,56,opt,name=bmp_server_state_time_spec,json=bmpServerStateTimeSpec" json:"bmp_server_state_time_spec,omitempty"`
	// Timespec of Last Disconnect event received from BMP server
	BmpServerLastDisconTime *BgpTimespec `protobuf:"bytes,57,opt,name=bmp_server_last_discon_time,json=bmpServerLastDisconTime" json:"bmp_server_last_discon_time,omitempty"`
	// Neighbor count for the BMP Server
	BmpServerNbrCount uint32 `protobuf:"varint,58,opt,name=bmp_server_nbr_count,json=bmpServerNbrCount" json:"bmp_server_nbr_count,omitempty"`
	// Number of Initiation Msgs sent by this BMP Server
	BmpInitMsgCount uint32 `protobuf:"varint,59,opt,name=bmp_init_msg_count,json=bmpInitMsgCount" json:"bmp_init_msg_count,omitempty"`
	// Number of Termination Messages sent by this BMP Server
	BmpTerminationMsgCount uint32 `protobuf:"varint,60,opt,name=bmp_termination_msg_count,json=bmpTerminationMsgCount" json:"bmp_termination_msg_count,omitempty"`
	// Number of Status ReportMessages sent by this BMP Server
	BmpStatusReportCount uint32 `protobuf:"varint,61,opt,name=bmp_status_report_count,json=bmpStatusReportCount" json:"bmp_status_report_count,omitempty"`
	// Total number of per peer messages sent
	BmpPerPeerMsgCount uint32 `protobuf:"varint,62,opt,name=bmp_per_peer_msg_count,json=bmpPerPeerMsgCount" json:"bmp_per_peer_msg_count,omitempty"`
	// Total number of messages dropped
	BmpPeerMsgDropCount uint32 `protobuf:"varint,63,opt,name=bmp_peer_msg_drop_count,json=bmpPeerMsgDropCount" json:"bmp_peer_msg_drop_count,omitempty"`
	// Total number of bmpQ msgs pending
	BmpPeerMsgPendingCount uint32 `protobuf:"varint,64,opt,name=bmp_peer_msg_pending_count,json=bmpPeerMsgPendingCount" json:"bmp_peer_msg_pending_count,omitempty"`
	// Precedence (0) or DSCP (1) type
	TosType uint32 `protobuf:"varint,65,opt,name=tos_type,json=tosType" json:"tos_type,omitempty"`
	// Precedence or DSCP value
	TosValue uint32 `protobuf:"varint,66,opt,name=tos_value,json=tosValue" json:"tos_value,omitempty"`
	// Interface configured as Update Source
	UpdateSourceInterfaceName string `protobuf:"bytes,67,opt,name=update_source_interface_name,json=updateSourceInterfaceName" json:"update_source_interface_name,omitempty"`
	// Address of Interface configured as Update Source
	UpdateSourceAddress *BgpAddrtype `protobuf:"bytes,68,opt,name=update_source_address,json=updateSourceAddress" json:"update_source_address,omitempty"`
	// VRF ID of interface configured as Update Source
	UpdateSourceVrfId uint32 `protobuf:"varint,69,opt,name=update_source_vrf_id,json=updateSourceVrfId" json:"update_source_vrf_id,omitempty"`
	// VRF Name configured
	BmpVrfName string `protobuf:"bytes,70,opt,name=bmp_vrf_name,json=bmpVrfName" json:"bmp_vrf_name,omitempty"`
	// VRF ID for the vrf name configured
	BmpVrfId uint32 `protobuf:"varint,71,opt,name=bmp_vrf_id,json=bmpVrfId" json:"bmp_vrf_id,omitempty"`
	// AFI specific info for BMP server
	BmpafiInfo []*BgpBmpSrvrAfi_ `protobuf:"bytes,72,rep,name=bmpafi_info,json=bmpafiInfo" json:"bmpafi_info,omitempty"`
	// Update sending mode configured for this BMP server
	BmpUpdateMode string `protobuf:"bytes,73,opt,name=bmp_update_mode,json=bmpUpdateMode" json:"bmp_update_mode,omitempty"`
	// TCP Keep alive interval configured
	TcpKeepAliveInterval uint32 `protobuf:"varint,74,opt,name=tcp_keep_alive_interval,json=tcpKeepAliveInterval" json:"tcp_keep_alive_interval,omitempty"`
	// TCP Maximum Segments size configured
	TcpMaximumSegmentSize uint32 `protobuf:"varint,75,opt,name=tcp_maximum_segment_size,json=tcpMaximumSegmentSize" json:"tcp_maximum_segment_size,omitempty"`
	// Are we waiting for TCP write callback ?
	TcpWriteCbPending uint32 `protobuf:"varint,76,opt,name=tcp_write_cb_pending,json=tcpWriteCbPending" json:"tcp_write_cb_pending,omitempty"`
	// Last TCP Socket write status
	TcpLastWriteResult uint32 `protobuf:"varint,77,opt,name=tcp_last_write_result,json=tcpLastWriteResult" json:"tcp_last_write_result,omitempty"`
	// Last TCP Write CB time
	TcpLastWriteCbTime uint64 `protobuf:"varint,78,opt,name=tcp_last_write_cb_time,json=tcpLastWriteCbTime" json:"tcp_last_write_cb_time,omitempty"`
	// Last TCP Write time
	TcpLastWriteTime uint64 `protobuf:"varint,79,opt,name=tcp_last_write_time,json=tcpLastWriteTime" json:"tcp_last_write_time,omitempty"`
	// Last BMPQ write pulse Sent time
	BmpqLastWritePulseSentTime uint64 `protobuf:"varint,80,opt,name=bmpq_last_write_pulse_sent_time,json=bmpqLastWritePulseSentTime" json:"bmpq_last_write_pulse_sent_time,omitempty"`
	// Last BMPQ write pulse Sent for all BMP servers
	BmpqLastAllWritePulseSentTime uint64 `protobuf:"varint,81,opt,name=bmpq_last_all_write_pulse_sent_time,json=bmpqLastAllWritePulseSentTime" json:"bmpq_last_all_write_pulse_sent_time,omitempty"`
	// Last BMPQ write pulse callback time
	BmpqLastWritePulseCbTime uint64 `protobuf:"varint,82,opt,name=bmpq_last_write_pulse_cb_time,json=bmpqLastWritePulseCbTime" json:"bmpq_last_write_pulse_cb_time,omitempty"`
	// Number of path update sent
	PathUpdateCount uint32 `protobuf:"varint,83,opt,name=path_update_count,json=pathUpdateCount" json:"path_update_count,omitempty"`
	// Number of path wdraw sent
	PathWithdrawCount uint32 `protobuf:"varint,84,opt,name=path_withdraw_count,json=pathWithdrawCount" json:"path_withdraw_count,omitempty"`
	// Number of path update drop
	PathUpdateDrop uint32 `protobuf:"varint,85,opt,name=path_update_drop,json=pathUpdateDrop" json:"path_update_drop,omitempty"`
	// Number of path wdraw drop
	PathWithdrawDrop uint32 `protobuf:"varint,86,opt,name=path_withdraw_drop,json=pathWithdrawDrop" json:"path_withdraw_drop,omitempty"`
	// Total bmpQ msgs pending max
	BmpPeerMsgPendingCountMax uint32 `protobuf:"varint,87,opt,name=bmp_peer_msg_pending_count_max,json=bmpPeerMsgPendingCountMax" json:"bmp_peer_msg_pending_count_max,omitempty"`
	// Total bmpQ msgs pending max time
	BmpPeerMsgPendingCountHwts uint64 `protobuf:"varint,88,opt,name=bmp_peer_msg_pending_count_hwts,json=bmpPeerMsgPendingCountHwts" json:"bmp_peer_msg_pending_count_hwts,omitempty"`
	// Total bytes sent to TCP
	BmpBytesWrittenTcp uint64 `protobuf:"varint,89,opt,name=bmp_bytes_written_tcp,json=bmpBytesWrittenTcp" json:"bmp_bytes_written_tcp,omitempty"`
	// Time spent processing sending msg to TCP(milliseconds)
	TcpWriteTime uint32 `protobuf:"varint,90,opt,name=tcp_write_time,json=tcpWriteTime" json:"tcp_write_time,omitempty"`
	// Total bmpQ update msgs
	BmprMonUpdMessages uint32 `protobuf:"varint,91,opt,name=bmpr_mon_upd_messages,json=bmprMonUpdMessages" json:"bmpr_mon_upd_messages,omitempty"`
	// Total bmpQ withdraw msgs
	BmprMonWdrawMessages uint32 `protobuf:"varint,92,opt,name=bmpr_mon_wdraw_messages,json=bmprMonWdrawMessages" json:"bmpr_mon_wdraw_messages,omitempty"`
	// Total bmpQ wdraw msgs discarded because of peer down
	BmpMessagesWdrawDiscarded uint32 `protobuf:"varint,93,opt,name=bmp_messages_wdraw_discarded,json=bmpMessagesWdrawDiscarded" json:"bmp_messages_wdraw_discarded,omitempty"`
	// Total bmpQ wdraw pfxes discarded because of peer down
	BmpPfxWdrawDiscarded uint32 `protobuf:"varint,94,opt,name=bmp_pfx_wdraw_discarded,json=bmpPfxWdrawDiscarded" json:"bmp_pfx_wdraw_discarded,omitempty"`
	// Total number of per peer route mon messages sent
	BmpPerPeerMsgRouteMonCount uint32 `protobuf:"varint,95,opt,name=bmp_per_peer_msg_route_mon_count,json=bmpPerPeerMsgRouteMonCount" json:"bmp_per_peer_msg_route_mon_count,omitempty"`
	// Time spent in update generation(milliseconds)
	BmprMonUpdateGenTime uint32 `protobuf:"varint,96,opt,name=bmpr_mon_update_gen_time,json=bmprMonUpdateGenTime" json:"bmpr_mon_update_gen_time,omitempty"`
	// Total bmpQ EOR update msgs
	BmprMonEoRmessages uint32 `protobuf:"varint,97,opt,name=bmpr_mon_eo_rmessages,json=bmprMonEoRmessages" json:"bmpr_mon_eo_rmessages,omitempty"`
	// Current Buffer usage per BMP Route Mon
	BmpRmonCurBufferSize uint64 `protobuf:"varint,98,opt,name=bmp_rmon_cur_buffer_size,json=bmpRmonCurBufferSize" json:"bmp_rmon_cur_buffer_size,omitempty"`
	// Buffer limit used for route mon
	BmpMaximumBufferSizeRouteMon uint64 `protobuf:"varint,99,opt,name=bmp_maximum_buffer_size_route_mon,json=bmpMaximumBufferSizeRouteMon" json:"bmp_maximum_buffer_size_route_mon,omitempty"`
	// Number of BMP server that are UP
	BmpServerUpCount uint32 `protobuf:"varint,100,opt,name=bmp_server_up_count,json=bmpServerUpCount" json:"bmp_server_up_count,omitempty"`
	// Update generation in progress
	BmpUpdGenInProgress bool `protobuf:"varint,101,opt,name=bmp_upd_gen_in_progress,json=bmpUpdGenInProgress" json:"bmp_upd_gen_in_progress,omitempty"`
	// Reset walk in progress
	BmpResetWalkInProgress bool `protobuf:"varint,102,opt,name=bmp_reset_walk_in_progress,json=bmpResetWalkInProgress" json:"bmp_reset_walk_in_progress,omitempty"`
}

func (m *BgpBmpSrvrBag) Reset()                    { *m = BgpBmpSrvrBag{} }
func (m *BgpBmpSrvrBag) String() string            { return proto.CompactTextString(m) }
func (*BgpBmpSrvrBag) ProtoMessage()               {}
func (*BgpBmpSrvrBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpBmpSrvrBag) GetBmpServerId() uint32 {
	if m != nil {
		return m.BmpServerId
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpServerHostname() string {
	if m != nil {
		return m.BmpServerHostname
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetBmpServerPort() uint32 {
	if m != nil {
		return m.BmpServerPort
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpServerState() string {
	if m != nil {
		return m.BmpServerState
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetBmpServerIsFlapping() bool {
	if m != nil {
		return m.BmpServerIsFlapping
	}
	return false
}

func (m *BgpBmpSrvrBag) GetBmpServerStateAge() *BgpTimespec {
	if m != nil {
		return m.BmpServerStateAge
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetBmpServerStateTimeSpec() *BgpTimespec {
	if m != nil {
		return m.BmpServerStateTimeSpec
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetBmpServerLastDisconTime() *BgpTimespec {
	if m != nil {
		return m.BmpServerLastDisconTime
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetBmpServerNbrCount() uint32 {
	if m != nil {
		return m.BmpServerNbrCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpInitMsgCount() uint32 {
	if m != nil {
		return m.BmpInitMsgCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpTerminationMsgCount() uint32 {
	if m != nil {
		return m.BmpTerminationMsgCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpStatusReportCount() uint32 {
	if m != nil {
		return m.BmpStatusReportCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPerPeerMsgCount() uint32 {
	if m != nil {
		return m.BmpPerPeerMsgCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPeerMsgDropCount() uint32 {
	if m != nil {
		return m.BmpPeerMsgDropCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPeerMsgPendingCount() uint32 {
	if m != nil {
		return m.BmpPeerMsgPendingCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTosType() uint32 {
	if m != nil {
		return m.TosType
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTosValue() uint32 {
	if m != nil {
		return m.TosValue
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetUpdateSourceInterfaceName() string {
	if m != nil {
		return m.UpdateSourceInterfaceName
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetUpdateSourceAddress() *BgpAddrtype {
	if m != nil {
		return m.UpdateSourceAddress
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetUpdateSourceVrfId() uint32 {
	if m != nil {
		return m.UpdateSourceVrfId
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpVrfName() string {
	if m != nil {
		return m.BmpVrfName
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetBmpVrfId() uint32 {
	if m != nil {
		return m.BmpVrfId
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpafiInfo() []*BgpBmpSrvrAfi_ {
	if m != nil {
		return m.BmpafiInfo
	}
	return nil
}

func (m *BgpBmpSrvrBag) GetBmpUpdateMode() string {
	if m != nil {
		return m.BmpUpdateMode
	}
	return ""
}

func (m *BgpBmpSrvrBag) GetTcpKeepAliveInterval() uint32 {
	if m != nil {
		return m.TcpKeepAliveInterval
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpMaximumSegmentSize() uint32 {
	if m != nil {
		return m.TcpMaximumSegmentSize
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpWriteCbPending() uint32 {
	if m != nil {
		return m.TcpWriteCbPending
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpLastWriteResult() uint32 {
	if m != nil {
		return m.TcpLastWriteResult
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpLastWriteCbTime() uint64 {
	if m != nil {
		return m.TcpLastWriteCbTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpLastWriteTime() uint64 {
	if m != nil {
		return m.TcpLastWriteTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpqLastWritePulseSentTime() uint64 {
	if m != nil {
		return m.BmpqLastWritePulseSentTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpqLastAllWritePulseSentTime() uint64 {
	if m != nil {
		return m.BmpqLastAllWritePulseSentTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpqLastWritePulseCbTime() uint64 {
	if m != nil {
		return m.BmpqLastWritePulseCbTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetPathUpdateCount() uint32 {
	if m != nil {
		return m.PathUpdateCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetPathWithdrawCount() uint32 {
	if m != nil {
		return m.PathWithdrawCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetPathUpdateDrop() uint32 {
	if m != nil {
		return m.PathUpdateDrop
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetPathWithdrawDrop() uint32 {
	if m != nil {
		return m.PathWithdrawDrop
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPeerMsgPendingCountMax() uint32 {
	if m != nil {
		return m.BmpPeerMsgPendingCountMax
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPeerMsgPendingCountHwts() uint64 {
	if m != nil {
		return m.BmpPeerMsgPendingCountHwts
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpBytesWrittenTcp() uint64 {
	if m != nil {
		return m.BmpBytesWrittenTcp
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetTcpWriteTime() uint32 {
	if m != nil {
		return m.TcpWriteTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmprMonUpdMessages() uint32 {
	if m != nil {
		return m.BmprMonUpdMessages
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmprMonWdrawMessages() uint32 {
	if m != nil {
		return m.BmprMonWdrawMessages
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpMessagesWdrawDiscarded() uint32 {
	if m != nil {
		return m.BmpMessagesWdrawDiscarded
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPfxWdrawDiscarded() uint32 {
	if m != nil {
		return m.BmpPfxWdrawDiscarded
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpPerPeerMsgRouteMonCount() uint32 {
	if m != nil {
		return m.BmpPerPeerMsgRouteMonCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmprMonUpdateGenTime() uint32 {
	if m != nil {
		return m.BmprMonUpdateGenTime
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmprMonEoRmessages() uint32 {
	if m != nil {
		return m.BmprMonEoRmessages
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpRmonCurBufferSize() uint64 {
	if m != nil {
		return m.BmpRmonCurBufferSize
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpMaximumBufferSizeRouteMon() uint64 {
	if m != nil {
		return m.BmpMaximumBufferSizeRouteMon
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpServerUpCount() uint32 {
	if m != nil {
		return m.BmpServerUpCount
	}
	return 0
}

func (m *BgpBmpSrvrBag) GetBmpUpdGenInProgress() bool {
	if m != nil {
		return m.BmpUpdGenInProgress
	}
	return false
}

func (m *BgpBmpSrvrBag) GetBmpResetWalkInProgress() bool {
	if m != nil {
		return m.BmpResetWalkInProgress
	}
	return false
}

type BgpTimespec struct {
	// Seconds part of time value
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Nanoseconds part of time value
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *BgpTimespec) Reset()                    { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string            { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()               {}
func (*BgpTimespec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()                    { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()                    { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
	// IPV4 Policy Addr
	Ipv4SrPolicyAddress *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress" json:"ipv4_sr_policy_address,omitempty"`
	// IPV6 Policy Addr
	Ipv6SrPolicyAddress *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress" json:"ipv6_sr_policy_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpPrefixtype struct {
	// Prefix
	Prefix *BgpAddrtype `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
}

func (m *BgpPrefixtype) Reset()                    { *m = BgpPrefixtype{} }
func (m *BgpPrefixtype) String() string            { return proto.CompactTextString(m) }
func (*BgpPrefixtype) ProtoMessage()               {}
func (*BgpPrefixtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BgpPrefixtype) GetPrefix() *BgpAddrtype {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *BgpPrefixtype) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type BgpBmpSrvrAfi_ struct {
	// BMP Address family identifier
	BmpafName string `protobuf:"bytes,1,opt,name=bmpaf_name,json=bmpafName" json:"bmpaf_name,omitempty"`
	// BMP Resume prefix
	BmpResumePrefix *BgpPrefixtype `protobuf:"bytes,2,opt,name=bmp_resume_prefix,json=bmpResumePrefix" json:"bmp_resume_prefix,omitempty"`
	// BMP Resume prefix Len
	BmpResumePrefixLen uint32 `protobuf:"varint,3,opt,name=bmp_resume_prefix_len,json=bmpResumePrefixLen" json:"bmp_resume_prefix_len,omitempty"`
	// Update Gen ResumeWalk start version
	BmpUpdGenResumeStartVersion uint32 `protobuf:"varint,4,opt,name=bmp_upd_gen_resume_start_version,json=bmpUpdGenResumeStartVersion" json:"bmp_upd_gen_resume_start_version,omitempty"`
	// Update Gen ResumeWalk end version
	BmpUpdGenResumeEndVersion uint32 `protobuf:"varint,5,opt,name=bmp_upd_gen_resume_end_version,json=bmpUpdGenResumeEndVersion" json:"bmp_upd_gen_resume_end_version,omitempty"`
	// Update Gen WalkStopped
	BmpUpdGenWalkStopped bool `protobuf:"varint,6,opt,name=bmp_upd_gen_walk_stopped,json=bmpUpdGenWalkStopped" json:"bmp_upd_gen_walk_stopped,omitempty"`
	// Update Gen ResumeWalk Net version
	BmpUpdGenResumeNetVersion uint32 `protobuf:"varint,7,opt,name=bmp_upd_gen_resume_net_version,json=bmpUpdGenResumeNetVersion" json:"bmp_upd_gen_resume_net_version,omitempty"`
	// Last Update Gen Run time stamp
	BmpUpdGenWalkRunTimeStamp uint64 `protobuf:"varint,8,opt,name=bmp_upd_gen_walk_run_time_stamp,json=bmpUpdGenWalkRunTimeStamp" json:"bmp_upd_gen_walk_run_time_stamp,omitempty"`
	// Number of times Update Gen ran
	BmpUpdGenWalkRunCount uint64 `protobuf:"varint,9,opt,name=bmp_upd_gen_walk_run_count,json=bmpUpdGenWalkRunCount" json:"bmp_upd_gen_walk_run_count,omitempty"`
	// Last Update Gen Stop time stamp
	BmpUpdGenWalkStopTimeStamp uint64 `protobuf:"varint,10,opt,name=bmp_upd_gen_walk_stop_time_stamp,json=bmpUpdGenWalkStopTimeStamp" json:"bmp_upd_gen_walk_stop_time_stamp,omitempty"`
	// Number of times Update Gen Stopped
	BmpUpdGenWalkStopCount uint64 `protobuf:"varint,11,opt,name=bmp_upd_gen_walk_stop_count,json=bmpUpdGenWalkStopCount" json:"bmp_upd_gen_walk_stop_count,omitempty"`
	// Version to reach to send EOR
	BmpInitEorEndVersion uint32 `protobuf:"varint,12,opt,name=bmp_init_eor_end_version,json=bmpInitEorEndVersion" json:"bmp_init_eor_end_version,omitempty"`
	// Count for pending EOR
	BmpInitEorPendingCnt uint32 `protobuf:"varint,13,opt,name=bmp_init_eor_pending_cnt,json=bmpInitEorPendingCnt" json:"bmp_init_eor_pending_cnt,omitempty"`
	// Filter Neighbor Address
	BmpFilterNeighborAddress *BgpAddrtype `protobuf:"bytes,14,opt,name=bmp_filter_neighbor_address,json=bmpFilterNeighborAddress" json:"bmp_filter_neighbor_address,omitempty"`
	// Filter Neighbor Address Set ?
	BmpFilterNeighborAddressSet bool `protobuf:"varint,15,opt,name=bmp_filter_neighbor_address_set,json=bmpFilterNeighborAddressSet" json:"bmp_filter_neighbor_address_set,omitempty"`
	// Filter nbr Count for this AFI
	BmpFilterNbrCnt uint32 `protobuf:"varint,16,opt,name=bmp_filter_nbr_cnt,json=bmpFilterNbrCnt" json:"bmp_filter_nbr_cnt,omitempty"`
	// Table Version that this BMP server has caught upto
	BmpSendVersion uint32 `protobuf:"varint,17,opt,name=bmp_send_version,json=bmpSendVersion" json:"bmp_send_version,omitempty"`
}

func (m *BgpBmpSrvrAfi_) Reset()                    { *m = BgpBmpSrvrAfi_{} }
func (m *BgpBmpSrvrAfi_) String() string            { return proto.CompactTextString(m) }
func (*BgpBmpSrvrAfi_) ProtoMessage()               {}
func (*BgpBmpSrvrAfi_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BgpBmpSrvrAfi_) GetBmpafName() string {
	if m != nil {
		return m.BmpafName
	}
	return ""
}

func (m *BgpBmpSrvrAfi_) GetBmpResumePrefix() *BgpPrefixtype {
	if m != nil {
		return m.BmpResumePrefix
	}
	return nil
}

func (m *BgpBmpSrvrAfi_) GetBmpResumePrefixLen() uint32 {
	if m != nil {
		return m.BmpResumePrefixLen
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenResumeStartVersion() uint32 {
	if m != nil {
		return m.BmpUpdGenResumeStartVersion
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenResumeEndVersion() uint32 {
	if m != nil {
		return m.BmpUpdGenResumeEndVersion
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkStopped() bool {
	if m != nil {
		return m.BmpUpdGenWalkStopped
	}
	return false
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenResumeNetVersion() uint32 {
	if m != nil {
		return m.BmpUpdGenResumeNetVersion
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkRunTimeStamp() uint64 {
	if m != nil {
		return m.BmpUpdGenWalkRunTimeStamp
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkRunCount() uint64 {
	if m != nil {
		return m.BmpUpdGenWalkRunCount
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkStopTimeStamp() uint64 {
	if m != nil {
		return m.BmpUpdGenWalkStopTimeStamp
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpUpdGenWalkStopCount() uint64 {
	if m != nil {
		return m.BmpUpdGenWalkStopCount
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpInitEorEndVersion() uint32 {
	if m != nil {
		return m.BmpInitEorEndVersion
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpInitEorPendingCnt() uint32 {
	if m != nil {
		return m.BmpInitEorPendingCnt
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpFilterNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.BmpFilterNeighborAddress
	}
	return nil
}

func (m *BgpBmpSrvrAfi_) GetBmpFilterNeighborAddressSet() bool {
	if m != nil {
		return m.BmpFilterNeighborAddressSet
	}
	return false
}

func (m *BgpBmpSrvrAfi_) GetBmpFilterNbrCnt() uint32 {
	if m != nil {
		return m.BmpFilterNbrCnt
	}
	return 0
}

func (m *BgpBmpSrvrAfi_) GetBmpSendVersion() uint32 {
	if m != nil {
		return m.BmpSendVersion
	}
	return 0
}

func init() {
	proto.RegisterType((*BgpBmpSrvrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_bmp_srvr_bag_KEYS")
	proto.RegisterType((*BgpBmpSrvrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_bmp_srvr_bag")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_timespec")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.IPV6AddressType")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_addrtype")
	proto.RegisterType((*BgpPrefixtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_prefixtype")
	proto.RegisterType((*BgpBmpSrvrAfi_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.bmp.server_summaries.server_summary.bgp_bmp_srvr_afi_")
}

func init() { proto.RegisterFile("bgp_bmp_srvr_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdd, 0x72, 0x1c, 0x47,
	0xf5, 0xaf, 0x89, 0x93, 0x58, 0x6a, 0x7d, 0x78, 0x35, 0x6b, 0xc9, 0x23, 0xe7, 0xe3, 0xaf, 0xc8,
	0xff, 0x02, 0x55, 0xe2, 0x28, 0x85, 0xac, 0xac, 0x71, 0x12, 0x30, 0xb2, 0x24, 0xdb, 0x6b, 0x6b,
	0xc5, 0x32, 0x2b, 0x4b, 0x84, 0xaf, 0x66, 0x66, 0xa7, 0x77, 0x35, 0xe5, 0x99, 0x9e, 0x4e, 0x77,
	0xef, 0x4a, 0x4e, 0x51, 0x7c, 0x53, 0xf0, 0x00, 0x3c, 0x01, 0x14, 0x17, 0x50, 0x95, 0x22, 0x17,
	0x81, 0xa2, 0x80, 0xe2, 0x86, 0x1b, 0xa8, 0xe2, 0x31, 0x78, 0x10, 0xaa, 0x4f, 0xf7, 0xf4, 0xce,
	0xec, 0xae, 0xb0, 0xb9, 0xf1, 0xea, 0x46, 0xa5, 0x9d, 0x73, 0x7e, 0xa7, 0x7f, 0x7d, 0xfa, 0xf4,
	0xe9, 0xd3, 0x67, 0x06, 0x2d, 0x85, 0x5d, 0x86, 0xc3, 0x94, 0x61, 0xc1, 0xfb, 0x1c, 0x87, 0x41,
	0x77, 0x9d, 0xf1, 0x4c, 0x66, 0x2e, 0x6d, 0xc7, 0xa2, 0x9d, 0xe1, 0x38, 0x13, 0xf8, 0x94, 0xe3,
	0x98, 0xf5, 0x37, 0xb1, 0xd2, 0xcc, 0x18, 0xe1, 0xeb, 0x61, 0x97, 0xad, 0xc7, 0x54, 0xc8, 0x80,
	0xb6, 0x89, 0xb0, 0xff, 0xd9, 0x7f, 0x70, 0xd0, 0x96, 0x71, 0x9f, 0xac, 0xf7, 0x79, 0x47, 0xa8,
	0x3f, 0xeb, 0x61, 0xca, 0xd6, 0x05, 0xe1, 0x7d, 0xc2, 0xb1, 0xe8, 0xa5, 0x69, 0xc0, 0x63, 0x22,
	0xca, 0x0f, 0x9e, 0xac, 0x4a, 0xb4, 0x38, 0xcc, 0x04, 0x3f, 0xdc, 0xfd, 0xb0, 0xe5, 0x5e, 0x43,
	0x73, 0xd6, 0x30, 0x0d, 0x52, 0xe2, 0x39, 0x2b, 0xce, 0xda, 0xb4, 0x3f, 0x9b, 0x3f, 0xdc, 0x0f,
	0x52, 0xe2, 0x2e, 0xa3, 0xa9, 0x3e, 0xef, 0x68, 0xf9, 0x0b, 0x20, 0xbf, 0xd8, 0xe7, 0x1d, 0x10,
	0xbd, 0x82, 0xa6, 0xcd, 0x50, 0x71, 0xe4, 0x5d, 0x58, 0x71, 0xd6, 0xe6, 0xfc, 0x29, 0xfd, 0xa0,
	0x1e, 0xad, 0xfe, 0xf3, 0x2a, 0xaa, 0x0c, 0x0f, 0xeb, 0xae, 0xa2, 0x39, 0xf8, 0x6d, 0x51, 0x1b,
	0x80, 0x9a, 0x09, 0x53, 0xd6, 0x32, 0x40, 0x77, 0x1d, 0x55, 0x0b, 0x3a, 0xc7, 0x99, 0x90, 0x30,
	0xf6, 0x0d, 0x18, 0x7b, 0xc1, 0x6a, 0xde, 0x37, 0x02, 0xf7, 0x73, 0xe8, 0x52, 0x41, 0x9f, 0x65,
	0x5c, 0x7a, 0x9b, 0x60, 0x75, 0xce, 0xea, 0x36, 0x33, 0x2e, 0xdd, 0x35, 0x54, 0x29, 0xe8, 0x09,
	0x19, 0x48, 0xe2, 0xbd, 0x0b, 0x46, 0xe7, 0xad, 0x62, 0x4b, 0x3d, 0x75, 0x6f, 0xa0, 0xa5, 0x22,
	0x4b, 0x81, 0x3b, 0x49, 0xc0, 0x58, 0x4c, 0xbb, 0x5e, 0x6d, 0xc5, 0x59, 0x9b, 0xf2, 0xab, 0x03,
	0xba, 0xe2, 0xae, 0x11, 0xb9, 0x9f, 0x38, 0xe8, 0xf2, 0xb0, 0x7d, 0x1c, 0x74, 0x89, 0x77, 0x73,
	0xc5, 0x59, 0x9b, 0xd9, 0xf8, 0xde, 0xfa, 0xf3, 0x5d, 0x75, 0x65, 0x13, 0xcb, 0x38, 0x25, 0x82,
	0x91, 0x76, 0xc1, 0x6d, 0x30, 0xc3, 0xad, 0x2e, 0x71, 0xff, 0xe4, 0xa0, 0xab, 0x23, 0x7c, 0x15,
	0x00, 0x2b, 0x84, 0xf7, 0xc5, 0x73, 0xc0, 0x7a, 0xa9, 0xcc, 0xfa, 0x20, 0x4e, 0x49, 0x8b, 0x91,
	0xb6, 0xfb, 0x67, 0x07, 0xbd, 0x52, 0xa0, 0x9e, 0x04, 0x42, 0xe2, 0x48, 0xf1, 0xa4, 0x80, 0xf5,
	0x6e, 0x9d, 0x03, 0xee, 0x57, 0x2c, 0xf7, 0xbd, 0x40, 0xc8, 0x1d, 0x60, 0xa7, 0x26, 0xe0, 0xbe,
	0x53, 0x0a, 0x13, 0x1a, 0x72, 0xdc, 0xce, 0x7a, 0x54, 0x7a, 0xef, 0x41, 0xcc, 0x0e, 0x16, 0x6a,
	0x3f, 0xe4, 0xdb, 0x4a, 0xe0, 0xbe, 0x85, 0x5c, 0x05, 0x88, 0x69, 0x2c, 0x71, 0x2a, 0xba, 0x46,
	0xfd, 0x7d, 0x50, 0x57, 0x91, 0x5f, 0xa7, 0xb1, 0x6c, 0x88, 0xae, 0x56, 0xbe, 0x85, 0x96, 0x95,
	0xb2, 0x24, 0x3c, 0x8d, 0x69, 0x20, 0xe3, 0x8c, 0x16, 0x30, 0x1f, 0x00, 0x46, 0x79, 0xf5, 0x60,
	0x20, 0xb7, 0xd0, 0x77, 0xd1, 0x15, 0x20, 0x26, 0x03, 0xd9, 0x13, 0x98, 0x13, 0xb5, 0x93, 0x0c,
	0xf0, 0x4b, 0x00, 0x54, 0xbc, 0x5b, 0x20, 0xf5, 0x41, 0xa8, 0x61, 0x1b, 0x7a, 0xb3, 0x30, 0xb5,
	0xf7, 0x08, 0xe1, 0x85, 0xe1, 0xbe, 0x0c, 0x28, 0x45, 0xbe, 0x49, 0x78, 0x93, 0x10, 0x6e, 0x87,
	0xda, 0xd4, 0x43, 0x59, 0xfd, 0x88, 0x67, 0xcc, 0x80, 0x6e, 0x03, 0xa8, 0x0a, 0x20, 0x40, 0xec,
	0xf0, 0x8c, 0x69, 0xd4, 0x7b, 0x3a, 0x60, 0x2d, 0x8a, 0x11, 0x1a, 0xc5, 0x34, 0x1f, 0xed, 0x2b,
	0x76, 0x72, 0x06, 0xd8, 0xd4, 0x62, 0x8d, 0x5d, 0x46, 0x53, 0x32, 0x13, 0x58, 0x3e, 0x61, 0xc4,
	0xdb, 0x02, 0xcd, 0x8b, 0x32, 0x13, 0x07, 0x4f, 0x18, 0x64, 0x31, 0x25, 0xea, 0x07, 0x49, 0x8f,
	0x78, 0x77, 0x74, 0x16, 0x93, 0x99, 0x38, 0x54, 0xbf, 0xdd, 0xdb, 0xe8, 0xd5, 0x1e, 0x8b, 0xd4,
	0xd6, 0x10, 0x59, 0x8f, 0xb7, 0x09, 0x8e, 0xa9, 0x24, 0xbc, 0x13, 0xe4, 0x19, 0x73, 0x1b, 0x12,
	0xc8, 0xb2, 0xd6, 0x69, 0x81, 0x4a, 0x3d, 0xd7, 0x80, 0x1c, 0xf9, 0xa9, 0x83, 0x16, 0xcb, 0x16,
	0x82, 0x28, 0xe2, 0x44, 0x08, 0x6f, 0x67, 0x72, 0x51, 0xaa, 0x28, 0x28, 0x57, 0xf8, 0xd5, 0x22,
	0xf1, 0x2d, 0x4d, 0x4c, 0x45, 0x68, 0x99, 0xb1, 0xca, 0xff, 0x71, 0xe4, 0xed, 0xea, 0x08, 0x2d,
	0x42, 0x0e, 0x79, 0xa7, 0x1e, 0xb9, 0x2b, 0x68, 0x56, 0x2d, 0x8c, 0x3d, 0x26, 0xee, 0x82, 0x53,
	0x50, 0x98, 0xb2, 0x43, 0x73, 0x52, 0xbc, 0x8a, 0x50, 0xae, 0x11, 0x47, 0xde, 0x3d, 0xed, 0x64,
	0x2d, 0xaf, 0x47, 0xee, 0xaf, 0x1d, 0xa4, 0x4e, 0x80, 0xa0, 0x13, 0xe3, 0x98, 0x76, 0x32, 0xef,
	0xfe, 0xca, 0x85, 0xb5, 0x99, 0x8d, 0x1f, 0x39, 0x93, 0x70, 0x8d, 0x3d, 0xae, 0x14, 0x1b, 0x98,
	0x43, 0xd0, 0x89, 0xeb, 0xb4, 0x93, 0xe5, 0xe7, 0x8c, 0x71, 0x4d, 0x9a, 0x45, 0xc4, 0xab, 0xc3,
	0x44, 0xd5, 0x39, 0xf3, 0x08, 0x9e, 0x36, 0xb2, 0x88, 0xa8, 0x7d, 0x24, 0xdb, 0x0c, 0x3f, 0x26,
	0x84, 0xe1, 0x20, 0x89, 0xfb, 0x26, 0x66, 0xfa, 0x41, 0xe2, 0x3d, 0xd0, 0xfb, 0x48, 0xb6, 0xd9,
	0x43, 0x42, 0xd8, 0x96, 0x12, 0xd6, 0x8d, 0xcc, 0xbd, 0x89, 0x3c, 0x05, 0x4b, 0x83, 0xd3, 0x38,
	0xed, 0xa5, 0x58, 0x90, 0x6e, 0x4a, 0xa8, 0xc4, 0x22, 0xfe, 0x98, 0x78, 0x0f, 0x01, 0xb7, 0x28,
	0xdb, 0xac, 0xa1, 0xc5, 0x2d, 0x2d, 0x6d, 0xc5, 0x1f, 0x43, 0x42, 0x51, 0xc0, 0x13, 0x1e, 0x4b,
	0x82, 0xdb, 0x61, 0xbe, 0x2d, 0xbc, 0x3d, 0xbd, 0x5c, 0xb2, 0xcd, 0x8e, 0x94, 0x68, 0x3b, 0x34,
	0x1b, 0xc2, 0xfd, 0x02, 0x52, 0x96, 0x74, 0xda, 0xd4, 0x28, 0x4e, 0x44, 0x2f, 0x91, 0x5e, 0x43,
	0x6f, 0x58, 0xd9, 0x66, 0x2a, 0x67, 0x01, 0xca, 0x07, 0x89, 0xda, 0xe4, 0x43, 0x90, 0x76, 0xa8,
	0x73, 0xed, 0xfe, 0x8a, 0xb3, 0xf6, 0x62, 0x19, 0xb3, 0x1d, 0x42, 0xa2, 0x7b, 0x1b, 0x55, 0x87,
	0x30, 0x00, 0xf8, 0x2a, 0x00, 0x2a, 0x45, 0x00, 0xa8, 0x6f, 0xa3, 0xff, 0x0b, 0x53, 0xf6, 0x51,
	0x51, 0x9f, 0xf5, 0x12, 0x41, 0xb0, 0x50, 0x6e, 0x00, 0x68, 0x13, 0xa0, 0x2a, 0x09, 0x7c, 0x64,
	0xb1, 0x4d, 0xa5, 0xd3, 0x22, 0x54, 0x82, 0x91, 0x07, 0xe8, 0xda, 0xc0, 0x48, 0x90, 0x24, 0x67,
	0x18, 0xfa, 0x1a, 0x18, 0x7a, 0x2d, 0x37, 0xb4, 0x95, 0x24, 0x63, 0x6c, 0xdd, 0x46, 0xaf, 0x8d,
	0x27, 0x94, 0x4f, 0xdd, 0x07, 0x2b, 0xde, 0x28, 0x1d, 0xe3, 0x80, 0x37, 0xd1, 0x02, 0x0b, 0xe4,
	0x71, 0x1e, 0x31, 0x3a, 0x4d, 0xb5, 0x74, 0xde, 0x56, 0x02, 0x1d, 0x33, 0x3a, 0x3f, 0xad, 0xa3,
	0x2a, 0xe8, 0x9e, 0xc4, 0xf2, 0x38, 0xe2, 0xc1, 0x89, 0xd1, 0x3e, 0xd0, 0x6b, 0xa8, 0x44, 0x47,
	0x46, 0xa2, 0xf5, 0xd7, 0x50, 0xa5, 0x68, 0x5b, 0x25, 0x50, 0xef, 0x11, 0x28, 0xcf, 0x0f, 0x4c,
	0xab, 0xd4, 0xe9, 0x5e, 0x47, 0x6e, 0xd9, 0x32, 0xe8, 0x1e, 0x82, 0x6e, 0xa5, 0x68, 0x18, 0xb4,
	0xb7, 0xd0, 0xeb, 0x67, 0xe7, 0x58, 0x15, 0x9c, 0xde, 0x11, 0x20, 0x97, 0xc7, 0xe7, 0xd9, 0x46,
	0x70, 0x6a, 0x16, 0xf2, 0x2c, 0x13, 0xc7, 0x27, 0x52, 0x78, 0x5f, 0xb7, 0x0b, 0x39, 0xc6, 0xc6,
	0xfd, 0x13, 0x29, 0x54, 0x8c, 0x2a, 0x23, 0xe1, 0x13, 0x49, 0x04, 0x38, 0x5f, 0x12, 0x8a, 0x65,
	0x9b, 0x79, 0x1f, 0xea, 0x78, 0x0b, 0x53, 0x76, 0x47, 0xc9, 0x8e, 0xb4, 0xe8, 0xa0, 0xcd, 0xdc,
	0xff, 0x47, 0xf3, 0x83, 0x7d, 0x00, 0x0b, 0xf4, 0x0d, 0xa0, 0x3a, 0x9b, 0xef, 0x00, 0x58, 0x14,
	0x6d, 0x98, 0xe3, 0x34, 0xa3, 0xca, 0x79, 0x38, 0x25, 0x42, 0x04, 0x5d, 0x22, 0xbc, 0x6f, 0xda,
	0xd3, 0x8a, 0x37, 0x32, 0xfa, 0x88, 0x45, 0x0d, 0x23, 0x31, 0x07, 0xa3, 0x86, 0x9c, 0x80, 0x0b,
	0x2d, 0xe8, 0x5b, 0xf6, 0x60, 0x54, 0xa0, 0x23, 0x25, 0xb4, 0xb0, 0xdb, 0xe8, 0x55, 0x35, 0x85,
	0x5c, 0xd7, 0x40, 0x55, 0x9d, 0x12, 0xf0, 0x88, 0x44, 0xde, 0xb7, 0xad, 0x23, 0x73, 0x08, 0xe0,
	0x77, 0x72, 0x85, 0xfc, 0x40, 0x66, 0x9d, 0xd3, 0x11, 0xec, 0x77, 0xec, 0xb8, 0xcd, 0xce, 0xe9,
	0x10, 0x6c, 0x07, 0xad, 0x8c, 0x1c, 0xc8, 0x3c, 0xeb, 0x41, 0xce, 0xa2, 0x26, 0xae, 0x30, 0xe0,
	0xaf, 0x96, 0x8e, 0x66, 0x5f, 0xe9, 0x34, 0x32, 0xaa, 0x03, 0xac, 0x86, 0xbc, 0xa2, 0x9f, 0x54,
	0x90, 0x75, 0x89, 0xa9, 0xaf, 0xbe, 0x5b, 0x9a, 0xb5, 0x8e, 0xb5, 0x7b, 0x84, 0x8e, 0xf8, 0x97,
	0x64, 0x98, 0x5b, 0x57, 0x05, 0x25, 0xff, 0xee, 0x66, 0x7e, 0x2e, 0x31, 0x43, 0x61, 0x0e, 0xf4,
	0x7a, 0x1c, 0x87, 0xbd, 0x4e, 0x47, 0x65, 0x65, 0x95, 0xf9, 0x42, 0x58, 0x6e, 0x35, 0x94, 0x9f,
	0x66, 0x74, 0xbb, 0xc7, 0xef, 0x80, 0x10, 0x12, 0xdf, 0x3d, 0xf4, 0x06, 0x38, 0xd8, 0x64, 0xcc,
	0x02, 0x6c, 0x30, 0x5f, 0xaf, 0x0d, 0x06, 0xd4, 0x4a, 0x98, 0xd4, 0x39, 0x30, 0x90, 0x4f, 0x58,
	0x65, 0xaa, 0x42, 0x49, 0xd6, 0xcb, 0x4b, 0x91, 0x48, 0xef, 0x11, 0x5b, 0x91, 0x3d, 0x62, 0xa5,
	0xea, 0x45, 0x45, 0x8f, 0x72, 0x49, 0x4c, 0x31, 0xe3, 0x59, 0x17, 0xce, 0x74, 0x62, 0xef, 0x07,
	0x8f, 0x58, 0x74, 0x8f, 0xd0, 0x3a, 0x6d, 0x1a, 0x51, 0x5e, 0xbd, 0x70, 0x22, 0x88, 0xc4, 0x27,
	0x41, 0xf2, 0xb8, 0x04, 0xec, 0x00, 0x50, 0x55, 0x2f, 0xbe, 0x52, 0x38, 0x0a, 0x92, 0xc7, 0x03,
	0xec, 0xea, 0x03, 0x34, 0x5b, 0x2c, 0x2e, 0x5d, 0x0f, 0x5d, 0x14, 0xa4, 0x9d, 0xd1, 0x48, 0xc0,
	0x95, 0x6d, 0xce, 0xcf, 0x7f, 0xba, 0x2b, 0x68, 0x86, 0x06, 0x34, 0xcb, 0xa5, 0x2f, 0xe8, 0xeb,
	0x55, 0xe1, 0xd1, 0xea, 0xdb, 0x68, 0xb1, 0xde, 0x3c, 0xdc, 0x3c, 0xe8, 0x51, 0x4a, 0x12, 0x73,
	0xe4, 0x43, 0x1d, 0x74, 0x19, 0xbd, 0xa4, 0x6b, 0x20, 0x7d, 0x0b, 0xd4, 0x3f, 0x56, 0xdf, 0x44,
	0xae, 0x52, 0x6f, 0xec, 0x1c, 0x3c, 0x5d, 0xf7, 0x1d, 0x74, 0xc5, 0x3f, 0xd8, 0xce, 0xa8, 0x90,
	0x3c, 0x88, 0xa9, 0x7c, 0x3a, 0xe0, 0xf3, 0xe8, 0x52, 0xbd, 0x79, 0x58, 0x7b, 0xba, 0xe2, 0x3e,
	0xf2, 0x94, 0x03, 0xa0, 0x04, 0x10, 0x9c, 0x65, 0x49, 0xdc, 0x7e, 0x02, 0x55, 0x0c, 0x56, 0x67,
	0xd3, 0xe2, 0xe8, 0x73, 0xe5, 0x53, 0x65, 0x61, 0xd6, 0xaf, 0x2a, 0x61, 0xcb, 0xc8, 0xcc, 0x48,
	0x05, 0x7b, 0xb5, 0x33, 0xec, 0xd5, 0xfe, 0x9b, 0xbd, 0xda, 0xb0, 0xbd, 0x9b, 0xfa, 0xae, 0x9b,
	0x6c, 0xf4, 0x19, 0xcd, 0xed, 0x5c, 0x43, 0x73, 0x83, 0xdf, 0x03, 0xfc, 0x2c, 0x3c, 0xcc, 0x81,
	0xd7, 0xd1, 0xe5, 0xbd, 0x8d, 0xc3, 0xe6, 0xfe, 0xee, 0x61, 0x73, 0xff, 0xe9, 0x6e, 0xf8, 0x40,
	0xdf, 0xe4, 0xb5, 0xd9, 0x54, 0xb0, 0x93, 0xff, 0x69, 0xac, 0xb7, 0x50, 0x55, 0x79, 0xbb, 0xf1,
	0x4c, 0x43, 0x69, 0xe5, 0xcd, 0x67, 0x53, 0x5e, 0x43, 0x95, 0xbd, 0x16, 0xde, 0x6b, 0x3d, 0x53,
	0x88, 0xd4, 0x9b, 0xfd, 0xcd, 0xbb, 0x49, 0x76, 0xa2, 0x22, 0xf9, 0x59, 0x01, 0xb5, 0x67, 0x07,
	0xfc, 0xe3, 0x75, 0xbd, 0x59, 0xf2, 0x1a, 0xd7, 0xad, 0xa0, 0x0b, 0x41, 0x27, 0x36, 0x4a, 0xea,
	0x5f, 0xf7, 0x0d, 0x34, 0x0b, 0x11, 0x93, 0x3b, 0x4b, 0xb7, 0x35, 0x66, 0xd4, 0xb3, 0xbc, 0x06,
	0xbe, 0x8e, 0x5c, 0x50, 0x49, 0xdb, 0x50, 0x49, 0x18, 0xc5, 0x0b, 0xa0, 0x58, 0x51, 0x92, 0x86,
	0x12, 0x0c, 0x6b, 0x27, 0x41, 0x48, 0x12, 0xab, 0xfd, 0xe2, 0x40, 0x7b, 0x4f, 0x09, 0x72, 0xed,
	0x3f, 0x3a, 0x08, 0x82, 0x12, 0x4b, 0xd8, 0x83, 0x56, 0xff, 0x25, 0xb8, 0x10, 0xfc, 0xec, 0xb9,
	0x97, 0xbd, 0x63, 0xd3, 0x81, 0xbf, 0xa0, 0x06, 0x2e, 0x3d, 0x76, 0x3f, 0x71, 0x50, 0x45, 0x7b,
	0x25, 0x1a, 0xf8, 0xe4, 0x65, 0x60, 0xfd, 0xe3, 0x89, 0xb0, 0x2e, 0x67, 0x25, 0x7f, 0x1e, 0x16,
	0x26, 0xb2, 0xcb, 0xb2, 0x66, 0xe8, 0x16, 0x37, 0xc6, 0x45, 0xdd, 0xf1, 0x51, 0xcf, 0x0f, 0xed,
	0xd6, 0xb0, 0x39, 0xa4, 0xcf, 0x68, 0xa0, 0xd7, 0xdc, 0xa8, 0x4f, 0x81, 0x7a, 0xd5, 0xa8, 0x07,
	0x8d, 0x81, 0xc8, 0xfd, 0x95, 0x03, 0x61, 0x54, 0xb3, 0xa6, 0xa7, 0xc1, 0x13, 0x3f, 0x98, 0x80,
	0x23, 0x8a, 0x19, 0x14, 0xe2, 0xb8, 0x56, 0x58, 0x32, 0x17, 0x48, 0x96, 0x03, 0x19, 0x9d, 0x0f,
	0xaa, 0x6a, 0x79, 0x6a, 0xa5, 0x9d, 0x64, 0xf9, 0x96, 0xb7, 0xd2, 0xcc, 0x39, 0xe2, 0x5b, 0xda,
	0xcb, 0xbf, 0xd5, 0x5b, 0xa2, 0x56, 0x8a, 0xb1, 0xd9, 0xf3, 0xc1, 0x56, 0x05, 0x79, 0xad, 0x10,
	0xe4, 0x9f, 0x39, 0x68, 0xc9, 0x72, 0x2d, 0xc7, 0xc3, 0xdc, 0xf9, 0x60, 0x5c, 0x35, 0x8c, 0x4b,
	0x21, 0xf1, 0x7b, 0x07, 0xb9, 0xc9, 0x86, 0x22, 0xdd, 0x67, 0x89, 0xb0, 0x94, 0xe7, 0x81, 0xf2,
	0x0f, 0x27, 0xd2, 0x24, 0x28, 0x9e, 0xf3, 0x7e, 0x25, 0xd9, 0x38, 0xd4, 0xdc, 0x72, 0xc6, 0x7f,
	0x75, 0xd0, 0x22, 0xf4, 0xce, 0xf2, 0x4a, 0xc8, 0x92, 0xbe, 0x04, 0xa4, 0x7f, 0xfe, 0xdc, 0x49,
	0x9f, 0x51, 0x96, 0xf9, 0x55, 0x2e, 0x47, 0x04, 0xee, 0xa7, 0x0e, 0x5a, 0xd0, 0x39, 0xa3, 0x18,
	0xd4, 0x15, 0xa0, 0xfe, 0x93, 0x49, 0xe4, 0xf9, 0xe1, 0x92, 0xc5, 0xbf, 0x04, 0x79, 0x63, 0x50,
	0xda, 0xe4, 0x94, 0x37, 0xcb, 0x94, 0x17, 0x26, 0x47, 0x79, 0x73, 0x1c, 0xe5, 0xcd, 0x22, 0xe5,
	0xcf, 0x1c, 0x54, 0xd5, 0x61, 0x8d, 0x49, 0x91, 0xb4, 0x0b, 0xa4, 0x7f, 0xfa, 0xdc, 0x49, 0x8f,
	0x2b, 0x43, 0x4d, 0x6c, 0xef, 0x16, 0x68, 0xff, 0xc6, 0x41, 0x73, 0x89, 0xc0, 0x85, 0x8d, 0x58,
	0x9d, 0xd0, 0x46, 0x1c, 0xae, 0x38, 0xfd, 0x99, 0x44, 0xec, 0xd9, 0x3d, 0xf8, 0x87, 0x81, 0x7b,
	0x6d, 0xa1, 0xac, 0xd8, 0x5e, 0x9e, 0x50, 0x91, 0x35, 0xb6, 0x6e, 0x37, 0xfe, 0x6d, 0x08, 0x76,
	0x52, 0xcc, 0x1d, 0xc0, 0xa6, 0x63, 0x2a, 0x5e, 0xcb, 0x7c, 0x71, 0x42, 0xb9, 0xe3, 0x8c, 0x7a,
	0x5d, 0x17, 0x45, 0x43, 0x82, 0x9c, 0x7e, 0x6d, 0x94, 0xfe, 0xd2, 0xe4, 0xe8, 0xd7, 0xce, 0xa2,
	0x3f, 0x2c, 0x70, 0xff, 0xee, 0xa0, 0x65, 0x5b, 0x32, 0x8e, 0x4c, 0xe1, 0xca, 0x39, 0x5b, 0x81,
	0x25, 0x53, 0x96, 0x9e, 0x31, 0x8b, 0xda, 0xf8, 0x59, 0x78, 0xe7, 0x6c, 0x21, 0x96, 0xcc, 0xa1,
	0x3f, 0x3c, 0x8b, 0xbf, 0xe9, 0x72, 0x45, 0x5d, 0xec, 0xf1, 0xd0, 0x4d, 0x7c, 0x19, 0xa6, 0xf0,
	0x8b, 0x89, 0x6c, 0xe2, 0x71, 0x3d, 0x88, 0xbc, 0xc9, 0xd0, 0x2c, 0x36, 0x05, 0xf2, 0x09, 0xd4,
	0xc6, 0x4c, 0xe0, 0xea, 0x64, 0x27, 0x50, 0x1b, 0x3b, 0x81, 0xda, 0xd0, 0x04, 0x56, 0xff, 0xe5,
	0xa0, 0x79, 0x85, 0x60, 0x9c, 0x74, 0xe2, 0x53, 0xb8, 0x4c, 0xff, 0xd2, 0x41, 0x2f, 0xeb, 0x9f,
	0x70, 0xa1, 0x9e, 0xf4, 0xfb, 0x2b, 0xc3, 0xc5, 0xbd, 0x86, 0xe6, 0xf4, 0x7f, 0x38, 0x21, 0xb4,
	0x2b, 0x8f, 0x4d, 0xe3, 0x6b, 0x56, 0x3f, 0xdc, 0x83, 0x67, 0xab, 0xff, 0x9e, 0x46, 0x0b, 0x23,
	0xaf, 0x78, 0xdc, 0xd7, 0x90, 0x7e, 0xc9, 0x53, 0xfc, 0x02, 0x62, 0x1a, 0x9e, 0xc0, 0x9b, 0xab,
	0xdf, 0x39, 0x68, 0xc1, 0xf4, 0xed, 0x7a, 0x29, 0x31, 0xae, 0x00, 0xf3, 0x33, 0x1b, 0xdf, 0x9f,
	0xc4, 0xdc, 0x07, 0x8b, 0x01, 0x6f, 0x7f, 0x7d, 0xe0, 0xd5, 0xd4, 0x6e, 0x30, 0x5d, 0xf3, 0x12,
	0x57, 0xe5, 0x11, 0xf3, 0x71, 0x86, 0x3b, 0xa4, 0xbf, 0x47, 0xa8, 0xbb, 0xab, 0xbb, 0xc5, 0x79,
	0x33, 0xd3, 0x40, 0x85, 0x0c, 0xb8, 0xc4, 0x7d, 0xc2, 0x45, 0x9c, 0x51, 0x68, 0x64, 0xcc, 0xf9,
	0xaf, 0xd8, 0xae, 0xa6, 0xb6, 0xd1, 0x52, 0x3a, 0x87, 0x5a, 0x25, 0x7f, 0x6f, 0x30, 0x64, 0x86,
	0xd0, 0xc8, 0x1a, 0x79, 0xc9, 0xb6, 0xbb, 0x8b, 0x46, 0x76, 0x69, 0x94, 0x9b, 0x30, 0x6d, 0xe0,
	0xdc, 0x04, 0xb4, 0x48, 0x85, 0xcc, 0x18, 0x23, 0x11, 0x34, 0x19, 0xa6, 0xa0, 0x0d, 0xac, 0xc1,
	0x47, 0x41, 0xf2, 0xb8, 0xa5, 0x65, 0x67, 0x0c, 0x4d, 0xc9, 0x80, 0xff, 0xc5, 0xb1, 0x43, 0xef,
	0x13, 0xcb, 0xfe, 0x8e, 0x7e, 0x65, 0x51, 0x1a, 0x9a, 0xf7, 0xa8, 0xf9, 0x1c, 0x42, 0x06, 0x29,
	0x83, 0x46, 0xc0, 0x8b, 0x05, 0x1b, 0x8a, 0x81, 0xdf, 0x83, 0x9e, 0x77, 0x4b, 0x29, 0xb8, 0xb7,
	0x74, 0x7f, 0x77, 0xc4, 0x86, 0xee, 0x25, 0x4f, 0x03, 0x7c, 0x71, 0x18, 0xae, 0x1b, 0xca, 0x3b,
	0xe5, 0x35, 0xb0, 0x33, 0x2f, 0x8e, 0x8f, 0xec, 0x2b, 0x93, 0xb2, 0x07, 0x06, 0x04, 0xde, 0xd7,
	0x1f, 0x45, 0x8c, 0x5a, 0xd1, 0x0c, 0x66, 0xc0, 0xc0, 0xd2, 0x88, 0x81, 0x62, 0xbb, 0x5f, 0x7f,
	0x64, 0x40, 0x32, 0x5e, 0x5a, 0xb9, 0x59, 0xdb, 0xee, 0xaf, 0xd3, 0x58, 0xee, 0x66, 0x7c, 0x74,
	0xd1, 0x2c, 0xce, 0xbe, 0xec, 0xa1, 0x12, 0x2e, 0x95, 0x25, 0x5c, 0xfe, 0x96, 0x87, 0x4a, 0xf7,
	0x2f, 0xe6, 0x13, 0x8e, 0x4e, 0x9c, 0x48, 0xc2, 0x31, 0x25, 0x71, 0xf7, 0x38, 0xcc, 0xf8, 0xd0,
	0xed, 0x6e, 0xb2, 0xc9, 0x45, 0xcd, 0xec, 0x2e, 0xf0, 0xdb, 0x37, 0xf4, 0xf2, 0xcc, 0xbe, 0xa3,
	0xe3, 0xe5, 0x0c, 0xf2, 0x58, 0x10, 0x09, 0x37, 0xbd, 0x29, 0xd8, 0x33, 0x63, 0x4d, 0xb4, 0x88,
	0xfd, 0xb0, 0x23, 0xb7, 0x12, 0x72, 0xf0, 0x5a, 0xc5, 0x7e, 0xd8, 0x61, 0x80, 0x21, 0xdf, 0xa6,
	0x85, 0xaf, 0x97, 0x0a, 0x0b, 0xb3, 0xa0, 0x5f, 0xf8, 0xc1, 0x0b, 0x0a, 0xbb, 0x24, 0xe1, 0xcb,
	0xf0, 0x95, 0xd9, 0x8d, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xbf, 0x00, 0x1e, 0x7f, 0x26,
	0x00, 0x00,
}
