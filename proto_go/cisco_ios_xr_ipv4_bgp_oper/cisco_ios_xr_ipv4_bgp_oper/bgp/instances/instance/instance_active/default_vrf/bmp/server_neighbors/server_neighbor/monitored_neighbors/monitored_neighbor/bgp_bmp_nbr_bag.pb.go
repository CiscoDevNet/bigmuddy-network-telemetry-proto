// Code generated by protoc-gen-go.
// source: bgp_bmp_nbr_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_bmp_server_neighbors_server_neighbor_monitored_neighbors_monitored_neighbor is a generated protocol buffer package.

It is generated from these files:
	bgp_bmp_nbr_bag.proto

It has these top-level messages:
	BgpBmpNbrBag_KEYS
	BgpBmpNbrBag
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	BgpIpv4SrpolicyAddrT
	BgpIpv6SrpolicyAddrT
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_bmp_server_neighbors_server_neighbor_monitored_neighbors_monitored_neighbor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BMP per Neighbor Details
type BgpBmpNbrBag_KEYS struct {
	InstanceName    string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	ServerId        uint32 `protobuf:"varint,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
}

func (m *BgpBmpNbrBag_KEYS) Reset()                    { *m = BgpBmpNbrBag_KEYS{} }
func (m *BgpBmpNbrBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpBmpNbrBag_KEYS) ProtoMessage()               {}
func (*BgpBmpNbrBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpBmpNbrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpBmpNbrBag_KEYS) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *BgpBmpNbrBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

type BgpBmpNbrBag struct {
	// Address of Nbr that logs to BMP server
	BmpNeighborAddress *BgpAddrtype `protobuf:"bytes,50,opt,name=bmp_neighbor_address,json=bmpNeighborAddress" json:"bmp_neighbor_address,omitempty"`
	// Number of messages pending to be sent to BMP Server from this Neighbor
	BmpNeighborMsgPending uint32 `protobuf:"varint,51,opt,name=bmp_neighbor_msg_pending,json=bmpNeighborMsgPending" json:"bmp_neighbor_msg_pending,omitempty"`
	// Number of messages dropped sent from this neighbor
	BmpNeighborMsgDropped uint32 `protobuf:"varint,52,opt,name=bmp_neighbor_msg_dropped,json=bmpNeighborMsgDropped" json:"bmp_neighbor_msg_dropped,omitempty"`
	// Number of Peer UP Messages sent from this neighbor
	BmpNeighborPeerUpSent uint32 `protobuf:"varint,53,opt,name=bmp_neighbor_peer_up_sent,json=bmpNeighborPeerUpSent" json:"bmp_neighbor_peer_up_sent,omitempty"`
	// Number of Peer DOWN Messages sent from this neighbor
	BmpNeighborPeerDownSent uint32 `protobuf:"varint,54,opt,name=bmp_neighbor_peer_down_sent,json=bmpNeighborPeerDownSent" json:"bmp_neighbor_peer_down_sent,omitempty"`
	// Number of Route Monitor Messages sent
	BmpNeighborRouteMonitorSent uint32 `protobuf:"varint,55,opt,name=bmp_neighbor_route_monitor_sent,json=bmpNeighborRouteMonitorSent" json:"bmp_neighbor_route_monitor_sent,omitempty"`
	// Number of Route Monitor EOR Messages sent
	BmpNeighborRouteMonitorEorSent uint32 `protobuf:"varint,56,opt,name=bmp_neighbor_route_monitor_eor_sent,json=bmpNeighborRouteMonitorEorSent" json:"bmp_neighbor_route_monitor_eor_sent,omitempty"`
	// Number of Path UpdateMessages sent
	BmpNeighborPathUpdateSent uint32 `protobuf:"varint,57,opt,name=bmp_neighbor_path_update_sent,json=bmpNeighborPathUpdateSent" json:"bmp_neighbor_path_update_sent,omitempty"`
	// Number of Path WithdrawMessages sent
	BmpNeighborPathWithdrawSent uint32 `protobuf:"varint,58,opt,name=bmp_neighbor_path_withdraw_sent,json=bmpNeighborPathWithdrawSent" json:"bmp_neighbor_path_withdraw_sent,omitempty"`
	// Number of path update drop
	BmpNeighborPathUpdateDrop uint32 `protobuf:"varint,59,opt,name=bmp_neighbor_path_update_drop,json=bmpNeighborPathUpdateDrop" json:"bmp_neighbor_path_update_drop,omitempty"`
	// Number of path wdraw drop
	BmpNeighborPathWithdrawDrop uint32 `protobuf:"varint,60,opt,name=bmp_neighbor_path_withdraw_drop,json=bmpNeighborPathWithdrawDrop" json:"bmp_neighbor_path_withdraw_drop,omitempty"`
	// Number of update message sent
	BmpNeighborUpdMsgSent uint32 `protobuf:"varint,61,opt,name=bmp_neighbor_upd_msg_sent,json=bmpNeighborUpdMsgSent" json:"bmp_neighbor_upd_msg_sent,omitempty"`
	// Number of withdraw message sent
	BmpNeighborWdrawMsgSent uint32 `protobuf:"varint,62,opt,name=bmp_neighbor_wdraw_msg_sent,json=bmpNeighborWdrawMsgSent" json:"bmp_neighbor_wdraw_msg_sent,omitempty"`
}

func (m *BgpBmpNbrBag) Reset()                    { *m = BgpBmpNbrBag{} }
func (m *BgpBmpNbrBag) String() string            { return proto.CompactTextString(m) }
func (*BgpBmpNbrBag) ProtoMessage()               {}
func (*BgpBmpNbrBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpBmpNbrBag) GetBmpNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.BmpNeighborAddress
	}
	return nil
}

func (m *BgpBmpNbrBag) GetBmpNeighborMsgPending() uint32 {
	if m != nil {
		return m.BmpNeighborMsgPending
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborMsgDropped() uint32 {
	if m != nil {
		return m.BmpNeighborMsgDropped
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborPeerUpSent() uint32 {
	if m != nil {
		return m.BmpNeighborPeerUpSent
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborPeerDownSent() uint32 {
	if m != nil {
		return m.BmpNeighborPeerDownSent
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborRouteMonitorSent() uint32 {
	if m != nil {
		return m.BmpNeighborRouteMonitorSent
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborRouteMonitorEorSent() uint32 {
	if m != nil {
		return m.BmpNeighborRouteMonitorEorSent
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborPathUpdateSent() uint32 {
	if m != nil {
		return m.BmpNeighborPathUpdateSent
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborPathWithdrawSent() uint32 {
	if m != nil {
		return m.BmpNeighborPathWithdrawSent
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborPathUpdateDrop() uint32 {
	if m != nil {
		return m.BmpNeighborPathUpdateDrop
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborPathWithdrawDrop() uint32 {
	if m != nil {
		return m.BmpNeighborPathWithdrawDrop
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborUpdMsgSent() uint32 {
	if m != nil {
		return m.BmpNeighborUpdMsgSent
	}
	return 0
}

func (m *BgpBmpNbrBag) GetBmpNeighborWdrawMsgSent() uint32 {
	if m != nil {
		return m.BmpNeighborWdrawMsgSent
	}
	return 0
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()                    { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()                    { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
	// IPV4 Policy Addr
	Ipv4SrPolicyAddress *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress" json:"ipv4_sr_policy_address,omitempty"`
	// IPV6 Policy Addr
	Ipv6SrPolicyAddress *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress" json:"ipv6_sr_policy_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpBmpNbrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.bgp_bmp_nbr_bag_KEYS")
	proto.RegisterType((*BgpBmpNbrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.bgp_bmp_nbr_bag")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.IPV6AddressType")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.bmp.server_neighbors.server_neighbor.monitored_neighbors.monitored_neighbor.bgp_addrtype")
}

func init() { proto.RegisterFile("bgp_bmp_nbr_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x99, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc7, 0xe5, 0x5d, 0xf6, 0x6b, 0x9a, 0x6e, 0xd3, 0x49, 0xd3, 0xa6, 0x54, 0x40, 0x69, 0x85,
	0x28, 0xb0, 0x04, 0x29, 0x1b, 0xdc, 0x05, 0x0a, 0x02, 0xd1, 0x22, 0x55, 0xdb, 0x54, 0x91, 0xdb,
	0x66, 0xc5, 0xd5, 0xc8, 0x89, 0xa7, 0xa9, 0x25, 0xc7, 0x1e, 0x79, 0x26, 0x09, 0xbd, 0xe6, 0x29,
	0x78, 0x02, 0x04, 0x88, 0x0f, 0xc1, 0x7b, 0x20, 0x6e, 0x90, 0x60, 0xb9, 0x00, 0xae, 0x10, 0x37,
	0xdc, 0xf0, 0x02, 0x68, 0xce, 0xd8, 0x8e, 0xbf, 0xd2, 0x94, 0x3b, 0xe7, 0x2e, 0x9e, 0x39, 0xe7,
	0xef, 0xf9, 0xcd, 0x9c, 0x73, 0x66, 0xc6, 0x41, 0xd5, 0x6e, 0x9f, 0x91, 0xee, 0x80, 0x11, 0xb7,
	0xeb, 0x93, 0xae, 0xd9, 0xaf, 0x33, 0xdf, 0x13, 0x1e, 0xfe, 0x4c, 0xeb, 0xd9, 0xbc, 0xe7, 0x11,
	0xdb, 0xe3, 0xe4, 0x13, 0x9f, 0xd8, 0x6c, 0xd4, 0x24, 0xd2, 0xd2, 0x63, 0xd4, 0xaf, 0x77, 0xfb,
	0xac, 0x6e, 0xbb, 0x5c, 0x98, 0x6e, 0x8f, 0xf2, 0xe8, 0x57, 0xf4, 0x83, 0x98, 0x3d, 0x61, 0x8f,
	0x68, 0xdd, 0xa2, 0xe7, 0xe6, 0xd0, 0x11, 0x64, 0xe4, 0x9f, 0xd7, 0xbb, 0x03, 0x56, 0xe7, 0xd4,
	0x1f, 0x51, 0x9f, 0xb8, 0xd4, 0xee, 0x5f, 0x74, 0x3d, 0x9f, 0xa7, 0x1b, 0xea, 0x03, 0xcf, 0xb5,
	0x85, 0xe7, 0x53, 0x2b, 0x66, 0x93, 0x6d, 0xdb, 0xfa, 0x54, 0x43, 0x2b, 0xa9, 0x51, 0x93, 0xc7,
	0x07, 0x1f, 0x9f, 0xe0, 0x6d, 0xb4, 0x18, 0x8d, 0xc1, 0x35, 0x07, 0xb4, 0xa6, 0x6d, 0x6a, 0x3b,
	0xf7, 0x8c, 0x52, 0xd8, 0x78, 0x6c, 0x0e, 0x28, 0xde, 0x40, 0xf7, 0x82, 0xf7, 0xda, 0x56, 0xed,
	0xc6, 0xa6, 0xb6, 0xb3, 0x68, 0xdc, 0x55, 0x0d, 0x87, 0x16, 0x7e, 0x05, 0x95, 0xc3, 0xd7, 0x10,
	0xd3, 0xb2, 0x7c, 0xca, 0x79, 0xed, 0x26, 0x88, 0x2c, 0x85, 0xed, 0x1f, 0xa8, 0xe6, 0xad, 0x7f,
	0xef, 0xa0, 0xa5, 0xd4, 0x28, 0xf0, 0x53, 0x39, 0x32, 0xf9, 0x9c, 0xd6, 0x68, 0x6c, 0x6a, 0x3b,
	0x0b, 0x8d, 0xcf, 0xb5, 0x7a, 0x61, 0x67, 0x55, 0xbe, 0x1e, 0x86, 0x2b, 0x2e, 0x19, 0x35, 0x70,
	0x77, 0xc0, 0x8e, 0x93, 0xc0, 0x78, 0x17, 0xd5, 0x12, 0x6c, 0x03, 0xde, 0x27, 0x8c, 0xba, 0x96,
	0xed, 0xf6, 0x6b, 0x0f, 0x61, 0x1e, 0xab, 0x31, 0xaf, 0x16, 0xef, 0xb7, 0x55, 0x67, 0xae, 0xa3,
	0xe5, 0x7b, 0x8c, 0x51, 0xab, 0xd6, 0xcc, 0x73, 0xdc, 0x57, 0x9d, 0xf8, 0x11, 0x5a, 0x4f, 0x38,
	0x32, 0x4a, 0x7d, 0x32, 0x64, 0x84, 0x53, 0x57, 0xd4, 0xde, 0xcc, 0x78, 0xb6, 0x29, 0xf5, 0xcf,
	0xd8, 0x09, 0x75, 0x05, 0xde, 0x43, 0x1b, 0x59, 0x4f, 0xcb, 0x1b, 0xbb, 0xca, 0x57, 0x07, 0xdf,
	0xb5, 0x94, 0xef, 0xbe, 0x37, 0x76, 0xc1, 0x7b, 0x1f, 0xbd, 0x90, 0xf0, 0xf6, 0xbd, 0xa1, 0xa0,
	0x24, 0x98, 0x33, 0xa5, 0xb0, 0x0b, 0x0a, 0x1b, 0x31, 0x05, 0x43, 0x1a, 0xb5, 0x94, 0x0d, 0xa8,
	0x3c, 0x46, 0xdb, 0x57, 0xa8, 0xd0, 0x50, 0xe9, 0x11, 0x28, 0x3d, 0x3f, 0x45, 0xe9, 0x20, 0x10,
	0x7b, 0x1f, 0x3d, 0x97, 0x04, 0x32, 0xc5, 0x05, 0x19, 0x32, 0xcb, 0x14, 0x54, 0xc9, 0xbc, 0x05,
	0x32, 0xeb, 0x71, 0x24, 0x53, 0x5c, 0x9c, 0x81, 0x45, 0x2e, 0x14, 0x28, 0x8c, 0x6d, 0x71, 0x61,
	0xf9, 0xe6, 0x58, 0x69, 0xbc, 0x9d, 0x81, 0x92, 0x1a, 0x4f, 0x02, 0x9b, 0x99, 0xe3, 0x90, 0x6b,
	0x5a, 0x7b, 0xe7, 0x8a, 0x71, 0xc8, 0x75, 0x9d, 0x31, 0x0e, 0xd0, 0xd8, 0xbb, 0x72, 0x1c, 0xa0,
	0x92, 0x0e, 0x8d, 0x21, 0xb3, 0x20, 0xae, 0x80, 0xe3, 0xdd, 0x4c, 0x68, 0x9c, 0x31, 0xab, 0xc5,
	0xfb, 0xb9, 0xa1, 0x31, 0x86, 0xf7, 0x46, 0xbe, 0xef, 0x65, 0x42, 0xe3, 0x89, 0x34, 0x08, 0xbc,
	0xb7, 0x5e, 0x47, 0xd5, 0xc3, 0x76, 0xa7, 0x79, 0x3a, 0x74, 0x5d, 0xea, 0x04, 0x99, 0x71, 0x7a,
	0xc9, 0x28, 0x5e, 0x41, 0xb7, 0x46, 0xa6, 0x33, 0x0c, 0x6b, 0x8e, 0x7a, 0xd8, 0x7a, 0x15, 0x61,
	0x69, 0xde, 0xda, 0x3f, 0x9d, 0x6d, 0xfb, 0x06, 0x5a, 0x33, 0x4e, 0x3f, 0xf4, 0x5c, 0x2e, 0x7c,
	0xd3, 0x76, 0xc5, 0x6c, 0x87, 0x97, 0xd1, 0xd2, 0x61, 0xbb, 0xa3, 0xcf, 0x36, 0x3c, 0x46, 0x35,
	0x99, 0xdd, 0x50, 0x6e, 0xb8, 0xcf, 0x3c, 0xc7, 0xee, 0x5d, 0x42, 0xae, 0x13, 0x81, 0x1b, 0xa8,
	0x9a, 0x6d, 0x97, 0x25, 0x4b, 0x2a, 0x94, 0x8c, 0x8a, 0xec, 0x3c, 0x09, 0xfa, 0xc2, 0xd2, 0x37,
	0xd1, 0xd3, 0xa7, 0xe8, 0xe9, 0x57, 0xe9, 0xe9, 0x69, 0xbd, 0x5d, 0x54, 0x96, 0x7a, 0x4e, 0x63,
	0xc4, 0xdc, 0x50, 0x67, 0x1b, 0x2d, 0x4e, 0x9e, 0x27, 0xfe, 0x25, 0x68, 0x0c, 0x1d, 0x1f, 0xa0,
	0x95, 0xa3, 0x46, 0xa7, 0x7d, 0x7c, 0xd0, 0x69, 0x1f, 0xcf, 0x9e, 0x86, 0x3d, 0xb5, 0xd9, 0x29,
	0xd9, 0x01, 0x67, 0xe3, 0xff, 0xf5, 0xae, 0xd7, 0x50, 0x45, 0xce, 0x76, 0xeb, 0x5a, 0xaf, 0x52,
	0xc6, 0xcd, 0xeb, 0x19, 0xef, 0xa0, 0xf2, 0xd1, 0x09, 0x39, 0x3a, 0xb9, 0x56, 0x88, 0x1c, 0xb6,
	0x47, 0xcd, 0x8f, 0x1c, 0x6f, 0xcc, 0x19, 0xed, 0x5d, 0xd7, 0x41, 0xbf, 0xbe, 0xc3, 0x17, 0x2f,
	0xa1, 0x52, 0x7c, 0x27, 0xc0, 0x65, 0x74, 0xd3, 0x3c, 0xb7, 0x03, 0x23, 0xf9, 0x13, 0xbf, 0x88,
	0x4a, 0x10, 0x31, 0xe1, 0x64, 0xdd, 0x80, 0xae, 0x05, 0xd9, 0x16, 0x6e, 0x15, 0x0f, 0x10, 0x06,
	0x93, 0x41, 0xcf, 0xe4, 0x22, 0xb5, 0x91, 0x96, 0x65, 0x4f, 0x4b, 0x76, 0xa4, 0xad, 0x1d, 0xb3,
	0x4b, 0x9d, 0xc8, 0xfa, 0x99, 0x89, 0xf5, 0x91, 0xec, 0x08, 0xad, 0xff, 0xd4, 0x10, 0x04, 0x25,
	0x11, 0x90, 0x83, 0x91, 0xfd, 0x2d, 0xd8, 0x62, 0xbf, 0x2b, 0xf2, 0x16, 0x9b, 0x5b, 0x39, 0x8c,
	0x65, 0x39, 0xc6, 0x44, 0x33, 0xfe, 0x45, 0x43, 0x65, 0x35, 0x81, 0xd6, 0x64, 0xfa, 0x6e, 0x03,
	0xe0, 0xd7, 0x45, 0x07, 0x4c, 0xd6, 0x3a, 0xe3, 0x3e, 0x2c, 0xb7, 0x15, 0x2d, 0xf6, 0x4e, 0x40,
	0x16, 0x4f, 0xb7, 0x3b, 0xb0, 0xd4, 0x60, 0xd9, 0x89, 0x12, 0x2e, 0xaa, 0x4c, 0x23, 0xe6, 0x9a,
	0x2a, 0x92, 0x02, 0xf3, 0xbb, 0x60, 0x5e, 0x09, 0xcc, 0xcd, 0xd6, 0xa4, 0x0b, 0xff, 0xa8, 0x41,
	0x70, 0xea, 0x91, 0xf4, 0x3d, 0x98, 0xb4, 0x2f, 0x0b, 0x3e, 0x69, 0xf1, 0x1a, 0x0e, 0x99, 0x14,
	0x36, 0xe0, 0x5f, 0x35, 0x48, 0x0e, 0x3d, 0x95, 0x4a, 0x68, 0xfe, 0xb0, 0xe4, 0xb2, 0xeb, 0x89,
	0xbc, 0x8f, 0xd8, 0x92, 0x89, 0xbf, 0x30, 0xa7, 0x6c, 0x89, 0x2a, 0xf5, 0xb3, 0xca, 0x60, 0x3d,
	0x11, 0xe7, 0xa5, 0xf9, 0x23, 0x93, 0x49, 0xa9, 0xc7, 0x92, 0xf2, 0x0f, 0x0d, 0xad, 0x46, 0x5c,
	0xc9, 0x98, 0x5c, 0x9c, 0x3f, 0xba, 0x4a, 0x40, 0x97, 0x08, 0xcb, 0xa7, 0x1a, 0xc2, 0x4e, 0x43,
	0x02, 0x8e, 0x98, 0xc3, 0x23, 0xbc, 0xfb, 0x80, 0xf7, 0x55, 0xd1, 0xaf, 0x70, 0xf1, 0x43, 0x94,
	0x51, 0x76, 0x1a, 0x1d, 0x85, 0x11, 0xc2, 0xfd, 0xa5, 0xa1, 0xaa, 0x2f, 0x48, 0x2f, 0x3a, 0x66,
	0x46, 0x7c, 0x4b, 0xc0, 0xf7, 0x7d, 0x91, 0xf9, 0xa6, 0x1c, 0x8f, 0x8d, 0x8a, 0x2f, 0x32, 0x1d,
	0xf8, 0x37, 0x0d, 0x2d, 0xab, 0xca, 0x19, 0x4f, 0xc1, 0x32, 0x50, 0x7e, 0x53, 0xf4, 0x20, 0x4d,
	0x1d, 0x1c, 0x8d, 0x25, 0x28, 0x9e, 0x93, 0xd3, 0x68, 0x48, 0xd7, 0x4c, 0xd2, 0x2d, 0xcf, 0x05,
	0x5d, 0x33, 0x8f, 0xae, 0x19, 0xa7, 0xfb, 0x5d, 0x43, 0x15, 0x95, 0x82, 0x84, 0xc6, 0xf9, 0x30,
	0xf0, 0x7d, 0x5b, 0x64, 0xbe, 0xbc, 0xfb, 0x48, 0x90, 0x87, 0x07, 0x31, 0xc2, 0x9f, 0x34, 0xb4,
	0xe8, 0x70, 0x12, 0xab, 0x2f, 0x95, 0xe2, 0xd7, 0x97, 0xf4, 0x2d, 0xc5, 0x58, 0x70, 0xf8, 0x11,
	0x8f, 0x6d, 0x0d, 0xe1, 0xa2, 0x45, 0x97, 0x2b, 0x09, 0xb6, 0x52, 0xfc, 0x83, 0x79, 0xee, 0xb5,
	0x30, 0x58, 0xb5, 0x16, 0x67, 0xe3, 0x78, 0xf5, 0x84, 0x81, 0x9f, 0x07, 0x17, 0xaa, 0x08, 0xb2,
	0x5a, 0xfc, 0xea, 0x39, 0xe5, 0xe6, 0xa8, 0x0e, 0xd2, 0xa9, 0x8e, 0x90, 0x54, 0xcf, 0x92, 0xae,
	0xce, 0x05, 0xa9, 0x3e, 0x8d, 0x34, 0xdd, 0x81, 0xff, 0xd1, 0xd0, 0x7a, 0x74, 0x23, 0xc9, 0xd0,
	0xae, 0xcd, 0xef, 0xba, 0xae, 0x06, 0x17, 0xa4, 0x29, 0xc0, 0x7a, 0x3e, 0x70, 0x6d, 0x7e, 0x97,
	0x77, 0x35, 0x38, 0xcd, 0xa5, 0x81, 0xff, 0x56, 0x67, 0xd6, 0x26, 0xe1, 0x3e, 0x49, 0x7d, 0x94,
	0x5a, 0x07, 0xda, 0x1f, 0x8a, 0x5e, 0x9b, 0xf2, 0xbe, 0xdc, 0x85, 0x9f, 0xe6, 0xda, 0xf1, 0x4f,
	0x69, 0x21, 0xab, 0x9e, 0xc3, 0xfa, 0xec, 0xdc, 0xb0, 0xea, 0xb9, 0xac, 0x7a, 0x8a, 0xb5, 0x7b,
	0x1b, 0xfe, 0xaa, 0x7a, 0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xa5, 0xc8, 0x48, 0xc3,
	0x1a, 0x00, 0x00,
}
