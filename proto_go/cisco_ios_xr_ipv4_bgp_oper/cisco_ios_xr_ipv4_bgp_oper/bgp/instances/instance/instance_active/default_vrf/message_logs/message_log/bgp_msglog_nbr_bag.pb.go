// Code generated by protoc-gen-go.
// source: bgp_msglog_nbr_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_message_logs_message_log is a generated protocol buffer package.

It is generated from these files:
	bgp_msglog_nbr_bag.proto

It has these top-level messages:
	BgpMsglogNbrBag_KEYS
	BgpMsglogNbrBag
	BgpTimespec
	BgpNbrMsg_
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_message_logs_message_log

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP Message logging Neighbor information
type BgpMsglogNbrBag_KEYS struct {
	InstanceName    string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	NeighborAddress string `protobuf:"bytes,2,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	Direction       uint32 `protobuf:"varint,3,opt,name=direction" json:"direction,omitempty"`
}

func (m *BgpMsglogNbrBag_KEYS) Reset()                    { *m = BgpMsglogNbrBag_KEYS{} }
func (m *BgpMsglogNbrBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpMsglogNbrBag_KEYS) ProtoMessage()               {}
func (*BgpMsglogNbrBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpMsglogNbrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpMsglogNbrBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *BgpMsglogNbrBag_KEYS) GetDirection() uint32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type BgpMsglogNbrBag struct {
	// Array of Neighbor Messages in one direction
	NeighborMessages []*BgpNbrMsg_ `protobuf:"bytes,50,rep,name=neighbor_messages,json=neighborMessages" json:"neighbor_messages,omitempty"`
}

func (m *BgpMsglogNbrBag) Reset()                    { *m = BgpMsglogNbrBag{} }
func (m *BgpMsglogNbrBag) String() string            { return proto.CompactTextString(m) }
func (*BgpMsglogNbrBag) ProtoMessage()               {}
func (*BgpMsglogNbrBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpMsglogNbrBag) GetNeighborMessages() []*BgpNbrMsg_ {
	if m != nil {
		return m.NeighborMessages
	}
	return nil
}

type BgpTimespec struct {
	// Seconds part of time value
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Nanoseconds part of time value
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *BgpTimespec) Reset()                    { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string            { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()               {}
func (*BgpTimespec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

type BgpNbrMsg_ struct {
	// Type of messages Received
	MessageTypeReceived uint32 `protobuf:"varint,1,opt,name=message_type_received,json=messageTypeReceived" json:"message_type_received,omitempty"`
	// Total logged messages count
	TotalLoggedMessageCount uint32 `protobuf:"varint,2,opt,name=total_logged_message_count,json=totalLoggedMessageCount" json:"total_logged_message_count,omitempty"`
	// message received time: time elapsed since 00:00:00 UTC, January 1, 1970
	MessageTimestamp *BgpTimespec `protobuf:"bytes,3,opt,name=message_timestamp,json=messageTimestamp" json:"message_timestamp,omitempty"`
	// Message data length
	MessageDataLength uint32 `protobuf:"varint,4,opt,name=message_data_length,json=messageDataLength" json:"message_data_length,omitempty"`
	// Raw Message data in binary format
	LoggedMessageData []uint32 `protobuf:"varint,5,rep,packed,name=logged_message_data,json=loggedMessageData" json:"logged_message_data,omitempty"`
}

func (m *BgpNbrMsg_) Reset()                    { *m = BgpNbrMsg_{} }
func (m *BgpNbrMsg_) String() string            { return proto.CompactTextString(m) }
func (*BgpNbrMsg_) ProtoMessage()               {}
func (*BgpNbrMsg_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BgpNbrMsg_) GetMessageTypeReceived() uint32 {
	if m != nil {
		return m.MessageTypeReceived
	}
	return 0
}

func (m *BgpNbrMsg_) GetTotalLoggedMessageCount() uint32 {
	if m != nil {
		return m.TotalLoggedMessageCount
	}
	return 0
}

func (m *BgpNbrMsg_) GetMessageTimestamp() *BgpTimespec {
	if m != nil {
		return m.MessageTimestamp
	}
	return nil
}

func (m *BgpNbrMsg_) GetMessageDataLength() uint32 {
	if m != nil {
		return m.MessageDataLength
	}
	return 0
}

func (m *BgpNbrMsg_) GetLoggedMessageData() []uint32 {
	if m != nil {
		return m.LoggedMessageData
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpMsglogNbrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.message_logs.message_log.bgp_msglog_nbr_bag_KEYS")
	proto.RegisterType((*BgpMsglogNbrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.message_logs.message_log.bgp_msglog_nbr_bag")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.message_logs.message_log.bgp_timespec")
	proto.RegisterType((*BgpNbrMsg_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.message_logs.message_log.bgp_nbr_msg_")
}

func init() { proto.RegisterFile("bgp_msglog_nbr_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0x3d, 0x6f, 0xd5, 0x30,
	0x14, 0x55, 0x1a, 0x3e, 0x54, 0xb7, 0x4f, 0x14, 0x23, 0x54, 0x0b, 0x31, 0x44, 0x61, 0x79, 0x2c,
	0x19, 0x1e, 0x6c, 0x4c, 0x08, 0x58, 0xa0, 0x30, 0x04, 0x16, 0xa6, 0x2b, 0xc7, 0xbe, 0xcf, 0xb5,
	0x94, 0xd8, 0x96, 0xed, 0x46, 0x74, 0x66, 0xe0, 0x77, 0xf0, 0x2f, 0xf8, 0x79, 0xc8, 0x6e, 0x1c,
	0x9e, 0xe8, 0xde, 0xcd, 0x3e, 0xe7, 0xf8, 0xde, 0x73, 0x4e, 0x14, 0xc2, 0x06, 0xe5, 0x60, 0x0a,
	0x6a, 0xb4, 0x0a, 0xcc, 0xe0, 0x61, 0xe0, 0xaa, 0x73, 0xde, 0x46, 0x4b, 0xf7, 0x42, 0x07, 0x61,
	0x41, 0xdb, 0x00, 0x3f, 0x3c, 0x68, 0x37, 0xbf, 0x86, 0xa4, 0xb5, 0x0e, 0x7d, 0x37, 0x28, 0xd7,
	0x69, 0x13, 0x22, 0x37, 0x02, 0xc3, 0x7a, 0x5a, 0x0f, 0xc0, 0x45, 0xd4, 0x33, 0x76, 0x12, 0xf7,
	0xfc, 0x6a, 0x8c, 0x30, 0xfb, 0x7d, 0x37, 0x61, 0x08, 0x5c, 0x21, 0x8c, 0x56, 0x85, 0xc3, 0x4b,
	0xfb, 0xab, 0x22, 0xe7, 0xb7, 0x4d, 0xc0, 0xa7, 0x0f, 0xdf, 0xbf, 0xd2, 0x17, 0x64, 0xb3, 0xce,
	0x34, 0x7c, 0x42, 0x56, 0x35, 0xd5, 0xf6, 0xb8, 0x3f, 0x2d, 0xe0, 0x17, 0x3e, 0x21, 0x7d, 0x49,
	0xce, 0x0c, 0x6a, 0x75, 0x39, 0x58, 0x0f, 0x5c, 0x4a, 0x8f, 0x21, 0xb0, 0xa3, 0xac, 0x7b, 0x54,
	0xf0, 0xb7, 0x37, 0x30, 0x7d, 0x4e, 0x8e, 0xa5, 0xf6, 0x28, 0xa2, 0xb6, 0x86, 0xd5, 0x4d, 0xb5,
	0xdd, 0xf4, 0xff, 0x80, 0xf6, 0x4f, 0x45, 0xe8, 0x6d, 0x27, 0xf4, 0x77, 0x45, 0x1e, 0xaf, 0x0b,
	0x16, 0xe7, 0x81, 0xed, 0x9a, 0x7a, 0x7b, 0xb2, 0x8b, 0xdd, 0xdd, 0xb4, 0x94, 0x66, 0x65, 0x43,
	0x53, 0x50, 0xd0, 0xaf, 0x79, 0x3f, 0x2f, 0x6e, 0xda, 0x8f, 0xe4, 0x34, 0x29, 0xa2, 0x9e, 0x30,
	0x38, 0x14, 0x94, 0x91, 0x87, 0x01, 0x85, 0x35, 0x32, 0xe4, 0xca, 0x36, 0x7d, 0xb9, 0xd2, 0x86,
	0x9c, 0x18, 0x6e, 0x6c, 0x61, 0x8f, 0x32, 0x7b, 0x08, 0xb5, 0x3f, 0xeb, 0x9b, 0x61, 0x65, 0x1d,
	0xdd, 0x91, 0xa7, 0xc5, 0x4a, 0xbc, 0x76, 0x08, 0x1e, 0x05, 0xea, 0x19, 0xe5, 0x32, 0xfa, 0xc9,
	0x42, 0x7e, 0xbb, 0x76, 0xd8, 0x2f, 0x14, 0x7d, 0x43, 0x9e, 0x45, 0x1b, 0xf9, 0x98, 0xcc, 0x2b,
	0x94, 0xa5, 0x37, 0x10, 0xf6, 0xca, 0xc4, 0x65, 0xeb, 0x79, 0x56, 0x5c, 0x64, 0xc1, 0x92, 0xe4,
	0x5d, 0xa2, 0x73, 0xe3, 0xeb, 0xc6, 0x14, 0x29, 0xf2, 0xc9, 0xe5, 0xef, 0x75, 0xc7, 0x8d, 0x97,
	0x3e, 0xfb, 0xb3, 0x92, 0xb1, 0xb8, 0xa1, 0x1d, 0x29, 0xb9, 0x41, 0xf2, 0xc8, 0x61, 0x44, 0xa3,
	0xe2, 0x25, 0xbb, 0x97, 0x93, 0x15, 0xf7, 0xef, 0x79, 0xe4, 0x17, 0x99, 0x48, 0xfa, 0xff, 0xaa,
	0x48, 0xcf, 0xd8, 0xfd, 0xa6, 0x4e, 0xfa, 0xf1, 0xb0, 0x84, 0xf4, 0x6a, 0x78, 0x90, 0xff, 0xc2,
	0x57, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x72, 0x26, 0xf0, 0x37, 0xa1, 0x03, 0x00, 0x00,
}
