// Code generated by protoc-gen-go.
// source: bgp_rtset_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_afs_af_rt_set_counters_rt_set_counter is a generated protocol buffer package.

It is generated from these files:
	bgp_rtset_bag.proto

It has these top-level messages:
	BgpRtsetBag_KEYS
	BgpRtsetBag
	BgpRtset_
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_afs_af_rt_set_counters_rt_set_counter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP RT-set information
type BgpRtsetBag_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	RtSetId      uint32 `protobuf:"varint,3,opt,name=rt_set_id,json=rtSetId" json:"rt_set_id,omitempty"`
}

func (m *BgpRtsetBag_KEYS) Reset()                    { *m = BgpRtsetBag_KEYS{} }
func (m *BgpRtsetBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpRtsetBag_KEYS) ProtoMessage()               {}
func (*BgpRtsetBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpRtsetBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpRtsetBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpRtsetBag_KEYS) GetRtSetId() uint32 {
	if m != nil {
		return m.RtSetId
	}
	return 0
}

type BgpRtsetBag struct {
	// Route Target set
	RouteTargetSet *BgpRtset_ `protobuf:"bytes,50,opt,name=route_target_set,json=routeTargetSet" json:"route_target_set,omitempty"`
}

func (m *BgpRtsetBag) Reset()                    { *m = BgpRtsetBag{} }
func (m *BgpRtsetBag) String() string            { return proto.CompactTextString(m) }
func (*BgpRtsetBag) ProtoMessage()               {}
func (*BgpRtsetBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpRtsetBag) GetRouteTargetSet() *BgpRtset_ {
	if m != nil {
		return m.RouteTargetSet
	}
	return nil
}

type BgpRtset_ struct {
	// Set of route targets
	RtSet []uint32 `protobuf:"varint,1,rep,packed,name=rt_set,json=rtSet" json:"rt_set,omitempty"`
	// Length in bytes of set of route targets
	RtSetLen uint32 `protobuf:"varint,2,opt,name=rt_set_len,json=rtSetLen" json:"rt_set_len,omitempty"`
	// Identifier of the rtset
	RtSetId uint32 `protobuf:"varint,3,opt,name=rt_set_id,json=rtSetId" json:"rt_set_id,omitempty"`
	// Count of nets with paths with the rtset
	RtSetNetCount uint32 `protobuf:"varint,4,opt,name=rt_set_net_count,json=rtSetNetCount" json:"rt_set_net_count,omitempty"`
}

func (m *BgpRtset_) Reset()                    { *m = BgpRtset_{} }
func (m *BgpRtset_) String() string            { return proto.CompactTextString(m) }
func (*BgpRtset_) ProtoMessage()               {}
func (*BgpRtset_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BgpRtset_) GetRtSet() []uint32 {
	if m != nil {
		return m.RtSet
	}
	return nil
}

func (m *BgpRtset_) GetRtSetLen() uint32 {
	if m != nil {
		return m.RtSetLen
	}
	return 0
}

func (m *BgpRtset_) GetRtSetId() uint32 {
	if m != nil {
		return m.RtSetId
	}
	return 0
}

func (m *BgpRtset_) GetRtSetNetCount() uint32 {
	if m != nil {
		return m.RtSetNetCount
	}
	return 0
}

func init() {
	proto.RegisterType((*BgpRtsetBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.rt_set_counters.rt_set_counter.bgp_rtset_bag_KEYS")
	proto.RegisterType((*BgpRtsetBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.rt_set_counters.rt_set_counter.bgp_rtset_bag")
	proto.RegisterType((*BgpRtset_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.rt_set_counters.rt_set_counter.bgp_rtset_")
}

func init() { proto.RegisterFile("bgp_rtset_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x65, 0x0a, 0x2d, 0x3d, 0x08, 0xaa, 0x8c, 0x10, 0x11, 0x62, 0x88, 0xca, 0x40, 0x26,
	0x0f, 0x85, 0x37, 0x40, 0x0c, 0x08, 0xd4, 0x21, 0x65, 0x61, 0xb2, 0x9c, 0xf4, 0x1c, 0x59, 0x6a,
	0xed, 0xc8, 0xbe, 0x56, 0x6c, 0x6c, 0xbc, 0x0b, 0xcf, 0xc0, 0xcb, 0xa1, 0xba, 0x6d, 0xaa, 0x32,
	0xb0, 0xb2, 0x5d, 0xee, 0xbb, 0xbb, 0xff, 0xcf, 0x2f, 0xc3, 0x79, 0x59, 0x37, 0xd2, 0x53, 0x40,
	0x92, 0xa5, 0xaa, 0x45, 0xe3, 0x1d, 0x39, 0x1e, 0x2a, 0x13, 0x2a, 0x27, 0x8d, 0x0b, 0xf2, 0xdd,
	0x4b, 0xd3, 0x2c, 0xef, 0xe5, 0x6a, 0xcc, 0x35, 0xe8, 0x45, 0x59, 0x37, 0xc2, 0xd8, 0x40, 0xca,
	0x56, 0x18, 0xda, 0xaa, 0x2d, 0xa4, 0xaa, 0xc8, 0x2c, 0x51, 0x4c, 0x51, 0xab, 0xc5, 0x8c, 0xe4,
	0xd2, 0x6b, 0xa1, 0x74, 0x10, 0x4a, 0x0b, 0x4f, 0x72, 0x25, 0x53, 0xb9, 0x85, 0x25, 0xf4, 0xe1,
	0xd7, 0xf7, 0xd0, 0x02, 0xdf, 0xf3, 0x22, 0x9f, 0x1f, 0xdf, 0x26, 0xfc, 0x06, 0x92, 0xf6, 0xb4,
	0x55, 0x73, 0x4c, 0x59, 0xc6, 0xf2, 0x7e, 0x71, 0xba, 0x6d, 0x8e, 0xd5, 0x1c, 0xf9, 0x25, 0xf4,
	0x94, 0x5e, 0xe3, 0x83, 0x88, 0xbb, 0x4a, 0x47, 0x70, 0x05, 0xfd, 0x8d, 0x8a, 0x99, 0xa6, 0x9d,
	0x8c, 0xe5, 0x49, 0xd1, 0xf3, 0x34, 0x41, 0x7a, 0x9a, 0x0e, 0xbf, 0x19, 0x24, 0x7b, 0x82, 0xfc,
	0x8b, 0xc1, 0xc0, 0xbb, 0x05, 0xa1, 0x24, 0xe5, 0x6b, 0x8c, 0x8b, 0xe9, 0x28, 0x63, 0xf9, 0xc9,
	0xe8, 0x43, 0xfc, 0x43, 0x24, 0x62, 0x67, 0xaf, 0x38, 0x8b, 0xc6, 0x5e, 0xa3, 0xaf, 0x09, 0xd2,
	0xf0, 0x93, 0x01, 0xec, 0x30, 0xbf, 0x80, 0xee, 0x7a, 0x37, 0x65, 0x59, 0x27, 0x4f, 0x8a, 0xa3,
	0xf8, 0x97, 0xfc, 0x1a, 0x60, 0x73, 0x72, 0x86, 0x36, 0x66, 0x93, 0x14, 0xc7, 0x11, 0xbd, 0xa0,
	0xfd, 0x2b, 0x1d, 0x7e, 0x0b, 0x83, 0x0d, 0xb3, 0x5b, 0x43, 0xe9, 0x61, 0x1c, 0x49, 0xe2, 0xc8,
	0x18, 0xe9, 0x61, 0xd5, 0x2c, 0xbb, 0xf1, 0xc9, 0xdc, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x50,
	0x5f, 0x76, 0x16, 0x49, 0x02, 0x00, 0x00,
}
