// Code generated by protoc-gen-go.
// source: bgp_updgen_af_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_afs_af_update_generation_address_family is a generated protocol buffer package.

It is generated from these files:
	bgp_updgen_af_bag.proto

It has these top-level messages:
	BgpUpdgenAfBag_KEYS
	BgpUpdgenAfBag
	BgpTimespec
	BgpUpdgenStatsBag
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_default_vrf_afs_af_update_generation_address_family

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP Update generation address-family information
type BgpUpdgenAfBag_KEYS struct {
	InstanceName string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	AfName       string `protobuf:"bytes,2,opt,name=af_name,json=afName" json:"af_name,omitempty"`
}

func (m *BgpUpdgenAfBag_KEYS) Reset()                    { *m = BgpUpdgenAfBag_KEYS{} }
func (m *BgpUpdgenAfBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdgenAfBag_KEYS) ProtoMessage()               {}
func (*BgpUpdgenAfBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpUpdgenAfBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpUpdgenAfBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

type BgpUpdgenAfBag struct {
	// Address family identifier
	UpdateGroupAfName string `protobuf:"bytes,50,opt,name=update_group_af_name,json=updateGroupAfName" json:"update_group_af_name,omitempty"`
	// Main table version
	UpdateMainTableVersion uint32 `protobuf:"varint,51,opt,name=update_main_table_version,json=updateMainTableVersion" json:"update_main_table_version,omitempty"`
	// RIB version
	UpdateRibVersion uint32 `protobuf:"varint,52,opt,name=update_rib_version,json=updateRibVersion" json:"update_rib_version,omitempty"`
	// Minimum Neighbor version
	UpdateMinNeighborVersion uint32 `protobuf:"varint,53,opt,name=update_min_neighbor_version,json=updateMinNeighborVersion" json:"update_min_neighbor_version,omitempty"`
	// Current AF update limit
	CurrentUpdateLimitAf uint32 `protobuf:"varint,54,opt,name=current_update_limit_af,json=currentUpdateLimitAf" json:"current_update_limit_af,omitempty"`
	// Configured AF update limit
	ConfiguredUpdateLimitAf uint32 `protobuf:"varint,55,opt,name=configured_update_limit_af,json=configuredUpdateLimitAf" json:"configured_update_limit_af,omitempty"`
	// Current EBGP sub-group update limit
	CurrentUpdateLimitSubgrpEbgp uint32 `protobuf:"varint,56,opt,name=current_update_limit_subgrp_ebgp,json=currentUpdateLimitSubgrpEbgp" json:"current_update_limit_subgrp_ebgp,omitempty"`
	// Configured EBGP sub-group update limit
	ConfiguredUpdateLimitSubgrpEbgp uint32 `protobuf:"varint,57,opt,name=configured_update_limit_subgrp_ebgp,json=configuredUpdateLimitSubgrpEbgp" json:"configured_update_limit_subgrp_ebgp,omitempty"`
	// Current IBGP sub-group update limit
	CurrentUpdateLimitSubGroupIbgp uint32 `protobuf:"varint,58,opt,name=current_update_limit_sub_group_ibgp,json=currentUpdateLimitSubGroupIbgp" json:"current_update_limit_sub_group_ibgp,omitempty"`
	// Configured IBGP sub-group update limit
	ConfiguredUpdateLimitSubGroupIbgp uint32 `protobuf:"varint,59,opt,name=configured_update_limit_sub_group_ibgp,json=configuredUpdateLimitSubGroupIbgp" json:"configured_update_limit_sub_group_ibgp,omitempty"`
	// OutQueue messsages
	UpdateOutQueueMessages uint32 `protobuf:"varint,60,opt,name=update_out_queue_messages,json=updateOutQueueMessages" json:"update_out_queue_messages,omitempty"`
	// OutQueue size
	UpdateOutQueueSize uint32 `protobuf:"varint,61,opt,name=update_out_queue_size,json=updateOutQueueSize" json:"update_out_queue_size,omitempty"`
	// Is Update throttled
	UpdateThrottled bool `protobuf:"varint,62,opt,name=update_throttled,json=updateThrottled" json:"update_throttled,omitempty"`
	// Update-group count
	UpdateUpdateGroupCount uint32 `protobuf:"varint,63,opt,name=update_update_group_count,json=updateUpdateGroupCount" json:"update_update_group_count,omitempty"`
	// Sub-group count
	UpdateSubGroupCount uint32 `protobuf:"varint,64,opt,name=update_sub_group_count,json=updateSubGroupCount" json:"update_sub_group_count,omitempty"`
	// Throttled sub-group count
	SubGroupThrottledCount uint32 `protobuf:"varint,65,opt,name=sub_group_throttled_count,json=subGroupThrottledCount" json:"sub_group_throttled_count,omitempty"`
	// Refresh sub-group count
	RefreshSubGroupCount uint32 `protobuf:"varint,66,opt,name=refresh_sub_group_count,json=refreshSubGroupCount" json:"refresh_sub_group_count,omitempty"`
	// Throttled refresh sub-group count
	RefreshSubGroupThrottledCount uint32 `protobuf:"varint,67,opt,name=refresh_sub_group_throttled_count,json=refreshSubGroupThrottledCount" json:"refresh_sub_group_throttled_count,omitempty"`
	// Filter-group count
	FilterGroupCount uint32 `protobuf:"varint,68,opt,name=filter_group_count,json=filterGroupCount" json:"filter_group_count,omitempty"`
	// Neighbor count
	NeighborCount uint32 `protobuf:"varint,69,opt,name=neighbor_count,json=neighborCount" json:"neighbor_count,omitempty"`
	// VRF Name
	UpdateTableVrfName string `protobuf:"bytes,70,opt,name=update_table_vrf_name,json=updateTableVrfName" json:"update_table_vrf_name,omitempty"`
	// Address family identifier
	UpdateVrfafName uint32 `protobuf:"varint,71,opt,name=update_vrfaf_name,json=updateVrfafName" json:"update_vrfaf_name,omitempty"`
	// RD Version
	UpdateVrfRdVersion uint32 `protobuf:"varint,72,opt,name=update_vrf_rd_version,json=updateVrfRdVersion" json:"update_vrf_rd_version,omitempty"`
	// VRF Table RIB version
	UpdateVrfTableRibVersion uint32 `protobuf:"varint,73,opt,name=update_vrf_table_rib_version,json=updateVrfTableRibVersion" json:"update_vrf_table_rib_version,omitempty"`
	// VRF Table update-group count
	TableUpdateGroupCount uint32 `protobuf:"varint,74,opt,name=table_update_group_count,json=tableUpdateGroupCount" json:"table_update_group_count,omitempty"`
	// VRF Table sub-group count
	UpdateTableSubGroupCount uint32 `protobuf:"varint,75,opt,name=update_table_sub_group_count,json=updateTableSubGroupCount" json:"update_table_sub_group_count,omitempty"`
	// VRF Table throttled sub-group count
	TableSubGroupThrottledCount uint32 `protobuf:"varint,76,opt,name=table_sub_group_throttled_count,json=tableSubGroupThrottledCount" json:"table_sub_group_throttled_count,omitempty"`
	// VRF Table refresh sub-group count
	TableRefreshSubGroupCount uint32 `protobuf:"varint,77,opt,name=table_refresh_sub_group_count,json=tableRefreshSubGroupCount" json:"table_refresh_sub_group_count,omitempty"`
	// VRF Table throttled refresh sub-group count
	TableRefreshSubGroupThrottledCount uint32 `protobuf:"varint,78,opt,name=table_refresh_sub_group_throttled_count,json=tableRefreshSubGroupThrottledCount" json:"table_refresh_sub_group_throttled_count,omitempty"`
	// VRF Table filter-group count
	UpdateTableFilterGroupCount uint32 `protobuf:"varint,79,opt,name=update_table_filter_group_count,json=updateTableFilterGroupCount" json:"update_table_filter_group_count,omitempty"`
	// VRF Table neighbor count
	TableNeighborCount uint32 `protobuf:"varint,80,opt,name=table_neighbor_count,json=tableNeighborCount" json:"table_neighbor_count,omitempty"`
	// Upate statistics
	UpdateStatistics *BgpUpdgenStatsBag `protobuf:"bytes,81,opt,name=update_statistics,json=updateStatistics" json:"update_statistics,omitempty"`
}

func (m *BgpUpdgenAfBag) Reset()                    { *m = BgpUpdgenAfBag{} }
func (m *BgpUpdgenAfBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdgenAfBag) ProtoMessage()               {}
func (*BgpUpdgenAfBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpUpdgenAfBag) GetUpdateGroupAfName() string {
	if m != nil {
		return m.UpdateGroupAfName
	}
	return ""
}

func (m *BgpUpdgenAfBag) GetUpdateMainTableVersion() uint32 {
	if m != nil {
		return m.UpdateMainTableVersion
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateRibVersion() uint32 {
	if m != nil {
		return m.UpdateRibVersion
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateMinNeighborVersion() uint32 {
	if m != nil {
		return m.UpdateMinNeighborVersion
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetCurrentUpdateLimitAf() uint32 {
	if m != nil {
		return m.CurrentUpdateLimitAf
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetConfiguredUpdateLimitAf() uint32 {
	if m != nil {
		return m.ConfiguredUpdateLimitAf
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetCurrentUpdateLimitSubgrpEbgp() uint32 {
	if m != nil {
		return m.CurrentUpdateLimitSubgrpEbgp
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetConfiguredUpdateLimitSubgrpEbgp() uint32 {
	if m != nil {
		return m.ConfiguredUpdateLimitSubgrpEbgp
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetCurrentUpdateLimitSubGroupIbgp() uint32 {
	if m != nil {
		return m.CurrentUpdateLimitSubGroupIbgp
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetConfiguredUpdateLimitSubGroupIbgp() uint32 {
	if m != nil {
		return m.ConfiguredUpdateLimitSubGroupIbgp
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateOutQueueMessages() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessages
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateOutQueueSize() uint32 {
	if m != nil {
		return m.UpdateOutQueueSize
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateThrottled() bool {
	if m != nil {
		return m.UpdateThrottled
	}
	return false
}

func (m *BgpUpdgenAfBag) GetUpdateUpdateGroupCount() uint32 {
	if m != nil {
		return m.UpdateUpdateGroupCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateSubGroupCount() uint32 {
	if m != nil {
		return m.UpdateSubGroupCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetSubGroupThrottledCount() uint32 {
	if m != nil {
		return m.SubGroupThrottledCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetRefreshSubGroupCount() uint32 {
	if m != nil {
		return m.RefreshSubGroupCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetRefreshSubGroupThrottledCount() uint32 {
	if m != nil {
		return m.RefreshSubGroupThrottledCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetFilterGroupCount() uint32 {
	if m != nil {
		return m.FilterGroupCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetNeighborCount() uint32 {
	if m != nil {
		return m.NeighborCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateTableVrfName() string {
	if m != nil {
		return m.UpdateTableVrfName
	}
	return ""
}

func (m *BgpUpdgenAfBag) GetUpdateVrfafName() uint32 {
	if m != nil {
		return m.UpdateVrfafName
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateVrfRdVersion() uint32 {
	if m != nil {
		return m.UpdateVrfRdVersion
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateVrfTableRibVersion() uint32 {
	if m != nil {
		return m.UpdateVrfTableRibVersion
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetTableUpdateGroupCount() uint32 {
	if m != nil {
		return m.TableUpdateGroupCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateTableSubGroupCount() uint32 {
	if m != nil {
		return m.UpdateTableSubGroupCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetTableSubGroupThrottledCount() uint32 {
	if m != nil {
		return m.TableSubGroupThrottledCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetTableRefreshSubGroupCount() uint32 {
	if m != nil {
		return m.TableRefreshSubGroupCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetTableRefreshSubGroupThrottledCount() uint32 {
	if m != nil {
		return m.TableRefreshSubGroupThrottledCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateTableFilterGroupCount() uint32 {
	if m != nil {
		return m.UpdateTableFilterGroupCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetTableNeighborCount() uint32 {
	if m != nil {
		return m.TableNeighborCount
	}
	return 0
}

func (m *BgpUpdgenAfBag) GetUpdateStatistics() *BgpUpdgenStatsBag {
	if m != nil {
		return m.UpdateStatistics
	}
	return nil
}

type BgpTimespec struct {
	// Seconds part of time value
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Nanoseconds part of time value
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *BgpTimespec) Reset()                    { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string            { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()               {}
func (*BgpTimespec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// BGP Update generation common statistics information
type BgpUpdgenStatsBag struct {
	// OutQueue High Messages
	UpdateOutQueueMessagesHigh uint32 `protobuf:"varint,1,opt,name=update_out_queue_messages_high,json=updateOutQueueMessagesHigh" json:"update_out_queue_messages_high,omitempty"`
	// OutQueue Cumulative Messages
	UpdateOutQueueMessagesCumulative uint32 `protobuf:"varint,2,opt,name=update_out_queue_messages_cumulative,json=updateOutQueueMessagesCumulative" json:"update_out_queue_messages_cumulative,omitempty"`
	// OutQueue Discarded Messages
	UpdateOutQueueMessagesDiscarded uint32 `protobuf:"varint,3,opt,name=update_out_queue_messages_discarded,json=updateOutQueueMessagesDiscarded" json:"update_out_queue_messages_discarded,omitempty"`
	// OutQueue Cleared Messages
	UpdateOutQueueMessagesCleared uint32 `protobuf:"varint,4,opt,name=update_out_queue_messages_cleared,json=updateOutQueueMessagesCleared" json:"update_out_queue_messages_cleared,omitempty"`
	// OutQueue Hi Size
	UpdateOutQueueSizeHigh uint32 `protobuf:"varint,5,opt,name=update_out_queue_size_high,json=updateOutQueueSizeHigh" json:"update_out_queue_size_high,omitempty"`
	// OutQueue Cumulative Size
	UpdateOutQueueSizeCumulative uint64 `protobuf:"varint,6,opt,name=update_out_queue_size_cumulative,json=updateOutQueueSizeCumulative" json:"update_out_queue_size_cumulative,omitempty"`
	// OutQueue Discarded Size
	UpdateOutQueueSizeDiscarded uint64 `protobuf:"varint,7,opt,name=update_out_queue_size_discarded,json=updateOutQueueSizeDiscarded" json:"update_out_queue_size_discarded,omitempty"`
	// OutQueue Cleared Size
	UpdateOutQueueSizeCleared uint64 `protobuf:"varint,8,opt,name=update_out_queue_size_cleared,json=updateOutQueueSizeCleared" json:"update_out_queue_size_cleared,omitempty"`
	// Last Discarded time
	LastUpdateDiscardTimestamp *BgpTimespec `protobuf:"bytes,9,opt,name=last_update_discard_timestamp,json=lastUpdateDiscardTimestamp" json:"last_update_discard_timestamp,omitempty"`
	// Time since last Discard event (in seconds)
	LastUpdateDiscardAge uint32 `protobuf:"varint,10,opt,name=last_update_discard_age,json=lastUpdateDiscardAge" json:"last_update_discard_age,omitempty"`
	// Last Cleared time
	LastUpdateClearedTimestamp *BgpTimespec `protobuf:"bytes,11,opt,name=last_update_cleared_timestamp,json=lastUpdateClearedTimestamp" json:"last_update_cleared_timestamp,omitempty"`
	// Time since last Clear event (in seconds)
	LastUpdateCleardAge uint32 `protobuf:"varint,12,opt,name=last_update_cleard_age,json=lastUpdateCleardAge" json:"last_update_cleard_age,omitempty"`
	// Throttle Count
	UpdateThrottleCount uint32 `protobuf:"varint,13,opt,name=update_throttle_count,json=updateThrottleCount" json:"update_throttle_count,omitempty"`
	// Last Throttled time
	LastUpdateThrottleTimestamp *BgpTimespec `protobuf:"bytes,14,opt,name=last_update_throttle_timestamp,json=lastUpdateThrottleTimestamp" json:"last_update_throttle_timestamp,omitempty"`
	// Time since last Throttle event (in seconds)
	LastUpdateThrottleAge uint32 `protobuf:"varint,15,opt,name=last_update_throttle_age,json=lastUpdateThrottleAge" json:"last_update_throttle_age,omitempty"`
	// Recovery Count
	UpdateRecoveryCount uint32 `protobuf:"varint,16,opt,name=update_recovery_count,json=updateRecoveryCount" json:"update_recovery_count,omitempty"`
	// Last Recovery time
	LastUpdateRecoveryTimestamp *BgpTimespec `protobuf:"bytes,17,opt,name=last_update_recovery_timestamp,json=lastUpdateRecoveryTimestamp" json:"last_update_recovery_timestamp,omitempty"`
	// Time since last Recovery event (in seconds)
	LastUpdateRecoveryAge uint32 `protobuf:"varint,18,opt,name=last_update_recovery_age,json=lastUpdateRecoveryAge" json:"last_update_recovery_age,omitempty"`
	// Memory allocation failure count
	UpdateMemoryAllocationFailCount uint32 `protobuf:"varint,19,opt,name=update_memory_allocation_fail_count,json=updateMemoryAllocationFailCount" json:"update_memory_allocation_fail_count,omitempty"`
	// Memory allocation failure time
	LastUpdateMemoryAllocationFailTimestamp *BgpTimespec `protobuf:"bytes,20,opt,name=last_update_memory_allocation_fail_timestamp,json=lastUpdateMemoryAllocationFailTimestamp" json:"last_update_memory_allocation_fail_timestamp,omitempty"`
	// Time since last memory allocation failure event (in seconds)
	LastUpdateMemoryAllocationFailAge uint32 `protobuf:"varint,21,opt,name=last_update_memory_allocation_fail_age,json=lastUpdateMemoryAllocationFailAge" json:"last_update_memory_allocation_fail_age,omitempty"`
}

func (m *BgpUpdgenStatsBag) Reset()                    { *m = BgpUpdgenStatsBag{} }
func (m *BgpUpdgenStatsBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdgenStatsBag) ProtoMessage()               {}
func (*BgpUpdgenStatsBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueMessagesHigh() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessagesHigh
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueMessagesCumulative() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessagesCumulative
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueMessagesDiscarded() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessagesDiscarded
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueMessagesCleared() uint32 {
	if m != nil {
		return m.UpdateOutQueueMessagesCleared
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueSizeHigh() uint32 {
	if m != nil {
		return m.UpdateOutQueueSizeHigh
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueSizeCumulative() uint64 {
	if m != nil {
		return m.UpdateOutQueueSizeCumulative
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueSizeDiscarded() uint64 {
	if m != nil {
		return m.UpdateOutQueueSizeDiscarded
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateOutQueueSizeCleared() uint64 {
	if m != nil {
		return m.UpdateOutQueueSizeCleared
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateDiscardTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateDiscardTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateDiscardAge() uint32 {
	if m != nil {
		return m.LastUpdateDiscardAge
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateClearedTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateClearedTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateCleardAge() uint32 {
	if m != nil {
		return m.LastUpdateCleardAge
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateThrottleCount() uint32 {
	if m != nil {
		return m.UpdateThrottleCount
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateThrottleTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateThrottleTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateThrottleAge() uint32 {
	if m != nil {
		return m.LastUpdateThrottleAge
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateRecoveryCount() uint32 {
	if m != nil {
		return m.UpdateRecoveryCount
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateRecoveryTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateRecoveryTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateRecoveryAge() uint32 {
	if m != nil {
		return m.LastUpdateRecoveryAge
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetUpdateMemoryAllocationFailCount() uint32 {
	if m != nil {
		return m.UpdateMemoryAllocationFailCount
	}
	return 0
}

func (m *BgpUpdgenStatsBag) GetLastUpdateMemoryAllocationFailTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateMemoryAllocationFailTimestamp
	}
	return nil
}

func (m *BgpUpdgenStatsBag) GetLastUpdateMemoryAllocationFailAge() uint32 {
	if m != nil {
		return m.LastUpdateMemoryAllocationFailAge
	}
	return 0
}

func init() {
	proto.RegisterType((*BgpUpdgenAfBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.update_generation_address_family.bgp_updgen_af_bag_KEYS")
	proto.RegisterType((*BgpUpdgenAfBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.update_generation_address_family.bgp_updgen_af_bag")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.update_generation_address_family.bgp_timespec")
	proto.RegisterType((*BgpUpdgenStatsBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.default_vrf.afs.af.update_generation_address_family.bgp_updgen_stats_bag")
}

func init() { proto.RegisterFile("bgp_updgen_af_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdb, 0x72, 0xd4, 0x46,
	0x13, 0xae, 0xe5, 0xe7, 0xe7, 0xd0, 0x60, 0x30, 0xc2, 0x60, 0xd9, 0xc6, 0x78, 0xb1, 0x13, 0x70,
	0x52, 0xae, 0x4d, 0x62, 0xe3, 0x38, 0x86, 0x40, 0xbc, 0xf8, 0x80, 0xc1, 0x07, 0xe2, 0xb5, 0x71,
	0x55, 0xae, 0xa6, 0x66, 0xa5, 0x91, 0x76, 0xaa, 0xb4, 0x92, 0x32, 0x23, 0xb9, 0x02, 0xb7, 0xb9,
	0x4c, 0x5e, 0x28, 0x4f, 0x40, 0xe5, 0x39, 0xf2, 0x22, 0xa9, 0x39, 0x48, 0x9a, 0xd5, 0xc1, 0x95,
	0x3b, 0x7c, 0xb7, 0xa8, 0xfb, 0xfb, 0xfa, 0x9b, 0x6f, 0x5a, 0xdd, 0xc2, 0x30, 0xd9, 0xf7, 0x63,
	0x94, 0xc6, 0xae, 0x4f, 0x42, 0x84, 0x3d, 0xd4, 0xc7, 0x7e, 0x27, 0x66, 0x51, 0x12, 0x59, 0xa9,
	0x43, 0xb9, 0x13, 0x21, 0x1a, 0x71, 0xf4, 0x1b, 0x43, 0x34, 0x3e, 0x7b, 0x8a, 0x44, 0x6a, 0x14,
	0x13, 0xd6, 0xe9, 0xfb, 0x71, 0x87, 0x86, 0x3c, 0xc1, 0xa1, 0x43, 0x78, 0xfe, 0x2b, 0xff, 0x81,
	0xb0, 0x93, 0xd0, 0x33, 0xd2, 0x71, 0x89, 0x87, 0xd3, 0x20, 0x41, 0x67, 0xcc, 0xeb, 0x60, 0x8f,
	0x77, 0xb0, 0xd7, 0x49, 0x63, 0x17, 0x27, 0x04, 0xf9, 0x24, 0x24, 0x0c, 0x27, 0x34, 0x0a, 0x11,
	0x76, 0x5d, 0x46, 0x38, 0x47, 0x1e, 0x1e, 0xd2, 0xe0, 0xc3, 0xfc, 0x29, 0xdc, 0xaf, 0x28, 0x42,
	0x7b, 0xdb, 0xbf, 0x1c, 0x5b, 0x0b, 0x30, 0x96, 0x17, 0x08, 0xf1, 0x90, 0xd8, 0xad, 0x76, 0x6b,
	0xf1, 0x7a, 0xef, 0x66, 0xf6, 0xf0, 0x10, 0x0f, 0x89, 0x35, 0x09, 0x57, 0xb1, 0xa7, 0xc2, 0x97,
	0x64, 0xf8, 0x0a, 0xf6, 0x44, 0x60, 0xfe, 0xcf, 0x71, 0xb8, 0x53, 0x21, 0xb6, 0xbe, 0x81, 0x89,
	0x4c, 0x11, 0x8b, 0xd2, 0x18, 0x65, 0xd8, 0x65, 0x89, 0xbd, 0xa3, 0x62, 0xaf, 0x45, 0xa8, 0x2b,
	0x69, 0xac, 0x75, 0x98, 0xd2, 0x80, 0x21, 0xa6, 0x21, 0x4a, 0x70, 0x3f, 0x20, 0xe8, 0x8c, 0x30,
	0x4e, 0xa3, 0xd0, 0x5e, 0x69, 0xb7, 0x16, 0xc7, 0x7a, 0xf7, 0x55, 0xc2, 0x01, 0xa6, 0xe1, 0x89,
	0x08, 0x9f, 0xaa, 0xa8, 0xb5, 0x04, 0x96, 0x86, 0x32, 0xda, 0xcf, 0x31, 0x4f, 0x25, 0x66, 0x5c,
	0x45, 0x7a, 0xb4, 0x9f, 0x65, 0xbf, 0x80, 0x99, 0xac, 0x10, 0x0d, 0x51, 0x48, 0xa8, 0x3f, 0xe8,
	0x47, 0x2c, 0x87, 0xad, 0x4a, 0x98, 0xad, 0x4b, 0xd1, 0xf0, 0x50, 0x27, 0x64, 0xf0, 0x55, 0x98,
	0x74, 0x52, 0xc6, 0x48, 0x98, 0x20, 0x4d, 0x13, 0xd0, 0x21, 0x4d, 0x10, 0xf6, 0xec, 0xef, 0x25,
	0x74, 0x42, 0x87, 0xdf, 0xcb, 0xe8, 0xbe, 0x08, 0x76, 0x3d, 0xeb, 0x39, 0x4c, 0x3b, 0x51, 0xe8,
	0x51, 0x3f, 0x65, 0xc4, 0xad, 0x20, 0xd7, 0x24, 0x72, 0xb2, 0xc8, 0x18, 0x05, 0xef, 0x40, 0xbb,
	0xb6, 0x26, 0x4f, 0xfb, 0x3e, 0x8b, 0x11, 0xe9, 0xfb, 0xb1, 0xfd, 0x83, 0xa4, 0x78, 0x50, 0x2d,
	0x7e, 0x2c, 0x93, 0xb6, 0xfb, 0x7e, 0x6c, 0xed, 0xc3, 0x42, 0x93, 0x08, 0x93, 0x6a, 0x5d, 0x52,
	0xcd, 0xd5, 0xaa, 0x31, 0xd8, 0xf6, 0x60, 0xa1, 0x49, 0x95, 0xbe, 0x74, 0x2a, 0xd8, 0x9e, 0x49,
	0xb6, 0x87, 0xb5, 0xc2, 0x64, 0x03, 0xbc, 0x11, 0x64, 0x47, 0xf0, 0xf8, 0x1c, 0x69, 0x26, 0xdf,
	0x73, 0xc9, 0xf7, 0xa8, 0x49, 0x5d, 0x41, 0x59, 0x74, 0x54, 0x94, 0x26, 0xe8, 0xd7, 0x94, 0xa4,
	0x04, 0x0d, 0x09, 0xe7, 0xd8, 0x27, 0xdc, 0xfe, 0xd1, 0xec, 0xa8, 0x77, 0x69, 0x72, 0x24, 0xc2,
	0x07, 0x3a, 0x6a, 0x7d, 0x07, 0xf7, 0x2a, 0x50, 0x4e, 0x3f, 0x12, 0xfb, 0x85, 0x84, 0x59, 0xa3,
	0xb0, 0x63, 0xfa, 0x91, 0x58, 0x5f, 0x81, 0x6e, 0x35, 0x94, 0x0c, 0x58, 0x94, 0x24, 0x01, 0x71,
	0xed, 0x97, 0xed, 0xd6, 0xe2, 0xb5, 0xde, 0x6d, 0xf5, 0xfc, 0x24, 0x7b, 0x6c, 0x08, 0x1b, 0x79,
	0x45, 0x9c, 0x28, 0x0d, 0x13, 0xfb, 0x27, 0x53, 0xd8, 0xfb, 0xe2, 0x35, 0xd9, 0x14, 0x51, 0x6b,
	0x05, 0x74, 0xc4, 0x70, 0x45, 0xe1, 0x36, 0x24, 0xee, 0xae, 0x8a, 0x66, 0x3e, 0x28, 0xd0, 0x3a,
	0x4c, 0x15, 0xd9, 0xb9, 0x3a, 0x8d, 0xeb, 0xaa, 0x7a, 0x5c, 0x23, 0x72, 0x95, 0x0a, 0xba, 0x0a,
	0x93, 0x8c, 0x78, 0x8c, 0xf0, 0x41, 0xa5, 0xe0, 0x2b, 0xd5, 0xed, 0x3a, 0x3c, 0x5a, 0x71, 0x17,
	0x1e, 0x55, 0x61, 0xe5, 0xca, 0x9b, 0x92, 0x60, 0xb6, 0x44, 0x50, 0x12, 0xb0, 0x04, 0x96, 0x47,
	0x83, 0x84, 0xb0, 0x91, 0xda, 0x5b, 0xea, 0xdd, 0x56, 0x11, 0xa3, 0xee, 0x97, 0x70, 0x2b, 0x7f,
	0xa1, 0x55, 0xe6, 0xb6, 0xcc, 0x1c, 0xcb, 0x9e, 0xaa, 0xb4, 0xe2, 0x7a, 0xf5, 0x98, 0x61, 0x7a,
	0x3a, 0xed, 0xc8, 0xe9, 0xa4, 0xaf, 0x57, 0xcd, 0x18, 0xa6, 0xc6, 0xd3, 0xd7, 0xa0, 0x67, 0x96,
	0x48, 0xce, 0x86, 0xd9, 0x6b, 0x49, 0xae, 0xef, 0xf7, 0x54, 0x3c, 0x97, 0xb9, 0x05, 0xbd, 0x20,
	0x66, 0x6e, 0x3e, 0x5b, 0x76, 0xcd, 0xee, 0x39, 0x65, 0x5e, 0xcf, 0xcd, 0xa6, 0xca, 0x4b, 0x78,
	0x60, 0x40, 0x94, 0x2a, 0x73, 0x98, 0xbd, 0x31, 0xa7, 0xd2, 0x29, 0xf3, 0xa4, 0x36, 0x63, 0xa8,
	0xad, 0x81, 0xad, 0x40, 0x35, 0x1d, 0xf5, 0x56, 0x62, 0xef, 0xc9, 0x78, 0xa5, 0xa1, 0x8a, 0xc2,
	0x0a, 0x5f, 0xbe, 0xe5, 0x3d, 0xb3, 0xb0, 0xac, 0x3a, 0x7a, 0xd3, 0x5b, 0x30, 0x57, 0x06, 0x96,
	0xef, 0x79, 0x5f, 0x52, 0xcc, 0x24, 0x26, 0xb8, 0x74, 0xcb, 0x1b, 0x30, 0xab, 0xcf, 0xdc, 0xd0,
	0x6c, 0x07, 0x92, 0x63, 0x4a, 0x26, 0xf5, 0xea, 0x3a, 0xee, 0x18, 0x9e, 0x34, 0x31, 0x94, 0xf5,
	0x1c, 0x4a, 0xae, 0xf9, 0x3a, 0xae, 0x92, 0xac, 0x2d, 0x98, 0x1b, 0x31, 0xa7, 0xa6, 0x13, 0xdf,
	0xa9, 0xc3, 0x19, 0xfe, 0xec, 0x94, 0x9b, 0xf2, 0x5b, 0x98, 0x50, 0xf0, 0x52, 0x6b, 0xfe, 0xac,
	0xba, 0x41, 0xc6, 0x0e, 0x47, 0xfa, 0xf3, 0xaf, 0x56, 0xde, 0x6d, 0x3c, 0xc1, 0x09, 0xe5, 0x09,
	0x75, 0xb8, 0x7d, 0xd4, 0x6e, 0x2d, 0xde, 0x58, 0xfe, 0xa3, 0xd5, 0xf9, 0x2c, 0xdf, 0x0f, 0x1d,
	0x63, 0xc7, 0x0b, 0x51, 0x5c, 0xac, 0xf9, 0x6c, 0xbd, 0x1e, 0xe7, 0x2a, 0xe7, 0xdf, 0xc2, 0x4d,
	0x91, 0x99, 0xd0, 0x21, 0xe1, 0x31, 0x71, 0x2c, 0x1b, 0xae, 0x72, 0xe2, 0x44, 0xa1, 0xcb, 0xe5,
	0x67, 0xc5, 0x58, 0x2f, 0xfb, 0xa7, 0xd5, 0x86, 0x1b, 0x21, 0x0e, 0xa3, 0x2c, 0x7a, 0x49, 0x46,
	0xcd, 0x47, 0xf3, 0x9f, 0xc6, 0x61, 0xa2, 0xae, 0xac, 0xf5, 0x0a, 0x1e, 0x36, 0x8e, 0x76, 0x34,
	0xa0, 0xfe, 0x40, 0xd7, 0x9a, 0xae, 0x9f, 0xef, 0xbb, 0xd4, 0x1f, 0x58, 0x87, 0xf0, 0x45, 0x33,
	0x87, 0x93, 0x0e, 0xd3, 0x00, 0x0b, 0xaf, 0xb4, 0xae, 0x76, 0x3d, 0xd3, 0x66, 0x9e, 0x27, 0x96,
	0x6b, 0x33, 0x9f, 0x4b, 0xb9, 0x83, 0x99, 0x4b, 0x5c, 0xfb, 0x7f, 0x6a, 0xb9, 0xd6, 0xd3, 0x6d,
	0x65, 0x69, 0x62, 0x82, 0x9e, 0xa3, 0x2e, 0x20, 0x98, 0x11, 0xd7, 0xbe, 0xac, 0x26, 0x68, 0x83,
	0x34, 0x95, 0x64, 0x3d, 0x83, 0xe9, 0xda, 0x5d, 0xa6, 0x7c, 0xfa, 0x7f, 0xdd, 0x1e, 0x14, 0x0b,
	0x4d, 0x7a, 0xb4, 0x03, 0xed, 0x7a, 0xac, 0xe1, 0xcf, 0x95, 0x76, 0x6b, 0xf1, 0x72, 0xef, 0x41,
	0x95, 0xc1, 0xf0, 0xa6, 0x78, 0x91, 0x4a, 0x3c, 0x85, 0x2f, 0x57, 0x25, 0xcd, 0x4c, 0x95, 0xa6,
	0xf0, 0x64, 0x03, 0x66, 0x1b, 0xd4, 0x68, 0x3f, 0xae, 0x49, 0x8e, 0xa9, 0x1a, 0x29, 0xda, 0x8b,
	0x4f, 0x2d, 0x98, 0x0d, 0x30, 0xcf, 0x3f, 0x58, 0x74, 0x79, 0xd5, 0xad, 0x09, 0x1e, 0xc6, 0xf6,
	0x75, 0xf9, 0x92, 0xfd, 0xfe, 0x39, 0x5f, 0xb2, 0xec, 0xd5, 0xe9, 0x4d, 0x0b, 0xa9, 0x6a, 0x62,
	0x6b, 0x13, 0x4e, 0x32, 0x9d, 0x62, 0x31, 0xd7, 0x1d, 0x04, 0xfb, 0xc4, 0x06, 0xb5, 0x98, 0x2b,
	0xe0, 0xae, 0x4f, 0x2a, 0x06, 0x68, 0xe7, 0x0c, 0x03, 0x6e, 0x5c, 0x4c, 0x03, 0xf4, 0x0d, 0x16,
	0x06, 0xac, 0xc0, 0xfd, 0xca, 0x41, 0xd4, 0xf9, 0x6f, 0xaa, 0x2f, 0xa1, 0x12, 0x56, 0x1e, 0x7f,
	0xb9, 0x58, 0xfc, 0x7a, 0xd2, 0xeb, 0x59, 0x3c, 0x66, 0x7e, 0x3d, 0x65, 0x5b, 0x40, 0x0d, 0xe3,
	0xbf, 0x5b, 0xf0, 0xd0, 0xac, 0x94, 0x23, 0x0b, 0xcf, 0x6e, 0x5d, 0x20, 0xcf, 0x66, 0x8a, 0x73,
	0x67, 0xe7, 0x28, 0x4c, 0x5b, 0x03, 0xbb, 0xf6, 0x28, 0xc2, 0xb6, 0xdb, 0xea, 0x33, 0xa1, 0x0a,
	0x1f, 0x35, 0x8e, 0x11, 0x27, 0x3a, 0x23, 0xec, 0x83, 0x36, 0x6e, 0xdc, 0x34, 0xae, 0xa7, 0x63,
	0xf5, 0xc6, 0xe5, 0xc8, 0xc2, 0xb8, 0x3b, 0x17, 0xd3, 0xb8, 0xec, 0x1c, 0x8d, 0xc6, 0xe5, 0x47,
	0x11, 0xc6, 0x59, 0x65, 0xe3, 0x32, 0xb8, 0x30, 0xae, 0xd8, 0x0a, 0x43, 0x32, 0x8c, 0x04, 0x22,
	0x08, 0x22, 0x47, 0xa9, 0xf1, 0x30, 0x0d, 0xb4, 0x8d, 0x77, 0xcd, 0xad, 0x70, 0x20, 0x33, 0xbb,
	0x79, 0xe2, 0x0e, 0xa6, 0x81, 0xb2, 0xf4, 0x9f, 0x16, 0x2c, 0x99, 0x3a, 0x1a, 0x38, 0x0b, 0x83,
	0x27, 0x2e, 0x90, 0xc1, 0x4f, 0x0a, 0x87, 0xea, 0x4e, 0x58, 0x98, 0x7d, 0x04, 0x8f, 0xff, 0xc3,
	0x21, 0x85, 0xf5, 0xf7, 0xd4, 0xff, 0x05, 0xcf, 0x27, 0xee, 0xfa, 0xa4, 0x7f, 0x45, 0xfe, 0xe9,
	0x65, 0xe5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x97, 0xe4, 0x04, 0x95, 0x11, 0x00, 0x00,
}
