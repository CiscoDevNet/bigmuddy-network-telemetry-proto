// Code generated by protoc-gen-go.
// source: bgp_path_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_vrfs_vrf_afs_af_dampenings_dampening is a generated protocol buffer package.

It is generated from these files:
	bgp_path_bag.proto

It has these top-level messages:
	BgpPathBag_KEYS
	BgpPathBag
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	BgpV4V6T
	MACAddressType
	BgpAttrRnhAddrT
	BgpIpv4SrpolicyAddrT
	BgpIpv6SrpolicyAddrT
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
	BgpPrefixtype
	BgpTeTunnel
	BgpPedistlblEntry_
	SrSid_
	BgpBindingSidT
	SrExppath_
	BgpSrpolicyEntry_
	BgpTunencapEntry_
	BgpBagLargecomm_
	BgpCommonAttrEntry_
	BgpAttr_
	BgpAdvinfoType_
	BgpPath_
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_vrfs_vrf_afs_af_dampenings_dampening

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP path
type BgpPathBag_KEYS struct {
	InstanceName    string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	VrfName         string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AfName          string `protobuf:"bytes,3,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	Reuse           uint32 `protobuf:"varint,4,opt,name=reuse" json:"reuse,omitempty"`
	Version         uint32 `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	Rd              string `protobuf:"bytes,6,opt,name=rd" json:"rd,omitempty"`
	Network         string `protobuf:"bytes,7,opt,name=network" json:"network,omitempty"`
	Length          uint32 `protobuf:"varint,8,opt,name=length" json:"length,omitempty"`
	NeighborAddress string `protobuf:"bytes,9,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	SourceRd        string `protobuf:"bytes,10,opt,name=source_rd,json=sourceRd" json:"source_rd,omitempty"`
	PathId          uint32 `protobuf:"varint,11,opt,name=path_id,json=pathId" json:"path_id,omitempty"`
}

func (m *BgpPathBag_KEYS) Reset()                    { *m = BgpPathBag_KEYS{} }
func (m *BgpPathBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpPathBag_KEYS) ProtoMessage()               {}
func (*BgpPathBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpPathBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetReuse() uint32 {
	if m != nil {
		return m.Reuse
	}
	return 0
}

func (m *BgpPathBag_KEYS) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BgpPathBag_KEYS) GetRd() string {
	if m != nil {
		return m.Rd
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *BgpPathBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetSourceRd() string {
	if m != nil {
		return m.SourceRd
	}
	return ""
}

func (m *BgpPathBag_KEYS) GetPathId() uint32 {
	if m != nil {
		return m.PathId
	}
	return 0
}

type BgpPathBag struct {
	// No path exists. All 'sp_path' fields except 'sp_path->bag_prefix' are invalid
	NoPath bool `protobuf:"varint,50,opt,name=no_path,json=noPath" json:"no_path,omitempty"`
	// Address family identifier
	AfName string `protobuf:"bytes,51,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// Neighbor Address
	NeighborAddress *BgpAddrtype `protobuf:"bytes,52,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Process instance ID
	ProcessInstanceId uint32 `protobuf:"varint,53,opt,name=process_instance_id,json=processInstanceId" json:"process_instance_id,omitempty"`
	// LSD label space is exhausted
	LabelOor bool `protobuf:"varint,54,opt,name=label_oor,json=labelOor" json:"label_oor,omitempty"`
	// Label Version when OOR happens
	LabelOOrVersion uint32 `protobuf:"varint,55,opt,name=label_o_or_version,json=labelOOrVersion" json:"label_o_or_version,omitempty"`
	// LSD label allocation failed
	LabelFail bool `protobuf:"varint,56,opt,name=label_fail,json=labelFail" json:"label_fail,omitempty"`
	// Path information
	PathInformation *BgpPath_ `protobuf:"bytes,57,opt,name=path_information,json=pathInformation" json:"path_information,omitempty"`
	// Attributes after inbound policy applied
	AttributesAfterPolicyIn *BgpAttr_ `protobuf:"bytes,58,opt,name=attributes_after_policy_in,json=attributesAfterPolicyIn" json:"attributes_after_policy_in,omitempty"`
	// Route Distinguisher
	RouteDistinguisher string `protobuf:"bytes,59,opt,name=route_distinguisher,json=routeDistinguisher" json:"route_distinguisher,omitempty"`
	// Source Route Distinguisher
	SourceRouteDistinguisher string `protobuf:"bytes,60,opt,name=source_route_distinguisher,json=sourceRouteDistinguisher" json:"source_route_distinguisher,omitempty"`
	// Version of BGP Prefix Table
	PrefixVersion uint32 `protobuf:"varint,61,opt,name=prefix_version,json=prefixVersion" json:"prefix_version,omitempty"`
	// Name of the VRF
	VrfName string `protobuf:"bytes,62,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Name of the source VRF
	SourceVrfName string `protobuf:"bytes,63,opt,name=source_vrf_name,json=sourceVrfName" json:"source_vrf_name,omitempty"`
	// Address family identifier
	SrcafName string `protobuf:"bytes,64,opt,name=srcaf_name,json=srcafName" json:"srcaf_name,omitempty"`
}

func (m *BgpPathBag) Reset()                    { *m = BgpPathBag{} }
func (m *BgpPathBag) String() string            { return proto.CompactTextString(m) }
func (*BgpPathBag) ProtoMessage()               {}
func (*BgpPathBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpPathBag) GetNoPath() bool {
	if m != nil {
		return m.NoPath
	}
	return false
}

func (m *BgpPathBag) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpPathBag) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpPathBag) GetProcessInstanceId() uint32 {
	if m != nil {
		return m.ProcessInstanceId
	}
	return 0
}

func (m *BgpPathBag) GetLabelOor() bool {
	if m != nil {
		return m.LabelOor
	}
	return false
}

func (m *BgpPathBag) GetLabelOOrVersion() uint32 {
	if m != nil {
		return m.LabelOOrVersion
	}
	return 0
}

func (m *BgpPathBag) GetLabelFail() bool {
	if m != nil {
		return m.LabelFail
	}
	return false
}

func (m *BgpPathBag) GetPathInformation() *BgpPath_ {
	if m != nil {
		return m.PathInformation
	}
	return nil
}

func (m *BgpPathBag) GetAttributesAfterPolicyIn() *BgpAttr_ {
	if m != nil {
		return m.AttributesAfterPolicyIn
	}
	return nil
}

func (m *BgpPathBag) GetRouteDistinguisher() string {
	if m != nil {
		return m.RouteDistinguisher
	}
	return ""
}

func (m *BgpPathBag) GetSourceRouteDistinguisher() string {
	if m != nil {
		return m.SourceRouteDistinguisher
	}
	return ""
}

func (m *BgpPathBag) GetPrefixVersion() uint32 {
	if m != nil {
		return m.PrefixVersion
	}
	return 0
}

func (m *BgpPathBag) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpPathBag) GetSourceVrfName() string {
	if m != nil {
		return m.SourceVrfName
	}
	return ""
}

func (m *BgpPathBag) GetSrcafName() string {
	if m != nil {
		return m.SrcafName
	}
	return ""
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpV4V6T struct {
	Len string `protobuf:"bytes,1,opt,name=len" json:"len,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
}

func (m *BgpV4V6T) Reset()                    { *m = BgpV4V6T{} }
func (m *BgpV4V6T) String() string            { return proto.CompactTextString(m) }
func (*BgpV4V6T) ProtoMessage()               {}
func (*BgpV4V6T) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BgpV4V6T) GetLen() string {
	if m != nil {
		return m.Len
	}
	return ""
}

func (m *BgpV4V6T) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpV4V6T) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

// MAC Address type
type MACAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *MACAddressType) Reset()                    { *m = MACAddressType{} }
func (m *MACAddressType) String() string            { return proto.CompactTextString(m) }
func (*MACAddressType) ProtoMessage()               {}
func (*MACAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MACAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAttrRnhAddrT struct {
	Len string `protobuf:"bytes,1,opt,name=len" json:"len,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// MAC Addr
	MacAddress *MACAddressType `protobuf:"bytes,4,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *BgpAttrRnhAddrT) Reset()                    { *m = BgpAttrRnhAddrT{} }
func (m *BgpAttrRnhAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpAttrRnhAddrT) ProtoMessage()               {}
func (*BgpAttrRnhAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BgpAttrRnhAddrT) GetLen() string {
	if m != nil {
		return m.Len
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAttrRnhAddrT) GetMacAddress() *MACAddressType {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()                    { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()                    { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
	// IPV4 Policy Addr
	Ipv4SrPolicyAddress *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress" json:"ipv4_sr_policy_address,omitempty"`
	// IPV6 Policy Addr
	Ipv6SrPolicyAddress *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress" json:"ipv6_sr_policy_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpPrefixtype struct {
	// Prefix
	Prefix *BgpAddrtype `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// Prefix length
	PrefixLength uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength" json:"prefix_length,omitempty"`
}

func (m *BgpPrefixtype) Reset()                    { *m = BgpPrefixtype{} }
func (m *BgpPrefixtype) String() string            { return proto.CompactTextString(m) }
func (*BgpPrefixtype) ProtoMessage()               {}
func (*BgpPrefixtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *BgpPrefixtype) GetPrefix() *BgpAddrtype {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *BgpPrefixtype) GetPrefixLength() uint32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

type BgpTeTunnel struct {
	// Nexthop Tunnel Type
	TunnelType string `protobuf:"bytes,1,opt,name=tunnel_type,json=tunnelType" json:"tunnel_type,omitempty"`
	// Tunnel name attribute
	TunnelName string `protobuf:"bytes,2,opt,name=tunnel_name,json=tunnelName" json:"tunnel_name,omitempty"`
	// Tunnel Up flag
	IsTunnelUp bool `protobuf:"varint,3,opt,name=is_tunnel_up,json=isTunnelUp" json:"is_tunnel_up,omitempty"`
	// Tunnel is stale
	IsTunnelInfoStale bool `protobuf:"varint,4,opt,name=is_tunnel_info_stale,json=isTunnelInfoStale" json:"is_tunnel_info_stale,omitempty"`
	// Tunnel registered flag
	IsTunnelRegistered bool `protobuf:"varint,5,opt,name=is_tunnel_registered,json=isTunnelRegistered" json:"is_tunnel_registered,omitempty"`
	// Tunnel need IPv6
	TunnelV6Required bool `protobuf:"varint,6,opt,name=tunnel_v6_required,json=tunnelV6Required" json:"tunnel_v6_required,omitempty"`
	// IPv6 enabled
	TunnelV6Enabled bool `protobuf:"varint,7,opt,name=tunnel_v6_enabled,json=tunnelV6Enabled" json:"tunnel_v6_enabled,omitempty"`
	// Binding label for the tunnel
	BindingLabel uint32 `protobuf:"varint,8,opt,name=binding_label,json=bindingLabel" json:"binding_label,omitempty"`
	// Interface handle for the tunnel
	TunnelIfHandle uint32 `protobuf:"varint,9,opt,name=tunnel_if_handle,json=tunnelIfHandle" json:"tunnel_if_handle,omitempty"`
	// Time since the last tunnel update happened
	LastTunnelUpdate uint32 `protobuf:"varint,10,opt,name=last_tunnel_update,json=lastTunnelUpdate" json:"last_tunnel_update,omitempty"`
}

func (m *BgpTeTunnel) Reset()                    { *m = BgpTeTunnel{} }
func (m *BgpTeTunnel) String() string            { return proto.CompactTextString(m) }
func (*BgpTeTunnel) ProtoMessage()               {}
func (*BgpTeTunnel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BgpTeTunnel) GetTunnelType() string {
	if m != nil {
		return m.TunnelType
	}
	return ""
}

func (m *BgpTeTunnel) GetTunnelName() string {
	if m != nil {
		return m.TunnelName
	}
	return ""
}

func (m *BgpTeTunnel) GetIsTunnelUp() bool {
	if m != nil {
		return m.IsTunnelUp
	}
	return false
}

func (m *BgpTeTunnel) GetIsTunnelInfoStale() bool {
	if m != nil {
		return m.IsTunnelInfoStale
	}
	return false
}

func (m *BgpTeTunnel) GetIsTunnelRegistered() bool {
	if m != nil {
		return m.IsTunnelRegistered
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelV6Required() bool {
	if m != nil {
		return m.TunnelV6Required
	}
	return false
}

func (m *BgpTeTunnel) GetTunnelV6Enabled() bool {
	if m != nil {
		return m.TunnelV6Enabled
	}
	return false
}

func (m *BgpTeTunnel) GetBindingLabel() uint32 {
	if m != nil {
		return m.BindingLabel
	}
	return 0
}

func (m *BgpTeTunnel) GetTunnelIfHandle() uint32 {
	if m != nil {
		return m.TunnelIfHandle
	}
	return 0
}

func (m *BgpTeTunnel) GetLastTunnelUpdate() uint32 {
	if m != nil {
		return m.LastTunnelUpdate
	}
	return 0
}

type BgpPedistlblEntry_ struct {
	//  PE address
	PeAddress string `protobuf:"bytes,1,opt,name=pe_address,json=peAddress" json:"pe_address,omitempty"`
	// Label
	Label uint32 `protobuf:"varint,2,opt,name=label" json:"label,omitempty"`
}

func (m *BgpPedistlblEntry_) Reset()                    { *m = BgpPedistlblEntry_{} }
func (m *BgpPedistlblEntry_) String() string            { return proto.CompactTextString(m) }
func (*BgpPedistlblEntry_) ProtoMessage()               {}
func (*BgpPedistlblEntry_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *BgpPedistlblEntry_) GetPeAddress() string {
	if m != nil {
		return m.PeAddress
	}
	return ""
}

func (m *BgpPedistlblEntry_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

type SrSid_ struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// MPLS Label value
	Label uint32 `protobuf:"varint,2,opt,name=label" json:"label,omitempty"`
	// IPv4 Address value
	Ipv4Address string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv6 address value
	Ipv6Address *IPV6AddressType `protobuf:"bytes,4,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
}

func (m *SrSid_) Reset()                    { *m = SrSid_{} }
func (m *SrSid_) String() string            { return proto.CompactTextString(m) }
func (*SrSid_) ProtoMessage()               {}
func (*SrSid_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *SrSid_) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SrSid_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *SrSid_) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *SrSid_) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

type BgpBindingSidT struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// MPLS Label
	Label uint32 `protobuf:"varint,2,opt,name=label" json:"label,omitempty"`
	// IPv6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
}

func (m *BgpBindingSidT) Reset()                    { *m = BgpBindingSidT{} }
func (m *BgpBindingSidT) String() string            { return proto.CompactTextString(m) }
func (*BgpBindingSidT) ProtoMessage()               {}
func (*BgpBindingSidT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *BgpBindingSidT) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BgpBindingSidT) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *BgpBindingSidT) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

type SrExppath_ struct {
	// Weight of segment list
	Weight uint32 `protobuf:"varint,1,opt,name=weight" json:"weight,omitempty"`
	// Segments in segment list
	Segment []*SrSid_ `protobuf:"bytes,2,rep,name=segment" json:"segment,omitempty"`
}

func (m *SrExppath_) Reset()                    { *m = SrExppath_{} }
func (m *SrExppath_) String() string            { return proto.CompactTextString(m) }
func (*SrExppath_) ProtoMessage()               {}
func (*SrExppath_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *SrExppath_) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *SrExppath_) GetSegment() []*SrSid_ {
	if m != nil {
		return m.Segment
	}
	return nil
}

type BgpSrpolicyEntry_ struct {
	// Tunnel Encapsulation Type
	TunnelEncapType uint32 `protobuf:"varint,1,opt,name=tunnel_encap_type,json=tunnelEncapType" json:"tunnel_encap_type,omitempty"`
	// SR Policy incoming Binding sid
	BindingSid *BgpBindingSidT `protobuf:"bytes,2,opt,name=binding_sid,json=bindingSid" json:"binding_sid,omitempty"`
	// SR Policy allocated Binding sid by the router
	AllocatedBindingSid *BgpBindingSidT `protobuf:"bytes,3,opt,name=allocated_binding_sid,json=allocatedBindingSid" json:"allocated_binding_sid,omitempty"`
	// SR Policy Preference
	Preference uint32 `protobuf:"varint,4,opt,name=preference" json:"preference,omitempty"`
	// SR Policy active state in forwarding
	State bool `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	// SR Policy programming Status
	RequestState string `protobuf:"bytes,6,opt,name=request_state,json=requestState" json:"request_state,omitempty"`
	// SR Policy Segment Lists
	SegmentLists []*SrExppath_ `protobuf:"bytes,7,rep,name=segment_lists,json=segmentLists" json:"segment_lists,omitempty"`
}

func (m *BgpSrpolicyEntry_) Reset()                    { *m = BgpSrpolicyEntry_{} }
func (m *BgpSrpolicyEntry_) String() string            { return proto.CompactTextString(m) }
func (*BgpSrpolicyEntry_) ProtoMessage()               {}
func (*BgpSrpolicyEntry_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *BgpSrpolicyEntry_) GetTunnelEncapType() uint32 {
	if m != nil {
		return m.TunnelEncapType
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetAllocatedBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.AllocatedBindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *BgpSrpolicyEntry_) GetRequestState() string {
	if m != nil {
		return m.RequestState
	}
	return ""
}

func (m *BgpSrpolicyEntry_) GetSegmentLists() []*SrExppath_ {
	if m != nil {
		return m.SegmentLists
	}
	return nil
}

type BgpTunencapEntry_ struct {
	// Tunnel encap type SR policy
	SrPolicy *BgpSrpolicyEntry_ `protobuf:"bytes,1,opt,name=sr_policy,json=srPolicy" json:"sr_policy,omitempty"`
}

func (m *BgpTunencapEntry_) Reset()                    { *m = BgpTunencapEntry_{} }
func (m *BgpTunencapEntry_) String() string            { return proto.CompactTextString(m) }
func (*BgpTunencapEntry_) ProtoMessage()               {}
func (*BgpTunencapEntry_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *BgpTunencapEntry_) GetSrPolicy() *BgpSrpolicyEntry_ {
	if m != nil {
		return m.SrPolicy
	}
	return nil
}

type BgpBagLargecomm_ struct {
	// Global Administrator
	GlobalAdmin uint32 `protobuf:"varint,1,opt,name=global_admin,json=globalAdmin" json:"global_admin,omitempty"`
	// Local Data 1
	LocalData1 uint32 `protobuf:"varint,2,opt,name=local_data1,json=localData1" json:"local_data1,omitempty"`
	// Local Data 2
	LocalData2 uint32 `protobuf:"varint,3,opt,name=local_data2,json=localData2" json:"local_data2,omitempty"`
}

func (m *BgpBagLargecomm_) Reset()                    { *m = BgpBagLargecomm_{} }
func (m *BgpBagLargecomm_) String() string            { return proto.CompactTextString(m) }
func (*BgpBagLargecomm_) ProtoMessage()               {}
func (*BgpBagLargecomm_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *BgpBagLargecomm_) GetGlobalAdmin() uint32 {
	if m != nil {
		return m.GlobalAdmin
	}
	return 0
}

func (m *BgpBagLargecomm_) GetLocalData1() uint32 {
	if m != nil {
		return m.LocalData1
	}
	return 0
}

func (m *BgpBagLargecomm_) GetLocalData2() uint32 {
	if m != nil {
		return m.LocalData2
	}
	return 0
}

type BgpCommonAttrEntry_ struct {
	// Metric attribute present
	IsMetricPresent bool `protobuf:"varint,1,opt,name=is_metric_present,json=isMetricPresent" json:"is_metric_present,omitempty"`
	// Local Preference attribute present
	IsLocalPrefPresent bool `protobuf:"varint,2,opt,name=is_local_pref_present,json=isLocalPrefPresent" json:"is_local_pref_present,omitempty"`
	// Atomic aggregate attribute present
	IsAtomicAggregatePresent bool `protobuf:"varint,3,opt,name=is_atomic_aggregate_present,json=isAtomicAggregatePresent" json:"is_atomic_aggregate_present,omitempty"`
	// Aggregator attribute present
	IsAggregatorPresent bool `protobuf:"varint,4,opt,name=is_aggregator_present,json=isAggregatorPresent" json:"is_aggregator_present,omitempty"`
	// Origin attribute present
	IsOriginPresent bool `protobuf:"varint,5,opt,name=is_origin_present,json=isOriginPresent" json:"is_origin_present,omitempty"`
	// AS path attribute present
	IsAsPathPresent bool `protobuf:"varint,6,opt,name=is_as_path_present,json=isAsPathPresent" json:"is_as_path_present,omitempty"`
	// Community attribute present
	IsCommunityPresent bool `protobuf:"varint,7,opt,name=is_community_present,json=isCommunityPresent" json:"is_community_present,omitempty"`
	// Extended community attribute present
	IsExtendedCommunityPresent bool `protobuf:"varint,8,opt,name=is_extended_community_present,json=isExtendedCommunityPresent" json:"is_extended_community_present,omitempty"`
	// SSA attribute present
	IsSsaPresent bool `protobuf:"varint,9,opt,name=is_ssa_present,json=isSsaPresent" json:"is_ssa_present,omitempty"`
	// Connector present
	IsConnectorPresent bool `protobuf:"varint,10,opt,name=is_connector_present,json=isConnectorPresent" json:"is_connector_present,omitempty"`
	// PMSI Attribute  present
	IsPmsiPresent bool `protobuf:"varint,11,opt,name=is_pmsi_present,json=isPmsiPresent" json:"is_pmsi_present,omitempty"`
	// PPMP Attribute  present
	IsPppmpPresent bool `protobuf:"varint,12,opt,name=is_pppmp_present,json=isPppmpPresent" json:"is_pppmp_present,omitempty"`
	// AIGP Present
	IsAigpPresent bool `protobuf:"varint,13,opt,name=is_aigp_present,json=isAigpPresent" json:"is_aigp_present,omitempty"`
	// PE distinguisher label  attribute present
	IsPeDistinguisherLabelPresent bool `protobuf:"varint,14,opt,name=is_pe_distinguisher_label_present,json=isPeDistinguisherLabelPresent" json:"is_pe_distinguisher_label_present,omitempty"`
	// BGP LS attribute present
	IsLsAttributePresent bool `protobuf:"varint,15,opt,name=is_ls_attribute_present,json=isLsAttributePresent" json:"is_ls_attribute_present,omitempty"`
	// Label Index attribute present
	IsLabelIndexPresent bool `protobuf:"varint,16,opt,name=is_label_index_present,json=isLabelIndexPresent" json:"is_label_index_present,omitempty"`
	// Neighbor AS number
	NeighborAs uint32 `protobuf:"varint,17,opt,name=neighbor_as,json=neighborAs" json:"neighbor_as,omitempty"`
	// AS where aggregation was last performed
	AggregatorAs uint32 `protobuf:"varint,18,opt,name=aggregator_as,json=aggregatorAs" json:"aggregator_as,omitempty"`
	// Address where aggregation was performed
	AggregatorAddress string `protobuf:"bytes,19,opt,name=aggregator_address,json=aggregatorAddress" json:"aggregator_address,omitempty"`
	// Metric
	Metric uint32 `protobuf:"varint,20,opt,name=metric" json:"metric,omitempty"`
	// Local preference
	LocalPreference uint32 `protobuf:"varint,21,opt,name=local_preference,json=localPreference" json:"local_preference,omitempty"`
	// Origin
	Origin uint32 `protobuf:"varint,22,opt,name=origin" json:"origin,omitempty"`
	// AS path attribute
	AsPath string `protobuf:"bytes,23,opt,name=as_path,json=asPath" json:"as_path,omitempty"`
	// Community attribute
	Community []uint32 `protobuf:"varint,24,rep,packed,name=community" json:"community,omitempty"`
	// Extended community Flags
	ExtendedCommunityFlags uint32 `protobuf:"varint,25,opt,name=extended_community_flags,json=extendedCommunityFlags" json:"extended_community_flags,omitempty"`
	// Extended community attribute
	ExtendedCommunity []uint32 `protobuf:"varint,26,rep,packed,name=extended_community,json=extendedCommunity" json:"extended_community,omitempty"`
	// Unknown attributes
	UnknownAttributes []uint32 `protobuf:"varint,27,rep,packed,name=unknown_attributes,json=unknownAttributes" json:"unknown_attributes,omitempty"`
	// Cluster list attribute
	ClusterList []uint32 `protobuf:"varint,28,rep,packed,name=cluster_list,json=clusterList" json:"cluster_list,omitempty"`
	// Originator attribute
	Originator string `protobuf:"bytes,29,opt,name=originator" json:"originator,omitempty"`
	// L2TPv3 session id
	L2TPv3SessionId uint32 `protobuf:"varint,30,opt,name=l2_t_pv3_session_id,json=l2TPv3SessionId" json:"l2_t_pv3_session_id,omitempty"`
	// L2TPv3 Cookie
	L2TPv3Cookie []uint32 `protobuf:"varint,31,rep,packed,name=l2_t_pv3_cookie,json=l2TPv3Cookie" json:"l2_t_pv3_cookie,omitempty"`
	// Connector Type
	ConnectorType uint32 `protobuf:"varint,32,opt,name=connector_type,json=connectorType" json:"connector_type,omitempty"`
	// Connector Value
	ConnectorValue []uint32 `protobuf:"varint,33,rep,packed,name=connector_value,json=connectorValue" json:"connector_value,omitempty"`
	// AIGP metric value
	AigpMetricValue uint64 `protobuf:"varint,34,opt,name=aigp_metric_value,json=aigpMetricValue" json:"aigp_metric_value,omitempty"`
	// PMSI Type
	PmsiType uint32 `protobuf:"varint,35,opt,name=pmsi_type,json=pmsiType" json:"pmsi_type,omitempty"`
	// PMSI Value
	PmsiFlags uint32 `protobuf:"varint,36,opt,name=pmsi_flags,json=pmsiFlags" json:"pmsi_flags,omitempty"`
	// PMSI label
	PmsiLabel uint32 `protobuf:"varint,37,opt,name=pmsi_label,json=pmsiLabel" json:"pmsi_label,omitempty"`
	// PMSI Value
	PmsiValue []uint32 `protobuf:"varint,38,rep,packed,name=pmsi_value,json=pmsiValue" json:"pmsi_value,omitempty"`
	// PPMP Value
	PpmPvalue uint32 `protobuf:"varint,39,opt,name=ppm_pvalue,json=ppmPvalue" json:"ppm_pvalue,omitempty"`
	// PE distinguisher label attribute
	PeDistinguisherLabel []*BgpPedistlblEntry_ `protobuf:"bytes,40,rep,name=pe_distinguisher_label,json=peDistinguisherLabel" json:"pe_distinguisher_label,omitempty"`
	// BGP LS attribute
	LsAttr []uint32 `protobuf:"varint,41,rep,packed,name=ls_attr,json=lsAttr" json:"ls_attr,omitempty"`
	// Label Index attribute
	LabelIndexAttr []uint32 `protobuf:"varint,42,rep,packed,name=label_index_attr,json=labelIndexAttr" json:"label_index_attr,omitempty"`
	// Tunnel Encapsulation attribute
	TunnelEncap *BgpTunencapEntry_ `protobuf:"bytes,43,opt,name=tunnel_encap,json=tunnelEncap" json:"tunnel_encap,omitempty"`
	// Large Community attribute present
	IsLargeCommunityPresent bool `protobuf:"varint,44,opt,name=is_large_community_present,json=isLargeCommunityPresent" json:"is_large_community_present,omitempty"`
	// Large Community attribute
	LargeCommunity []*BgpBagLargecomm_ `protobuf:"bytes,45,rep,name=large_community,json=largeCommunity" json:"large_community,omitempty"`
}

func (m *BgpCommonAttrEntry_) Reset()                    { *m = BgpCommonAttrEntry_{} }
func (m *BgpCommonAttrEntry_) String() string            { return proto.CompactTextString(m) }
func (*BgpCommonAttrEntry_) ProtoMessage()               {}
func (*BgpCommonAttrEntry_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *BgpCommonAttrEntry_) GetIsMetricPresent() bool {
	if m != nil {
		return m.IsMetricPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLocalPrefPresent() bool {
	if m != nil {
		return m.IsLocalPrefPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAtomicAggregatePresent() bool {
	if m != nil {
		return m.IsAtomicAggregatePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAggregatorPresent() bool {
	if m != nil {
		return m.IsAggregatorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsOriginPresent() bool {
	if m != nil {
		return m.IsOriginPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAsPathPresent() bool {
	if m != nil {
		return m.IsAsPathPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsCommunityPresent() bool {
	if m != nil {
		return m.IsCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsExtendedCommunityPresent() bool {
	if m != nil {
		return m.IsExtendedCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsSsaPresent() bool {
	if m != nil {
		return m.IsSsaPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsConnectorPresent() bool {
	if m != nil {
		return m.IsConnectorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPmsiPresent() bool {
	if m != nil {
		return m.IsPmsiPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPppmpPresent() bool {
	if m != nil {
		return m.IsPppmpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAigpPresent() bool {
	if m != nil {
		return m.IsAigpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPeDistinguisherLabelPresent() bool {
	if m != nil {
		return m.IsPeDistinguisherLabelPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLsAttributePresent() bool {
	if m != nil {
		return m.IsLsAttributePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLabelIndexPresent() bool {
	if m != nil {
		return m.IsLabelIndexPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetNeighborAs() uint32 {
	if m != nil {
		return m.NeighborAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAs() uint32 {
	if m != nil {
		return m.AggregatorAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAddress() string {
	if m != nil {
		return m.AggregatorAddress
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetLocalPreference() uint32 {
	if m != nil {
		return m.LocalPreference
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAsPath() string {
	if m != nil {
		return m.AsPath
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetCommunity() []uint32 {
	if m != nil {
		return m.Community
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunityFlags() uint32 {
	if m != nil {
		return m.ExtendedCommunityFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetUnknownAttributes() []uint32 {
	if m != nil {
		return m.UnknownAttributes
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetClusterList() []uint32 {
	if m != nil {
		return m.ClusterList
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetOriginator() string {
	if m != nil {
		return m.Originator
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetL2TPv3SessionId() uint32 {
	if m != nil {
		return m.L2TPv3SessionId
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetL2TPv3Cookie() []uint32 {
	if m != nil {
		return m.L2TPv3Cookie
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetConnectorType() uint32 {
	if m != nil {
		return m.ConnectorType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetConnectorValue() []uint32 {
	if m != nil {
		return m.ConnectorValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetAigpMetricValue() uint64 {
	if m != nil {
		return m.AigpMetricValue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiType() uint32 {
	if m != nil {
		return m.PmsiType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiFlags() uint32 {
	if m != nil {
		return m.PmsiFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiLabel() uint32 {
	if m != nil {
		return m.PmsiLabel
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiValue() []uint32 {
	if m != nil {
		return m.PmsiValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetPpmPvalue() uint32 {
	if m != nil {
		return m.PpmPvalue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPeDistinguisherLabel() []*BgpPedistlblEntry_ {
	if m != nil {
		return m.PeDistinguisherLabel
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetLsAttr() []uint32 {
	if m != nil {
		return m.LsAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetLabelIndexAttr() []uint32 {
	if m != nil {
		return m.LabelIndexAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetTunnelEncap() *BgpTunencapEntry_ {
	if m != nil {
		return m.TunnelEncap
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetIsLargeCommunityPresent() bool {
	if m != nil {
		return m.IsLargeCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetLargeCommunity() []*BgpBagLargecomm_ {
	if m != nil {
		return m.LargeCommunity
	}
	return nil
}

type BgpAttr_ struct {
	// AS path encoded as 2-byte
	IsAsPath2Byte bool `protobuf:"varint,1,opt,name=is_as_path2_byte,json=isAsPath2Byte" json:"is_as_path2_byte,omitempty"`
	// Application gateway present
	IsApplicationGatewayPresent bool `protobuf:"varint,2,opt,name=is_application_gateway_present,json=isApplicationGatewayPresent" json:"is_application_gateway_present,omitempty"`
	// BGP ATTR_SET attribute present
	IsAttrSetPresent bool `protobuf:"varint,3,opt,name=is_attr_set_present,json=isAttrSetPresent" json:"is_attr_set_present,omitempty"`
	// AIGP set by policy inbound IGP
	SetAigpInboundIgp bool `protobuf:"varint,4,opt,name=set_aigp_inbound_igp,json=setAigpInboundIgp" json:"set_aigp_inbound_igp,omitempty"`
	// AIGP set by policy inbound metric
	SetAigpInboundMetric bool `protobuf:"varint,5,opt,name=set_aigp_inbound_metric,json=setAigpInboundMetric" json:"set_aigp_inbound_metric,omitempty"`
	// RNH Attribute  present
	IsRnhPresent bool `protobuf:"varint,6,opt,name=is_rnh_present,json=isRnhPresent" json:"is_rnh_present,omitempty"`
	// RIB RNH Attribute  present
	IsRibrnhPresent bool `protobuf:"varint,7,opt,name=is_ribrnh_present,json=isRibrnhPresent" json:"is_ribrnh_present,omitempty"`
	// Attribute key number
	AttributeKeyNumber uint32 `protobuf:"varint,8,opt,name=attribute_key_number,json=attributeKeyNumber" json:"attribute_key_number,omitempty"`
	// Attribute reuse ID Configured
	AttributeReuseIdConfig bool `protobuf:"varint,9,opt,name=attribute_reuse_id_config,json=attributeReuseIdConfig" json:"attribute_reuse_id_config,omitempty"`
	// Attribute reuse ID maximum ID
	AttributeReuseIdMaxId uint32 `protobuf:"varint,10,opt,name=attribute_reuse_id_max_id,json=attributeReuseIdMaxId" json:"attribute_reuse_id_max_id,omitempty"`
	// Attribute reuse ID nodes
	AttributeReuseIdNode uint32 `protobuf:"varint,11,opt,name=attribute_reuse_id_node,json=attributeReuseIdNode" json:"attribute_reuse_id_node,omitempty"`
	// Attribute reuse ID current ID
	AttributeReuseIdCurrent uint32 `protobuf:"varint,12,opt,name=attribute_reuse_id_current,json=attributeReuseIdCurrent" json:"attribute_reuse_id_current,omitempty"`
	// Attribute reuse ID allocated keys
	AttributeReuseIdKeys uint32 `protobuf:"varint,13,opt,name=attribute_reuse_id_keys,json=attributeReuseIdKeys" json:"attribute_reuse_id_keys,omitempty"`
	// Attribute reuse ID timer in seconds
	AttributeReuseIdRecoverSec uint32 `protobuf:"varint,14,opt,name=attribute_reuse_id_recover_sec,json=attributeReuseIdRecoverSec" json:"attribute_reuse_id_recover_sec,omitempty"`
	// VPN Distinguisher
	VpnDistinguisher uint32 `protobuf:"varint,15,opt,name=vpn_distinguisher,json=vpnDistinguisher" json:"vpn_distinguisher,omitempty"`
	// Common attributes
	CommonAttributes *BgpCommonAttrEntry_ `protobuf:"bytes,16,opt,name=common_attributes,json=commonAttributes" json:"common_attributes,omitempty"`
	// ATTR_SET attribute
	AttrSet *BgpCommonAttrEntry_ `protobuf:"bytes,17,opt,name=attr_set,json=attrSet" json:"attr_set,omitempty"`
	// RNH Type
	RnhType uint32 `protobuf:"varint,18,opt,name=rnh_type,json=rnhType" json:"rnh_type,omitempty"`
	// RNH Length
	RnhLen uint32 `protobuf:"varint,19,opt,name=rnh_len,json=rnhLen" json:"rnh_len,omitempty"`
	// RNH Address Length
	RnhAddrLen uint32 `protobuf:"varint,20,opt,name=rnh_addr_len,json=rnhAddrLen" json:"rnh_addr_len,omitempty"`
	// RNH Address
	RnhAddr *BgpAttrRnhAddrT `protobuf:"bytes,21,opt,name=rnh_addr,json=rnhAddr" json:"rnh_addr,omitempty"`
	// RIB RNH Table
	RibrnhTable uint32 `protobuf:"varint,22,opt,name=ribrnh_table,json=ribrnhTable" json:"ribrnh_table,omitempty"`
	// RIB RNH MAC Address
	RibrnhMac string `protobuf:"bytes,23,opt,name=ribrnh_mac,json=ribrnhMac" json:"ribrnh_mac,omitempty"`
	// RIB RNH IP Address
	RibrnhIp *BgpAddrtype `protobuf:"bytes,24,opt,name=ribrnh_ip,json=ribrnhIp" json:"ribrnh_ip,omitempty"`
	// RIB RNH IP Table
	RibrnhipTable uint32 `protobuf:"varint,25,opt,name=ribrnhip_table,json=ribrnhipTable" json:"ribrnhip_table,omitempty"`
	// RIB RNH Vni
	RibrnhVni uint32 `protobuf:"varint,26,opt,name=ribrnh_vni,json=ribrnhVni" json:"ribrnh_vni,omitempty"`
	// RIB RNH Encapsulation Type
	RibrnhEncap uint32 `protobuf:"varint,27,opt,name=ribrnh_encap,json=ribrnhEncap" json:"ribrnh_encap,omitempty"`
}

func (m *BgpAttr_) Reset()                    { *m = BgpAttr_{} }
func (m *BgpAttr_) String() string            { return proto.CompactTextString(m) }
func (*BgpAttr_) ProtoMessage()               {}
func (*BgpAttr_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *BgpAttr_) GetIsAsPath2Byte() bool {
	if m != nil {
		return m.IsAsPath2Byte
	}
	return false
}

func (m *BgpAttr_) GetIsApplicationGatewayPresent() bool {
	if m != nil {
		return m.IsApplicationGatewayPresent
	}
	return false
}

func (m *BgpAttr_) GetIsAttrSetPresent() bool {
	if m != nil {
		return m.IsAttrSetPresent
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundIgp() bool {
	if m != nil {
		return m.SetAigpInboundIgp
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundMetric() bool {
	if m != nil {
		return m.SetAigpInboundMetric
	}
	return false
}

func (m *BgpAttr_) GetIsRnhPresent() bool {
	if m != nil {
		return m.IsRnhPresent
	}
	return false
}

func (m *BgpAttr_) GetIsRibrnhPresent() bool {
	if m != nil {
		return m.IsRibrnhPresent
	}
	return false
}

func (m *BgpAttr_) GetAttributeKeyNumber() uint32 {
	if m != nil {
		return m.AttributeKeyNumber
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdConfig() bool {
	if m != nil {
		return m.AttributeReuseIdConfig
	}
	return false
}

func (m *BgpAttr_) GetAttributeReuseIdMaxId() uint32 {
	if m != nil {
		return m.AttributeReuseIdMaxId
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdNode() uint32 {
	if m != nil {
		return m.AttributeReuseIdNode
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdCurrent() uint32 {
	if m != nil {
		return m.AttributeReuseIdCurrent
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdKeys() uint32 {
	if m != nil {
		return m.AttributeReuseIdKeys
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdRecoverSec() uint32 {
	if m != nil {
		return m.AttributeReuseIdRecoverSec
	}
	return 0
}

func (m *BgpAttr_) GetVpnDistinguisher() uint32 {
	if m != nil {
		return m.VpnDistinguisher
	}
	return 0
}

func (m *BgpAttr_) GetCommonAttributes() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.CommonAttributes
	}
	return nil
}

func (m *BgpAttr_) GetAttrSet() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.AttrSet
	}
	return nil
}

func (m *BgpAttr_) GetRnhType() uint32 {
	if m != nil {
		return m.RnhType
	}
	return 0
}

func (m *BgpAttr_) GetRnhLen() uint32 {
	if m != nil {
		return m.RnhLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddrLen() uint32 {
	if m != nil {
		return m.RnhAddrLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddr() *BgpAttrRnhAddrT {
	if m != nil {
		return m.RnhAddr
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhTable() uint32 {
	if m != nil {
		return m.RibrnhTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhMac() string {
	if m != nil {
		return m.RibrnhMac
	}
	return ""
}

func (m *BgpAttr_) GetRibrnhIp() *BgpAddrtype {
	if m != nil {
		return m.RibrnhIp
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhipTable() uint32 {
	if m != nil {
		return m.RibrnhipTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhVni() uint32 {
	if m != nil {
		return m.RibrnhVni
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhEncap() uint32 {
	if m != nil {
		return m.RibrnhEncap
	}
	return 0
}

type BgpAdvinfoType_ struct {
	// Entry is a neighbor (not an update group)
	IsNeighbor bool `protobuf:"varint,1,opt,name=is_neighbor,json=isNeighbor" json:"is_neighbor,omitempty"`
	// Neighbor Address
	NeighborAddress *BgpAddrtype `protobuf:"bytes,2,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Update group index
	UpdateGroupNumber uint32 `protobuf:"varint,3,opt,name=update_group_number,json=updateGroupNumber" json:"update_group_number,omitempty"`
}

func (m *BgpAdvinfoType_) Reset()                    { *m = BgpAdvinfoType_{} }
func (m *BgpAdvinfoType_) String() string            { return proto.CompactTextString(m) }
func (*BgpAdvinfoType_) ProtoMessage()               {}
func (*BgpAdvinfoType_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *BgpAdvinfoType_) GetIsNeighbor() bool {
	if m != nil {
		return m.IsNeighbor
	}
	return false
}

func (m *BgpAdvinfoType_) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpAdvinfoType_) GetUpdateGroupNumber() uint32 {
	if m != nil {
		return m.UpdateGroupNumber
	}
	return 0
}

type BgpPath_ struct {
	// BGP prefix
	BgpPrefix *BgpPrefixtype `protobuf:"bytes,1,opt,name=bgp_prefix,json=bgpPrefix" json:"bgp_prefix,omitempty"`
	// Neighbor address
	NeighborAddress *BgpAddrtype `protobuf:"bytes,2,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Route Type of path
	RouteType string `protobuf:"bytes,3,opt,name=route_type,json=routeType" json:"route_type,omitempty"`
	// Path attributes are usable
	IsPathValid bool `protobuf:"varint,4,opt,name=is_path_valid,json=isPathValid" json:"is_path_valid,omitempty"`
	// Path suppressed due to dampening
	IsPathDamped bool `protobuf:"varint,5,opt,name=is_path_damped,json=isPathDamped" json:"is_path_damped,omitempty"`
	// Path entry held to remember history
	IsPathHistoryHeld bool `protobuf:"varint,6,opt,name=is_path_history_held,json=isPathHistoryHeld" json:"is_path_history_held,omitempty"`
	// Received over an internal link
	IsInternalPath bool `protobuf:"varint,7,opt,name=is_internal_path,json=isInternalPath" json:"is_internal_path,omitempty"`
	// Best available path
	IsBestPath bool `protobuf:"varint,8,opt,name=is_best_path,json=isBestPath" json:"is_best_path,omitempty"`
	// Best available path within AS
	IsAsBest bool `protobuf:"varint,9,opt,name=is_as_best,json=isAsBest" json:"is_as_best,omitempty"`
	// Best available path within AS in speaker
	IsSpkrAsBest bool `protobuf:"varint,10,opt,name=is_spkr_as_best,json=isSpkrAsBest" json:"is_spkr_as_best,omitempty"`
	// Partial best path within distributed speaker
	IsPartialBest bool `protobuf:"varint,11,opt,name=is_partial_best,json=isPartialBest" json:"is_partial_best,omitempty"`
	// Path suppressed due to aggregation
	IsAggregationSuppressed bool `protobuf:"varint,12,opt,name=is_aggregation_suppressed,json=isAggregationSuppressed" json:"is_aggregation_suppressed,omitempty"`
	// net import dampened
	IsImportDampened bool `protobuf:"varint,13,opt,name=is_import_dampened,json=isImportDampened" json:"is_import_dampened,omitempty"`
	// net import suspect
	IsImportSuspect bool `protobuf:"varint,14,opt,name=is_import_suspect,json=isImportSuspect" json:"is_import_suspect,omitempty"`
	// Not advertised to any peer
	IsPathNotAdvertised bool `protobuf:"varint,15,opt,name=is_path_not_advertised,json=isPathNotAdvertised" json:"is_path_not_advertised,omitempty"`
	// Not advertised to EBGPs
	IsPathNotAdvertisedToEbgPs bool `protobuf:"varint,16,opt,name=is_path_not_advertised_to_ebg_ps,json=isPathNotAdvertisedToEbgPs" json:"is_path_not_advertised_to_ebg_ps,omitempty"`
	// Not advertised outside local AS
	IsPathAdvertisedLocalAsOnly bool `protobuf:"varint,17,opt,name=is_path_advertised_local_as_only,json=isPathAdvertisedLocalAsOnly" json:"is_path_advertised_local_as_only,omitempty"`
	// Path received from route reflector
	IsPathFromRouteReflector bool `protobuf:"varint,18,opt,name=is_path_from_route_reflector,json=isPathFromRouteReflector" json:"is_path_from_route_reflector,omitempty"`
	// Path is received only
	IsPathReceivedOnly bool `protobuf:"varint,19,opt,name=is_path_received_only,json=isPathReceivedOnly" json:"is_path_received_only,omitempty"`
	// Received path used without modification
	IsReceivedPathNotModified bool `protobuf:"varint,20,opt,name=is_received_path_not_modified,json=isReceivedPathNotModified" json:"is_received_path_not_modified,omitempty"`
	// Path sourced locally
	IsPathLocallySourced bool `protobuf:"varint,21,opt,name=is_path_locally_sourced,json=isPathLocallySourced" json:"is_path_locally_sourced,omitempty"`
	// Path is a locally created aggregate
	IsPathLocalAggregate bool `protobuf:"varint,22,opt,name=is_path_local_aggregate,json=isPathLocalAggregate" json:"is_path_local_aggregate,omitempty"`
	// Path sourced by network command
	IsPathFromNetworkCommand bool `protobuf:"varint,23,opt,name=is_path_from_network_command,json=isPathFromNetworkCommand" json:"is_path_from_network_command,omitempty"`
	// Path sourced by redistribute command
	IsPathFromRedistributeCommand bool `protobuf:"varint,24,opt,name=is_path_from_redistribute_command,json=isPathFromRedistributeCommand" json:"is_path_from_redistribute_command,omitempty"`
	// Path is imported
	IsPathImported bool `protobuf:"varint,25,opt,name=is_path_imported,json=isPathImported" json:"is_path_imported,omitempty"`
	// Path is reoriginated
	IsPathReoriginated bool `protobuf:"varint,26,opt,name=is_path_reoriginated,json=isPathReoriginated" json:"is_path_reoriginated,omitempty"`
	// Path is reoriginated with stitching RTs
	IsPathReoriginatedStitching bool `protobuf:"varint,27,opt,name=is_path_reoriginated_stitching,json=isPathReoriginatedStitching" json:"is_path_reoriginated_stitching,omitempty"`
	// Path is not in the vrf
	IsPathVpnOnly bool `protobuf:"varint,28,opt,name=is_path_vpn_only,json=isPathVpnOnly" json:"is_path_vpn_only,omitempty"`
	// Path received from confederation peer
	IsPathFromConfederationPeer bool `protobuf:"varint,29,opt,name=is_path_from_confederation_peer,json=isPathFromConfederationPeer" json:"is_path_from_confederation_peer,omitempty"`
	// Path synchronized with IGP
	IsPathSyncedWithIgp bool `protobuf:"varint,30,opt,name=is_path_synced_with_igp,json=isPathSyncedWithIgp" json:"is_path_synced_with_igp,omitempty"`
	// Path is one of multipath best routes
	IsPathMultipath bool `protobuf:"varint,31,opt,name=is_path_multipath,json=isPathMultipath" json:"is_path_multipath,omitempty"`
	// Path is a candidate for multipath import
	IsPathImpCandidate bool `protobuf:"varint,32,opt,name=is_path_imp_candidate,json=isPathImpCandidate" json:"is_path_imp_candidate,omitempty"`
	// Stale routes learnt before neighbor restarts
	IsPathStale bool `protobuf:"varint,33,opt,name=is_path_stale,json=isPathStale" json:"is_path_stale,omitempty"`
	// Long lived stale routes learnt before neighbor restarts
	IsPathLongLivedStale bool `protobuf:"varint,34,opt,name=is_path_long_lived_stale,json=isPathLongLivedStale" json:"is_path_long_lived_stale,omitempty"`
	// Path is a backup path
	IsPathBackup bool `protobuf:"varint,35,opt,name=is_path_backup,json=isPathBackup" json:"is_path_backup,omitempty"`
	// Path is a backup path to protect multipaths
	IsPathBackupProtectMultipath bool `protobuf:"varint,36,opt,name=is_path_backup_protect_multipath,json=isPathBackupProtectMultipath" json:"is_path_backup_protect_multipath,omitempty"`
	// Path is a best external path
	IsPathBestExternal bool `protobuf:"varint,37,opt,name=is_path_best_external,json=isPathBestExternal" json:"is_path_best_external,omitempty"`
	// Path is an additional-path
	IsPathAdditionalPath bool `protobuf:"varint,38,opt,name=is_path_additional_path,json=isPathAdditionalPath" json:"is_path_additional_path,omitempty"`
	// Path is redirected to Null0
	IsPathNexthopDiscarded bool `protobuf:"varint,39,opt,name=is_path_nexthop_discarded,json=isPathNexthopDiscarded" json:"is_path_nexthop_discarded,omitempty"`
	// Next hop
	NextHop *BgpAddrtype `protobuf:"bytes,40,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	// NH tunnel information
	NhTunnel *BgpTeTunnel `protobuf:"bytes,41,opt,name=nh_tunnel,json=nhTunnel" json:"nh_tunnel,omitempty"`
	// Path received label count
	RcvdLabelCount uint32 `protobuf:"varint,42,opt,name=rcvd_label_count,json=rcvdLabelCount" json:"rcvd_label_count,omitempty"`
	// Path received label stack
	RcvdLabel []uint32 `protobuf:"varint,43,rep,packed,name=rcvd_label,json=rcvdLabel" json:"rcvd_label,omitempty"`
	// Path has local label
	HasLocalNetLabel bool `protobuf:"varint,44,opt,name=has_local_net_label,json=hasLocalNetLabel" json:"has_local_net_label,omitempty"`
	// Path local label
	LocalLabel uint32 `protobuf:"varint,45,opt,name=local_label,json=localLabel" json:"local_label,omitempty"`
	// IGP metric to the gateway
	IgpMetric uint32 `protobuf:"varint,46,opt,name=igp_metric,json=igpMetric" json:"igp_metric,omitempty"`
	// Weight for the path
	PathWeight uint32 `protobuf:"varint,47,opt,name=path_weight,json=pathWeight" json:"path_weight,omitempty"`
	// Router ID of the neighbor for the path
	NeighborRouterId string `protobuf:"bytes,48,opt,name=neighbor_router_id,json=neighborRouterId" json:"neighbor_router_id,omitempty"`
	// Path has MDT Group Address
	HasMdtGroupAddr bool `protobuf:"varint,49,opt,name=has_mdt_group_addr,json=hasMdtGroupAddr" json:"has_mdt_group_addr,omitempty"`
	// IPv4 MDT Group Address for the path
	MdtGroupAddr *BgpAddrtype `protobuf:"bytes,50,opt,name=mdt_group_addr,json=mdtGroupAddr" json:"mdt_group_addr,omitempty"`
	// Path block size
	L2VpnSize uint32 `protobuf:"varint,51,opt,name=l2_vpn_size,json=l2VpnSize" json:"l2_vpn_size,omitempty"`
	// L2VPN EVPN ESI
	L2VpnEvpnEsi string `protobuf:"bytes,52,opt,name=l2_vpn_evpn_esi,json=l2VpnEvpnEsi" json:"l2_vpn_evpn_esi,omitempty"`
	// Path has GW Address
	HasGwAddr bool `protobuf:"varint,53,opt,name=has_gw_addr,json=hasGwAddr" json:"has_gw_addr,omitempty"`
	// Path GW Address
	GwAddr *BgpV4V6T `protobuf:"bytes,54,opt,name=gw_addr,json=gwAddr" json:"gw_addr,omitempty"`
	// Path has next-hop Address
	HasNhAddr bool `protobuf:"varint,55,opt,name=has_nh_addr,json=hasNhAddr" json:"has_nh_addr,omitempty"`
	// Path next-hop Address
	NhAddr *BgpV4V6T `protobuf:"bytes,56,opt,name=nh_addr,json=nhAddr" json:"nh_addr,omitempty"`
	// Path has second received label
	HasSecondLabel bool `protobuf:"varint,57,opt,name=has_second_label,json=hasSecondLabel" json:"has_second_label,omitempty"`
	// Path second received label
	SecondLabel uint32 `protobuf:"varint,58,opt,name=second_label,json=secondLabel" json:"second_label,omitempty"`
	// L2VPN Circuit Status Value
	L2VpnCircuitStatusValue []uint32 `protobuf:"varint,59,rep,packed,name=l2vpn_circuit_status_value,json=l2vpnCircuitStatusValue" json:"l2vpn_circuit_status_value,omitempty"`
	// Number of times this route has flapped
	PathFlapCount uint32 `protobuf:"varint,60,opt,name=path_flap_count,json=pathFlapCount" json:"path_flap_count,omitempty"`
	// Seconds since route first flapped
	SecondsSinceFirstFlap uint32 `protobuf:"varint,61,opt,name=seconds_since_first_flap,json=secondsSinceFirstFlap" json:"seconds_since_first_flap,omitempty"`
	// Seconds until route is unsuppressed
	TimeToUnsuppress uint32 `protobuf:"varint,62,opt,name=time_to_unsuppress,json=timeToUnsuppress" json:"time_to_unsuppress,omitempty"`
	// Dampening penalty
	DampenPenalty uint32 `protobuf:"varint,63,opt,name=dampen_penalty,json=dampenPenalty" json:"dampen_penalty,omitempty"`
	// Half-life time for the penalty
	HalflifeTime uint32 `protobuf:"varint,64,opt,name=halflife_time,json=halflifeTime" json:"halflife_time,omitempty"`
	// Value to start suppressing a route
	SuppressPenalty uint32 `protobuf:"varint,65,opt,name=suppress_penalty,json=suppressPenalty" json:"suppress_penalty,omitempty"`
	// Value to start reusing a route
	ReuseValue uint32 `protobuf:"varint,66,opt,name=reuse_value,json=reuseValue" json:"reuse_value,omitempty"`
	// Maximum duration to suppress a stable route
	MaximumSuppressTime uint32 `protobuf:"varint,67,opt,name=maximum_suppress_time,json=maximumSuppressTime" json:"maximum_suppress_time,omitempty"`
	// Stage where the path lost to the best path or group best
	BestPathCompStage string `protobuf:"bytes,68,opt,name=best_path_comp_stage,json=bestPathCompStage" json:"best_path_comp_stage,omitempty"`
	// Neighbor address of the path which won best path comparison
	BestPathCompWinner *BgpAddrtype `protobuf:"bytes,69,opt,name=best_path_comp_winner,json=bestPathCompWinner" json:"best_path_comp_winner,omitempty"`
	// Path ID of the path which won best path comparison
	BestPathIdCompWinner uint32 `protobuf:"varint,70,opt,name=best_path_id_comp_winner,json=bestPathIdCompWinner" json:"best_path_id_comp_winner,omitempty"`
	// Flags associated with path
	PathFlags uint64 `protobuf:"varint,71,opt,name=path_flags,json=pathFlags" json:"path_flags,omitempty"`
	// Path import flags
	PathImportFlags uint32 `protobuf:"varint,72,opt,name=path_import_flags,json=pathImportFlags" json:"path_import_flags,omitempty"`
	// Best path ID; DEPRECATED BYLocalPathId
	BestPathId uint32 `protobuf:"varint,73,opt,name=best_path_id,json=bestPathId" json:"best_path_id,omitempty"`
	// Local path ID
	LocalPathId uint32 `protobuf:"varint,74,opt,name=local_path_id,json=localPathId" json:"local_path_id,omitempty"`
	// Received path ID
	RcvdPathId uint32 `protobuf:"varint,75,opt,name=rcvd_path_id,json=rcvdPathId" json:"rcvd_path_id,omitempty"`
	// Table version # for pelem
	PathTableVersion uint32 `protobuf:"varint,76,opt,name=path_table_version,json=pathTableVersion" json:"path_table_version,omitempty"`
	// Local peers that this prefix has been advertised to
	LocalPeersAdvertisedTo []*BgpAdvinfoType_ `protobuf:"bytes,77,rep,name=local_peers_advertised_to,json=localPeersAdvertisedTo" json:"local_peers_advertised_to,omitempty"`
	// PE peers that this prefix has been advertised to
	PePeersAdvertisedTo []*BgpAdvinfoType_ `protobuf:"bytes,78,rep,name=pe_peers_advertised_to,json=pePeersAdvertisedTo" json:"pe_peers_advertised_to,omitempty"`
	// ORR Best path Bitfields
	BestPathOrrBitfields []*BgpAdvinfoType_ `protobuf:"bytes,79,rep,name=best_path_orr_bitfields,json=bestPathOrrBitfields" json:"best_path_orr_bitfields,omitempty"`
	// ORR Add path Bitfields
	AddPathOrrBitfields []*BgpAdvinfoType_ `protobuf:"bytes,80,rep,name=add_path_orr_bitfields,json=addPathOrrBitfields" json:"add_path_orr_bitfields,omitempty"`
	// Net could be advertised to PE peers
	AdvertisedtoPe bool `protobuf:"varint,81,opt,name=advertisedto_pe,json=advertisedtoPe" json:"advertisedto_pe,omitempty"`
	// Is net failed installed in RIB
	RibFailed bool `protobuf:"varint,82,opt,name=rib_failed,json=ribFailed" json:"rib_failed,omitempty"`
	// RPKI origin validation state
	SnRpkiOriginAsValidity uint32 `protobuf:"varint,83,opt,name=sn_rpki_origin_as_validity,json=snRpkiOriginAsValidity" json:"sn_rpki_origin_as_validity,omitempty"`
	// Display validity state ?
	ShowRpkiOriginAsValidity bool `protobuf:"varint,84,opt,name=show_rpki_origin_as_validity,json=showRpkiOriginAsValidity" json:"show_rpki_origin_as_validity,omitempty"`
	// IBGP signalled validation
	IbgpSignaledValidity bool `protobuf:"varint,85,opt,name=ibgp_signaled_validity,json=ibgpSignaledValidity" json:"ibgp_signaled_validity,omitempty"`
	// RPKI originAS V. Disabled
	RpkiOriginAsValidationDisabled bool `protobuf:"varint,86,opt,name=rpki_origin_as_validation_disabled,json=rpkiOriginAsValidationDisabled" json:"rpki_origin_as_validation_disabled,omitempty"`
	// Accept-Own
	AcceptOwnPath bool `protobuf:"varint,87,opt,name=accept_own_path,json=acceptOwnPath" json:"accept_own_path,omitempty"`
	// Accept-Own self-originated
	AcceptOwnSelfOriginatedPAth bool `protobuf:"varint,88,opt,name=accept_own_self_originated_p_ath,json=acceptOwnSelfOriginatedPAth" json:"accept_own_self_originated_p_ath,omitempty"`
	// Total AIGP metric
	AigpMetric uint64 `protobuf:"varint,89,opt,name=aigp_metric,json=aigpMetric" json:"aigp_metric,omitempty"`
	// Is MVPN single forwarder PE path
	MvpnSfsPath bool `protobuf:"varint,90,opt,name=mvpn_sfs_path,json=mvpnSfsPath" json:"mvpn_sfs_path,omitempty"`
	// Is Fspec invalid path
	FspecInvalidPath bool `protobuf:"varint,91,opt,name=fspec_invalid_path,json=fspecInvalidPath" json:"fspec_invalid_path,omitempty"`
	// Path has Mvpn nbr Address
	HasMvpnNbrAddr bool `protobuf:"varint,92,opt,name=has_mvpn_nbr_addr,json=hasMvpnNbrAddr" json:"has_mvpn_nbr_addr,omitempty"`
	// Mvpn nbr Address for the path
	MvpnNbrAddr *BgpAddrtype `protobuf:"bytes,93,opt,name=mvpn_nbr_addr,json=mvpnNbrAddr" json:"mvpn_nbr_addr,omitempty"`
	// Path has MVPN nexthop Address
	HasMvpnNexthopAddr bool `protobuf:"varint,94,opt,name=has_mvpn_nexthop_addr,json=hasMvpnNexthopAddr" json:"has_mvpn_nexthop_addr,omitempty"`
	// Mvpn nexthop Address for the path
	MvpnNexthopAddr *BgpAddrtype `protobuf:"bytes,95,opt,name=mvpn_nexthop_addr,json=mvpnNexthopAddr" json:"mvpn_nexthop_addr,omitempty"`
	// Path has MVPN PMSI feedback
	HasMvpnPmsi bool `protobuf:"varint,96,opt,name=has_mvpn_pmsi,json=hasMvpnPmsi" json:"has_mvpn_pmsi,omitempty"`
	// Mvpn PMSI Type
	MvpnPmsiType uint32 `protobuf:"varint,97,opt,name=mvpn_pmsi_type,json=mvpnPmsiType" json:"mvpn_pmsi_type,omitempty"`
	// Mvpn PMSI Value
	MvpnPmsiFlags uint32 `protobuf:"varint,98,opt,name=mvpn_pmsi_flags,json=mvpnPmsiFlags" json:"mvpn_pmsi_flags,omitempty"`
	// Mvpn PMSI label
	MvpnPmsiLabel uint32 `protobuf:"varint,99,opt,name=mvpn_pmsi_label,json=mvpnPmsiLabel" json:"mvpn_pmsi_label,omitempty"`
	// Mvpn PMSI Value
	MvpnPmsiValue []uint32 `protobuf:"varint,100,rep,packed,name=mvpn_pmsi_value,json=mvpnPmsiValue" json:"mvpn_pmsi_value,omitempty"`
	// Path has MVPN EXTCOMM feedback
	HasMvpnExtcomm bool `protobuf:"varint,101,opt,name=has_mvpn_extcomm,json=hasMvpnExtcomm" json:"has_mvpn_extcomm,omitempty"`
	// Mvpn Extended community attribute
	ExtendedCommunity []uint32 `protobuf:"varint,102,rep,packed,name=extended_community,json=extendedCommunity" json:"extended_community,omitempty"`
	// Mvpn path flags
	MvpnPathFlags uint32 `protobuf:"varint,103,opt,name=mvpn_path_flags,json=mvpnPathFlags" json:"mvpn_path_flags,omitempty"`
	// Path has local nexthop
	LocalNh bool `protobuf:"varint,104,opt,name=local_nh,json=localNh" json:"local_nh,omitempty"`
	// Path subject to RT-set net limit
	RtSetLimitEnabled bool `protobuf:"varint,105,opt,name=rt_set_limit_enabled,json=rtSetLimitEnabled" json:"rt_set_limit_enabled,omitempty"`
	// RT-set id of the path
	PathRtSetId uint32 `protobuf:"varint,106,opt,name=path_rt_set_id,json=pathRtSetId" json:"path_rt_set_id,omitempty"`
	// Count in RT-set
	PathRtSetRouteCount uint32 `protobuf:"varint,107,opt,name=path_rt_set_route_count,json=pathRtSetRouteCount" json:"path_rt_set_route_count,omitempty"`
	// Path can be installed in AF RIB
	IsPathAfInstallEligible bool `protobuf:"varint,108,opt,name=is_path_af_install_eligible,json=isPathAfInstallEligible" json:"is_path_af_install_eligible,omitempty"`
	// Path is of type Permanent path
	IsPermanentPath bool `protobuf:"varint,109,opt,name=is_permanent_path,json=isPermanentPath" json:"is_permanent_path,omitempty"`
	// Marked for graceful shutdown
	GracefulShutdown bool `protobuf:"varint,110,opt,name=graceful_shutdown,json=gracefulShutdown" json:"graceful_shutdown,omitempty"`
	// Path was learnt by labeled-unicast SAFI
	LabeledUnicastSafiPath bool `protobuf:"varint,111,opt,name=labeled_unicast_safi_path,json=labeledUnicastSafiPath" json:"labeled_unicast_safi_path,omitempty"`
	// Vpn path flags
	VpnPathFlags uint32 `protobuf:"varint,112,opt,name=vpn_path_flags,json=vpnPathFlags" json:"vpn_path_flags,omitempty"`
	// Path has VPN nexthop Address
	HasVpnNexthopAddr bool `protobuf:"varint,113,opt,name=has_vpn_nexthop_addr,json=hasVpnNexthopAddr" json:"has_vpn_nexthop_addr,omitempty"`
	// Vpn nexthop Address for the path
	VpnNexthopAddr *BgpAddrtype `protobuf:"bytes,114,opt,name=vpn_nexthop_addr,json=vpnNexthopAddr" json:"vpn_nexthop_addr,omitempty"`
	// Original Source RD  present
	IsOrigSrcRdPresent bool `protobuf:"varint,115,opt,name=is_orig_src_rd_present,json=isOrigSrcRdPresent" json:"is_orig_src_rd_present,omitempty"`
	// Original Source Address family identifier
	AfName string `protobuf:"bytes,116,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	// Original Source Route Distinguisher
	RouteDistinguisher string `protobuf:"bytes,117,opt,name=route_distinguisher,json=routeDistinguisher" json:"route_distinguisher,omitempty"`
}

func (m *BgpPath_) Reset()                    { *m = BgpPath_{} }
func (m *BgpPath_) String() string            { return proto.CompactTextString(m) }
func (*BgpPath_) ProtoMessage()               {}
func (*BgpPath_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *BgpPath_) GetBgpPrefix() *BgpPrefixtype {
	if m != nil {
		return m.BgpPrefix
	}
	return nil
}

func (m *BgpPath_) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpPath_) GetRouteType() string {
	if m != nil {
		return m.RouteType
	}
	return ""
}

func (m *BgpPath_) GetIsPathValid() bool {
	if m != nil {
		return m.IsPathValid
	}
	return false
}

func (m *BgpPath_) GetIsPathDamped() bool {
	if m != nil {
		return m.IsPathDamped
	}
	return false
}

func (m *BgpPath_) GetIsPathHistoryHeld() bool {
	if m != nil {
		return m.IsPathHistoryHeld
	}
	return false
}

func (m *BgpPath_) GetIsInternalPath() bool {
	if m != nil {
		return m.IsInternalPath
	}
	return false
}

func (m *BgpPath_) GetIsBestPath() bool {
	if m != nil {
		return m.IsBestPath
	}
	return false
}

func (m *BgpPath_) GetIsAsBest() bool {
	if m != nil {
		return m.IsAsBest
	}
	return false
}

func (m *BgpPath_) GetIsSpkrAsBest() bool {
	if m != nil {
		return m.IsSpkrAsBest
	}
	return false
}

func (m *BgpPath_) GetIsPartialBest() bool {
	if m != nil {
		return m.IsPartialBest
	}
	return false
}

func (m *BgpPath_) GetIsAggregationSuppressed() bool {
	if m != nil {
		return m.IsAggregationSuppressed
	}
	return false
}

func (m *BgpPath_) GetIsImportDampened() bool {
	if m != nil {
		return m.IsImportDampened
	}
	return false
}

func (m *BgpPath_) GetIsImportSuspect() bool {
	if m != nil {
		return m.IsImportSuspect
	}
	return false
}

func (m *BgpPath_) GetIsPathNotAdvertised() bool {
	if m != nil {
		return m.IsPathNotAdvertised
	}
	return false
}

func (m *BgpPath_) GetIsPathNotAdvertisedToEbgPs() bool {
	if m != nil {
		return m.IsPathNotAdvertisedToEbgPs
	}
	return false
}

func (m *BgpPath_) GetIsPathAdvertisedLocalAsOnly() bool {
	if m != nil {
		return m.IsPathAdvertisedLocalAsOnly
	}
	return false
}

func (m *BgpPath_) GetIsPathFromRouteReflector() bool {
	if m != nil {
		return m.IsPathFromRouteReflector
	}
	return false
}

func (m *BgpPath_) GetIsPathReceivedOnly() bool {
	if m != nil {
		return m.IsPathReceivedOnly
	}
	return false
}

func (m *BgpPath_) GetIsReceivedPathNotModified() bool {
	if m != nil {
		return m.IsReceivedPathNotModified
	}
	return false
}

func (m *BgpPath_) GetIsPathLocallySourced() bool {
	if m != nil {
		return m.IsPathLocallySourced
	}
	return false
}

func (m *BgpPath_) GetIsPathLocalAggregate() bool {
	if m != nil {
		return m.IsPathLocalAggregate
	}
	return false
}

func (m *BgpPath_) GetIsPathFromNetworkCommand() bool {
	if m != nil {
		return m.IsPathFromNetworkCommand
	}
	return false
}

func (m *BgpPath_) GetIsPathFromRedistributeCommand() bool {
	if m != nil {
		return m.IsPathFromRedistributeCommand
	}
	return false
}

func (m *BgpPath_) GetIsPathImported() bool {
	if m != nil {
		return m.IsPathImported
	}
	return false
}

func (m *BgpPath_) GetIsPathReoriginated() bool {
	if m != nil {
		return m.IsPathReoriginated
	}
	return false
}

func (m *BgpPath_) GetIsPathReoriginatedStitching() bool {
	if m != nil {
		return m.IsPathReoriginatedStitching
	}
	return false
}

func (m *BgpPath_) GetIsPathVpnOnly() bool {
	if m != nil {
		return m.IsPathVpnOnly
	}
	return false
}

func (m *BgpPath_) GetIsPathFromConfederationPeer() bool {
	if m != nil {
		return m.IsPathFromConfederationPeer
	}
	return false
}

func (m *BgpPath_) GetIsPathSyncedWithIgp() bool {
	if m != nil {
		return m.IsPathSyncedWithIgp
	}
	return false
}

func (m *BgpPath_) GetIsPathMultipath() bool {
	if m != nil {
		return m.IsPathMultipath
	}
	return false
}

func (m *BgpPath_) GetIsPathImpCandidate() bool {
	if m != nil {
		return m.IsPathImpCandidate
	}
	return false
}

func (m *BgpPath_) GetIsPathStale() bool {
	if m != nil {
		return m.IsPathStale
	}
	return false
}

func (m *BgpPath_) GetIsPathLongLivedStale() bool {
	if m != nil {
		return m.IsPathLongLivedStale
	}
	return false
}

func (m *BgpPath_) GetIsPathBackup() bool {
	if m != nil {
		return m.IsPathBackup
	}
	return false
}

func (m *BgpPath_) GetIsPathBackupProtectMultipath() bool {
	if m != nil {
		return m.IsPathBackupProtectMultipath
	}
	return false
}

func (m *BgpPath_) GetIsPathBestExternal() bool {
	if m != nil {
		return m.IsPathBestExternal
	}
	return false
}

func (m *BgpPath_) GetIsPathAdditionalPath() bool {
	if m != nil {
		return m.IsPathAdditionalPath
	}
	return false
}

func (m *BgpPath_) GetIsPathNexthopDiscarded() bool {
	if m != nil {
		return m.IsPathNexthopDiscarded
	}
	return false
}

func (m *BgpPath_) GetNextHop() *BgpAddrtype {
	if m != nil {
		return m.NextHop
	}
	return nil
}

func (m *BgpPath_) GetNhTunnel() *BgpTeTunnel {
	if m != nil {
		return m.NhTunnel
	}
	return nil
}

func (m *BgpPath_) GetRcvdLabelCount() uint32 {
	if m != nil {
		return m.RcvdLabelCount
	}
	return 0
}

func (m *BgpPath_) GetRcvdLabel() []uint32 {
	if m != nil {
		return m.RcvdLabel
	}
	return nil
}

func (m *BgpPath_) GetHasLocalNetLabel() bool {
	if m != nil {
		return m.HasLocalNetLabel
	}
	return false
}

func (m *BgpPath_) GetLocalLabel() uint32 {
	if m != nil {
		return m.LocalLabel
	}
	return 0
}

func (m *BgpPath_) GetIgpMetric() uint32 {
	if m != nil {
		return m.IgpMetric
	}
	return 0
}

func (m *BgpPath_) GetPathWeight() uint32 {
	if m != nil {
		return m.PathWeight
	}
	return 0
}

func (m *BgpPath_) GetNeighborRouterId() string {
	if m != nil {
		return m.NeighborRouterId
	}
	return ""
}

func (m *BgpPath_) GetHasMdtGroupAddr() bool {
	if m != nil {
		return m.HasMdtGroupAddr
	}
	return false
}

func (m *BgpPath_) GetMdtGroupAddr() *BgpAddrtype {
	if m != nil {
		return m.MdtGroupAddr
	}
	return nil
}

func (m *BgpPath_) GetL2VpnSize() uint32 {
	if m != nil {
		return m.L2VpnSize
	}
	return 0
}

func (m *BgpPath_) GetL2VpnEvpnEsi() string {
	if m != nil {
		return m.L2VpnEvpnEsi
	}
	return ""
}

func (m *BgpPath_) GetHasGwAddr() bool {
	if m != nil {
		return m.HasGwAddr
	}
	return false
}

func (m *BgpPath_) GetGwAddr() *BgpV4V6T {
	if m != nil {
		return m.GwAddr
	}
	return nil
}

func (m *BgpPath_) GetHasNhAddr() bool {
	if m != nil {
		return m.HasNhAddr
	}
	return false
}

func (m *BgpPath_) GetNhAddr() *BgpV4V6T {
	if m != nil {
		return m.NhAddr
	}
	return nil
}

func (m *BgpPath_) GetHasSecondLabel() bool {
	if m != nil {
		return m.HasSecondLabel
	}
	return false
}

func (m *BgpPath_) GetSecondLabel() uint32 {
	if m != nil {
		return m.SecondLabel
	}
	return 0
}

func (m *BgpPath_) GetL2VpnCircuitStatusValue() []uint32 {
	if m != nil {
		return m.L2VpnCircuitStatusValue
	}
	return nil
}

func (m *BgpPath_) GetPathFlapCount() uint32 {
	if m != nil {
		return m.PathFlapCount
	}
	return 0
}

func (m *BgpPath_) GetSecondsSinceFirstFlap() uint32 {
	if m != nil {
		return m.SecondsSinceFirstFlap
	}
	return 0
}

func (m *BgpPath_) GetTimeToUnsuppress() uint32 {
	if m != nil {
		return m.TimeToUnsuppress
	}
	return 0
}

func (m *BgpPath_) GetDampenPenalty() uint32 {
	if m != nil {
		return m.DampenPenalty
	}
	return 0
}

func (m *BgpPath_) GetHalflifeTime() uint32 {
	if m != nil {
		return m.HalflifeTime
	}
	return 0
}

func (m *BgpPath_) GetSuppressPenalty() uint32 {
	if m != nil {
		return m.SuppressPenalty
	}
	return 0
}

func (m *BgpPath_) GetReuseValue() uint32 {
	if m != nil {
		return m.ReuseValue
	}
	return 0
}

func (m *BgpPath_) GetMaximumSuppressTime() uint32 {
	if m != nil {
		return m.MaximumSuppressTime
	}
	return 0
}

func (m *BgpPath_) GetBestPathCompStage() string {
	if m != nil {
		return m.BestPathCompStage
	}
	return ""
}

func (m *BgpPath_) GetBestPathCompWinner() *BgpAddrtype {
	if m != nil {
		return m.BestPathCompWinner
	}
	return nil
}

func (m *BgpPath_) GetBestPathIdCompWinner() uint32 {
	if m != nil {
		return m.BestPathIdCompWinner
	}
	return 0
}

func (m *BgpPath_) GetPathFlags() uint64 {
	if m != nil {
		return m.PathFlags
	}
	return 0
}

func (m *BgpPath_) GetPathImportFlags() uint32 {
	if m != nil {
		return m.PathImportFlags
	}
	return 0
}

func (m *BgpPath_) GetBestPathId() uint32 {
	if m != nil {
		return m.BestPathId
	}
	return 0
}

func (m *BgpPath_) GetLocalPathId() uint32 {
	if m != nil {
		return m.LocalPathId
	}
	return 0
}

func (m *BgpPath_) GetRcvdPathId() uint32 {
	if m != nil {
		return m.RcvdPathId
	}
	return 0
}

func (m *BgpPath_) GetPathTableVersion() uint32 {
	if m != nil {
		return m.PathTableVersion
	}
	return 0
}

func (m *BgpPath_) GetLocalPeersAdvertisedTo() []*BgpAdvinfoType_ {
	if m != nil {
		return m.LocalPeersAdvertisedTo
	}
	return nil
}

func (m *BgpPath_) GetPePeersAdvertisedTo() []*BgpAdvinfoType_ {
	if m != nil {
		return m.PePeersAdvertisedTo
	}
	return nil
}

func (m *BgpPath_) GetBestPathOrrBitfields() []*BgpAdvinfoType_ {
	if m != nil {
		return m.BestPathOrrBitfields
	}
	return nil
}

func (m *BgpPath_) GetAddPathOrrBitfields() []*BgpAdvinfoType_ {
	if m != nil {
		return m.AddPathOrrBitfields
	}
	return nil
}

func (m *BgpPath_) GetAdvertisedtoPe() bool {
	if m != nil {
		return m.AdvertisedtoPe
	}
	return false
}

func (m *BgpPath_) GetRibFailed() bool {
	if m != nil {
		return m.RibFailed
	}
	return false
}

func (m *BgpPath_) GetSnRpkiOriginAsValidity() uint32 {
	if m != nil {
		return m.SnRpkiOriginAsValidity
	}
	return 0
}

func (m *BgpPath_) GetShowRpkiOriginAsValidity() bool {
	if m != nil {
		return m.ShowRpkiOriginAsValidity
	}
	return false
}

func (m *BgpPath_) GetIbgpSignaledValidity() bool {
	if m != nil {
		return m.IbgpSignaledValidity
	}
	return false
}

func (m *BgpPath_) GetRpkiOriginAsValidationDisabled() bool {
	if m != nil {
		return m.RpkiOriginAsValidationDisabled
	}
	return false
}

func (m *BgpPath_) GetAcceptOwnPath() bool {
	if m != nil {
		return m.AcceptOwnPath
	}
	return false
}

func (m *BgpPath_) GetAcceptOwnSelfOriginatedPAth() bool {
	if m != nil {
		return m.AcceptOwnSelfOriginatedPAth
	}
	return false
}

func (m *BgpPath_) GetAigpMetric() uint64 {
	if m != nil {
		return m.AigpMetric
	}
	return 0
}

func (m *BgpPath_) GetMvpnSfsPath() bool {
	if m != nil {
		return m.MvpnSfsPath
	}
	return false
}

func (m *BgpPath_) GetFspecInvalidPath() bool {
	if m != nil {
		return m.FspecInvalidPath
	}
	return false
}

func (m *BgpPath_) GetHasMvpnNbrAddr() bool {
	if m != nil {
		return m.HasMvpnNbrAddr
	}
	return false
}

func (m *BgpPath_) GetMvpnNbrAddr() *BgpAddrtype {
	if m != nil {
		return m.MvpnNbrAddr
	}
	return nil
}

func (m *BgpPath_) GetHasMvpnNexthopAddr() bool {
	if m != nil {
		return m.HasMvpnNexthopAddr
	}
	return false
}

func (m *BgpPath_) GetMvpnNexthopAddr() *BgpAddrtype {
	if m != nil {
		return m.MvpnNexthopAddr
	}
	return nil
}

func (m *BgpPath_) GetHasMvpnPmsi() bool {
	if m != nil {
		return m.HasMvpnPmsi
	}
	return false
}

func (m *BgpPath_) GetMvpnPmsiType() uint32 {
	if m != nil {
		return m.MvpnPmsiType
	}
	return 0
}

func (m *BgpPath_) GetMvpnPmsiFlags() uint32 {
	if m != nil {
		return m.MvpnPmsiFlags
	}
	return 0
}

func (m *BgpPath_) GetMvpnPmsiLabel() uint32 {
	if m != nil {
		return m.MvpnPmsiLabel
	}
	return 0
}

func (m *BgpPath_) GetMvpnPmsiValue() []uint32 {
	if m != nil {
		return m.MvpnPmsiValue
	}
	return nil
}

func (m *BgpPath_) GetHasMvpnExtcomm() bool {
	if m != nil {
		return m.HasMvpnExtcomm
	}
	return false
}

func (m *BgpPath_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpPath_) GetMvpnPathFlags() uint32 {
	if m != nil {
		return m.MvpnPathFlags
	}
	return 0
}

func (m *BgpPath_) GetLocalNh() bool {
	if m != nil {
		return m.LocalNh
	}
	return false
}

func (m *BgpPath_) GetRtSetLimitEnabled() bool {
	if m != nil {
		return m.RtSetLimitEnabled
	}
	return false
}

func (m *BgpPath_) GetPathRtSetId() uint32 {
	if m != nil {
		return m.PathRtSetId
	}
	return 0
}

func (m *BgpPath_) GetPathRtSetRouteCount() uint32 {
	if m != nil {
		return m.PathRtSetRouteCount
	}
	return 0
}

func (m *BgpPath_) GetIsPathAfInstallEligible() bool {
	if m != nil {
		return m.IsPathAfInstallEligible
	}
	return false
}

func (m *BgpPath_) GetIsPermanentPath() bool {
	if m != nil {
		return m.IsPermanentPath
	}
	return false
}

func (m *BgpPath_) GetGracefulShutdown() bool {
	if m != nil {
		return m.GracefulShutdown
	}
	return false
}

func (m *BgpPath_) GetLabeledUnicastSafiPath() bool {
	if m != nil {
		return m.LabeledUnicastSafiPath
	}
	return false
}

func (m *BgpPath_) GetVpnPathFlags() uint32 {
	if m != nil {
		return m.VpnPathFlags
	}
	return 0
}

func (m *BgpPath_) GetHasVpnNexthopAddr() bool {
	if m != nil {
		return m.HasVpnNexthopAddr
	}
	return false
}

func (m *BgpPath_) GetVpnNexthopAddr() *BgpAddrtype {
	if m != nil {
		return m.VpnNexthopAddr
	}
	return nil
}

func (m *BgpPath_) GetIsOrigSrcRdPresent() bool {
	if m != nil {
		return m.IsOrigSrcRdPresent
	}
	return false
}

func (m *BgpPath_) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpPath_) GetRouteDistinguisher() string {
	if m != nil {
		return m.RouteDistinguisher
	}
	return ""
}

func init() {
	proto.RegisterType((*BgpPathBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_path_bag_KEYS")
	proto.RegisterType((*BgpPathBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_path_bag")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.IPV6AddressType")
	proto.RegisterType((*BgpV4V6T)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_v4_v6_t")
	proto.RegisterType((*MACAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.MACAddressType")
	proto.RegisterType((*BgpAttrRnhAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_attr_rnh_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_addrtype")
	proto.RegisterType((*BgpPrefixtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_prefixtype")
	proto.RegisterType((*BgpTeTunnel)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_te_tunnel")
	proto.RegisterType((*BgpPedistlblEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_pedistlbl_entry_")
	proto.RegisterType((*SrSid_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.sr_sid_")
	proto.RegisterType((*BgpBindingSidT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_binding_sid_t")
	proto.RegisterType((*SrExppath_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.sr_exppath_")
	proto.RegisterType((*BgpSrpolicyEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_srpolicy_entry_")
	proto.RegisterType((*BgpTunencapEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_tunencap_entry_")
	proto.RegisterType((*BgpBagLargecomm_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_bag_largecomm_")
	proto.RegisterType((*BgpCommonAttrEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_common_attr_entry_")
	proto.RegisterType((*BgpAttr_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_attr_")
	proto.RegisterType((*BgpAdvinfoType_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_advinfo_type_")
	proto.RegisterType((*BgpPath_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.afs.af.dampenings.dampening.bgp_path_")
}

func init() { proto.RegisterFile("bgp_path_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5c, 0xdd, 0x73, 0x1c, 0xc7,
	0x71, 0xaf, 0x25, 0x25, 0xe0, 0x30, 0xb8, 0xc3, 0xc7, 0xe2, 0x83, 0x4b, 0x4a, 0x94, 0x20, 0x48,
	0xa2, 0x20, 0x91, 0x22, 0x2d, 0x88, 0x86, 0x3e, 0xed, 0x18, 0x04, 0x41, 0xf1, 0x2c, 0x00, 0xbc,
	0xec, 0x51, 0x50, 0x9c, 0xaf, 0xcd, 0xde, 0xee, 0xdc, 0xdd, 0x84, 0x7b, 0xb3, 0xeb, 0x9d, 0xbd,
	0x03, 0x20, 0x3b, 0x5f, 0x55, 0xa9, 0x54, 0x52, 0xe5, 0xaa, 0x54, 0x52, 0x95, 0xc4, 0x71, 0x1c,
	0x27, 0xa9, 0x7c, 0xf8, 0xc1, 0x91, 0xcb, 0xf9, 0xa8, 0x3c, 0xe4, 0x25, 0x0f, 0xc9, 0x5f, 0x91,
	0x97, 0x3c, 0xe7, 0x39, 0xff, 0x40, 0xaa, 0xbb, 0x67, 0x76, 0xf7, 0x3e, 0x18, 0xd1, 0x2f, 0x07,
	0x56, 0x5e, 0x58, 0xbc, 0xee, 0x5f, 0xcf, 0xf4, 0xcc, 0xf4, 0xf4, 0x74, 0xf7, 0xcc, 0x82, 0xd9,
	0xad, 0x4e, 0xe2, 0x25, 0x7e, 0xd6, 0xf5, 0x5a, 0x7e, 0xe7, 0x66, 0x92, 0xc6, 0x59, 0x6c, 0xb7,
	0x03, 0xa1, 0x82, 0xd8, 0x13, 0xb1, 0xf2, 0x4e, 0x53, 0x4f, 0x24, 0x83, 0xdb, 0x1e, 0xa0, 0xe2,
	0x84, 0xa7, 0x37, 0x5b, 0x9d, 0xe4, 0xa6, 0x90, 0x2a, 0xf3, 0x65, 0xc0, 0x55, 0xfe, 0xbf, 0xfc,
	0x3f, 0x9e, 0x1f, 0x64, 0x62, 0xc0, 0x6f, 0x0e, 0xd2, 0xb6, 0x82, 0x7f, 0x6e, 0xfa, 0x6d, 0x75,
	0xd3, 0x6f, 0xdf, 0x0c, 0xfd, 0x5e, 0xc2, 0xa5, 0x90, 0x1d, 0x55, 0xfc, 0x77, 0xf3, 0xdf, 0x2e,
	0xb0, 0xe5, 0x72, 0xf7, 0xde, 0xc7, 0xfb, 0xdf, 0x68, 0xda, 0x2f, 0xb3, 0x5a, 0xde, 0x9a, 0xf4,
	0x7b, 0xdc, 0xb1, 0x36, 0xac, 0xad, 0x39, 0xb7, 0x6a, 0x88, 0x47, 0x7e, 0x8f, 0xdb, 0x97, 0x59,
	0x65, 0x90, 0xb6, 0x89, 0x7f, 0x01, 0xf9, 0xb3, 0x83, 0xb4, 0x8d, 0xac, 0x4b, 0x6c, 0xd6, 0xd7,
	0x9c, 0x8b, 0xc8, 0x99, 0xf1, 0x89, 0xb1, 0xca, 0x9e, 0x4d, 0x79, 0x5f, 0x71, 0xe7, 0x99, 0x0d,
	0x6b, 0xab, 0xe6, 0xd2, 0x0f, 0xdb, 0x61, 0xb3, 0x03, 0x9e, 0x2a, 0x11, 0x4b, 0xe7, 0x59, 0xa4,
	0x9b, 0x9f, 0xf6, 0x02, 0xbb, 0x90, 0x86, 0xce, 0x0c, 0xb6, 0x71, 0x21, 0x0d, 0x01, 0x29, 0x79,
	0x76, 0x12, 0xa7, 0x8f, 0x9c, 0x59, 0xea, 0x52, 0xff, 0xb4, 0xd7, 0xd9, 0x4c, 0xc4, 0x65, 0x27,
	0xeb, 0x3a, 0x15, 0x6c, 0x42, 0xff, 0xb2, 0x5f, 0x67, 0x4b, 0x92, 0x8b, 0x4e, 0xb7, 0x15, 0xa7,
	0x9e, 0x1f, 0x86, 0x29, 0x57, 0xca, 0x99, 0x43, 0xd1, 0x45, 0x43, 0xdf, 0x25, 0xb2, 0xfd, 0x1c,
	0x9b, 0x53, 0x71, 0x3f, 0x0d, 0xb8, 0x97, 0x86, 0x0e, 0x43, 0x4c, 0x85, 0x08, 0x6e, 0x08, 0x43,
	0xc2, 0x39, 0x12, 0xa1, 0x33, 0x4f, 0x1d, 0xc0, 0xcf, 0x7a, 0xb8, 0xf9, 0xef, 0xb3, 0xac, 0x5a,
	0x9e, 0x41, 0x40, 0xca, 0x18, 0x7f, 0x3a, 0xdb, 0x1b, 0xd6, 0x56, 0xc5, 0x9d, 0x91, 0x71, 0xc3,
	0xcf, 0xba, 0xe5, 0x59, 0x79, 0x7b, 0x68, 0x56, 0xfe, 0xc2, 0x9a, 0xa0, 0xe4, 0xed, 0x0d, 0x6b,
	0x6b, 0x7e, 0x3b, 0xbb, 0x39, 0x1d, 0x43, 0x80, 0xb6, 0xb0, 0xeb, 0xec, 0x2c, 0xe1, 0xe3, 0x53,
	0x73, 0x93, 0xad, 0x24, 0x69, 0x1c, 0x70, 0xa5, 0xbc, 0xbc, 0x75, 0x11, 0x3a, 0x5f, 0xc6, 0x99,
	0x58, 0xd6, 0xac, 0xba, 0xe6, 0xd4, 0x43, 0x98, 0xca, 0xc8, 0x6f, 0xf1, 0xc8, 0x8b, 0xe3, 0xd4,
	0xd9, 0xc1, 0x59, 0xa8, 0x20, 0xe1, 0x41, 0x9c, 0xda, 0xd7, 0x99, 0xad, 0x99, 0x5e, 0x9c, 0x7a,
	0x66, 0xe5, 0xdf, 0xc1, 0xb6, 0x16, 0x09, 0xf5, 0x20, 0x3d, 0xd6, 0x16, 0x70, 0x95, 0x31, 0x02,
	0xb7, 0x7d, 0x11, 0x39, 0xef, 0x62, 0x53, 0xd4, 0xf6, 0x3d, 0x5f, 0x44, 0xf6, 0xf7, 0x2d, 0xb6,
	0x44, 0xeb, 0x22, 0xdb, 0x71, 0xda, 0xf3, 0x33, 0x68, 0xea, 0x3d, 0x9c, 0xba, 0x6f, 0x4e, 0x73,
	0xea, 0x50, 0x07, 0x77, 0x11, 0x6d, 0xa2, 0xd0, 0xc4, 0xfe, 0xb1, 0xc5, 0xae, 0xf8, 0x59, 0x96,
	0x8a, 0x56, 0x3f, 0xe3, 0xca, 0xf3, 0xdb, 0x19, 0x4f, 0xbd, 0x24, 0x8e, 0x44, 0x70, 0xe6, 0x09,
	0xe9, 0xbc, 0x3f, 0x7d, 0x45, 0x41, 0x1b, 0xcf, 0xbd, 0x54, 0x28, 0xb5, 0x0b, 0x3a, 0x35, 0x50,
	0xa5, 0xba, 0xb4, 0x6f, 0xb1, 0x95, 0x34, 0xee, 0x67, 0xdc, 0x0b, 0x85, 0xca, 0x84, 0xec, 0xf4,
	0x85, 0xea, 0xf2, 0xd4, 0xf9, 0x00, 0xed, 0xd5, 0x46, 0xd6, 0xdd, 0x32, 0xc7, 0xfe, 0x90, 0x5d,
	0x31, 0x9b, 0x66, 0x82, 0xdc, 0x87, 0x28, 0xe7, 0xe8, 0x5d, 0x34, 0x2e, 0xfd, 0x2a, 0x5b, 0x48,
	0x52, 0xde, 0x16, 0xa7, 0xb9, 0x19, 0x7c, 0x05, 0xcd, 0xa0, 0x46, 0x54, 0x63, 0x04, 0x65, 0x57,
	0xf3, 0xd5, 0x61, 0x57, 0x73, 0x8d, 0x2d, 0xea, 0xfe, 0x73, 0xc4, 0xcf, 0x20, 0xa2, 0x46, 0xe4,
	0x63, 0x8d, 0xbb, 0xca, 0x98, 0x4a, 0x03, 0xb3, 0xff, 0xbe, 0x86, 0x90, 0x39, 0xa4, 0x00, 0x7b,
	0xf3, 0x4d, 0xb6, 0x56, 0x6f, 0x1c, 0xdf, 0x7e, 0xd8, 0x97, 0x92, 0x47, 0xda, 0xea, 0x1f, 0x9e,
	0x25, 0xe8, 0xb1, 0x06, 0x7e, 0xd4, 0x37, 0x2e, 0x90, 0x7e, 0x6c, 0xbe, 0xc1, 0x6c, 0x80, 0x1f,
	0xde, 0x7d, 0xf8, 0xc5, 0xd8, 0x5b, 0xec, 0x92, 0xfb, 0x70, 0x2f, 0x96, 0x2a, 0x4b, 0x7d, 0x21,
	0xb3, 0x2f, 0x16, 0x78, 0x8d, 0x2d, 0xd6, 0x1b, 0xc7, 0x3b, 0x5f, 0x0c, 0xfc, 0x2f, 0x8b, 0xcd,
	0xc3, 0x9a, 0x0e, 0x6e, 0x7b, 0x83, 0x1d, 0x2f, 0xb3, 0x97, 0xd8, 0xc5, 0x88, 0x4b, 0x8d, 0x81,
	0xff, 0xda, 0x2f, 0xb1, 0x2a, 0x9a, 0x93, 0x71, 0x2a, 0xe4, 0xa7, 0xe7, 0x81, 0x66, 0xb6, 0xf6,
	0xf7, 0x2c, 0xc4, 0xec, 0xe4, 0x98, 0x8b, 0x68, 0x94, 0x27, 0xd3, 0x32, 0xca, 0x91, 0xa1, 0xa2,
	0x72, 0x86, 0xb0, 0x79, 0x8d, 0x2d, 0x1c, 0xee, 0xee, 0x7d, 0xf1, 0x4c, 0xfc, 0xd6, 0x45, 0xb6,
	0x92, 0x5b, 0x77, 0x2a, 0xbb, 0x38, 0x98, 0xff, 0x8f, 0x33, 0x62, 0xff, 0x89, 0xc5, 0xe6, 0x7b,
	0x7e, 0x90, 0xeb, 0xf6, 0x0c, 0xea, 0x36, 0x98, 0x96, 0x6e, 0xc3, 0xab, 0xe1, 0xb2, 0x9e, 0x1f,
	0x98, 0xb5, 0x3a, 0x62, 0x0e, 0x74, 0x89, 0x7d, 0xab, 0x54, 0x3b, 0x39, 0xbd, 0x0e, 0xdb, 0x6c,
	0x6d, 0x9c, 0x0e, 0xea, 0xc3, 0xca, 0x54, 0xdd, 0x15, 0x60, 0x36, 0x35, 0x6f, 0xbc, 0xbd, 0x9d,
	0xc7, 0xb4, 0xb7, 0xf3, 0x7f, 0xb5, 0xb7, 0x33, 0xda, 0xde, 0x3b, 0x6c, 0x09, 0xda, 0x8b, 0xb6,
	0x07, 0x89, 0x34, 0xed, 0xbc, 0xcc, 0x6a, 0xc5, 0xef, 0x42, 0xbe, 0x8a, 0x44, 0x23, 0x78, 0x83,
	0xad, 0x1e, 0x6c, 0x1f, 0x37, 0x8e, 0xf6, 0x8f, 0x1b, 0x47, 0x5f, 0x6c, 0x8a, 0x1f, 0xb2, 0xb5,
	0xa2, 0x9b, 0x9e, 0x4a, 0x4e, 0x7e, 0xaa, 0xbe, 0xae, 0xb3, 0x15, 0x58, 0xfe, 0xc3, 0x27, 0xea,
	0x8a, 0xc0, 0xb7, 0x9f, 0x0c, 0xbc, 0xc5, 0x96, 0x0e, 0x9a, 0xde, 0x41, 0xf3, 0x89, 0x1c, 0x56,
	0xbd, 0x31, 0xb8, 0x7d, 0x2f, 0x8a, 0x4f, 0x54, 0xc2, 0x83, 0x27, 0x15, 0xd8, 0x79, 0x72, 0x81,
	0x3f, 0xbb, 0x4a, 0x31, 0x93, 0x09, 0x38, 0x60, 0x9f, 0xfa, 0x6d, 0x61, 0xf6, 0xa9, 0xdf, 0x16,
	0x4f, 0xb2, 0x4f, 0x6f, 0x30, 0x1b, 0x21, 0xbd, 0xc0, 0x57, 0xd9, 0xd0, 0x66, 0x9d, 0x73, 0x97,
	0x80, 0x73, 0x08, 0x8c, 0x51, 0x34, 0x45, 0x13, 0xe5, 0xed, 0xa3, 0xd1, 0x07, 0xc0, 0x30, 0xe8,
	0xcf, 0x2d, 0x86, 0x46, 0xe9, 0x65, 0x78, 0x22, 0xe4, 0xf8, 0x67, 0x71, 0xbb, 0xfd, 0xda, 0x14,
	0x5d, 0xc1, 0xf8, 0x99, 0xe4, 0x2e, 0x43, 0x87, 0x43, 0x64, 0xfb, 0x6f, 0x2c, 0xb6, 0x44, 0x93,
	0x11, 0x16, 0x53, 0x31, 0x83, 0xca, 0x7e, 0x36, 0x4d, 0x65, 0x87, 0x4f, 0x44, 0x77, 0x01, 0x97,
	0x21, 0xcc, 0x17, 0x61, 0x4b, 0x6b, 0x59, 0xde, 0x06, 0x14, 0xc8, 0x23, 0xf2, 0x38, 0xdf, 0x08,
	0xb9, 0xc7, 0x18, 0x24, 0xd2, 0xa7, 0x15, 0xd6, 0xf0, 0x0a, 0xc2, 0x57, 0x34, 0xdc, 0x3f, 0x2c,
	0x58, 0xe3, 0x8e, 0x7b, 0xee, 0x29, 0x72, 0xdc, 0x7f, 0x6b, 0xa1, 0x01, 0xee, 0x8c, 0x98, 0x2b,
	0x3b, 0x5f, 0x15, 0x61, 0x39, 0x76, 0x86, 0xf6, 0x49, 0xae, 0xe7, 0xf0, 0x46, 0x99, 0x7f, 0x0a,
	0xf4, 0x1c, 0xda, 0xa1, 0x7f, 0x45, 0x16, 0xbf, 0x33, 0x64, 0x4b, 0xd5, 0xf3, 0xd5, 0x12, 0x8c,
	0x78, 0xa7, 0x64, 0xc4, 0x7f, 0x6f, 0xb1, 0xf5, 0x5c, 0xc7, 0xe1, 0x75, 0xaf, 0x9d, 0xaf, 0xa6,
	0x2b, 0x5a, 0xd3, 0xa1, 0xa5, 0xff, 0x3b, 0x8b, 0xd9, 0xd1, 0x36, 0x28, 0x3b, 0x48, 0x22, 0x95,
	0xab, 0xba, 0x80, 0xaa, 0x9e, 0x4e, 0x33, 0x4b, 0x29, 0x1f, 0xd2, 0xee, 0x52, 0xb4, 0x7d, 0x4c,
	0x2a, 0x19, 0x45, 0xff, 0xc9, 0x62, 0x6b, 0x69, 0xe6, 0x05, 0x79, 0x50, 0x9d, 0xeb, 0xba, 0x88,
	0xba, 0xfe, 0xc6, 0xb4, 0x74, 0x7d, 0x4c, 0x60, 0xef, 0xae, 0xa4, 0xd9, 0x18, 0xc3, 0xfe, 0xa1,
	0xc5, 0x96, 0xc9, 0x03, 0x94, 0x4d, 0x76, 0x09, 0x35, 0xfe, 0xd6, 0x34, 0x0d, 0x61, 0x24, 0x60,
	0x70, 0x17, 0xd1, 0x09, 0x14, 0x51, 0x88, 0xd1, 0xf4, 0xf6, 0xb0, 0xa6, 0xcb, 0x53, 0xd7, 0xf4,
	0xf6, 0x24, 0x4d, 0x6f, 0x97, 0x35, 0xfd, 0x91, 0xc5, 0x56, 0xc8, 0x64, 0x3d, 0x5e, 0xd6, 0xd5,
	0x46, 0x5d, 0xbf, 0x3d, 0x2d, 0x5d, 0x27, 0xc5, 0x87, 0xda, 0x6e, 0xf7, 0x4b, 0xda, 0x7e, 0xdf,
	0x62, 0xb5, 0x48, 0x79, 0xa5, 0xbd, 0xb5, 0x32, 0xdd, 0xbd, 0x35, 0x1a, 0x01, 0xba, 0xf3, 0x91,
	0x3a, 0x50, 0x25, 0x77, 0x65, 0x26, 0x33, 0x0f, 0x5c, 0x41, 0xc9, 0xd5, 0xe9, 0x06, 0x3d, 0x13,
	0xc3, 0x67, 0x3d, 0x9b, 0x87, 0x2a, 0x39, 0x29, 0x7b, 0x01, 0xd4, 0xa2, 0xad, 0x03, 0xcf, 0x5c,
	0xe1, 0xb5, 0xe9, 0x7a, 0x81, 0xc7, 0x44, 0xcb, 0x14, 0xa4, 0x8c, 0x30, 0x8c, 0xd6, 0x3b, 0xe3,
	0x5a, 0xaf, 0x4f, 0x5d, 0xeb, 0x9d, 0xc7, 0x69, 0x3d, 0xca, 0xb0, 0xff, 0xd5, 0x62, 0x97, 0xf3,
	0xc8, 0x6d, 0x4c, 0xf3, 0x4b, 0x4f, 0xc7, 0x7c, 0xaf, 0xeb, 0xa0, 0xf0, 0x31, 0xca, 0xef, 0x4c,
	0x56, 0xde, 0x79, 0x3a, 0xa6, 0x7d, 0x5d, 0x9f, 0xc8, 0xa3, 0xca, 0xff, 0x0b, 0xc5, 0x10, 0x90,
	0x3b, 0x7b, 0x23, 0xc9, 0xee, 0x65, 0xd4, 0xfc, 0x37, 0xad, 0x69, 0x6e, 0xcc, 0x49, 0xe9, 0xbd,
	0xc9, 0xdf, 0x1b, 0xe5, 0x7c, 0xdb, 0x28, 0xbe, 0x33, 0x41, 0xf1, 0x2b, 0xe7, 0xa3, 0xf8, 0xce,
	0x44, 0xc5, 0x77, 0x46, 0x14, 0xdf, 0xfc, 0x0f, 0x8b, 0x2d, 0x60, 0x4d, 0x17, 0x6b, 0x90, 0x98,
	0x9f, 0x7e, 0xc7, 0x62, 0x33, 0xf4, 0x13, 0x73, 0xd4, 0xf3, 0xaa, 0xcb, 0x6b, 0x1d, 0xec, 0x97,
	0x99, 0x2e, 0x90, 0x7a, 0xfa, 0xce, 0xe3, 0x02, 0x56, 0x4d, 0xab, 0x44, 0x3c, 0x40, 0xda, 0xe6,
	0xe7, 0x17, 0x59, 0x0d, 0xa4, 0x33, 0xae, 0x93, 0x58, 0xfb, 0x45, 0x36, 0xaf, 0xd3, 0x59, 0x68,
	0x4d, 0x67, 0xdb, 0x8c, 0x48, 0x98, 0xad, 0x17, 0x80, 0xd2, 0xad, 0x8e, 0x06, 0x60, 0x15, 0x75,
	0x83, 0x55, 0x85, 0x32, 0x39, 0x71, 0x3f, 0xc1, 0x64, 0xbb, 0xe2, 0x32, 0xa1, 0x28, 0x1b, 0xfd,
	0x24, 0xb1, 0x6f, 0xb1, 0xd5, 0x02, 0x21, 0x64, 0x3b, 0xf6, 0x54, 0xe6, 0x47, 0x74, 0xe1, 0x53,
	0x71, 0x97, 0x0d, 0xb2, 0x2e, 0xdb, 0x71, 0x13, 0x18, 0xf6, 0x97, 0xca, 0x02, 0x29, 0xef, 0x08,
	0x95, 0xf1, 0x94, 0x87, 0x98, 0x69, 0x57, 0x5c, 0xdb, 0x08, 0xb8, 0x39, 0x07, 0x32, 0x79, 0x0d,
	0x1f, 0xec, 0x78, 0x29, 0xff, 0x66, 0x5f, 0x00, 0x7e, 0x06, 0xf1, 0x4b, 0xc4, 0x39, 0xde, 0x71,
	0x35, 0xdd, 0x7e, 0x83, 0x2d, 0x17, 0x68, 0x2e, 0xfd, 0x56, 0xc4, 0x43, 0xcc, 0x39, 0x2b, 0xee,
	0xa2, 0x01, 0xef, 0x13, 0x19, 0xe6, 0xb5, 0x25, 0x64, 0x28, 0x64, 0x87, 0xb2, 0x1f, 0x7d, 0x97,
	0x54, 0xd5, 0x44, 0xcc, 0x3f, 0x20, 0x87, 0x35, 0xc3, 0x6b, 0x7b, 0x5d, 0x5f, 0x86, 0x11, 0xc7,
	0x44, 0xb3, 0xe6, 0x2e, 0x10, 0xbd, 0xde, 0xbe, 0x8f, 0x54, 0x50, 0x34, 0x82, 0x98, 0x3f, 0x9f,
	0xaf, 0xd0, 0xcf, 0x38, 0x66, 0x7c, 0x35, 0x77, 0x09, 0x38, 0x66, 0xd6, 0x80, 0xbe, 0xf9, 0x31,
	0x5b, 0x45, 0xab, 0xe3, 0xa1, 0x50, 0x59, 0xd4, 0x8a, 0x3c, 0x2e, 0xb3, 0xf4, 0xcc, 0xb3, 0xaf,
	0x32, 0x96, 0xf0, 0xa1, 0xa2, 0xd1, 0x9c, 0x3b, 0x97, 0x70, 0xb3, 0xcd, 0x56, 0xd9, 0xb3, 0xa4,
	0x2b, 0xd9, 0x00, 0xfd, 0xd8, 0xfc, 0x1f, 0x8b, 0xcd, 0xaa, 0xd4, 0x53, 0x22, 0xf4, 0x6c, 0x9b,
	0x3d, 0x53, 0x5a, 0x6f, 0xfc, 0xff, 0x64, 0xa9, 0xb1, 0xa2, 0xcb, 0xc5, 0x27, 0x28, 0x8e, 0x3e,
	0xf3, 0x14, 0x95, 0x8b, 0xff, 0xd3, 0xa2, 0xdb, 0x4c, 0xb3, 0x88, 0x30, 0xfc, 0xec, 0xa7, 0x18,
	0xff, 0x53, 0x5d, 0x0b, 0xff, 0x07, 0x8b, 0xcd, 0xab, 0xd4, 0xe3, 0xa7, 0x09, 0x5e, 0x36, 0xd9,
	0xeb, 0x6c, 0xe6, 0x84, 0x8b, 0x4e, 0x37, 0xc3, 0x81, 0xd5, 0x5c, 0xfd, 0xcb, 0xfe, 0x3d, 0x58,
	0x7a, 0xde, 0xe9, 0x71, 0x99, 0x39, 0x17, 0x36, 0x2e, 0x6e, 0xcd, 0x6f, 0xc7, 0xd3, 0xd2, 0x5f,
	0x5b, 0x9c, 0x6b, 0xfa, 0xdf, 0xfc, 0xed, 0x67, 0xa9, 0x2e, 0x9f, 0xfb, 0x5d, 0x6d, 0xd3, 0xc5,
	0xa6, 0xe4, 0x32, 0xf0, 0x93, 0xc2, 0x1f, 0xd5, 0xcc, 0xa6, 0xdc, 0x07, 0x3a, 0x3a, 0xa5, 0xef,
	0x59, 0x6c, 0xbe, 0xb4, 0xa0, 0xb8, 0x62, 0xf3, 0xdb, 0x67, 0xd3, 0x74, 0xc0, 0x43, 0xf6, 0xe4,
	0x32, 0xfd, 0xb3, 0x29, 0x42, 0xfb, 0x73, 0x8b, 0xad, 0xf9, 0x51, 0x14, 0x07, 0x7e, 0xc6, 0xc3,
	0x32, 0x4e, 0x9b, 0xce, 0x39, 0xaa, 0xb9, 0x92, 0xeb, 0x75, 0xa7, 0xd0, 0xf7, 0x05, 0xc6, 0xe0,
	0x90, 0xe0, 0x29, 0x97, 0x81, 0xb9, 0x85, 0x2f, 0x51, 0x60, 0x5f, 0xa8, 0x0c, 0xbc, 0x14, 0xb9,
	0x5f, 0xfa, 0x01, 0x7e, 0x11, 0xfc, 0x2c, 0x57, 0x99, 0x47, 0x5c, 0xba, 0x91, 0xaf, 0x6a, 0x62,
	0x13, 0x41, 0xdf, 0xb5, 0x58, 0x4d, 0xaf, 0xbb, 0x17, 0x09, 0x95, 0x29, 0x67, 0x16, 0xad, 0x4f,
	0x4d, 0xd1, 0xfa, 0xcc, 0xe6, 0x70, 0xab, 0x5a, 0x93, 0x03, 0x50, 0x64, 0xf3, 0x27, 0x16, 0x99,
	0x61, 0xd6, 0x97, 0x64, 0x6f, 0xda, 0x0c, 0xbf, 0x6b, 0xb1, 0xb9, 0x3c, 0x3a, 0xd1, 0x27, 0xfb,
	0xb7, 0xa6, 0xb9, 0x62, 0x23, 0xfb, 0xc2, 0xad, 0x28, 0x1d, 0x8b, 0x6c, 0x9e, 0xd1, 0xb3, 0x90,
	0x96, 0x0f, 0x47, 0x51, 0xda, 0xe1, 0x41, 0xdc, 0xeb, 0x79, 0xe0, 0xa0, 0x3b, 0x51, 0xdc, 0xf2,
	0x23, 0xcf, 0x0f, 0x7b, 0x42, 0xea, 0x2d, 0x33, 0x4f, 0xb4, 0x5d, 0x20, 0xc1, 0x19, 0x0e, 0xcb,
	0x1e, 0x79, 0xa1, 0x9f, 0xf9, 0x6f, 0x69, 0xff, 0xc6, 0x90, 0x74, 0x17, 0x28, 0xc3, 0x80, 0x6d,
	0xb4, 0xd3, 0x32, 0x60, 0x7b, 0xf3, 0x77, 0x6d, 0xb6, 0x0e, 0x7d, 0x43, 0x97, 0xb1, 0xa4, 0x3b,
	0xb5, 0x62, 0xdf, 0x0a, 0xe5, 0xf5, 0x78, 0x96, 0x8a, 0x00, 0xe2, 0x23, 0x05, 0x4e, 0xc6, 0xa2,
	0xc3, 0x54, 0xa8, 0x43, 0xa4, 0x37, 0x88, 0x6c, 0xbf, 0xc5, 0xd6, 0x84, 0xf2, 0xa8, 0x2b, 0xb0,
	0xb0, 0x1c, 0x7f, 0xc1, 0x9c, 0xec, 0x07, 0xc0, 0x6b, 0xa4, 0xbc, 0x6d, 0x44, 0xbe, 0xc2, 0x9e,
	0x13, 0xca, 0xf3, 0xb3, 0xb8, 0x27, 0x02, 0xcf, 0xef, 0x74, 0x52, 0xde, 0xf1, 0x33, 0x9e, 0x0b,
	0x52, 0xb4, 0xe1, 0x08, 0xb5, 0x8b, 0x88, 0x5d, 0x03, 0x30, 0xe2, 0xdb, 0xd8, 0xa3, 0x91, 0x8b,
	0xd3, 0x5c, 0x90, 0x82, 0x8f, 0x15, 0xa1, 0x76, 0x73, 0x9e, 0x91, 0xa1, 0x11, 0xc5, 0xa9, 0xe8,
	0x08, 0x99, 0xe3, 0x9f, 0x35, 0x23, 0x7a, 0x80, 0x74, 0x83, 0xbd, 0xce, 0x6c, 0x68, 0x5f, 0xd1,
	0x6d, 0xbf, 0x01, 0xcf, 0x18, 0xf0, 0xae, 0x6a, 0xf8, 0x59, 0xd7, 0x80, 0x29, 0xae, 0x81, 0x39,
	0xec, 0x4b, 0x91, 0x9d, 0xe5, 0xf0, 0x59, 0x33, 0xfa, 0x3d, 0xc3, 0x32, 0x12, 0xbb, 0xec, 0xaa,
	0x50, 0x1e, 0x3f, 0xcd, 0xb8, 0x0c, 0x79, 0x38, 0x41, 0xb4, 0x82, 0xa2, 0x57, 0x84, 0xda, 0xd7,
	0x98, 0xb1, 0x26, 0x5e, 0x61, 0x0b, 0x42, 0x79, 0x4a, 0xf9, 0xb9, 0xcc, 0x1c, 0xca, 0x54, 0x85,
	0x6a, 0x2a, 0x7f, 0x54, 0x35, 0x29, 0x79, 0x50, 0x9e, 0x26, 0x56, 0xa8, 0xa6, 0x59, 0x46, 0xe2,
	0x1a, 0x5b, 0x14, 0xca, 0x4b, 0x7a, 0x4a, 0xe4, 0xe0, 0x79, 0x04, 0xd7, 0x84, 0x6a, 0xf4, 0x94,
	0x30, 0xb8, 0x2d, 0xb6, 0x04, 0xb8, 0x24, 0xe9, 0x25, 0x39, 0xb0, 0x8a, 0xc0, 0x05, 0xa1, 0x1a,
	0x40, 0x1e, 0x6e, 0xd1, 0x17, 0x9d, 0x02, 0x58, 0x33, 0x2d, 0xee, 0x8a, 0x4e, 0x8e, 0xbb, 0xcf,
	0x5e, 0x82, 0x16, 0x47, 0x1e, 0x16, 0xe8, 0xe2, 0xb4, 0x91, 0x5c, 0x40, 0xc9, 0xab, 0x42, 0x35,
	0x86, 0xdf, 0x17, 0x60, 0xc0, 0x66, 0x5a, 0xfa, 0x32, 0xbb, 0x24, 0xa8, 0xf6, 0x62, 0xde, 0x3e,
	0xe4, 0xf2, 0x8b, 0x28, 0xbf, 0x2a, 0xd4, 0x81, 0xda, 0x35, 0x4c, 0x23, 0xf6, 0x36, 0x5b, 0x07,
	0x31, 0xec, 0x4f, 0xc8, 0x90, 0x9f, 0xe6, 0x52, 0x4b, 0xc6, 0xaa, 0xb0, 0x9b, 0x3a, 0xf0, 0x8c,
	0xd0, 0x8b, 0x6c, 0xbe, 0x78, 0xd0, 0x43, 0x95, 0xb3, 0x9a, 0xcb, 0xf2, 0x57, 0x35, 0x0a, 0x3c,
	0x6a, 0xc9, 0x4e, 0x7d, 0x2a, 0x58, 0xd5, 0xdc, 0x6a, 0x41, 0xdc, 0x55, 0xf6, 0x9b, 0xcc, 0x2e,
	0x83, 0x4a, 0x25, 0xa3, 0x39, 0x77, 0xb9, 0x84, 0xd4, 0xa1, 0xd9, 0x3a, 0x9b, 0xa1, 0x9d, 0x89,
	0x05, 0x9b, 0x9a, 0xab, 0x7f, 0xd9, 0xaf, 0xb3, 0xa5, 0x62, 0x17, 0x6a, 0xcf, 0xbf, 0xa6, 0x5f,
	0xdb, 0x98, 0x1d, 0xa8, 0xdd, 0xff, 0x3a, 0x9b, 0xa1, 0xad, 0x80, 0xc5, 0x88, 0x9a, 0xab, 0x7f,
	0xe1, 0xd3, 0x25, 0x32, 0x7b, 0xcc, 0xf5, 0xe7, 0xdc, 0x19, 0x1f, 0x8d, 0xdd, 0x7e, 0x9e, 0xcd,
	0xe5, 0x76, 0xea, 0x38, 0x1b, 0x17, 0xb7, 0x6a, 0x6e, 0x41, 0xb0, 0xdf, 0x65, 0xce, 0x04, 0x73,
	0x6e, 0x47, 0x7e, 0x87, 0x92, 0xd7, 0x9a, 0xbb, 0xce, 0x47, 0x4d, 0xf9, 0x1e, 0x70, 0x61, 0xe8,
	0xe3, 0x92, 0xce, 0x15, 0xec, 0x60, 0x79, 0x4c, 0x06, 0xe0, 0x7d, 0xf9, 0x48, 0xc6, 0x27, 0xb2,
	0x58, 0x5d, 0xe5, 0x3c, 0x47, 0x70, 0xcd, 0xc9, 0x57, 0x56, 0x81, 0x1b, 0x0d, 0xa2, 0x3e, 0xa4,
	0x13, 0x78, 0x52, 0x39, 0xcf, 0x23, 0x70, 0x5e, 0xd3, 0xe0, 0xcc, 0x80, 0x83, 0x92, 0xc6, 0x0e,
	0x33, 0xec, 0x5c, 0xa5, 0x4c, 0xa8, 0xa0, 0xd8, 0x37, 0xb0, 0x54, 0x96, 0x79, 0xc9, 0xe0, 0x6d,
	0x4f, 0x71, 0xa5, 0x44, 0x2c, 0x3d, 0x11, 0x3a, 0x2f, 0xe8, 0x79, 0xdd, 0x7e, 0xd8, 0x18, 0xbc,
	0xdd, 0x24, 0x7a, 0x3d, 0xb4, 0x5f, 0x65, 0x8b, 0x39, 0x3a, 0x88, 0xe3, 0x47, 0x82, 0x3b, 0x2f,
	0x62, 0x9f, 0x55, 0x42, 0xee, 0x21, 0xcd, 0x7e, 0x95, 0x2d, 0x14, 0xbb, 0x12, 0x63, 0xa2, 0x0d,
	0x7a, 0x0e, 0x93, 0x53, 0x31, 0x22, 0x7a, 0x8d, 0x2d, 0x16, 0x30, 0xba, 0x5e, 0x7d, 0x09, 0x5b,
	0x2b, 0xa4, 0x8f, 0x81, 0x0a, 0xce, 0x0d, 0x77, 0x98, 0x76, 0xd8, 0x04, 0xdd, 0xdc, 0xb0, 0xb6,
	0x9e, 0x71, 0x17, 0x81, 0x41, 0x0e, 0x9b, 0xb0, 0xcf, 0xb1, 0x39, 0xdc, 0xdf, 0xd8, 0xed, 0xcb,
	0xd8, 0x6d, 0x05, 0x08, 0xd8, 0x23, 0xe4, 0x20, 0xc0, 0xa4, 0xa5, 0x7b, 0x05, 0xb9, 0x08, 0xa7,
	0xd5, 0x32, 0x6c, 0x0a, 0xa9, 0x5f, 0x2d, 0xd8, 0x94, 0x31, 0x19, 0x36, 0xf5, 0x7f, 0x8d, 0xac,
	0x04, 0x28, 0xd4, 0x33, 0xb0, 0x93, 0x9e, 0x97, 0x10, 0xfb, 0x35, 0x2d, 0x9d, 0xf4, 0x1a, 0x48,
	0xb0, 0xff, 0xd1, 0x62, 0xeb, 0x93, 0xf7, 0xbf, 0xb3, 0x85, 0x01, 0xc6, 0xb7, 0xa7, 0xfa, 0xd0,
	0x6b, 0x24, 0x3d, 0x73, 0x57, 0x93, 0x09, 0x3e, 0x07, 0x36, 0x8c, 0xf6, 0x34, 0xce, 0xeb, 0x38,
	0xde, 0x99, 0x08, 0x5d, 0x0b, 0x78, 0xc8, 0xb2, 0x2f, 0x41, 0xc4, 0x1b, 0xb4, 0x78, 0x51, 0xee,
	0x46, 0x10, 0xf9, 0x03, 0x8b, 0x55, 0xcb, 0x41, 0xb2, 0x73, 0x7d, 0xfa, 0xf1, 0xc9, 0x48, 0xc0,
	0xe4, 0xce, 0x97, 0x82, 0x73, 0xfb, 0x03, 0x76, 0x05, 0x3d, 0x63, 0xda, 0xe1, 0x13, 0x0e, 0xab,
	0x1b, 0xe8, 0x1d, 0x2f, 0x81, 0x77, 0x4c, 0x3b, 0x7c, 0xec, 0xa4, 0xfa, 0x6b, 0x8b, 0x2d, 0x8e,
	0x88, 0x3a, 0x6f, 0xe2, 0x72, 0x7e, 0x36, 0xd5, 0x90, 0x79, 0x28, 0xbe, 0x82, 0x35, 0x28, 0x2b,
	0xbb, 0xf9, 0xe7, 0x35, 0x36, 0x97, 0xbf, 0x2b, 0xb2, 0x5f, 0xc3, 0xd3, 0x4d, 0x3b, 0xc2, 0x6d,
	0xaf, 0x75, 0x96, 0x71, 0x1d, 0xfc, 0xd4, 0xcc, 0xe9, 0xbf, 0x7d, 0xe7, 0x2c, 0xe3, 0xf6, 0x1e,
	0x7b, 0x01, 0x80, 0x49, 0x12, 0x89, 0x00, 0x1f, 0x02, 0x7a, 0x10, 0xa6, 0x9c, 0xf8, 0x67, 0x23,
	0x31, 0xd0, 0x73, 0x42, 0xed, 0x16, 0xa0, 0x8f, 0x08, 0x63, 0x66, 0xe8, 0x4d, 0xb6, 0x22, 0xc8,
	0x84, 0x3c, 0xc5, 0xb3, 0x91, 0x20, 0x68, 0x49, 0xa0, 0x39, 0x35, 0x79, 0x66, 0xe0, 0xb7, 0xd8,
	0x2a, 0xc0, 0x70, 0xbf, 0x0b, 0xd9, 0x8a, 0xfb, 0x32, 0xf4, 0x44, 0x27, 0x31, 0x85, 0x17, 0xc5,
	0x33, 0x38, 0x56, 0xeb, 0xc4, 0xa9, 0x77, 0x12, 0x38, 0x0f, 0xc7, 0x04, 0xf4, 0xf9, 0x41, 0xf1,
	0xcf, 0xea, 0xb0, 0x0c, 0x39, 0x0b, 0x1d, 0x62, 0xa4, 0x72, 0x34, 0x00, 0xaa, 0x0a, 0xe5, 0xca,
	0xee, 0x70, 0x58, 0x95, 0x8a, 0x56, 0x19, 0x38, 0x6b, 0x22, 0x25, 0x17, 0xe9, 0xa5, 0x70, 0xa4,
	0x38, 0x92, 0x1f, 0xf1, 0x33, 0x4f, 0xf6, 0x7b, 0x2d, 0x9e, 0xea, 0xe2, 0x8b, 0x9d, 0xf3, 0x3e,
	0xe6, 0x67, 0x47, 0xc8, 0xb1, 0xdf, 0x63, 0x97, 0x0b, 0x09, 0x7c, 0x43, 0xec, 0x09, 0x38, 0x27,
	0x64, 0x5b, 0x74, 0x74, 0xc4, 0xb3, 0x9e, 0x03, 0x5c, 0xe0, 0xd7, 0xc3, 0x3d, 0xe4, 0xda, 0xef,
	0x4e, 0x14, 0xed, 0xf9, 0xa7, 0xe0, 0xbd, 0xa9, 0x34, 0xb3, 0x36, 0x2a, 0x7a, 0xe8, 0x9f, 0xd6,
	0x43, 0x98, 0xaf, 0x09, 0x92, 0x32, 0x0e, 0xb9, 0x7e, 0x11, 0xbc, 0x3a, 0x2a, 0x77, 0x14, 0x87,
	0x1c, 0x76, 0xc9, 0x24, 0x5d, 0xfb, 0x69, 0x6a, 0x82, 0xa3, 0x5a, 0xe9, 0x39, 0xa6, 0x51, 0x96,
	0xd8, 0x8f, 0xe9, 0xf3, 0x11, 0x3f, 0xa3, 0x0b, 0xe4, 0x09, 0x7d, 0x7e, 0xcc, 0xcf, 0x94, 0x7d,
	0x87, 0xbd, 0x30, 0x41, 0x2c, 0xe5, 0x41, 0x3c, 0xe0, 0x60, 0x4d, 0x01, 0x46, 0x4c, 0x35, 0xf7,
	0xca, 0xa8, 0xb4, 0x4b, 0x90, 0x26, 0x0f, 0xec, 0xeb, 0x6c, 0x79, 0x90, 0xc8, 0x91, 0xf7, 0x9c,
	0x8b, 0x54, 0xbb, 0x1a, 0x24, 0x72, 0xf8, 0x1d, 0xe7, 0x8f, 0x2c, 0xb6, 0x5c, 0x4a, 0x17, 0xf4,
	0xf9, 0x4b, 0x57, 0x9b, 0xbf, 0x3e, 0xcd, 0xfd, 0x3c, 0x9e, 0xb3, 0xb8, 0x4b, 0x44, 0x2b, 0x1d,
	0xff, 0x7f, 0x6a, 0xb1, 0x8a, 0xd9, 0x57, 0xfa, 0x56, 0xf3, 0xbc, 0x95, 0x9c, 0xf5, 0x69, 0x37,
	0xdb, 0x97, 0x59, 0x05, 0xb6, 0x0c, 0x9e, 0xc2, 0x14, 0x13, 0xce, 0xa6, 0xb2, 0x8b, 0x87, 0xf0,
	0x25, 0x06, 0xff, 0xf5, 0x22, 0x2e, 0x31, 0x06, 0xac, 0xb9, 0x33, 0xa9, 0xec, 0x1e, 0x70, 0x69,
	0x6f, 0xb0, 0x6a, 0xfe, 0xe6, 0x11, 0xb8, 0x14, 0xfe, 0xb1, 0x54, 0x76, 0x21, 0x34, 0x04, 0xc4,
	0x1f, 0x5b, 0xd4, 0x2c, 0x40, 0xf4, 0xed, 0xd8, 0xb7, 0xa6, 0xfe, 0xea, 0xb8, 0x78, 0x97, 0x89,
	0x63, 0x02, 0xdd, 0x20, 0x12, 0xd3, 0x4e, 0x22, 0xf3, 0x5b, 0x11, 0xd7, 0x61, 0xe7, 0x3c, 0xd1,
	0x1e, 0x02, 0x09, 0xc2, 0x03, 0x0d, 0xe9, 0xf9, 0x81, 0x0e, 0x3f, 0xe7, 0x88, 0x72, 0xe8, 0x07,
	0xf6, 0x1f, 0x58, 0x4c, 0xff, 0xf2, 0x44, 0xa2, 0x2f, 0x73, 0xce, 0xa7, 0x3a, 0x5f, 0x21, 0x35,
	0xea, 0x09, 0xc4, 0x71, 0xf4, 0x7f, 0x91, 0xe8, 0x71, 0x51, 0xb4, 0x5b, 0x33, 0xd4, 0xd1, 0x91,
	0x0d, 0xa4, 0xc0, 0x4b, 0x91, 0x9a, 0x19, 0xd9, 0xb1, 0x14, 0xa5, 0xb9, 0xa1, 0xf3, 0xff, 0xb9,
	0xf2, 0xdc, 0xe0, 0x11, 0xbc, 0xf9, 0x3b, 0xfa, 0xf3, 0x0d, 0x3f, 0x1c, 0x60, 0xad, 0x1d, 0xf4,
	0xf0, 0x20, 0xfb, 0x10, 0xca, 0x33, 0xd9, 0x86, 0x3e, 0xa2, 0x98, 0x50, 0x47, 0x9a, 0x32, 0xf9,
	0x83, 0x83, 0x0b, 0x4f, 0xd9, 0x07, 0x07, 0x54, 0x2e, 0xf7, 0x3a, 0x69, 0xdc, 0x4f, 0xcc, 0x91,
	0x40, 0xc5, 0x8a, 0x65, 0x62, 0x7d, 0x04, 0x1c, 0x3a, 0x11, 0x36, 0xff, 0xfb, 0x1d, 0x3a, 0xa8,
	0xa9, 0x34, 0xfa, 0x47, 0x16, 0x63, 0xc5, 0x0d, 0x8e, 0x2e, 0xec, 0x0c, 0xa6, 0x1a, 0x26, 0xe6,
	0x77, 0x47, 0x2e, 0xe8, 0xd5, 0xa0, 0x7b, 0x9b, 0xa7, 0x7f, 0xde, 0xc1, 0x24, 0xf1, 0x1d, 0x3f,
	0x3a, 0xa0, 0x8b, 0x7a, 0xb3, 0x01, 0x05, 0x5d, 0xd0, 0x26, 0xab, 0x09, 0x5d, 0xfe, 0x18, 0xf8,
	0x91, 0x08, 0x75, 0x74, 0x31, 0x2f, 0x30, 0xf8, 0x39, 0x06, 0x92, 0x0e, 0x10, 0x10, 0x83, 0xbd,
	0x9a, 0xab, 0x9c, 0x2a, 0x81, 0xee, 0x22, 0x4d, 0xdf, 0x13, 0x21, 0xaa, 0x2b, 0x54, 0x16, 0xa7,
	0x67, 0x5e, 0x97, 0x47, 0xe6, 0x1a, 0x67, 0x99, 0xb0, 0xf7, 0x89, 0x73, 0x9f, 0x47, 0xa1, 0x2e,
	0x2d, 0x08, 0x99, 0xf1, 0x54, 0x42, 0x2e, 0x0b, 0xb9, 0xe8, 0xac, 0x29, 0x2d, 0xd4, 0x35, 0x19,
	0x73, 0x52, 0xba, 0xa4, 0x6a, 0x71, 0x95, 0x11, 0xaa, 0x62, 0xec, 0xff, 0x0e, 0x57, 0x99, 0xce,
	0x5a, 0x19, 0x05, 0x72, 0x00, 0xd2, 0x01, 0x43, 0x05, 0x42, 0x38, 0x40, 0x40, 0xb2, 0x26, 0x94,
	0xa7, 0x92, 0x47, 0x69, 0x0e, 0x61, 0x79, 0x15, 0x25, 0x79, 0x94, 0x6a, 0x98, 0xae, 0x89, 0xf8,
	0x69, 0x26, 0xfc, 0x88, 0x60, 0x45, 0x4d, 0x84, 0xa8, 0x88, 0x7b, 0x9f, 0x5d, 0x2e, 0x55, 0xa5,
	0x20, 0x18, 0x54, 0xfd, 0x04, 0x42, 0x22, 0xc5, 0x43, 0x5d, 0x1c, 0xb9, 0x54, 0x54, 0xa6, 0x44,
	0x2c, 0x9b, 0x39, 0x1b, 0x1f, 0xad, 0x2a, 0x4f, 0xf4, 0x92, 0x38, 0xcd, 0x68, 0x36, 0x25, 0x0f,
	0x75, 0xa1, 0x64, 0x49, 0xa8, 0x3a, 0x32, 0xee, 0x6a, 0xba, 0x0e, 0xba, 0x34, 0x5a, 0xf5, 0x55,
	0xc2, 0x03, 0x53, 0x1b, 0x59, 0x34, 0xe0, 0x26, 0x91, 0x75, 0x59, 0x03, 0xe7, 0x5f, 0xc6, 0x19,
	0x38, 0x10, 0x9e, 0x66, 0x02, 0x54, 0x5a, 0x34, 0x65, 0x0d, 0x98, 0xaa, 0xa3, 0x38, 0xdb, 0xcd,
	0x59, 0xf6, 0x5d, 0xb6, 0x31, 0x59, 0xc8, 0xcb, 0x62, 0x8f, 0xb7, 0x3a, 0x5e, 0xa2, 0x74, 0x55,
	0xe4, 0xca, 0x04, 0xf1, 0x87, 0xf1, 0x7e, 0xab, 0xd3, 0x50, 0xf6, 0x7e, 0xd1, 0x4a, 0xa9, 0x05,
	0x2a, 0x51, 0xf8, 0xca, 0x8b, 0x65, 0x74, 0x86, 0xa7, 0x32, 0xc6, 0xc7, 0xd0, 0x4a, 0xd1, 0x04,
	0x56, 0x0c, 0x77, 0xd5, 0x03, 0x19, 0x9d, 0xd9, 0x5f, 0x65, 0xcf, 0x9b, 0x66, 0xda, 0x69, 0xdc,
	0xd3, 0xdf, 0x9f, 0xa4, 0xbc, 0x1d, 0x61, 0x06, 0x8c, 0xa7, 0x27, 0x56, 0x0b, 0xa1, 0x89, 0x7b,
	0x69, 0xdc, 0xc3, 0xef, 0x4f, 0x5c, 0xc3, 0xd7, 0xf5, 0x49, 0x94, 0x4f, 0x79, 0xc0, 0xc5, 0x80,
	0x87, 0xd4, 0xf7, 0x8a, 0x29, 0x83, 0x81, 0xa0, 0xab, 0x59, 0xd8, 0xe5, 0xd7, 0xb0, 0x42, 0x97,
	0xa3, 0xf3, 0x89, 0xe8, 0xc5, 0xa1, 0x68, 0x0b, 0x1e, 0xe2, 0xc9, 0x5b, 0x71, 0x2f, 0x0b, 0x65,
	0xc4, 0xf4, 0x24, 0x1c, 0x6a, 0x80, 0x2e, 0x42, 0xa1, 0x20, 0x0e, 0x38, 0x3a, 0xf3, 0xe8, 0x3b,
	0x95, 0x10, 0x8f, 0x65, 0x2c, 0x42, 0x81, 0xcc, 0x01, 0x31, 0x9b, 0xc4, 0x1b, 0x13, 0x2b, 0x8a,
	0xa3, 0x78, 0x62, 0x0e, 0x8b, 0xe5, 0x75, 0xd1, 0xb1, 0x29, 0xd2, 0x1f, 0xcb, 0x61, 0x00, 0xe2,
	0xcb, 0x10, 0x0f, 0xd3, 0xa1, 0x29, 0x3a, 0x22, 0xc0, 0x1e, 0xf1, 0x4d, 0xf1, 0xad, 0x98, 0x62,
	0x4c, 0x7e, 0x75, 0x5c, 0x69, 0x1a, 0x71, 0xf2, 0xe2, 0x9b, 0x99, 0xe7, 0x12, 0xca, 0xb4, 0xa4,
	0x0b, 0x83, 0xf8, 0xa5, 0x16, 0xda, 0x21, 0x0f, 0xf1, 0x4c, 0xa4, 0xc2, 0xa0, 0x9f, 0x75, 0xeb,
	0x9a, 0xaa, 0x8b, 0x93, 0x7a, 0x59, 0x4c, 0xc1, 0x85, 0x87, 0x78, 0x3c, 0x96, 0x56, 0xa5, 0xe0,
	0xe8, 0x6c, 0x6b, 0x4c, 0xc2, 0x53, 0x99, 0xc8, 0x82, 0xae, 0x90, 0x1d, 0x3c, 0x39, 0x73, 0x6b,
	0x2a, 0xcb, 0x36, 0x0d, 0x44, 0xe7, 0x76, 0xe4, 0xd9, 0x12, 0x49, 0x86, 0xf0, 0x7c, 0xb1, 0x9d,
	0xb3, 0xee, 0x71, 0x22, 0xd1, 0x06, 0xee, 0xb2, 0x17, 0x87, 0xe6, 0x04, 0xb2, 0x0e, 0x1e, 0xf2,
	0x94, 0xb6, 0x76, 0xc2, 0x39, 0x55, 0x8b, 0xf2, 0xee, 0x60, 0x46, 0xf6, 0xca, 0x98, 0x06, 0xe7,
	0xa9, 0x7d, 0xbb, 0x58, 0x50, 0x75, 0x26, 0x03, 0x1e, 0x7a, 0x27, 0x02, 0xe6, 0xa6, 0x93, 0x60,
	0x09, 0x29, 0xdf, 0x7f, 0x4d, 0x64, 0x7e, 0x2a, 0xb2, 0x2e, 0xa4, 0x6c, 0xb4, 0xc1, 0x51, 0xaa,
	0xd7, 0x8f, 0x32, 0x81, 0xee, 0xed, 0x45, 0xb3, 0xc1, 0x01, 0x7f, 0x68, 0xc8, 0x65, 0xf3, 0x16,
	0xbd, 0xc4, 0x0b, 0x7c, 0x19, 0x0a, 0xbc, 0x7f, 0xde, 0x28, 0x4f, 0x64, 0xbd, 0x97, 0xec, 0x19,
	0x4e, 0xd9, 0xbb, 0xd3, 0xa5, 0xfd, 0x4b, 0x65, 0xef, 0x4e, 0xd7, 0xf5, 0x3b, 0xcc, 0x29, 0x2c,
	0x51, 0x76, 0xbc, 0x08, 0x77, 0x02, 0xc1, 0x37, 0x87, 0x4d, 0x51, 0x76, 0x0e, 0x80, 0x49, 0x72,
	0xa5, 0x53, 0xa1, 0xe5, 0x07, 0x8f, 0xfa, 0x09, 0xd6, 0x98, 0xf2, 0x53, 0xe1, 0x0e, 0xd2, 0xec,
	0x7b, 0x85, 0x6b, 0x20, 0x94, 0x97, 0xa4, 0x71, 0xc6, 0x83, 0xac, 0x34, 0xde, 0x57, 0x50, 0xee,
	0xf9, 0xb2, 0x5c, 0x83, 0x40, 0x13, 0x07, 0x8f, 0xe7, 0x00, 0x3f, 0xa5, 0xf3, 0x01, 0x6b, 0x53,
	0xf9, 0xe0, 0xc1, 0x3d, 0xef, 0x6b, 0x4e, 0x79, 0x8b, 0xf9, 0x61, 0x28, 0x60, 0xa5, 0xcc, 0x31,
	0x73, 0xad, 0x3c, 0xae, 0xdd, 0x9c, 0x89, 0x47, 0xc9, 0x7b, 0xe8, 0xdd, 0xc9, 0x13, 0xf0, 0xd3,
	0xac, 0x1b, 0x27, 0x90, 0x32, 0x05, 0x7e, 0x1a, 0xf2, 0x10, 0x6b, 0x59, 0x15, 0x77, 0x5d, 0xfb,
	0x42, 0x62, 0xdf, 0x35, 0x5c, 0xfb, 0xf7, 0x2d, 0x56, 0x01, 0x19, 0xaf, 0x1b, 0x27, 0xce, 0xd6,
	0x39, 0x46, 0x01, 0xb3, 0xa0, 0xc5, 0xfd, 0x38, 0xb1, 0xff, 0xd0, 0x62, 0x73, 0x10, 0x8a, 0x63,
	0x91, 0xc7, 0x79, 0x1d, 0x55, 0xea, 0x4f, 0xb5, 0xde, 0x64, 0xde, 0xaa, 0xb8, 0x15, 0xd9, 0xa5,
	0xd7, 0x11, 0xe0, 0x3a, 0xd2, 0x60, 0x10, 0xea, 0x12, 0x7c, 0x10, 0xf7, 0x65, 0xe6, 0xbc, 0x41,
	0xef, 0x2d, 0x80, 0x8e, 0xf5, 0xb6, 0x3d, 0xa0, 0x62, 0xf0, 0x92, 0x23, 0x9d, 0xeb, 0x54, 0x67,
	0xcc, 0x31, 0xf6, 0x9b, 0x6c, 0xa5, 0xeb, 0x9b, 0x1b, 0x29, 0xc9, 0x33, 0x8d, 0xa3, 0x42, 0xd5,
	0x52, 0xd7, 0xa7, 0xfb, 0xa8, 0x23, 0x9e, 0x11, 0x3c, 0xbf, 0x27, 0x23, 0xd8, 0x9b, 0xa5, 0x7b,
	0xb2, 0xbc, 0xac, 0x59, 0x14, 0x57, 0x9d, 0x9b, 0x14, 0xbe, 0xe7, 0x55, 0x55, 0x90, 0x47, 0xb3,
	0xd0, 0x97, 0xf4, 0xb7, 0xf4, 0x5d, 0xab, 0x9f, 0x75, 0x3f, 0xa5, 0x8b, 0xfa, 0x1b, 0xcc, 0xce,
	0x83, 0x41, 0x3c, 0xbc, 0x52, 0x4f, 0x84, 0xce, 0x97, 0xe8, 0x8b, 0x14, 0xc3, 0xc1, 0x43, 0x2b,
	0xad, 0x87, 0xf6, 0x75, 0x66, 0x83, 0xf6, 0xbd, 0x30, 0xd3, 0x21, 0x31, 0xe6, 0x72, 0x6f, 0xd1,
	0xe6, 0xef, 0xfa, 0xea, 0x30, 0xcc, 0x30, 0x20, 0xc6, 0xb4, 0xea, 0x7b, 0x16, 0x5b, 0x18, 0x41,
	0x6e, 0x9f, 0xa3, 0x81, 0x55, 0x7b, 0x65, 0xe5, 0x5e, 0x60, 0xf3, 0xfa, 0x95, 0xa9, 0x12, 0x9f,
	0xd1, 0xb7, 0xd0, 0x35, 0x77, 0x0e, 0x9f, 0x77, 0x36, 0xc5, 0x67, 0x5c, 0x17, 0xcb, 0xf3, 0x27,
	0xbd, 0x5c, 0x09, 0xfc, 0x18, 0x7a, 0xce, 0xad, 0xe6, 0x0f, 0x6a, 0xf7, 0x95, 0x80, 0x66, 0x60,
	0x42, 0x3a, 0xf4, 0x42, 0x14, 0xbf, 0x45, 0xae, 0xb8, 0x73, 0x5d, 0x5f, 0x7d, 0x84, 0x2f, 0x44,
	0xed, 0xef, 0x58, 0x6c, 0xd6, 0x30, 0x77, 0x70, 0xf0, 0x6a, 0x9a, 0x83, 0xd7, 0x1f, 0x65, 0xba,
	0x33, 0x9d, 0x13, 0x33, 0x6a, 0x50, 0xd7, 0x24, 0xe1, 0xef, 0xe4, 0xea, 0x1e, 0x75, 0x73, 0x75,
	0x0d, 0xf3, 0xdd, 0x73, 0x54, 0x57, 0x27, 0xe6, 0x5b, 0x0c, 0x76, 0x84, 0xa7, 0x78, 0x10, 0x4b,
	0xb3, 0xa3, 0xde, 0xa3, 0x03, 0xbb, 0xeb, 0xab, 0x26, 0x92, 0x0f, 0xcc, 0xa3, 0xa1, 0x21, 0xd4,
	0xfb, 0x94, 0xa6, 0xaa, 0x12, 0xe4, 0x03, 0x76, 0x85, 0x1e, 0xf4, 0x06, 0x22, 0x0d, 0xfa, 0x82,
	0x5e, 0x11, 0xf4, 0x95, 0xbe, 0x10, 0xf8, 0x00, 0x37, 0xea, 0x25, 0x44, 0xec, 0x11, 0xa0, 0x89,
	0x7c, 0xba, 0x1e, 0xb8, 0xc6, 0x16, 0xe9, 0xb4, 0x8d, 0xfc, 0x44, 0x6f, 0xff, 0x0f, 0xf5, 0x47,
	0xc2, 0x70, 0xbc, 0x46, 0x7e, 0x42, 0xbb, 0xff, 0x1d, 0xe6, 0x50, 0x9f, 0xca, 0x53, 0x02, 0xa6,
	0xa0, 0x2d, 0x52, 0x95, 0xa1, 0x98, 0xfe, 0xaa, 0x78, 0x4d, 0xf3, 0x9b, 0xc0, 0xbe, 0x07, 0x5c,
	0x90, 0xc6, 0xf7, 0x64, 0xa2, 0xc7, 0x21, 0x86, 0xed, 0x4b, 0x13, 0x9b, 0xe3, 0x77, 0xc6, 0x35,
	0x77, 0x09, 0x38, 0x0f, 0xe3, 0x4f, 0x72, 0x3a, 0xe4, 0xf6, 0x34, 0x73, 0x5e, 0xc2, 0xa5, 0x1f,
	0x65, 0x67, 0xf8, 0xbd, 0x71, 0xcd, 0xad, 0x11, 0xb5, 0x41, 0x44, 0xfb, 0x65, 0x56, 0xeb, 0xfa,
	0x51, 0x3b, 0x12, 0x6d, 0xee, 0x41, 0x1b, 0xf8, 0xc9, 0x71, 0xcd, 0xad, 0x1a, 0xe2, 0x43, 0xd1,
	0xe3, 0xf6, 0xeb, 0x6c, 0xc9, 0xb4, 0x9b, 0xb7, 0xb6, 0x4b, 0x37, 0x48, 0x86, 0x6e, 0xda, 0x7b,
	0x91, 0xcd, 0x53, 0x21, 0x8f, 0xe6, 0xec, 0x8e, 0x2e, 0xf1, 0x00, 0x89, 0xa6, 0x69, 0x9b, 0xad,
	0xf5, 0xfc, 0x53, 0xd1, 0xeb, 0xf7, 0xf2, 0xfc, 0x82, 0x3a, 0xde, 0x43, 0xe8, 0x8a, 0x66, 0x9a,
	0xe4, 0x02, 0xfb, 0xbf, 0xc5, 0x56, 0xf3, 0x34, 0x09, 0xe2, 0xb9, 0x04, 0x16, 0xa6, 0xc3, 0x9d,
	0xbb, 0x74, 0xc5, 0xd8, 0xd2, 0xf9, 0xd2, 0x5e, 0xdc, 0x4b, 0x9a, 0xc0, 0xb0, 0x7f, 0x68, 0xb1,
	0xb5, 0x11, 0x89, 0x13, 0x21, 0x25, 0x4f, 0x9d, 0xfd, 0x73, 0x74, 0x2f, 0x76, 0x59, 0xd1, 0x4f,
	0x51, 0x1f, 0x88, 0x53, 0x0a, 0x45, 0xb1, 0x38, 0x5c, 0xe8, 0x7a, 0x8f, 0x4a, 0xa7, 0x46, 0xaa,
	0x1e, 0x96, 0xe4, 0xae, 0x32, 0x66, 0xac, 0xad, 0xa3, 0x9c, 0x8f, 0xf0, 0xae, 0x6c, 0x4e, 0x1b,
	0x5a, 0x47, 0x41, 0x04, 0x56, 0x0a, 0x62, 0x35, 0xea, 0x3e, 0x2d, 0x59, 0x92, 0x87, 0xb1, 0x84,
	0xdd, 0x60, 0xd5, 0xb2, 0x0a, 0x4e, 0x9d, 0xd6, 0xac, 0xe8, 0x16, 0x02, 0x2e, 0x7d, 0x33, 0xab,
	0x21, 0x5f, 0xa7, 0xbd, 0x43, 0xd7, 0xb2, 0x84, 0xd9, 0x60, 0x55, 0x3c, 0xd4, 0x0c, 0xe4, 0x63,
	0xbd, 0xf2, 0xc1, 0x20, 0xd4, 0x88, 0x1b, 0xcc, 0x46, 0x26, 0x56, 0x9a, 0xf2, 0x0f, 0xe9, 0x0f,
	0xc8, 0x7e, 0x81, 0x83, 0xd5, 0x26, 0xf3, 0x2d, 0xfd, 0x3f, 0x5b, 0xec, 0xb2, 0xee, 0x94, 0xf3,
	0x54, 0x0d, 0x27, 0x71, 0xce, 0x21, 0x5e, 0xc1, 0x9c, 0x4d, 0x77, 0x19, 0x4b, 0xb5, 0x2b, 0x77,
	0x9d, 0xc6, 0x0e, 0xaa, 0x95, 0x33, 0x47, 0xfb, 0xc7, 0x74, 0x0b, 0x38, 0x49, 0xe7, 0xa3, 0xf3,
	0xd6, 0x79, 0x25, 0xe1, 0xe3, 0x0a, 0xff, 0xc4, 0x62, 0x97, 0x8a, 0xe5, 0x8f, 0xd3, 0xd4, 0x6b,
	0x89, 0xac, 0x2d, 0x78, 0x14, 0x2a, 0xe7, 0xc1, 0x79, 0x6b, 0x9c, 0xdb, 0xfe, 0x83, 0x34, 0xbd,
	0x63, 0xd4, 0xc2, 0x39, 0xf6, 0xc3, 0x70, 0x92, 0xc6, 0x8d, 0x73, 0x9f, 0x63, 0x3f, 0x0c, 0xc7,
	0x14, 0x7e, 0x8d, 0x2d, 0x16, 0xa6, 0x90, 0xc5, 0x5e, 0xc2, 0x9d, 0x9f, 0xa5, 0x33, 0xaa, 0x4c,
	0x6e, 0x98, 0x4a, 0x2b, 0xfe, 0x0d, 0x11, 0x1e, 0x3a, 0x2e, 0x9d, 0xbd, 0xa9, 0x68, 0xdd, 0x43,
	0x82, 0xfd, 0x3e, 0xbb, 0xa2, 0xa4, 0x97, 0x26, 0x8f, 0x84, 0x79, 0x09, 0xe4, 0x2b, 0x2a, 0x70,
	0x89, 0xec, 0xcc, 0x69, 0xd2, 0x4b, 0x05, 0x25, 0xdd, 0xe4, 0x91, 0xa0, 0x17, 0x41, 0xbb, 0xea,
	0x58, 0x73, 0x21, 0xc7, 0x56, 0xdd, 0xf8, 0xe4, 0xb1, 0xd2, 0x0f, 0x29, 0xc7, 0x06, 0xcc, 0x44,
	0xf9, 0xdb, 0x6c, 0x5d, 0xe0, 0x53, 0x30, 0xd1, 0x91, 0x7e, 0xc4, 0xc3, 0x42, 0xf2, 0x13, 0x9d,
	0x76, 0xb4, 0x3a, 0x49, 0x53, 0x33, 0x73, 0xa9, 0xaf, 0xb3, 0xcd, 0x49, 0x1d, 0x52, 0x12, 0x1a,
	0x0a, 0x45, 0xcf, 0x9c, 0x8f, 0xb1, 0x85, 0x17, 0xd2, 0xd1, 0x7e, 0x11, 0x76, 0x57, 0xa3, 0xe0,
	0x80, 0xf5, 0x83, 0x80, 0x27, 0x99, 0x17, 0x9f, 0x48, 0xca, 0x78, 0x3e, 0xa5, 0xcc, 0x97, 0xc8,
	0x0f, 0x4e, 0x24, 0xa6, 0x3a, 0xfb, 0x6c, 0xa3, 0x84, 0x53, 0x3c, 0x6a, 0x7b, 0xa5, 0x6c, 0x3b,
	0xf1, 0x40, 0xf0, 0xe7, 0x28, 0xf5, 0xcd, 0x05, 0x9b, 0x3c, 0x6a, 0x3f, 0xc8, 0x41, 0x8d, 0xdd,
	0xac, 0x0b, 0x27, 0x59, 0xe9, 0x51, 0x82, 0xf3, 0x0d, 0x74, 0xb1, 0xac, 0x78, 0x8e, 0x00, 0x5e,
	0x11, 0xbf, 0x3b, 0x53, 0x6d, 0xfd, 0xe4, 0xe4, 0xe7, 0x29, 0x0d, 0x05, 0x62, 0xb3, 0x4d, 0xef,
	0x4e, 0x6e, 0x30, 0xbb, 0x8d, 0x5f, 0x71, 0x08, 0x89, 0x03, 0x27, 0xe0, 0x2f, 0x50, 0x28, 0x8f,
	0x9c, 0x3a, 0x31, 0x10, 0xfd, 0x3a, 0x5b, 0xc6, 0xd8, 0x19, 0x5a, 0x95, 0x2d, 0x2a, 0xbd, 0x3a,
	0xbf, 0x98, 0x47, 0x33, 0x87, 0x83, 0x44, 0x1e, 0xb5, 0xb0, 0x06, 0x8a, 0xaf, 0x18, 0x87, 0x71,
	0xbf, 0x74, 0x8e, 0x27, 0x1b, 0x8e, 0xd9, 0xa8, 0xf6, 0x16, 0x5b, 0x2b, 0x46, 0xa1, 0x73, 0x4d,
	0xd4, 0xf0, 0x97, 0x29, 0xa9, 0x35, 0x23, 0x21, 0x16, 0x8a, 0xfc, 0xa5, 0xc5, 0x96, 0xc7, 0xf1,
	0xde, 0x79, 0x56, 0x9c, 0x7b, 0x23, 0x2a, 0x6e, 0x42, 0xa0, 0xa4, 0x47, 0x95, 0xf4, 0x94, 0x70,
	0x7e, 0x85, 0x56, 0x5b, 0x8f, 0xa6, 0xd1, 0x53, 0xc2, 0x7e, 0x85, 0x2d, 0xe4, 0x7c, 0xaa, 0x4c,
	0xfb, 0x14, 0x4d, 0xf5, 0x34, 0x02, 0x8b, 0xd3, 0xd7, 0xd8, 0x62, 0x81, 0xa2, 0x93, 0xb9, 0x45,
	0xa1, 0x99, 0x81, 0xd1, 0xb9, 0x3c, 0x84, 0xa3, 0x98, 0x35, 0x18, 0xc6, 0x51, 0xd4, 0x3a, 0x84,
	0xa3, 0xb0, 0x2b, 0xc4, 0x50, 0x35, 0xc7, 0x51, 0xe4, 0xa5, 0x43, 0x65, 0xc4, 0xf2, 0xd3, 0x2c,
	0x88, 0x7b, 0x3d, 0x87, 0x0f, 0x19, 0xd7, 0x3e, 0x51, 0x1f, 0xf3, 0xaa, 0xa9, 0xfd, 0xb8, 0x57,
	0x4d, 0xb9, 0x02, 0x45, 0x40, 0xd2, 0x29, 0x29, 0x9a, 0x07, 0x25, 0x97, 0x59, 0x45, 0x27, 0xb5,
	0x5d, 0xa7, 0x8b, 0x1d, 0xcf, 0xe2, 0xef, 0xa3, 0x2e, 0x44, 0x78, 0x69, 0x86, 0xef, 0x07, 0x22,
	0xd1, 0x13, 0x59, 0xfe, 0x01, 0x84, 0xa0, 0x32, 0x7b, 0x9a, 0x35, 0x79, 0x76, 0x00, 0x9c, 0xe2,
	0x13, 0x88, 0x05, 0xaa, 0xa4, 0x91, 0x94, 0x08, 0x9d, 0x5f, 0xa5, 0x98, 0x04, 0xa8, 0x2e, 0xc0,
	0xeb, 0xa1, 0x7d, 0x9b, 0x5d, 0x2a, 0x83, 0xa8, 0xf2, 0x4a, 0xa1, 0xf9, 0x23, 0x8a, 0x36, 0x73,
	0x34, 0xe6, 0xaf, 0x14, 0xa0, 0x7f, 0x88, 0xaf, 0x3b, 0xa9, 0xc2, 0xd2, 0xa6, 0xbf, 0x23, 0x15,
	0x45, 0x1e, 0x8f, 0x44, 0x47, 0xb4, 0x22, 0xee, 0x44, 0xa6, 0x14, 0x8e, 0x55, 0x96, 0x76, 0x9d,
	0xf8, 0xfb, 0x9a, 0x6d, 0x6a, 0x5f, 0x3c, 0xed, 0xf9, 0x92, 0x4b, 0x5d, 0xda, 0xef, 0xe5, 0xb5,
	0x2f, 0x43, 0xc7, 0xfd, 0x7e, 0x9d, 0x2d, 0x77, 0x52, 0x3f, 0xe0, 0xed, 0x7e, 0xe4, 0xa9, 0x6e,
	0x3f, 0x0b, 0xe3, 0x13, 0xe9, 0x48, 0x72, 0x0e, 0x86, 0xd1, 0xd4, 0x74, 0xfb, 0x3d, 0x76, 0x19,
	0x8d, 0x80, 0x87, 0x5e, 0x5f, 0x0a, 0xfc, 0x48, 0x5b, 0xf9, 0x6d, 0x41, 0x1d, 0xc4, 0x54, 0xc1,
	0xd1, 0x80, 0x4f, 0x88, 0xdf, 0xf4, 0xdb, 0x02, 0xfb, 0x79, 0x85, 0x2d, 0x8c, 0xac, 0x4f, 0x42,
	0x76, 0x39, 0xb4, 0x3c, 0xb7, 0xd8, 0x2a, 0xd8, 0xc7, 0xd8, 0x36, 0xfc, 0x26, 0xad, 0x41, 0xd7,
	0x57, 0xc7, 0xc3, 0x5b, 0xe2, 0x07, 0x16, 0x5b, 0x1a, 0x43, 0xa7, 0xe7, 0xb8, 0x69, 0x17, 0x46,
	0xf6, 0xec, 0x36, 0x5e, 0x1e, 0x80, 0xf3, 0xf7, 0x54, 0x1a, 0x78, 0x69, 0x98, 0x3f, 0xf1, 0x50,
	0xa6, 0xbe, 0x06, 0x4e, 0xbf, 0x99, 0x06, 0x6e, 0x68, 0x5e, 0x79, 0x94, 0xfe, 0xfa, 0x59, 0x36,
	0xf4, 0xd7, 0xcf, 0x1e, 0xf3, 0x27, 0xa7, 0xfa, 0x8f, 0xfb, 0x93, 0x53, 0xad, 0x19, 0xfc, 0x13,
	0x79, 0x6f, 0xff, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0xca, 0x7f, 0x6d, 0x38, 0x4f, 0x00,
	0x00,
}
