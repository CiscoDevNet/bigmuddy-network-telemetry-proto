// Code generated by protoc-gen-go.
// source: bgp_updfilter_nbr_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_vrfs_vrf_update_inbound_filter_neighbors_update_inbound_filter_neighbor is a generated protocol buffer package.

It is generated from these files:
	bgp_updfilter_nbr_bag.proto

It has these top-level messages:
	BgpUpdfilterNbrBag_KEYS
	BgpUpdfilterNbrBag
	BgpTimespec
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	BgpIpv4SrpolicyAddrT
	BgpIpv6SrpolicyAddrT
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
	BgpUpdfilterAttrfAttrBag
	BgpUpdfilterElemBag
	BgpUpdfilterMsgBag
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_active_vrfs_vrf_update_inbound_filter_neighbors_update_inbound_filter_neighbor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP Update filtering Neighbor information
type BgpUpdfilterNbrBag_KEYS struct {
	InstanceName    string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	VrfName         string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
}

func (m *BgpUpdfilterNbrBag_KEYS) Reset()                    { *m = BgpUpdfilterNbrBag_KEYS{} }
func (m *BgpUpdfilterNbrBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdfilterNbrBag_KEYS) ProtoMessage()               {}
func (*BgpUpdfilterNbrBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpUpdfilterNbrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpUpdfilterNbrBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpUpdfilterNbrBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

type BgpUpdfilterNbrBag struct {
	// VRF Name
	UpdateVrfName string `protobuf:"bytes,50,opt,name=update_vrf_name,json=updateVrfName" json:"update_vrf_name,omitempty"`
	// Neighbor address
	UpdateNeighborAddress *BgpAddrtype `protobuf:"bytes,51,opt,name=update_neighbor_address,json=updateNeighborAddress" json:"update_neighbor_address,omitempty"`
	// Logging is enabled
	UpdateFilterLoggingEnabled bool `protobuf:"varint,52,opt,name=update_filter_logging_enabled,json=updateFilterLoggingEnabled" json:"update_filter_logging_enabled,omitempty"`
	// Configured Filtered message buffer count
	ConfiguredUpdateFilterMessageBufferCount uint32 `protobuf:"varint,53,opt,name=configured_update_filter_message_buffer_count,json=configuredUpdateFilterMessageBufferCount" json:"configured_update_filter_message_buffer_count,omitempty"`
	// Operational Filtered messages buffer count
	OperationalUpdateFilterMessageBufferCount uint32 `protobuf:"varint,54,opt,name=operational_update_filter_message_buffer_count,json=operationalUpdateFilterMessageBufferCount" json:"operational_update_filter_message_buffer_count,omitempty"`
	// Indicates if the message buffers are circular
	UpdateFilterMessageBufferCircular bool `protobuf:"varint,55,opt,name=update_filter_message_buffer_circular,json=updateFilterMessageBufferCircular" json:"update_filter_message_buffer_circular,omitempty"`
	// Update attribute-filter group name
	UpdateAttributeFilterGroupName string `protobuf:"bytes,56,opt,name=update_attribute_filter_group_name,json=updateAttributeFilterGroupName" json:"update_attribute_filter_group_name,omitempty"`
	// Attribute filtering is enabled
	OperationalUpdateAttributeFilteringEnabled bool `protobuf:"varint,57,opt,name=operational_update_attribute_filtering_enabled,json=operationalUpdateAttributeFilteringEnabled" json:"operational_update_attribute_filtering_enabled,omitempty"`
	// Attribute filtering is enabled for the current message being parsed
	MessageUpdateAttributeFilteringEnabled bool `protobuf:"varint,58,opt,name=message_update_attribute_filtering_enabled,json=messageUpdateAttributeFilteringEnabled" json:"message_update_attribute_filtering_enabled,omitempty"`
	// Total update messages count
	TotalFilterUpdateMessageCount uint32 `protobuf:"varint,59,opt,name=total_filter_update_message_count,json=totalFilterUpdateMessageCount" json:"total_filter_update_message_count,omitempty"`
	// Total update messages count since session establishment
	EstablishmentTotalFilterUpdateMessageCount uint32 `protobuf:"varint,60,opt,name=establishment_total_filter_update_message_count,json=establishmentTotalFilterUpdateMessageCount" json:"establishment_total_filter_update_message_count,omitempty"`
	// Filtered messages count
	UpdateFilteredMessageCount uint32 `protobuf:"varint,61,opt,name=update_filtered_message_count,json=updateFilteredMessageCount" json:"update_filtered_message_count,omitempty"`
	// Filtered messages count since session establishment
	EstablishmentUpdateFilteredMessageCount uint32 `protobuf:"varint,62,opt,name=establishment_update_filtered_message_count,json=establishmentUpdateFilteredMessageCount" json:"establishment_update_filtered_message_count,omitempty"`
	// First filtered message received time: time elapsed since 00:00:00 UTC, January 1, 1970
	FirstUpdateFilteredTimestamp *BgpTimespec `protobuf:"bytes,63,opt,name=first_update_filtered_timestamp,json=firstUpdateFilteredTimestamp" json:"first_update_filtered_timestamp,omitempty"`
	// Last filtered message received time: time elapsed since 00:00:00 UTC, January 1, 1970
	LastUpdateFilteredTimestamp *BgpTimespec `protobuf:"bytes,64,opt,name=last_update_filtered_timestamp,json=lastUpdateFilteredTimestamp" json:"last_update_filtered_timestamp,omitempty"`
	// Time since last filtered message received event (in seconds)
	LastUpdateFilteredAge uint32 `protobuf:"varint,65,opt,name=last_update_filtered_age,json=lastUpdateFilteredAge" json:"last_update_filtered_age,omitempty"`
	// List of attributes that can be filtered
	UpdateAttributeFilterAttributesList []*BgpUpdfilterAttrfAttrBag `protobuf:"bytes,66,rep,name=update_attribute_filter_attributes_list,json=updateAttributeFilterAttributesList" json:"update_attribute_filter_attributes_list,omitempty"`
	// List of filtered messages
	UpdateFilterMessageList []*BgpUpdfilterMsgBag `protobuf:"bytes,67,rep,name=update_filter_message_list,json=updateFilterMessageList" json:"update_filter_message_list,omitempty"`
	// Filtered messages list count
	UpdateFilterMessageListCount uint32 `protobuf:"varint,68,opt,name=update_filter_message_list_count,json=updateFilterMessageListCount" json:"update_filter_message_list_count,omitempty"`
}

func (m *BgpUpdfilterNbrBag) Reset()                    { *m = BgpUpdfilterNbrBag{} }
func (m *BgpUpdfilterNbrBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdfilterNbrBag) ProtoMessage()               {}
func (*BgpUpdfilterNbrBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpUpdfilterNbrBag) GetUpdateVrfName() string {
	if m != nil {
		return m.UpdateVrfName
	}
	return ""
}

func (m *BgpUpdfilterNbrBag) GetUpdateNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.UpdateNeighborAddress
	}
	return nil
}

func (m *BgpUpdfilterNbrBag) GetUpdateFilterLoggingEnabled() bool {
	if m != nil {
		return m.UpdateFilterLoggingEnabled
	}
	return false
}

func (m *BgpUpdfilterNbrBag) GetConfiguredUpdateFilterMessageBufferCount() uint32 {
	if m != nil {
		return m.ConfiguredUpdateFilterMessageBufferCount
	}
	return 0
}

func (m *BgpUpdfilterNbrBag) GetOperationalUpdateFilterMessageBufferCount() uint32 {
	if m != nil {
		return m.OperationalUpdateFilterMessageBufferCount
	}
	return 0
}

func (m *BgpUpdfilterNbrBag) GetUpdateFilterMessageBufferCircular() bool {
	if m != nil {
		return m.UpdateFilterMessageBufferCircular
	}
	return false
}

func (m *BgpUpdfilterNbrBag) GetUpdateAttributeFilterGroupName() string {
	if m != nil {
		return m.UpdateAttributeFilterGroupName
	}
	return ""
}

func (m *BgpUpdfilterNbrBag) GetOperationalUpdateAttributeFilteringEnabled() bool {
	if m != nil {
		return m.OperationalUpdateAttributeFilteringEnabled
	}
	return false
}

func (m *BgpUpdfilterNbrBag) GetMessageUpdateAttributeFilteringEnabled() bool {
	if m != nil {
		return m.MessageUpdateAttributeFilteringEnabled
	}
	return false
}

func (m *BgpUpdfilterNbrBag) GetTotalFilterUpdateMessageCount() uint32 {
	if m != nil {
		return m.TotalFilterUpdateMessageCount
	}
	return 0
}

func (m *BgpUpdfilterNbrBag) GetEstablishmentTotalFilterUpdateMessageCount() uint32 {
	if m != nil {
		return m.EstablishmentTotalFilterUpdateMessageCount
	}
	return 0
}

func (m *BgpUpdfilterNbrBag) GetUpdateFilteredMessageCount() uint32 {
	if m != nil {
		return m.UpdateFilteredMessageCount
	}
	return 0
}

func (m *BgpUpdfilterNbrBag) GetEstablishmentUpdateFilteredMessageCount() uint32 {
	if m != nil {
		return m.EstablishmentUpdateFilteredMessageCount
	}
	return 0
}

func (m *BgpUpdfilterNbrBag) GetFirstUpdateFilteredTimestamp() *BgpTimespec {
	if m != nil {
		return m.FirstUpdateFilteredTimestamp
	}
	return nil
}

func (m *BgpUpdfilterNbrBag) GetLastUpdateFilteredTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateFilteredTimestamp
	}
	return nil
}

func (m *BgpUpdfilterNbrBag) GetLastUpdateFilteredAge() uint32 {
	if m != nil {
		return m.LastUpdateFilteredAge
	}
	return 0
}

func (m *BgpUpdfilterNbrBag) GetUpdateAttributeFilterAttributesList() []*BgpUpdfilterAttrfAttrBag {
	if m != nil {
		return m.UpdateAttributeFilterAttributesList
	}
	return nil
}

func (m *BgpUpdfilterNbrBag) GetUpdateFilterMessageList() []*BgpUpdfilterMsgBag {
	if m != nil {
		return m.UpdateFilterMessageList
	}
	return nil
}

func (m *BgpUpdfilterNbrBag) GetUpdateFilterMessageListCount() uint32 {
	if m != nil {
		return m.UpdateFilterMessageListCount
	}
	return 0
}

type BgpTimespec struct {
	// Seconds part of time value
	Seconds uint32 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	// Nanoseconds part of time value
	Nanoseconds uint32 `protobuf:"varint,2,opt,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (m *BgpTimespec) Reset()                    { *m = BgpTimespec{} }
func (m *BgpTimespec) String() string            { return proto.CompactTextString(m) }
func (*BgpTimespec) ProtoMessage()               {}
func (*BgpTimespec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BgpTimespec) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *BgpTimespec) GetNanoseconds() uint32 {
	if m != nil {
		return m.Nanoseconds
	}
	return 0
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()                    { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()                    { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
	// IPV4 Policy Addr
	Ipv4SrPolicyAddress *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress" json:"ipv4_sr_policy_address,omitempty"`
	// IPV6 Policy Addr
	Ipv6SrPolicyAddress *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress" json:"ipv6_sr_policy_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

// BGP Update filtering attributes information
type BgpUpdfilterAttrfAttrBag struct {
	// Internal attribute code [RFC4271: BGP4]
	UpdateInternalAttributeCode uint32 `protobuf:"varint,1,opt,name=update_internal_attribute_code,json=updateInternalAttributeCode" json:"update_internal_attribute_code,omitempty"`
	// Filtering action
	UpdateFilterAction string `protobuf:"bytes,2,opt,name=update_filter_action,json=updateFilterAction" json:"update_filter_action,omitempty"`
	// Filter match counter
	UpdateFilterMatchCount uint32 `protobuf:"varint,3,opt,name=update_filter_match_count,json=updateFilterMatchCount" json:"update_filter_match_count,omitempty"`
	// Filter match counter since last session establishment
	EstablishmentUpdateFilterMatchCount uint32 `protobuf:"varint,4,opt,name=establishment_update_filter_match_count,json=establishmentUpdateFilterMatchCount" json:"establishment_update_filter_match_count,omitempty"`
	// Last attribute filtered time: time elapsed since 00:00:00 UTC, January 1, 1970
	LastUpdateFilterMatchTimestamp *BgpTimespec `protobuf:"bytes,5,opt,name=last_update_filter_match_timestamp,json=lastUpdateFilterMatchTimestamp" json:"last_update_filter_match_timestamp,omitempty"`
	// Time since this attribute was last filtered (in seconds)
	LastUpdateFilterMatchAge uint32 `protobuf:"varint,6,opt,name=last_update_filter_match_age,json=lastUpdateFilterMatchAge" json:"last_update_filter_match_age,omitempty"`
}

func (m *BgpUpdfilterAttrfAttrBag) Reset()                    { *m = BgpUpdfilterAttrfAttrBag{} }
func (m *BgpUpdfilterAttrfAttrBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdfilterAttrfAttrBag) ProtoMessage()               {}
func (*BgpUpdfilterAttrfAttrBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BgpUpdfilterAttrfAttrBag) GetUpdateInternalAttributeCode() uint32 {
	if m != nil {
		return m.UpdateInternalAttributeCode
	}
	return 0
}

func (m *BgpUpdfilterAttrfAttrBag) GetUpdateFilterAction() string {
	if m != nil {
		return m.UpdateFilterAction
	}
	return ""
}

func (m *BgpUpdfilterAttrfAttrBag) GetUpdateFilterMatchCount() uint32 {
	if m != nil {
		return m.UpdateFilterMatchCount
	}
	return 0
}

func (m *BgpUpdfilterAttrfAttrBag) GetEstablishmentUpdateFilterMatchCount() uint32 {
	if m != nil {
		return m.EstablishmentUpdateFilterMatchCount
	}
	return 0
}

func (m *BgpUpdfilterAttrfAttrBag) GetLastUpdateFilterMatchTimestamp() *BgpTimespec {
	if m != nil {
		return m.LastUpdateFilterMatchTimestamp
	}
	return nil
}

func (m *BgpUpdfilterAttrfAttrBag) GetLastUpdateFilterMatchAge() uint32 {
	if m != nil {
		return m.LastUpdateFilterMatchAge
	}
	return 0
}

// BGP Update filtering element information
type BgpUpdfilterElemBag struct {
	// Attribute Flags [RFC4271: BGP4]
	UpdateAttributeFlags uint32 `protobuf:"varint,1,opt,name=update_attribute_flags,json=updateAttributeFlags" json:"update_attribute_flags,omitempty"`
	// Attribute code [RFC4271: BGP4]
	UpdateAttributeCode uint32 `protobuf:"varint,2,opt,name=update_attribute_code,json=updateAttributeCode" json:"update_attribute_code,omitempty"`
	// Filtering action
	UpdateFilterAction string `protobuf:"bytes,3,opt,name=update_filter_action,json=updateFilterAction" json:"update_filter_action,omitempty"`
}

func (m *BgpUpdfilterElemBag) Reset()                    { *m = BgpUpdfilterElemBag{} }
func (m *BgpUpdfilterElemBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdfilterElemBag) ProtoMessage()               {}
func (*BgpUpdfilterElemBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BgpUpdfilterElemBag) GetUpdateAttributeFlags() uint32 {
	if m != nil {
		return m.UpdateAttributeFlags
	}
	return 0
}

func (m *BgpUpdfilterElemBag) GetUpdateAttributeCode() uint32 {
	if m != nil {
		return m.UpdateAttributeCode
	}
	return 0
}

func (m *BgpUpdfilterElemBag) GetUpdateFilterAction() string {
	if m != nil {
		return m.UpdateFilterAction
	}
	return ""
}

// BGP Update filter message information
type BgpUpdfilterMsgBag struct {
	// Filtered attributes count
	UpdateFilteredAttributeCount uint32 `protobuf:"varint,1,opt,name=update_filtered_attribute_count,json=updateFilteredAttributeCount" json:"update_filtered_attribute_count,omitempty"`
	// Filtering final action
	UpdateFilterFinalAction string `protobuf:"bytes,2,opt,name=update_filter_final_action,json=updateFilterFinalAction" json:"update_filter_final_action,omitempty"`
	// Message timestamp: time elapsed since 00:00:00 UTC, January 1, 1970
	UpdateFilterMessageTimestamp *BgpTimespec `protobuf:"bytes,3,opt,name=update_filter_message_timestamp,json=updateFilterMessageTimestamp" json:"update_filter_message_timestamp,omitempty"`
	// Filtering element list
	UpdateFilterElementList []*BgpUpdfilterElemBag `protobuf:"bytes,4,rep,name=update_filter_element_list,json=updateFilterElementList" json:"update_filter_element_list,omitempty"`
	// NLRI address-family
	UpdateFilterNlriAddressFamily string `protobuf:"bytes,5,opt,name=update_filter_nlri_address_family,json=updateFilterNlriAddressFamily" json:"update_filter_nlri_address_family,omitempty"`
	// List of NLRIs in string format
	UpdateFilterNlriString string `protobuf:"bytes,6,opt,name=update_filter_nlri_string,json=updateFilterNlriString" json:"update_filter_nlri_string,omitempty"`
	// Indicates whether NLRI string was truncated due to lack of space
	UpdateFilterNlriStringTruncated bool `protobuf:"varint,7,opt,name=update_filter_nlri_string_truncated,json=updateFilterNlriStringTruncated" json:"update_filter_nlri_string_truncated,omitempty"`
	// Raw Message data in binary format
	UpdateFilterMessageData []uint32 `protobuf:"varint,8,rep,packed,name=update_filter_message_data,json=updateFilterMessageData" json:"update_filter_message_data,omitempty"`
}

func (m *BgpUpdfilterMsgBag) Reset()                    { *m = BgpUpdfilterMsgBag{} }
func (m *BgpUpdfilterMsgBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdfilterMsgBag) ProtoMessage()               {}
func (*BgpUpdfilterMsgBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *BgpUpdfilterMsgBag) GetUpdateFilteredAttributeCount() uint32 {
	if m != nil {
		return m.UpdateFilteredAttributeCount
	}
	return 0
}

func (m *BgpUpdfilterMsgBag) GetUpdateFilterFinalAction() string {
	if m != nil {
		return m.UpdateFilterFinalAction
	}
	return ""
}

func (m *BgpUpdfilterMsgBag) GetUpdateFilterMessageTimestamp() *BgpTimespec {
	if m != nil {
		return m.UpdateFilterMessageTimestamp
	}
	return nil
}

func (m *BgpUpdfilterMsgBag) GetUpdateFilterElementList() []*BgpUpdfilterElemBag {
	if m != nil {
		return m.UpdateFilterElementList
	}
	return nil
}

func (m *BgpUpdfilterMsgBag) GetUpdateFilterNlriAddressFamily() string {
	if m != nil {
		return m.UpdateFilterNlriAddressFamily
	}
	return ""
}

func (m *BgpUpdfilterMsgBag) GetUpdateFilterNlriString() string {
	if m != nil {
		return m.UpdateFilterNlriString
	}
	return ""
}

func (m *BgpUpdfilterMsgBag) GetUpdateFilterNlriStringTruncated() bool {
	if m != nil {
		return m.UpdateFilterNlriStringTruncated
	}
	return false
}

func (m *BgpUpdfilterMsgBag) GetUpdateFilterMessageData() []uint32 {
	if m != nil {
		return m.UpdateFilterMessageData
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpUpdfilterNbrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_updfilter_nbr_bag_KEYS")
	proto.RegisterType((*BgpUpdfilterNbrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_updfilter_nbr_bag")
	proto.RegisterType((*BgpTimespec)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_timespec")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.IPV6AddressType")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_addrtype")
	proto.RegisterType((*BgpUpdfilterAttrfAttrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_updfilter_attrf_attr_bag")
	proto.RegisterType((*BgpUpdfilterElemBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_updfilter_elem_bag")
	proto.RegisterType((*BgpUpdfilterMsgBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_active.vrfs.vrf.update_inbound_filter_neighbors.update_inbound_filter_neighbor.bgp_updfilter_msg_bag")
}

func init() { proto.RegisterFile("bgp_updfilter_nbr_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0x4b, 0x6f, 0xe3, 0xc8,
	0x11, 0x06, 0xd7, 0xf3, 0xf0, 0x94, 0xad, 0xb5, 0xa6, 0x65, 0x79, 0x34, 0x6f, 0x8d, 0x8c, 0xec,
	0x68, 0xbd, 0xbb, 0xde, 0x40, 0xab, 0x70, 0xb2, 0xd9, 0xcd, 0x26, 0x5e, 0x8f, 0x9d, 0xf5, 0x46,
	0x36, 0x0c, 0x5a, 0x6b, 0x20, 0x41, 0x00, 0xa2, 0x25, 0xb6, 0x38, 0x04, 0x28, 0x92, 0x20, 0x29,
	0x4d, 0xfc, 0x0b, 0x82, 0xfc, 0x82, 0x00, 0x09, 0xf2, 0x3e, 0xe4, 0x0f, 0xe4, 0x1c, 0xe4, 0x12,
	0x20, 0x0f, 0x04, 0xd9, 0x9c, 0x82, 0x1c, 0x32, 0x73, 0xc9, 0x25, 0x40, 0x80, 0xfc, 0x83, 0x20,
	0xe8, 0x6a, 0x36, 0xc5, 0x97, 0x24, 0xe7, 0xc6, 0xb9, 0x18, 0x62, 0x57, 0xf5, 0xd7, 0xfd, 0x75,
	0x57, 0x15, 0x8b, 0x55, 0x86, 0xbb, 0x03, 0xd3, 0xd3, 0x27, 0x9e, 0x31, 0xb2, 0xec, 0x90, 0xf9,
	0xba, 0x33, 0xf0, 0xf5, 0x01, 0x35, 0x77, 0x3d, 0xdf, 0x0d, 0x5d, 0xf2, 0x7d, 0x65, 0x68, 0x05,
	0x43, 0x57, 0xb7, 0xdc, 0x40, 0xff, 0xae, 0xaf, 0x5b, 0xde, 0xb4, 0xab, 0x73, 0x7d, 0xd7, 0x63,
	0xfe, 0xee, 0xc0, 0xf4, 0x76, 0x2d, 0x27, 0x08, 0xa9, 0x33, 0x64, 0x41, 0xfc, 0x2b, 0xfe, 0xa1,
	0xd3, 0x61, 0x68, 0x4d, 0xd9, 0xee, 0xd4, 0x1f, 0x05, 0xfc, 0xcf, 0xee, 0xc4, 0x33, 0x68, 0xc8,
	0x74, 0xcb, 0x19, 0xb8, 0x13, 0xc7, 0xd0, 0xe5, 0x82, 0xcc, 0x32, 0x9f, 0x0d, 0x5c, 0x3f, 0x58,
	0x22, 0x6f, 0x7d, 0x4f, 0x81, 0x3b, 0x85, 0x7b, 0xd5, 0xbf, 0x79, 0xf0, 0xad, 0x33, 0xb2, 0x0d,
	0x95, 0x78, 0x65, 0x87, 0x8e, 0x59, 0x43, 0x69, 0x2a, 0xed, 0x1b, 0xda, 0xba, 0x1c, 0x3c, 0xa1,
	0x63, 0x46, 0x6e, 0xc3, 0xea, 0xd4, 0x1f, 0x09, 0xf9, 0x6b, 0x28, 0xbf, 0x3e, 0xf5, 0x47, 0x28,
	0x7a, 0x13, 0xaa, 0x72, 0x29, 0x9d, 0x1a, 0x86, 0xcf, 0x82, 0xa0, 0xb1, 0x82, 0x2a, 0x1b, 0x72,
	0x7c, 0x4f, 0x0c, 0xb7, 0xfe, 0x7d, 0x13, 0xea, 0x85, 0x3b, 0x21, 0x6f, 0xc0, 0x46, 0xc4, 0x22,
	0x5e, 0xa6, 0x83, 0x18, 0x15, 0x31, 0x7c, 0x1e, 0x2d, 0xf6, 0xb9, 0x02, 0xb7, 0x22, 0xc5, 0xdc,
	0xa2, 0xef, 0x35, 0x95, 0xf6, 0x5a, 0xe7, 0x07, 0xca, 0x6e, 0x69, 0x8e, 0x9e, 0x2f, 0x87, 0xdb,
	0x0b, 0x2f, 0x3c, 0xa6, 0xd5, 0x85, 0xf2, 0x49, 0xfa, 0x50, 0xc8, 0x1e, 0xdc, 0x8f, 0x50, 0xa2,
	0xd9, 0xb6, 0x6b, 0x9a, 0x96, 0x63, 0xea, 0xcc, 0xa1, 0x03, 0x9b, 0x19, 0x8d, 0x6e, 0x53, 0x69,
	0xaf, 0x6a, 0x77, 0x84, 0xd2, 0x21, 0xea, 0xf4, 0x84, 0xca, 0x81, 0xd0, 0x20, 0x3a, 0xbc, 0x33,
	0x74, 0x9d, 0x91, 0x65, 0x4e, 0x7c, 0x66, 0xe8, 0x69, 0xb4, 0x31, 0x0b, 0x02, 0x6a, 0x32, 0x7d,
	0x30, 0x19, 0x8d, 0x98, 0xaf, 0x0f, 0xdd, 0x89, 0x13, 0x36, 0xbe, 0xd4, 0x54, 0xda, 0x15, 0xad,
	0x3d, 0x9b, 0xf4, 0x59, 0x02, 0xfc, 0x58, 0xcc, 0xf8, 0x18, 0x27, 0xec, 0x73, 0x7d, 0x42, 0x61,
	0x97, 0x1f, 0x1f, 0x0d, 0x2d, 0xd7, 0xa1, 0xf6, 0x65, 0x56, 0x50, 0x71, 0x85, 0x37, 0x13, 0xb3,
	0x96, 0x2c, 0x71, 0x0a, 0x5f, 0x58, 0x0c, 0x6b, 0xf9, 0xc3, 0x89, 0x4d, 0xfd, 0xc6, 0x13, 0x3c,
	0x8e, 0x47, 0x93, 0xb9, 0x70, 0x91, 0x22, 0xf9, 0x14, 0x5a, 0x11, 0x22, 0x0d, 0x43, 0xdf, 0x1a,
	0x4c, 0x66, 0xd8, 0xa6, 0xef, 0x4e, 0x3c, 0x61, 0x66, 0x5f, 0x46, 0x33, 0x7b, 0x20, 0x34, 0xf7,
	0xa4, 0xa2, 0xc0, 0xfd, 0x06, 0x57, 0x43, 0xbb, 0x1b, 0x14, 0x1e, 0x40, 0x16, 0x37, 0x79, 0x6b,
	0xef, 0xe3, 0x36, 0x77, 0x72, 0x07, 0x90, 0x59, 0x22, 0x71, 0x8b, 0xdf, 0x86, 0x1d, 0xc9, 0xf9,
	0x12, 0xf8, 0x5f, 0x41, 0xfc, 0x37, 0xa2, 0x19, 0xcb, 0xb0, 0x3f, 0x81, 0x47, 0xa1, 0x1b, 0x52,
	0x5b, 0x1e, 0x40, 0xb4, 0x80, 0x5c, 0x4f, 0xdc, 0xd9, 0x07, 0x78, 0x67, 0xf7, 0x51, 0x51, 0x20,
	0x08, 0xd8, 0xe8, 0x78, 0xc5, 0x3d, 0x0d, 0xe1, 0x5d, 0x16, 0x84, 0x74, 0x60, 0x5b, 0xc1, 0xb3,
	0x31, 0x73, 0x42, 0x7d, 0x39, 0xee, 0x87, 0x88, 0xbb, 0x93, 0x9a, 0xd6, 0x5f, 0xb8, 0x48, 0xd6,
	0x27, 0x98, 0x91, 0x81, 0xfc, 0x2a, 0x42, 0xa6, 0x7c, 0x82, 0x19, 0x29, 0x88, 0xef, 0xc0, 0x5b,
	0xe9, 0x7d, 0x2e, 0x06, 0xfc, 0x08, 0x01, 0x1f, 0xa7, 0xa6, 0x7c, 0x36, 0x1f, 0xfd, 0xa5, 0x02,
	0x0f, 0x47, 0x96, 0x1f, 0xe4, 0x61, 0x43, 0x6b, 0xcc, 0x41, 0xc6, 0x5e, 0xe3, 0x6b, 0xe5, 0x8c,
	0x47, 0xb8, 0x41, 0x8f, 0x0d, 0xb5, 0x7b, 0x48, 0x20, 0x4d, 0xb2, 0x2f, 0x77, 0x4f, 0xfe, 0xa1,
	0xc0, 0x03, 0x9b, 0x2e, 0x24, 0xf8, 0xf5, 0x92, 0x13, 0xbc, 0xcb, 0xf7, 0x3f, 0x8f, 0xdf, 0x13,
	0x68, 0x14, 0xd2, 0xa3, 0x26, 0x6b, 0xec, 0xa1, 0x31, 0xd4, 0xf3, 0xd3, 0xf7, 0x4c, 0x46, 0xfe,
	0xab, 0xc0, 0xe3, 0x79, 0x71, 0x25, 0x1e, 0x08, 0x74, 0xdb, 0x0a, 0xc2, 0xc6, 0xc7, 0xcd, 0x95,
	0xf6, 0x5a, 0xe7, 0x57, 0x65, 0x3b, 0xa1, 0xd9, 0xfb, 0x97, 0x6f, 0x78, 0x84, 0x7f, 0xf9, 0x6b,
	0x58, 0xdb, 0x2e, 0x0c, 0x83, 0xf1, 0x63, 0xd0, 0xb3, 0x82, 0x90, 0xbc, 0x50, 0xe0, 0x4e, 0x71,
	0xa8, 0x46, 0xce, 0xfb, 0xc8, 0xf9, 0x67, 0xe5, 0xe5, 0x3c, 0x0e, 0x4c, 0x24, 0x7b, 0xab, 0xe0,
	0x15, 0x82, 0x04, 0x0f, 0xa1, 0x39, 0x9f, 0x5f, 0x14, 0x2f, 0x9e, 0xa2, 0x89, 0xdc, 0x9b, 0x03,
	0x81, 0x41, 0xa2, 0xf5, 0x29, 0xac, 0x27, 0xed, 0x91, 0x34, 0xe0, 0x7a, 0xc0, 0x86, 0xae, 0x63,
	0x04, 0x98, 0x63, 0x55, 0x34, 0xf9, 0x48, 0x9a, 0xb0, 0xe6, 0x50, 0xc7, 0x95, 0xd2, 0xd7, 0x50,
	0x9a, 0x1c, 0x6a, 0xbd, 0x03, 0xf5, 0xa3, 0xd3, 0xf3, 0x6e, 0x7f, 0xe2, 0x38, 0xcc, 0x8e, 0x52,
	0x87, 0xfe, 0x85, 0xc7, 0xc8, 0x26, 0x5c, 0x9d, 0x52, 0x7b, 0x22, 0xd3, 0x36, 0xf1, 0xd0, 0xda,
	0x01, 0xc2, 0xd5, 0x8f, 0x9f, 0xf6, 0x97, 0xeb, 0xbe, 0x0b, 0xb7, 0xb4, 0xfe, 0xbe, 0xeb, 0x04,
	0xa1, 0x4f, 0x2d, 0x27, 0x5c, 0x3e, 0xe1, 0x31, 0x6c, 0x1c, 0x9d, 0x9e, 0xab, 0xcb, 0x15, 0x4f,
	0xa0, 0xc1, 0x0f, 0x00, 0xef, 0x3e, 0xf0, 0x3d, 0xd7, 0xb6, 0x86, 0x17, 0x98, 0x0f, 0xe9, 0x21,
	0xe9, 0x40, 0x3d, 0x3f, 0xce, 0xd3, 0x38, 0x8e, 0xb0, 0xae, 0xd5, 0xb8, 0xf0, 0x2c, 0x92, 0xc9,
	0xfc, 0x71, 0x86, 0xa7, 0xce, 0xc1, 0x53, 0x17, 0xe1, 0xa9, 0x59, 0xbc, 0x27, 0x50, 0xe5, 0x78,
	0x76, 0x67, 0xea, 0x39, 0x12, 0x67, 0x1b, 0x2a, 0xb3, 0xe7, 0xd9, 0xfc, 0x75, 0x1c, 0x94, 0x13,
	0xdf, 0x86, 0xcd, 0x5e, 0xe7, 0xfc, 0xf4, 0xe4, 0xe0, 0xfc, 0xf4, 0x64, 0xf9, 0x31, 0x7c, 0x28,
	0xb2, 0x5e, 0x01, 0x3b, 0x0e, 0xbc, 0xe7, 0xff, 0xd7, 0x5a, 0x6f, 0x41, 0x8d, 0x9f, 0xf6, 0xf1,
	0xa5, 0x96, 0x12, 0xca, 0xdd, 0xcb, 0x29, 0xb7, 0xa1, 0xda, 0x3b, 0xd3, 0x7b, 0x67, 0x97, 0x32,
	0x91, 0xa3, 0xd3, 0x69, 0xf7, 0xd0, 0x76, 0x9f, 0x73, 0x4b, 0xbe, 0xec, 0x04, 0xf5, 0xf2, 0x13,
	0xfe, 0xd5, 0x12, 0xce, 0x22, 0xb3, 0x65, 0x52, 0x85, 0x15, 0x3a, 0xb2, 0x22, 0x25, 0xfe, 0x93,
	0x3c, 0x82, 0x75, 0xb4, 0x18, 0x79, 0x58, 0xe2, 0x3b, 0x64, 0x8d, 0x8f, 0xc9, 0x5c, 0xfa, 0x6d,
	0x20, 0xa8, 0x32, 0x1e, 0xf2, 0xd0, 0x9e, 0xfe, 0x1a, 0xa9, 0x72, 0xc9, 0x31, 0x17, 0x64, 0xb5,
	0x6d, 0x3a, 0x60, 0x76, 0xac, 0x7d, 0x65, 0xa6, 0xdd, 0xe3, 0x02, 0xa9, 0xfd, 0x57, 0x05, 0xd0,
	0x28, 0xf5, 0x10, 0x7d, 0x30, 0xd6, 0xbf, 0x8a, 0x6f, 0xc1, 0x52, 0xc5, 0xbb, 0xc2, 0x48, 0xa1,
	0xdd, 0xe4, 0x7b, 0x4a, 0x0d, 0x93, 0xdf, 0x2b, 0x50, 0x15, 0x07, 0x66, 0xcc, 0x8e, 0xeb, 0x1a,
	0x12, 0xfa, 0x71, 0xd9, 0x08, 0xa5, 0x63, 0x99, 0xf6, 0x3a, 0x5e, 0xa7, 0x11, 0x5f, 0x66, 0x3b,
	0x62, 0x92, 0x74, 0xa7, 0xeb, 0x78, 0x95, 0xa8, 0x79, 0x1e, 0x3b, 0x54, 0x1c, 0x79, 0xa6, 0x9e,
	0x43, 0x85, 0xa5, 0x44, 0xea, 0xab, 0xa8, 0x5e, 0x8b, 0xd4, 0xe9, 0xf1, 0x4c, 0x44, 0x7e, 0xa3,
	0xa0, 0xf1, 0xa9, 0x31, 0xf4, 0x0d, 0x3c, 0xa4, 0x1f, 0x96, 0xec, 0x90, 0x92, 0x31, 0x19, 0x3d,
	0x43, 0x0e, 0x90, 0x3f, 0x28, 0x68, 0xec, 0x6a, 0xc6, 0x35, 0xa0, 0xfc, 0x34, 0xf8, 0xb5, 0xaa,
	0x29, 0xbf, 0x8d, 0xb9, 0xa4, 0x1d, 0x77, 0xed, 0x15, 0xe1, 0x92, 0x8a, 0x2a, 0xbf, 0x13, 0x1e,
	0xa8, 0xa6, 0xec, 0x76, 0xbd, 0xfc, 0x4c, 0xb8, 0x53, 0xa9, 0x09, 0xa7, 0xfa, 0x5c, 0x81, 0xad,
	0x98, 0x47, 0xda, 0xc6, 0x2a, 0xe5, 0x67, 0x53, 0x8b, 0xd8, 0xa4, 0xcc, 0xec, 0x8f, 0x0a, 0x10,
	0xbb, 0xc3, 0x09, 0x4d, 0x3d, 0x3b, 0x88, 0xe9, 0xbc, 0x8e, 0x74, 0x7e, 0x54, 0xb6, 0xfc, 0x36,
	0x99, 0xc4, 0x68, 0x55, 0xbb, 0x73, 0x2e, 0xb6, 0x2d, 0xc9, 0xfc, 0x4d, 0x81, 0xba, 0xcf, 0x93,
	0x57, 0x99, 0xe6, 0xc5, 0x7c, 0x36, 0x90, 0xcf, 0x2f, 0xca, 0xc4, 0x67, 0x4e, 0x3a, 0xaa, 0xd5,
	0xfc, 0x30, 0x27, 0x20, 0x7f, 0x52, 0xe0, 0xa6, 0x88, 0x6c, 0x49, 0x17, 0xaa, 0x22, 0xab, 0x9f,
	0x94, 0xcd, 0xe8, 0x32, 0x89, 0x99, 0xb6, 0x81, 0xc1, 0x6d, 0x96, 0xed, 0x49, 0x36, 0xdd, 0x34,
	0x9b, 0x9b, 0xa5, 0x64, 0xd3, 0x2d, 0x62, 0xd3, 0x4d, 0xb2, 0xf9, 0x8b, 0x02, 0x35, 0xe1, 0x42,
	0x3a, 0x4b, 0xf2, 0x21, 0xc8, 0xe7, 0xa7, 0x65, 0xe2, 0x53, 0x94, 0xcf, 0x47, 0x7e, 0x74, 0x90,
	0x60, 0xf4, 0x5b, 0x05, 0x2a, 0x76, 0xa0, 0x27, 0xe2, 0x41, 0xad, 0x7c, 0xf1, 0x20, 0x9b, 0xd5,
	0x6b, 0x6b, 0x76, 0xd0, 0x0b, 0x12, 0xa1, 0x5a, 0x5e, 0x4a, 0xfc, 0x31, 0xc2, 0x89, 0x6c, 0x96,
	0x2f, 0x91, 0x2d, 0xfc, 0x6c, 0x8a, 0x6e, 0xe5, 0x38, 0xf0, 0x9e, 0x27, 0xa3, 0x1b, 0x6e, 0x74,
	0x14, 0x7d, 0x70, 0xc4, 0xa4, 0xea, 0xe5, 0x8b, 0x6e, 0x73, 0xbe, 0xa4, 0x44, 0xe2, 0x99, 0x11,
	0x48, 0x66, 0x6a, 0x9e, 0xd9, 0x56, 0x29, 0x99, 0xa9, 0xf3, 0x98, 0x65, 0x05, 0xe4, 0x85, 0x02,
	0xb7, 0xe3, 0x8c, 0x3d, 0xc7, 0xee, 0xd6, 0xab, 0x73, 0x6f, 0x5b, 0xd1, 0x07, 0xc3, 0x1c, 0x82,
	0x6a, 0x31, 0xc1, 0xc6, 0xab, 0x73, 0x7d, 0x5b, 0x51, 0x76, 0x94, 0x25, 0xf8, 0x77, 0x91, 0xf3,
	0x75, 0xf5, 0xc0, 0xd7, 0x33, 0x45, 0x97, 0xdb, 0xc8, 0xee, 0x97, 0x65, 0x8b, 0x25, 0x45, 0x95,
	0x28, 0x59, 0x6a, 0x3a, 0x4d, 0x96, 0x86, 0x24, 0x37, 0xb5, 0x80, 0xdb, 0x9d, 0xd2, 0x72, 0x53,
	0x0b, 0xb9, 0xa9, 0x19, 0x6e, 0xad, 0x3f, 0x5f, 0x81, 0x7b, 0x8b, 0xca, 0xc0, 0x64, 0x1f, 0x1e,
	0xc4, 0x0b, 0x86, 0xcc, 0x77, 0xa8, 0x9d, 0x28, 0x75, 0x0f, 0x5d, 0x83, 0x45, 0xf5, 0xcb, 0xbb,
	0x42, 0xeb, 0x28, 0x52, 0x8a, 0xeb, 0xc4, 0xfb, 0xae, 0xc1, 0xc8, 0x17, 0x61, 0x33, 0x5d, 0x45,
	0xe5, 0x9c, 0x5d, 0x27, 0x2a, 0xdb, 0x90, 0x64, 0xe5, 0x74, 0x0f, 0x25, 0xe4, 0x7d, 0xb8, 0x9d,
	0xa9, 0xbb, 0xd2, 0x70, 0xf8, 0x2c, 0x2a, 0xb8, 0xae, 0xe0, 0x8a, 0x5b, 0xa9, 0x82, 0x2b, 0x17,
	0x8b, 0x7e, 0x4c, 0x1f, 0x1e, 0x2f, 0xe8, 0xf6, 0xa4, 0x80, 0xae, 0x20, 0xd0, 0xf6, 0xdc, 0x4e,
	0x4f, 0x02, 0xf5, 0x9f, 0x0a, 0xb4, 0xf2, 0x4d, 0x82, 0x08, 0x6d, 0xd6, 0x07, 0xb9, 0x5a, 0xf2,
	0x3e, 0xc8, 0x83, 0x6c, 0x23, 0x03, 0x29, 0xce, 0x5a, 0x21, 0x1f, 0xc1, 0xbd, 0xb9, 0x2c, 0xa9,
	0xc9, 0xb0, 0x20, 0x54, 0xd1, 0x1a, 0x85, 0x28, 0x7b, 0x26, 0x6b, 0xfd, 0x5a, 0x81, 0xad, 0xb4,
	0x3d, 0x31, 0x9b, 0x8d, 0xd1, 0x92, 0xba, 0xb0, 0x95, 0xef, 0x95, 0xd8, 0xd4, 0x94, 0x15, 0xf0,
	0xcd, 0x6c, 0xc3, 0x81, 0xcb, 0x48, 0x07, 0xea, 0xb9, 0x59, 0x68, 0x76, 0xa2, 0x30, 0x5e, 0xcb,
	0x4c, 0x5a, 0x68, 0x6e, 0x2b, 0xf3, 0xcc, 0xad, 0xf5, 0x9f, 0x6b, 0xd9, 0xff, 0x46, 0x88, 0x3a,
	0x03, 0xe4, 0x00, 0x1e, 0xe6, 0xda, 0x42, 0x89, 0x8d, 0x70, 0x2b, 0x52, 0xf2, 0xf5, 0x7f, 0x66,
	0x24, 0x76, 0xc4, 0xcd, 0xe7, 0x83, 0x6c, 0x9f, 0x64, 0x64, 0xa1, 0x2b, 0x25, 0xfd, 0x20, 0xd5,
	0x84, 0x38, 0xe4, 0xf2, 0xc8, 0x19, 0x5e, 0x2a, 0x99, 0x4d, 0xc4, 0x5d, 0x88, 0x99, 0xe1, 0xad,
	0x94, 0xbd, 0xc3, 0x58, 0xd0, 0x1e, 0x99, 0x99, 0xdd, 0xcb, 0x5c, 0x1f, 0x89, 0x9b, 0x0d, 0x77,
	0x5e, 0xec, 0x23, 0x5d, 0xc1, 0x3e, 0xd2, 0xcf, 0xcb, 0xdb, 0x47, 0x92, 0x46, 0x9e, 0xbe, 0xc3,
	0x03, 0xc1, 0x01, 0x1b, 0x49, 0x9f, 0xc0, 0xa3, 0x34, 0x41, 0xc7, 0xf6, 0x2d, 0xf9, 0x1e, 0xd1,
	0x47, 0x74, 0x6c, 0xd9, 0x17, 0x18, 0x3d, 0x6e, 0x68, 0xf7, 0x93, 0x18, 0x27, 0xb6, 0x6f, 0x45,
	0xc1, 0xfa, 0x10, 0x95, 0xf2, 0xa1, 0x11, 0x91, 0x82, 0xd0, 0xb7, 0x1c, 0x13, 0xfd, 0xf3, 0x46,
	0x3a, 0x34, 0x72, 0x84, 0x33, 0x94, 0x92, 0x1e, 0x6c, 0xcf, 0x9d, 0xaa, 0x87, 0xfe, 0xc4, 0x19,
	0xd2, 0x90, 0x19, 0x58, 0x2b, 0x5d, 0xd5, 0x1e, 0x16, 0x83, 0xf4, 0xa5, 0x5a, 0xde, 0xa6, 0xa5,
	0x55, 0x1a, 0x34, 0xa4, 0x8d, 0xd5, 0xe6, 0x4a, 0xbb, 0x52, 0xd8, 0x58, 0x7b, 0x4a, 0x43, 0x3a,
	0xb8, 0x86, 0xff, 0x1c, 0xf5, 0xde, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x72, 0x07, 0xd5,
	0x3b, 0x25, 0x00, 0x00,
}
