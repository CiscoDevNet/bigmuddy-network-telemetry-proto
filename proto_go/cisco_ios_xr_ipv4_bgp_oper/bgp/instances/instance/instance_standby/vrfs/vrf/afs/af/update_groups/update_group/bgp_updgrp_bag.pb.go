// Code generated by protoc-gen-go.
// source: bgp_updgrp_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_afs_af_update_groups_update_group is a generated protocol buffer package.

It is generated from these files:
	bgp_updgrp_bag.proto

It has these top-level messages:
	BgpUpdgrpBag_KEYS
	BgpUpdgrpBag
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	BgpIpv4SrpolicyAddrT
	BgpIpv6SrpolicyAddrT
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
	BgpPerfUpdgrp_
	BgpUpdFiltergrp_
	BgpUpdSubgrp_
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_vrfs_vrf_afs_af_update_groups_update_group

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP Update Group information
type BgpUpdgrpBag_KEYS struct {
	InstanceName  string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	VrfName       string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	AfName        string `protobuf:"bytes,3,opt,name=af_name,json=afName" json:"af_name,omitempty"`
	UpdateGroupId uint32 `protobuf:"varint,4,opt,name=update_group_id,json=updateGroupId" json:"update_group_id,omitempty"`
	FilterGroupId uint32 `protobuf:"varint,5,opt,name=filter_group_id,json=filterGroupId" json:"filter_group_id,omitempty"`
}

func (m *BgpUpdgrpBag_KEYS) Reset()                    { *m = BgpUpdgrpBag_KEYS{} }
func (m *BgpUpdgrpBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdgrpBag_KEYS) ProtoMessage()               {}
func (*BgpUpdgrpBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpUpdgrpBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpUpdgrpBag_KEYS) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *BgpUpdgrpBag_KEYS) GetAfName() string {
	if m != nil {
		return m.AfName
	}
	return ""
}

func (m *BgpUpdgrpBag_KEYS) GetUpdateGroupId() uint32 {
	if m != nil {
		return m.UpdateGroupId
	}
	return 0
}

func (m *BgpUpdgrpBag_KEYS) GetFilterGroupId() uint32 {
	if m != nil {
		return m.FilterGroupId
	}
	return 0
}

type BgpUpdgrpBag struct {
	// Process instance ID
	ProcessInstanceId uint32 `protobuf:"varint,50,opt,name=process_instance_id,json=processInstanceId" json:"process_instance_id,omitempty"`
	// Neighbor session Address family
	SessionAfName uint32 `protobuf:"varint,51,opt,name=session_af_name,json=sessionAfName" json:"session_af_name,omitempty"`
	// Update group index
	UpdateGroupNumber uint32 `protobuf:"varint,52,opt,name=update_group_number,json=updateGroupNumber" json:"update_group_number,omitempty"`
	// Address family for update group
	UpdateGroupAfName string `protobuf:"bytes,53,opt,name=update_group_af_name,json=updateGroupAfName" json:"update_group_af_name,omitempty"`
	// Send communities
	ShouldSendCommunities bool `protobuf:"varint,54,opt,name=should_send_communities,json=shouldSendCommunities" json:"should_send_communities,omitempty"`
	// Send Extended communities
	ShouldSendExtCommunities bool `protobuf:"varint,55,opt,name=should_send_ext_communities,json=shouldSendExtCommunities" json:"should_send_ext_communities,omitempty"`
	// Send Stitching RT
	ShouldSendStitchingRt bool `protobuf:"varint,56,opt,name=should_send_stitching_rt,json=shouldSendStitchingRt" json:"should_send_stitching_rt,omitempty"`
	// ORF receive capability
	HasOrfReceiveCapability bool `protobuf:"varint,57,opt,name=has_orf_receive_capability,json=hasOrfReceiveCapability" json:"has_orf_receive_capability,omitempty"`
	// Route-reflector client
	IsRouteReflectorClient bool `protobuf:"varint,58,opt,name=is_route_reflector_client,json=isRouteReflectorClient" json:"is_route_reflector_client,omitempty"`
	// True if client-to-client reflection is disabled
	IsClientReflectionDisabled bool `protobuf:"varint,59,opt,name=is_client_reflection_disabled,json=isClientReflectionDisabled" json:"is_client_reflection_disabled,omitempty"`
	// accept-legacy-pe-RT route
	AcceptsLegacyPeRtRoute bool `protobuf:"varint,60,opt,name=accepts_legacy_pe_rt_route,json=acceptsLegacyPeRtRoute" json:"accepts_legacy_pe_rt_route,omitempty"`
	// Cluster ID (populated ifclient-to-client reflectionis disabled)
	UpdgrpClusterId uint32 `protobuf:"varint,61,opt,name=updgrp_cluster_id,json=updgrpClusterId" json:"updgrp_cluster_id,omitempty"`
	// Cluster ID type:undefined/number/Ip address
	UpdgrpClusterType uint32 `protobuf:"varint,62,opt,name=updgrp_cluster_type,json=updgrpClusterType" json:"updgrp_cluster_type,omitempty"`
	// ORR Group Name
	OrrGroupName string `protobuf:"bytes,63,opt,name=orr_group_name,json=orrGroupName" json:"orr_group_name,omitempty"`
	// ORR Group Index
	OrrGroupIndex uint32 `protobuf:"varint,64,opt,name=orr_group_index,json=orrGroupIndex" json:"orr_group_index,omitempty"`
	// ORR Root address configuredfor the neighbor connection
	IsOrrRootAddressConfigured bool `protobuf:"varint,65,opt,name=is_orr_root_address_configured,json=isOrrRootAddressConfigured" json:"is_orr_root_address_configured,omitempty"`
	// Remove private AS numbers
	ShouldRemovePrivateASs bool `protobuf:"varint,66,opt,name=should_remove_private_a_ss,json=shouldRemovePrivateASs" json:"should_remove_private_a_ss,omitempty"`
	// Remove private AS numbersif the entire path consistsof private ASes
	ShouldRemovePrivateAsEntPath bool `protobuf:"varint,67,opt,name=should_remove_private_as_ent_path,json=shouldRemovePrivateAsEntPath" json:"should_remove_private_as_ent_path,omitempty"`
	// Next-hop-self
	UseNextHopSelf bool `protobuf:"varint,68,opt,name=use_next_hop_self,json=useNextHopSelf" json:"use_next_hop_self,omitempty"`
	// Next-hop-unchanged multipath
	UseNextHopUnchangedMpath bool `protobuf:"varint,69,opt,name=use_next_hop_unchanged_mpath,json=useNextHopUnchangedMpath" json:"use_next_hop_unchanged_mpath,omitempty"`
	// Internal peers
	IsInternalPeers bool `protobuf:"varint,70,opt,name=is_internal_peers,json=isInternalPeers" json:"is_internal_peers,omitempty"`
	// Common admin peers
	IsCommonAdminPeers bool `protobuf:"varint,71,opt,name=is_common_admin_peers,json=isCommonAdminPeers" json:"is_common_admin_peers,omitempty"`
	// 4-byte AS capable peers
	Is4ByteAsPeer bool `protobuf:"varint,72,opt,name=is4_byte_as_peer,json=is4ByteAsPeer" json:"is4_byte_as_peer,omitempty"`
	// Add-path capable peers
	IsAddpathCapable bool `protobuf:"varint,73,opt,name=is_addpath_capable,json=isAddpathCapable" json:"is_addpath_capable,omitempty"`
	// Send mcast attribute enabled
	IsSendMcastAttrEnabled bool `protobuf:"varint,74,opt,name=is_send_mcast_attr_enabled,json=isSendMcastAttrEnabled" json:"is_send_mcast_attr_enabled,omitempty"`
	// AIGP capable peers
	IsAigpCapable bool `protobuf:"varint,75,opt,name=is_aigp_capable,json=isAigpCapable" json:"is_aigp_capable,omitempty"`
	// Send AIGP cost community to peers
	IsAigpCostCommunityCapable bool `protobuf:"varint,76,opt,name=is_aigp_cost_community_capable,json=isAigpCostCommunityCapable" json:"is_aigp_cost_community_capable,omitempty"`
	// Send AIGP cost in MED
	IsAigpMedCapable bool `protobuf:"varint,77,opt,name=is_aigp_med_capable,json=isAigpMedCapable" json:"is_aigp_med_capable,omitempty"`
	// Send Long-lived Stale paths
	IsLlgrCapable bool `protobuf:"varint,78,opt,name=is_llgr_capable,json=isLlgrCapable" json:"is_llgr_capable,omitempty"`
	// Send tranlsated paths
	IsAdvCapable bool `protobuf:"varint,79,opt,name=is_adv_capable,json=isAdvCapable" json:"is_adv_capable,omitempty"`
	// Send Re-orig paths
	IsAdvReorgCapable bool `protobuf:"varint,80,opt,name=is_adv_reorg_capable,json=isAdvReorgCapable" json:"is_adv_reorg_capable,omitempty"`
	// Disable advertising native routes
	DisableNativeAdvertisement bool `protobuf:"varint,81,opt,name=disable_native_advertisement,json=disableNativeAdvertisement" json:"disable_native_advertisement,omitempty"`
	// Disable advertising default VRF  imported routes
	DisableDefVrfImpAdvertisement bool `protobuf:"varint,82,opt,name=disable_def_vrf_imp_advertisement,json=disableDefVrfImpAdvertisement" json:"disable_def_vrf_imp_advertisement,omitempty"`
	// Disable advertising VRF re-imported routes
	DisableVrfReImpAdvertisement bool `protobuf:"varint,83,opt,name=disable_vrf_re_imp_advertisement,json=disableVrfReImpAdvertisement" json:"disable_vrf_re_imp_advertisement,omitempty"`
	// Encapsulation type
	EncapsulationType uint32 `protobuf:"varint,84,opt,name=encapsulation_type,json=encapsulationType" json:"encapsulation_type,omitempty"`
	// Advertise RT type
	AdvertiseRtType uint32 `protobuf:"varint,85,opt,name=advertise_rt_type,json=advertiseRtType" json:"advertise_rt_type,omitempty"`
	// Directly connected EBGP v6 peers
	IsDirectlyConnectedEbgpV6Peers bool `protobuf:"varint,86,opt,name=is_directly_connected_ebgp_v6_peers,json=isDirectlyConnectedEbgpV6Peers" json:"is_directly_connected_ebgp_v6_peers,omitempty"`
	// Minimum advertisement interval, secs part
	MinimumAdvertisementInterval uint32 `protobuf:"varint,87,opt,name=minimum_advertisement_interval,json=minimumAdvertisementInterval" json:"minimum_advertisement_interval,omitempty"`
	// Minimum advertisement interval, msecs part
	MinimumAdvertisementIntervalMsecs uint32 `protobuf:"varint,88,opt,name=minimum_advertisement_interval_msecs,json=minimumAdvertisementIntervalMsecs" json:"minimum_advertisement_interval_msecs,omitempty"`
	// Local AS number
	LocalAs uint32 `protobuf:"varint,89,opt,name=local_as,json=localAs" json:"local_as,omitempty"`
	// Outbound route policy name
	RoutePolicyOut string `protobuf:"bytes,90,opt,name=route_policy_out,json=routePolicyOut" json:"route_policy_out,omitempty"`
	// Number of times the update has been desynchronized
	DesyncCount uint32 `protobuf:"varint,91,opt,name=desync_count,json=desyncCount" json:"desync_count,omitempty"`
	// Number of times sub-groups have been merged
	SubgrpMergeCount uint32 `protobuf:"varint,92,opt,name=subgrp_merge_count,json=subgrpMergeCount" json:"subgrp_merge_count,omitempty"`
	// Current count of refresh subgroups
	RefreshSubgrpCount uint32 `protobuf:"varint,93,opt,name=refresh_subgrp_count,json=refreshSubgrpCount" json:"refresh_subgrp_count,omitempty"`
	// Number of updates formatted
	UpdatesFormatted uint32 `protobuf:"varint,94,opt,name=updates_formatted,json=updatesFormatted" json:"updates_formatted,omitempty"`
	// No. of updates replicated
	UpdatesReplicated uint32 `protobuf:"varint,95,opt,name=updates_replicated,json=updatesReplicated" json:"updates_replicated,omitempty"`
	// Neighbors in this update group which are not in any sub-group
	NeighborList []*BgpAddrtype `protobuf:"bytes,96,rep,name=neighbor_list,json=neighborList" json:"neighbor_list,omitempty"`
	// Performance statistics
	PerformanceStatistics *BgpPerfUpdgrp_ `protobuf:"bytes,97,opt,name=performance_statistics,json=performanceStatistics" json:"performance_statistics,omitempty"`
	// Update sub-group list
	UpdateSubGroupList []*BgpUpdSubgrp_ `protobuf:"bytes,98,rep,name=update_sub_group_list,json=updateSubGroupList" json:"update_sub_group_list,omitempty"`
	// Local AS Replace-AS option
	LocalAsReplaceAs bool `protobuf:"varint,99,opt,name=local_as_replace_as,json=localAsReplaceAs" json:"local_as_replace_as,omitempty"`
	// AS Override option
	AsOverride bool `protobuf:"varint,100,opt,name=as_override,json=asOverride" json:"as_override,omitempty"`
	// Site-of-origin value
	SooValue string `protobuf:"bytes,101,opt,name=soo_value,json=sooValue" json:"soo_value,omitempty"`
	// Split horizon check
	SplitHorizon bool `protobuf:"varint,102,opt,name=split_horizon,json=splitHorizon" json:"split_horizon,omitempty"`
	// Update group has labeled AFI enabled
	IsLabeledAfiEnabled bool `protobuf:"varint,103,opt,name=is_labeled_afi_enabled,json=isLabeledAfiEnabled" json:"is_labeled_afi_enabled,omitempty"`
	// Update group has unlabeled AFI enabled
	IsUnlabeledAfiEnabled bool `protobuf:"varint,104,opt,name=is_unlabeled_afi_enabled,json=isUnlabeledAfiEnabled" json:"is_unlabeled_afi_enabled,omitempty"`
	// Extended nexthop encoding cap received
	ExtNhEncoding bool `protobuf:"varint,105,opt,name=ext_nh_encoding,json=extNhEncoding" json:"ext_nh_encoding,omitempty"`
	// Remote AS number
	RemoteAs uint32 `protobuf:"varint,106,opt,name=remote_as,json=remoteAs" json:"remote_as,omitempty"`
	// Advertise Permanent-Net capable peers
	IsAdvPermNetCapable bool `protobuf:"varint,107,opt,name=is_adv_perm_net_capable,json=isAdvPermNetCapable" json:"is_adv_perm_net_capable,omitempty"`
	// Send GSHUT community
	ShouldSendGshutCommunity bool `protobuf:"varint,108,opt,name=should_send_gshut_community,json=shouldSendGshutCommunity" json:"should_send_gshut_community,omitempty"`
	// GSHUT active
	GshutActive bool `protobuf:"varint,109,opt,name=gshut_active,json=gshutActive" json:"gshut_active,omitempty"`
	// GSHUT local preference set
	GshutLocprefSet bool `protobuf:"varint,110,opt,name=gshut_locpref_set,json=gshutLocprefSet" json:"gshut_locpref_set,omitempty"`
	// GSHUT local preference
	GshutLocpref uint32 `protobuf:"varint,111,opt,name=gshut_locpref,json=gshutLocpref" json:"gshut_locpref,omitempty"`
	// GSHUT AS prepends
	GshutPrepends uint32 `protobuf:"varint,112,opt,name=gshut_prepends,json=gshutPrepends" json:"gshut_prepends,omitempty"`
	// Advertise routes with local-label via Unicast SAFI
	AdvertiseLocalLabeledRouteUnicast bool `protobuf:"varint,113,opt,name=advertise_local_labeled_route_unicast,json=advertiseLocalLabeledRouteUnicast" json:"advertise_local_labeled_route_unicast,omitempty"`
	// Enable label stack
	EnableLabelStack bool `protobuf:"varint,114,opt,name=enable_label_stack,json=enableLabelStack" json:"enable_label_stack,omitempty"`
}

func (m *BgpUpdgrpBag) Reset()                    { *m = BgpUpdgrpBag{} }
func (m *BgpUpdgrpBag) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdgrpBag) ProtoMessage()               {}
func (*BgpUpdgrpBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpUpdgrpBag) GetProcessInstanceId() uint32 {
	if m != nil {
		return m.ProcessInstanceId
	}
	return 0
}

func (m *BgpUpdgrpBag) GetSessionAfName() uint32 {
	if m != nil {
		return m.SessionAfName
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdateGroupNumber() uint32 {
	if m != nil {
		return m.UpdateGroupNumber
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdateGroupAfName() string {
	if m != nil {
		return m.UpdateGroupAfName
	}
	return ""
}

func (m *BgpUpdgrpBag) GetShouldSendCommunities() bool {
	if m != nil {
		return m.ShouldSendCommunities
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldSendExtCommunities() bool {
	if m != nil {
		return m.ShouldSendExtCommunities
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldSendStitchingRt() bool {
	if m != nil {
		return m.ShouldSendStitchingRt
	}
	return false
}

func (m *BgpUpdgrpBag) GetHasOrfReceiveCapability() bool {
	if m != nil {
		return m.HasOrfReceiveCapability
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsRouteReflectorClient() bool {
	if m != nil {
		return m.IsRouteReflectorClient
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsClientReflectionDisabled() bool {
	if m != nil {
		return m.IsClientReflectionDisabled
	}
	return false
}

func (m *BgpUpdgrpBag) GetAcceptsLegacyPeRtRoute() bool {
	if m != nil {
		return m.AcceptsLegacyPeRtRoute
	}
	return false
}

func (m *BgpUpdgrpBag) GetUpdgrpClusterId() uint32 {
	if m != nil {
		return m.UpdgrpClusterId
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdgrpClusterType() uint32 {
	if m != nil {
		return m.UpdgrpClusterType
	}
	return 0
}

func (m *BgpUpdgrpBag) GetOrrGroupName() string {
	if m != nil {
		return m.OrrGroupName
	}
	return ""
}

func (m *BgpUpdgrpBag) GetOrrGroupIndex() uint32 {
	if m != nil {
		return m.OrrGroupIndex
	}
	return 0
}

func (m *BgpUpdgrpBag) GetIsOrrRootAddressConfigured() bool {
	if m != nil {
		return m.IsOrrRootAddressConfigured
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldRemovePrivateASs() bool {
	if m != nil {
		return m.ShouldRemovePrivateASs
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldRemovePrivateAsEntPath() bool {
	if m != nil {
		return m.ShouldRemovePrivateAsEntPath
	}
	return false
}

func (m *BgpUpdgrpBag) GetUseNextHopSelf() bool {
	if m != nil {
		return m.UseNextHopSelf
	}
	return false
}

func (m *BgpUpdgrpBag) GetUseNextHopUnchangedMpath() bool {
	if m != nil {
		return m.UseNextHopUnchangedMpath
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsInternalPeers() bool {
	if m != nil {
		return m.IsInternalPeers
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsCommonAdminPeers() bool {
	if m != nil {
		return m.IsCommonAdminPeers
	}
	return false
}

func (m *BgpUpdgrpBag) GetIs4ByteAsPeer() bool {
	if m != nil {
		return m.Is4ByteAsPeer
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAddpathCapable() bool {
	if m != nil {
		return m.IsAddpathCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsSendMcastAttrEnabled() bool {
	if m != nil {
		return m.IsSendMcastAttrEnabled
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAigpCapable() bool {
	if m != nil {
		return m.IsAigpCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAigpCostCommunityCapable() bool {
	if m != nil {
		return m.IsAigpCostCommunityCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAigpMedCapable() bool {
	if m != nil {
		return m.IsAigpMedCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsLlgrCapable() bool {
	if m != nil {
		return m.IsLlgrCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAdvCapable() bool {
	if m != nil {
		return m.IsAdvCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsAdvReorgCapable() bool {
	if m != nil {
		return m.IsAdvReorgCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetDisableNativeAdvertisement() bool {
	if m != nil {
		return m.DisableNativeAdvertisement
	}
	return false
}

func (m *BgpUpdgrpBag) GetDisableDefVrfImpAdvertisement() bool {
	if m != nil {
		return m.DisableDefVrfImpAdvertisement
	}
	return false
}

func (m *BgpUpdgrpBag) GetDisableVrfReImpAdvertisement() bool {
	if m != nil {
		return m.DisableVrfReImpAdvertisement
	}
	return false
}

func (m *BgpUpdgrpBag) GetEncapsulationType() uint32 {
	if m != nil {
		return m.EncapsulationType
	}
	return 0
}

func (m *BgpUpdgrpBag) GetAdvertiseRtType() uint32 {
	if m != nil {
		return m.AdvertiseRtType
	}
	return 0
}

func (m *BgpUpdgrpBag) GetIsDirectlyConnectedEbgpV6Peers() bool {
	if m != nil {
		return m.IsDirectlyConnectedEbgpV6Peers
	}
	return false
}

func (m *BgpUpdgrpBag) GetMinimumAdvertisementInterval() uint32 {
	if m != nil {
		return m.MinimumAdvertisementInterval
	}
	return 0
}

func (m *BgpUpdgrpBag) GetMinimumAdvertisementIntervalMsecs() uint32 {
	if m != nil {
		return m.MinimumAdvertisementIntervalMsecs
	}
	return 0
}

func (m *BgpUpdgrpBag) GetLocalAs() uint32 {
	if m != nil {
		return m.LocalAs
	}
	return 0
}

func (m *BgpUpdgrpBag) GetRoutePolicyOut() string {
	if m != nil {
		return m.RoutePolicyOut
	}
	return ""
}

func (m *BgpUpdgrpBag) GetDesyncCount() uint32 {
	if m != nil {
		return m.DesyncCount
	}
	return 0
}

func (m *BgpUpdgrpBag) GetSubgrpMergeCount() uint32 {
	if m != nil {
		return m.SubgrpMergeCount
	}
	return 0
}

func (m *BgpUpdgrpBag) GetRefreshSubgrpCount() uint32 {
	if m != nil {
		return m.RefreshSubgrpCount
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdatesFormatted() uint32 {
	if m != nil {
		return m.UpdatesFormatted
	}
	return 0
}

func (m *BgpUpdgrpBag) GetUpdatesReplicated() uint32 {
	if m != nil {
		return m.UpdatesReplicated
	}
	return 0
}

func (m *BgpUpdgrpBag) GetNeighborList() []*BgpAddrtype {
	if m != nil {
		return m.NeighborList
	}
	return nil
}

func (m *BgpUpdgrpBag) GetPerformanceStatistics() *BgpPerfUpdgrp_ {
	if m != nil {
		return m.PerformanceStatistics
	}
	return nil
}

func (m *BgpUpdgrpBag) GetUpdateSubGroupList() []*BgpUpdSubgrp_ {
	if m != nil {
		return m.UpdateSubGroupList
	}
	return nil
}

func (m *BgpUpdgrpBag) GetLocalAsReplaceAs() bool {
	if m != nil {
		return m.LocalAsReplaceAs
	}
	return false
}

func (m *BgpUpdgrpBag) GetAsOverride() bool {
	if m != nil {
		return m.AsOverride
	}
	return false
}

func (m *BgpUpdgrpBag) GetSooValue() string {
	if m != nil {
		return m.SooValue
	}
	return ""
}

func (m *BgpUpdgrpBag) GetSplitHorizon() bool {
	if m != nil {
		return m.SplitHorizon
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsLabeledAfiEnabled() bool {
	if m != nil {
		return m.IsLabeledAfiEnabled
	}
	return false
}

func (m *BgpUpdgrpBag) GetIsUnlabeledAfiEnabled() bool {
	if m != nil {
		return m.IsUnlabeledAfiEnabled
	}
	return false
}

func (m *BgpUpdgrpBag) GetExtNhEncoding() bool {
	if m != nil {
		return m.ExtNhEncoding
	}
	return false
}

func (m *BgpUpdgrpBag) GetRemoteAs() uint32 {
	if m != nil {
		return m.RemoteAs
	}
	return 0
}

func (m *BgpUpdgrpBag) GetIsAdvPermNetCapable() bool {
	if m != nil {
		return m.IsAdvPermNetCapable
	}
	return false
}

func (m *BgpUpdgrpBag) GetShouldSendGshutCommunity() bool {
	if m != nil {
		return m.ShouldSendGshutCommunity
	}
	return false
}

func (m *BgpUpdgrpBag) GetGshutActive() bool {
	if m != nil {
		return m.GshutActive
	}
	return false
}

func (m *BgpUpdgrpBag) GetGshutLocprefSet() bool {
	if m != nil {
		return m.GshutLocprefSet
	}
	return false
}

func (m *BgpUpdgrpBag) GetGshutLocpref() uint32 {
	if m != nil {
		return m.GshutLocpref
	}
	return 0
}

func (m *BgpUpdgrpBag) GetGshutPrepends() uint32 {
	if m != nil {
		return m.GshutPrepends
	}
	return 0
}

func (m *BgpUpdgrpBag) GetAdvertiseLocalLabeledRouteUnicast() bool {
	if m != nil {
		return m.AdvertiseLocalLabeledRouteUnicast
	}
	return false
}

func (m *BgpUpdgrpBag) GetEnableLabelStack() bool {
	if m != nil {
		return m.EnableLabelStack
	}
	return false
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()                    { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()                    { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
	// IPV4 Policy Addr
	Ipv4SrPolicyAddress *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress" json:"ipv4_sr_policy_address,omitempty"`
	// IPV6 Policy Addr
	Ipv6SrPolicyAddress *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress" json:"ipv6_sr_policy_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpPerfUpdgrp_ struct {
	// No. of calls to update generation function
	UpdateGenerationCalls uint32 `protobuf:"varint,1,opt,name=update_generation_calls,json=updateGenerationCalls" json:"update_generation_calls,omitempty"`
	// No. of prefixes updates generated for
	UpdateGenerationPrefixesCount uint32 `protobuf:"varint,2,opt,name=update_generation_prefixes_count,json=updateGenerationPrefixesCount" json:"update_generation_prefixes_count,omitempty"`
	// No. of be prefixes updates generated for
	UpdateGenerationBePrefixesCount uint32 `protobuf:"varint,3,opt,name=update_generation_be_prefixes_count,json=updateGenerationBePrefixesCount" json:"update_generation_be_prefixes_count,omitempty"`
	// No. of update messages generated
	UpdateGenerationMessagesCount uint32 `protobuf:"varint,4,opt,name=update_generation_messages_count,json=updateGenerationMessagesCount" json:"update_generation_messages_count,omitempty"`
	// Time spent generating updates (milliseconds)
	UpdateGenerationTime uint32 `protobuf:"varint,5,opt,name=update_generation_time,json=updateGenerationTime" json:"update_generation_time,omitempty"`
	// Timestamp when update timer started for updgrp
	UpdgenTimerStartTime uint64 `protobuf:"varint,6,opt,name=updgen_timer_start_time,json=updgenTimerStartTime" json:"updgen_timer_start_time,omitempty"`
	// Timestamp when update timer stopped for updgrp
	UpdgenTimerStopTime uint64 `protobuf:"varint,7,opt,name=updgen_timer_stop_time,json=updgenTimerStopTime" json:"updgen_timer_stop_time,omitempty"`
	// Timestamp when update timer processed for updgrp
	UpdgenTimerProcessTime uint64 `protobuf:"varint,8,opt,name=updgen_timer_process_time,json=updgenTimerProcessTime" json:"updgen_timer_process_time,omitempty"`
}

func (m *BgpPerfUpdgrp_) Reset()                    { *m = BgpPerfUpdgrp_{} }
func (m *BgpPerfUpdgrp_) String() string            { return proto.CompactTextString(m) }
func (*BgpPerfUpdgrp_) ProtoMessage()               {}
func (*BgpPerfUpdgrp_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BgpPerfUpdgrp_) GetUpdateGenerationCalls() uint32 {
	if m != nil {
		return m.UpdateGenerationCalls
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdateGenerationPrefixesCount() uint32 {
	if m != nil {
		return m.UpdateGenerationPrefixesCount
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdateGenerationBePrefixesCount() uint32 {
	if m != nil {
		return m.UpdateGenerationBePrefixesCount
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdateGenerationMessagesCount() uint32 {
	if m != nil {
		return m.UpdateGenerationMessagesCount
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdateGenerationTime() uint32 {
	if m != nil {
		return m.UpdateGenerationTime
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdgenTimerStartTime() uint64 {
	if m != nil {
		return m.UpdgenTimerStartTime
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdgenTimerStopTime() uint64 {
	if m != nil {
		return m.UpdgenTimerStopTime
	}
	return 0
}

func (m *BgpPerfUpdgrp_) GetUpdgenTimerProcessTime() uint64 {
	if m != nil {
		return m.UpdgenTimerProcessTime
	}
	return 0
}

type BgpUpdFiltergrp_ struct {
	// Update sub-group index
	UpdateFilterGroupNumber uint32 `protobuf:"varint,1,opt,name=update_filter_group_number,json=updateFilterGroupNumber" json:"update_filter_group_number,omitempty"`
	// Neighbors in this update sub-group
	NeighborList []*BgpAddrtype `protobuf:"bytes,2,rep,name=neighbor_list,json=neighborList" json:"neighbor_list,omitempty"`
	// RT count per filter group
	RTs uint32 `protobuf:"varint,3,opt,name=r_ts,json=rTs" json:"r_ts,omitempty"`
	// Flags per filter group
	FGroupFlags uint32 `protobuf:"varint,4,opt,name=f_group_flags,json=fGroupFlags" json:"f_group_flags,omitempty"`
	// Nbrs per filter group
	FGroupNeighbors uint32 `protobuf:"varint,5,opt,name=f_group_neighbors,json=fGroupNeighbors" json:"f_group_neighbors,omitempty"`
	// Number of message elems created for filtergroup
	FGroupCreatedMessageElements uint32 `protobuf:"varint,6,opt,name=f_group_created_message_elements,json=fGroupCreatedMessageElements" json:"f_group_created_message_elements,omitempty"`
	// Number of message elems deleted
	FGroupDeletedMessageElements uint32 `protobuf:"varint,7,opt,name=f_group_deleted_message_elements,json=fGroupDeletedMessageElements" json:"f_group_deleted_message_elements,omitempty"`
	// Number of message elems queued
	FGroupQueuedMessageElements uint32 `protobuf:"varint,8,opt,name=f_group_queued_message_elements,json=fGroupQueuedMessageElements" json:"f_group_queued_message_elements,omitempty"`
	// Number of prefixes advertised to filtergroup in last update walk
	FGroupAdvertisedPrefixes uint32 `protobuf:"varint,9,opt,name=f_group_advertised_prefixes,json=fGroupAdvertisedPrefixes" json:"f_group_advertised_prefixes,omitempty"`
	// Number of prefixes advertised to filtergroup in all update walk
	FGroupTotalAdvertisedPrefixes uint32 `protobuf:"varint,10,opt,name=f_group_total_advertised_prefixes,json=fGroupTotalAdvertisedPrefixes" json:"f_group_total_advertised_prefixes,omitempty"`
	// Number of prefixes withdrawn f`rom filtergroupin last update walk
	FGroupWithdrawnPrefixes uint32 `protobuf:"varint,11,opt,name=f_group_withdrawn_prefixes,json=fGroupWithdrawnPrefixes" json:"f_group_withdrawn_prefixes,omitempty"`
	// Number of prefixes withdrawn f`rom filtergroupin all update walk
	FGroupTotalWithdrawnPrefixes uint32 `protobuf:"varint,12,opt,name=f_group_total_withdrawn_prefixes,json=fGroupTotalWithdrawnPrefixes" json:"f_group_total_withdrawn_prefixes,omitempty"`
	// Number of prefixes  non-optm from filtergroupin all update walk
	FGroupTotalNonOptimisedPrefixes uint32 `protobuf:"varint,13,opt,name=f_group_total_non_optimised_prefixes,json=fGroupTotalNonOptimisedPrefixes" json:"f_group_total_non_optimised_prefixes,omitempty"`
	// Number of prefixes skipped for filtergroup in last update walk
	FGroupSkippedPrefixes uint32 `protobuf:"varint,14,opt,name=f_group_skipped_prefixes,json=fGroupSkippedPrefixes" json:"f_group_skipped_prefixes,omitempty"`
	// Number of prefixes suppressed for filtergroup in last update walk
	FGroupSuppressedPrefixes uint32 `protobuf:"varint,15,opt,name=f_group_suppressed_prefixes,json=fGroupSuppressedPrefixes" json:"f_group_suppressed_prefixes,omitempty"`
	// RT attribute list present
	IsRtPresent bool `protobuf:"varint,16,opt,name=is_rt_present,json=isRtPresent" json:"is_rt_present,omitempty"`
	// Extended community attribute
	ExtendedCommunity []uint32 `protobuf:"varint,17,rep,packed,name=extended_community,json=extendedCommunity" json:"extended_community,omitempty"`
}

func (m *BgpUpdFiltergrp_) Reset()                    { *m = BgpUpdFiltergrp_{} }
func (m *BgpUpdFiltergrp_) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdFiltergrp_) ProtoMessage()               {}
func (*BgpUpdFiltergrp_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BgpUpdFiltergrp_) GetUpdateFilterGroupNumber() uint32 {
	if m != nil {
		return m.UpdateFilterGroupNumber
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetNeighborList() []*BgpAddrtype {
	if m != nil {
		return m.NeighborList
	}
	return nil
}

func (m *BgpUpdFiltergrp_) GetRTs() uint32 {
	if m != nil {
		return m.RTs
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupFlags() uint32 {
	if m != nil {
		return m.FGroupFlags
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupNeighbors() uint32 {
	if m != nil {
		return m.FGroupNeighbors
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupCreatedMessageElements() uint32 {
	if m != nil {
		return m.FGroupCreatedMessageElements
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupDeletedMessageElements() uint32 {
	if m != nil {
		return m.FGroupDeletedMessageElements
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupQueuedMessageElements() uint32 {
	if m != nil {
		return m.FGroupQueuedMessageElements
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupAdvertisedPrefixes() uint32 {
	if m != nil {
		return m.FGroupAdvertisedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupTotalAdvertisedPrefixes() uint32 {
	if m != nil {
		return m.FGroupTotalAdvertisedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupWithdrawnPrefixes() uint32 {
	if m != nil {
		return m.FGroupWithdrawnPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupTotalWithdrawnPrefixes() uint32 {
	if m != nil {
		return m.FGroupTotalWithdrawnPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupTotalNonOptimisedPrefixes() uint32 {
	if m != nil {
		return m.FGroupTotalNonOptimisedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupSkippedPrefixes() uint32 {
	if m != nil {
		return m.FGroupSkippedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetFGroupSuppressedPrefixes() uint32 {
	if m != nil {
		return m.FGroupSuppressedPrefixes
	}
	return 0
}

func (m *BgpUpdFiltergrp_) GetIsRtPresent() bool {
	if m != nil {
		return m.IsRtPresent
	}
	return false
}

func (m *BgpUpdFiltergrp_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

type BgpUpdSubgrp_ struct {
	// Update sub-group index
	UpdateSubGroupNumber uint32 `protobuf:"varint,1,opt,name=update_sub_group_number,json=updateSubGroupNumber" json:"update_sub_group_number,omitempty"`
	// Update sub-group fgrp-num
	FilterGroup uint32 `protobuf:"varint,2,opt,name=filter_group,json=filterGroup" json:"filter_group,omitempty"`
	// Wait for  RT Nbr EoRs
	WaitForEoRs bool `protobuf:"varint,3,opt,name=wait_for_eo_rs,json=waitForEoRs" json:"wait_for_eo_rs,omitempty"`
	// Update f-group list
	UpdateFilterGroupList []*BgpUpdFiltergrp_ `protobuf:"bytes,4,rep,name=update_filter_group_list,json=updateFilterGroupList" json:"update_filter_group_list,omitempty"`
	// Neighbors in this subgrp not in any filtergrp
	NeighborList []*BgpAddrtype `protobuf:"bytes,5,rep,name=neighbor_list,json=neighborList" json:"neighbor_list,omitempty"`
}

func (m *BgpUpdSubgrp_) Reset()                    { *m = BgpUpdSubgrp_{} }
func (m *BgpUpdSubgrp_) String() string            { return proto.CompactTextString(m) }
func (*BgpUpdSubgrp_) ProtoMessage()               {}
func (*BgpUpdSubgrp_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BgpUpdSubgrp_) GetUpdateSubGroupNumber() uint32 {
	if m != nil {
		return m.UpdateSubGroupNumber
	}
	return 0
}

func (m *BgpUpdSubgrp_) GetFilterGroup() uint32 {
	if m != nil {
		return m.FilterGroup
	}
	return 0
}

func (m *BgpUpdSubgrp_) GetWaitForEoRs() bool {
	if m != nil {
		return m.WaitForEoRs
	}
	return false
}

func (m *BgpUpdSubgrp_) GetUpdateFilterGroupList() []*BgpUpdFiltergrp_ {
	if m != nil {
		return m.UpdateFilterGroupList
	}
	return nil
}

func (m *BgpUpdSubgrp_) GetNeighborList() []*BgpAddrtype {
	if m != nil {
		return m.NeighborList
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpUpdgrpBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_updgrp_bag_KEYS")
	proto.RegisterType((*BgpUpdgrpBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_updgrp_bag")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.IPV6AddressType")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_addrtype")
	proto.RegisterType((*BgpPerfUpdgrp_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_perf_updgrp_")
	proto.RegisterType((*BgpUpdFiltergrp_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_upd_filtergrp_")
	proto.RegisterType((*BgpUpdSubgrp_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.vrfs.vrf.afs.af.update_groups.update_group.bgp_upd_subgrp_")
}

func init() { proto.RegisterFile("bgp_updgrp_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 3063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x5b, 0x77, 0x1c, 0x47,
	0x11, 0x3e, 0x1b, 0xdb, 0xb1, 0xd2, 0xba, 0x8f, 0x6e, 0xe3, 0x4b, 0x1c, 0x59, 0x76, 0x12, 0xe1,
	0xc4, 0x0a, 0xc8, 0xca, 0x9a, 0xc4, 0x49, 0xc8, 0x5a, 0x17, 0x5b, 0x44, 0x92, 0x37, 0xb3, 0xb2,
	0x42, 0xb8, 0x35, 0xb3, 0x33, 0xbd, 0xbb, 0x4d, 0xe6, 0x96, 0xee, 0xde, 0xb5, 0x04, 0xe7, 0x84,
	0x13, 0xe0, 0x90, 0xbf, 0x01, 0x87, 0x17, 0x1e, 0xe0, 0x70, 0x20, 0xc0, 0x0b, 0x07, 0x1e, 0xf8,
	0x0f, 0xfc, 0x10, 0x5e, 0x78, 0xe6, 0x74, 0x55, 0xf7, 0xec, 0xcc, 0x6a, 0x1d, 0x9b, 0x17, 0x4b,
	0x2f, 0xb6, 0xb6, 0xea, 0xab, 0xaf, 0xab, 0xbb, 0xab, 0xaa, 0x6b, 0x7a, 0x86, 0xcc, 0x36, 0xdb,
	0x19, 0xed, 0x66, 0x61, 0x5b, 0x64, 0xb4, 0xe9, 0xb7, 0x57, 0x32, 0x91, 0xaa, 0xd4, 0x89, 0x03,
	0x2e, 0x83, 0x94, 0xf2, 0x54, 0xd2, 0x43, 0x41, 0x79, 0xd6, 0x5b, 0xa3, 0x1a, 0x97, 0x66, 0x4c,
	0xac, 0x34, 0xdb, 0xd9, 0x0a, 0x4f, 0xa4, 0xf2, 0x93, 0x80, 0xc9, 0xfc, 0xaf, 0xfc, 0x0f, 0xaa,
	0xff, 0x0b, 0x9b, 0x47, 0x2b, 0x3d, 0xd1, 0x92, 0xfa, 0x9f, 0x15, 0xbf, 0x25, 0x57, 0xfc, 0xd6,
	0x4a, 0x37, 0x0b, 0x7d, 0xc5, 0x68, 0x5b, 0xa4, 0xdd, 0x4c, 0x96, 0x7e, 0x2d, 0xfd, 0xb3, 0x42,
	0x66, 0xca, 0x7e, 0xd0, 0x0f, 0x36, 0x3f, 0x6e, 0x38, 0xd7, 0xc8, 0x78, 0x4e, 0x9b, 0xf8, 0x31,
	0x73, 0x2b, 0x8b, 0x95, 0xe5, 0x17, 0xbc, 0x31, 0x2b, 0xdc, 0xf3, 0x63, 0xe6, 0x5c, 0x20, 0x23,
	0x3d, 0xd1, 0x42, 0xfd, 0x73, 0xa0, 0x3f, 0xdf, 0x13, 0x2d, 0x50, 0x2d, 0x90, 0xf3, 0xbe, 0xd1,
	0x9c, 0x01, 0xcd, 0xf3, 0x3e, 0x2a, 0x5e, 0x21, 0x93, 0x45, 0x07, 0x28, 0x0f, 0xdd, 0xb3, 0x8b,
	0x95, 0xe5, 0x71, 0x6f, 0x1c, 0xc5, 0xf7, 0xb4, 0x74, 0x3b, 0xd4, 0xb8, 0x16, 0x8f, 0x14, 0x13,
	0x7d, 0xdc, 0x39, 0xc4, 0xa1, 0xd8, 0xe0, 0x96, 0xfe, 0x7b, 0x99, 0x4c, 0x94, 0x27, 0xe0, 0xac,
	0x90, 0x99, 0x4c, 0xa4, 0x01, 0x93, 0x92, 0xe6, 0x73, 0xe0, 0xa1, 0xbb, 0x0a, 0xe6, 0xd3, 0x46,
	0xb5, 0x6d, 0x34, 0x38, 0x94, 0x64, 0x52, 0xf2, 0x34, 0xa1, 0xd6, 0xe7, 0x5b, 0x38, 0x94, 0x11,
	0xd7, 0xd0, 0xf5, 0x15, 0x32, 0x53, 0x72, 0x3d, 0xe9, 0xc6, 0x4d, 0x26, 0xdc, 0x35, 0xe4, 0x2d,
	0xb8, 0xbf, 0x07, 0x0a, 0xe7, 0x0d, 0x32, 0x5b, 0xc2, 0x5b, 0xf2, 0x37, 0x61, 0x41, 0x8a, 0x06,
	0x66, 0x80, 0x2a, 0x59, 0x90, 0x9d, 0xb4, 0x1b, 0x85, 0x54, 0xb2, 0x24, 0xa4, 0x41, 0x1a, 0xc7,
	0xdd, 0x84, 0x2b, 0xce, 0xa4, 0x5b, 0x5d, 0xac, 0x2c, 0x8f, 0x78, 0x73, 0xa8, 0x6e, 0xb0, 0x24,
	0x5c, 0xef, 0x2b, 0x9d, 0x77, 0xc9, 0xa5, 0xa2, 0x1d, 0x3b, 0x54, 0x25, 0xdb, 0xdb, 0x60, 0xeb,
	0xf6, 0x6d, 0x37, 0x0f, 0x55, 0xd1, 0xfc, 0x36, 0x71, 0x8b, 0xe6, 0x52, 0x71, 0x15, 0x74, 0x78,
	0xd2, 0xa6, 0x42, 0xb9, 0xdf, 0x1c, 0x1c, 0xb7, 0x61, 0xb5, 0x9e, 0x72, 0xee, 0x90, 0x8b, 0x1d,
	0x5f, 0xd2, 0x54, 0xb4, 0xa8, 0x60, 0x01, 0xe3, 0x3d, 0x46, 0x03, 0x3f, 0xf3, 0x9b, 0x3c, 0xe2,
	0xea, 0xc8, 0x7d, 0x0b, 0x4c, 0x17, 0x3a, 0xbe, 0x7c, 0x20, 0x5a, 0x1e, 0xea, 0xd7, 0x73, 0xb5,
	0xf3, 0x16, 0xb9, 0xc0, 0x25, 0x15, 0x69, 0x57, 0x31, 0x2a, 0x58, 0x2b, 0x62, 0x81, 0x4a, 0x05,
	0x0d, 0x22, 0xce, 0x12, 0xe5, 0xbe, 0x0d, 0xb6, 0xf3, 0x5c, 0x7a, 0x5a, 0xef, 0x59, 0xf5, 0x3a,
	0x68, 0x9d, 0x1a, 0x79, 0x91, 0x4b, 0x03, 0xb5, 0xb6, 0x7a, 0xf7, 0x42, 0x2e, 0xfd, 0x66, 0xc4,
	0x42, 0xf7, 0x0e, 0x98, 0x5f, 0xe4, 0x12, 0x0d, 0xbc, 0x1c, 0xb2, 0x61, 0x10, 0xce, 0xdb, 0xe4,
	0xa2, 0x1f, 0x04, 0x2c, 0x53, 0x92, 0x46, 0xac, 0xed, 0x07, 0x47, 0x34, 0x63, 0x54, 0x28, 0xf4,
	0xc7, 0x7d, 0x07, 0x87, 0x37, 0x88, 0x1d, 0x00, 0xd4, 0x99, 0xa7, 0xc0, 0x1b, 0xe7, 0x06, 0x99,
	0x36, 0xd1, 0x16, 0x44, 0x5d, 0xa9, 0x43, 0x94, 0x87, 0xee, 0xbb, 0x10, 0x05, 0x93, 0xa8, 0x58,
	0x47, 0xf9, 0x76, 0x68, 0x62, 0xa6, 0x88, 0x55, 0x47, 0x19, 0x73, 0xdf, 0xcb, 0x63, 0xa6, 0x8f,
	0xde, 0x3f, 0xca, 0x98, 0x73, 0x9d, 0x4c, 0xa4, 0xc2, 0xc6, 0x3c, 0x44, 0xcb, 0xb7, 0x30, 0xf1,
	0x52, 0x81, 0x21, 0x6f, 0x93, 0xa8, 0x8f, 0xe2, 0x49, 0xc8, 0x0e, 0xdd, 0xf7, 0x31, 0x62, 0x2d,
	0x6c, 0x5b, 0x0b, 0x9d, 0xbb, 0xe4, 0x0a, 0xd7, 0xfb, 0x23, 0xa8, 0x48, 0x53, 0x45, 0xfd, 0x30,
	0x14, 0x3a, 0x2b, 0x82, 0x34, 0x69, 0xf1, 0x76, 0x57, 0xb0, 0xd0, 0xad, 0xd9, 0x95, 0x7a, 0x20,
	0x84, 0x97, 0xa6, 0xaa, 0x86, 0x90, 0xf5, 0x1c, 0xa1, 0x57, 0xca, 0x44, 0x87, 0x60, 0x71, 0xda,
	0x63, 0x34, 0x13, 0xbc, 0xa7, 0x83, 0xda, 0xa7, 0x52, 0xba, 0x77, 0x71, 0xa5, 0x10, 0xe1, 0x01,
	0xa0, 0x8e, 0xfa, 0x5a, 0x43, 0x3a, 0xf7, 0xc8, 0xd5, 0xc7, 0xd8, 0x4a, 0xaa, 0xf7, 0x2e, 0xf3,
	0x55, 0xc7, 0x5d, 0x07, 0x8a, 0xcb, 0xc3, 0x28, 0xe4, 0x66, 0xa2, 0xea, 0xbe, 0xea, 0x38, 0x5f,
	0x23, 0xd3, 0x5d, 0xc9, 0x68, 0xa2, 0x43, 0xbb, 0x93, 0x66, 0x54, 0xb2, 0xa8, 0xe5, 0x6e, 0x80,
	0xe1, 0x44, 0x57, 0xb2, 0x3d, 0x76, 0xa8, 0xee, 0xa7, 0x59, 0x83, 0x45, 0x2d, 0xe7, 0x3d, 0x72,
	0xb9, 0x04, 0xed, 0x26, 0x41, 0xc7, 0x4f, 0xda, 0x2c, 0xa4, 0x31, 0x0c, 0xb7, 0x89, 0xd9, 0xd0,
	0xb7, 0x7a, 0x68, 0x01, 0xbb, 0x5a, 0xaf, 0x77, 0x97, 0xeb, 0xc2, 0xa1, 0x98, 0x48, 0xfc, 0x88,
	0x66, 0x8c, 0x09, 0xe9, 0x6e, 0x81, 0xd1, 0x24, 0x97, 0xdb, 0x46, 0x5e, 0xd7, 0x62, 0xe7, 0x1b,
	0x64, 0x4e, 0x07, 0x62, 0x1a, 0xc7, 0xba, 0x76, 0x84, 0x31, 0x4f, 0x0c, 0xfe, 0x1e, 0xe0, 0x1d,
	0x2e, 0xd7, 0x41, 0x57, 0xd3, 0x2a, 0x34, 0x79, 0x95, 0x4c, 0x71, 0xb9, 0x46, 0x9b, 0x47, 0xb8,
	0x0a, 0x1a, 0xee, 0xde, 0x07, 0xf4, 0x38, 0x97, 0x6b, 0x77, 0x8f, 0xf4, 0xac, 0x35, 0xd2, 0x79,
	0x9d, 0x38, 0x5c, 0xea, 0x2d, 0xd3, 0x5e, 0x61, 0x5e, 0x45, 0xcc, 0xdd, 0x06, 0xe8, 0x14, 0x97,
	0x35, 0x54, 0xac, 0xa3, 0x5c, 0xef, 0x12, 0x97, 0x98, 0xbf, 0x71, 0xe0, 0x4b, 0x45, 0x7d, 0xa5,
	0x04, 0x65, 0x09, 0xe6, 0xc3, 0xb7, 0x6d, 0x3a, 0xe9, 0x0c, 0xde, 0xd5, 0xfa, 0x9a, 0x52, 0x62,
	0x13, 0xb5, 0x3a, 0x9a, 0xf4, 0x48, 0xbc, 0x9d, 0xe5, 0xc3, 0x7c, 0x60, 0x3d, 0xaa, 0xf1, 0x76,
	0x66, 0xc7, 0xc0, 0x68, 0x42, 0x5c, 0x2a, 0xfb, 0x35, 0xe6, 0x28, 0x37, 0xdb, 0xb1, 0xd1, 0x04,
	0x66, 0xa9, 0xcc, 0xcb, 0xcc, 0x91, 0xe5, 0xb8, 0x49, 0x66, 0x2c, 0x47, 0xcc, 0xc2, 0xdc, 0x70,
	0x37, 0x9f, 0x16, 0x6f, 0x67, 0xbb, 0x2c, 0xb4, 0x70, 0x74, 0x2d, 0x8a, 0xda, 0x22, 0x87, 0xee,
	0x59, 0xd7, 0x76, 0xa2, 0xb6, 0xb0, 0xb8, 0xeb, 0x64, 0x02, 0x16, 0xab, 0x97, 0xc3, 0x1e, 0x00,
	0x6c, 0x4c, 0x2f, 0x54, 0xcf, 0xa2, 0xde, 0x20, 0xb3, 0x06, 0x25, 0x58, 0x2a, 0xda, 0x39, 0xb6,
	0x0e, 0xd8, 0x69, 0xc0, 0x7a, 0x5a, 0x63, 0x0d, 0xde, 0x27, 0x97, 0x4d, 0x4d, 0xa1, 0x89, 0xaf,
	0x74, 0x7d, 0xf3, 0xc3, 0x1e, 0x13, 0x8a, 0x4b, 0x16, 0xeb, 0x32, 0xf5, 0x21, 0xce, 0xd7, 0x60,
	0xf6, 0x00, 0x52, 0x2b, 0x22, 0x9c, 0xfb, 0xe4, 0xaa, 0x65, 0x08, 0x59, 0x8b, 0xea, 0xe3, 0x92,
	0xc7, 0xd9, 0x00, 0x8d, 0x07, 0x34, 0x2f, 0x1a, 0xe0, 0x06, 0x6b, 0x1d, 0x88, 0xd6, 0x76, 0x9c,
	0x95, 0x99, 0xb6, 0xc8, 0xa2, 0x65, 0xea, 0x41, 0xc1, 0x1d, 0x42, 0xd4, 0xc0, 0x54, 0x32, 0xb8,
	0x03, 0x5d, 0x76, 0x8f, 0xf1, 0xdc, 0x24, 0x0e, 0x4b, 0x02, 0x3f, 0x93, 0xdd, 0xc8, 0x87, 0xaa,
	0x09, 0x05, 0x69, 0x1f, 0x0b, 0x52, 0x49, 0x03, 0x05, 0xe9, 0x06, 0x99, 0xce, 0xc7, 0xd0, 0x05,
	0x12, 0xd0, 0x0f, 0xb1, 0xd8, 0xe5, 0x0a, 0x4f, 0x01, 0xf6, 0x03, 0x72, 0x8d, 0x4b, 0x1a, 0x72,
	0xc1, 0x02, 0x15, 0x1d, 0xe9, 0x32, 0x93, 0xb0, 0x40, 0xb1, 0x90, 0x32, 0x7d, 0x42, 0xf7, 0xaa,
	0x26, 0x39, 0x0e, 0xc0, 0xcb, 0x2b, 0x5c, 0x6e, 0x18, 0xe4, 0xba, 0x05, 0x6e, 0x36, 0xdb, 0xd9,
	0x41, 0x15, 0x13, 0x65, 0x83, 0x5c, 0x89, 0x79, 0xc2, 0xe3, 0x6e, 0x5c, 0x9e, 0x24, 0xa6, 0x66,
	0xcf, 0x8f, 0xdc, 0x8f, 0xc0, 0x8b, 0xcb, 0x06, 0x55, 0x9a, 0xe5, 0xb6, 0xc1, 0x38, 0x0f, 0xc8,
	0xf5, 0xaf, 0x66, 0xa1, 0xb1, 0x64, 0x81, 0x74, 0xbf, 0x03, 0x5c, 0x57, 0xbf, 0x8a, 0x6b, 0x57,
	0x03, 0x75, 0xcf, 0x13, 0xa5, 0x81, 0x1f, 0x51, 0x5f, 0xba, 0x1f, 0x83, 0xd1, 0x79, 0xf8, 0x5d,
	0x93, 0xce, 0x32, 0x99, 0xc2, 0xe3, 0x2c, 0x4b, 0x23, 0x1e, 0x1c, 0xd1, 0xb4, 0xab, 0xdc, 0xef,
	0x42, 0xf5, 0x9e, 0x00, 0x79, 0x1d, 0xc4, 0x0f, 0xba, 0xca, 0xb9, 0x4a, 0xc6, 0x42, 0x26, 0x8f,
	0x92, 0x80, 0x06, 0x69, 0x37, 0x51, 0xee, 0xf7, 0x80, 0x68, 0x14, 0x65, 0xeb, 0x5a, 0xa4, 0xd3,
	0x5f, 0x76, 0x9b, 0xfa, 0xe0, 0x88, 0x99, 0x68, 0x33, 0x03, 0xfc, 0x3e, 0x00, 0xa7, 0x50, 0xb3,
	0xab, 0x15, 0x88, 0xfe, 0x3a, 0x99, 0x15, 0xac, 0x25, 0x98, 0xec, 0x50, 0x63, 0x85, 0xf8, 0x1f,
	0x00, 0xde, 0x31, 0xba, 0x06, 0xa8, 0xd0, 0xe2, 0x35, 0x62, 0x1a, 0x10, 0x49, 0x5b, 0xa9, 0x88,
	0x7d, 0xa5, 0x58, 0xe8, 0xfe, 0x10, 0xe9, 0x8d, 0x62, 0xcb, 0xca, 0x75, 0xcc, 0x58, 0xb0, 0x60,
	0x59, 0xc4, 0x03, 0x5f, 0xa3, 0x69, 0xb1, 0xf1, 0x91, 0x5e, 0xae, 0x70, 0x7e, 0x5d, 0x21, 0xe3,
	0x09, 0xe3, 0xed, 0x4e, 0x33, 0x15, 0x34, 0xe2, 0x52, 0xb9, 0x3f, 0x5a, 0x3c, 0xb3, 0x3c, 0xba,
	0xfa, 0xd3, 0x95, 0x67, 0xda, 0xdc, 0x6a, 0x4a, 0x38, 0xf3, 0x74, 0xcc, 0x7a, 0x63, 0xd6, 0xa3,
	0x1d, 0x2e, 0x95, 0xf3, 0xb7, 0x0a, 0x99, 0xcf, 0x98, 0x80, 0xa9, 0x1b, 0x76, 0xc5, 0xa5, 0xe2,
	0x81, 0x74, 0xfd, 0xc5, 0xca, 0xf2, 0xe8, 0xea, 0xcf, 0x4e, 0xc0, 0x57, 0xed, 0x90, 0x6d, 0x64,
	0xbd, 0xb9, 0x82, 0x7b, 0x8d, 0xdc, 0x3b, 0xe7, 0x4f, 0x15, 0x32, 0x67, 0x0c, 0x65, 0xb7, 0x69,
	0x5a, 0x00, 0x58, 0xe3, 0x26, 0xac, 0xf1, 0x67, 0x27, 0xe0, 0x77, 0x37, 0x0b, 0x6d, 0xd8, 0x79,
	0x26, 0x50, 0x1a, 0xdd, 0x26, 0xf4, 0x21, 0xb0, 0xd8, 0x37, 0xc9, 0x8c, 0xcd, 0x19, 0x88, 0x1f,
	0x3f, 0xd0, 0x67, 0x9f, 0x1b, 0x60, 0xd1, 0x37, 0xe9, 0xe3, 0xa1, 0xa2, 0x26, 0x9d, 0x97, 0xc8,
	0xa8, 0xee, 0x2a, 0x7b, 0x4c, 0x08, 0x1e, 0x32, 0x37, 0x04, 0x18, 0xf1, 0xe5, 0x03, 0x23, 0x71,
	0x2e, 0x91, 0x17, 0x64, 0x9a, 0xd2, 0x9e, 0x1f, 0x75, 0x99, 0xcb, 0x20, 0xc3, 0x46, 0x64, 0x9a,
	0x1e, 0xe8, 0xdf, 0xfa, 0xc9, 0x45, 0x66, 0x11, 0xd7, 0x87, 0xbf, 0xe0, 0x3f, 0x49, 0x13, 0xb7,
	0x85, 0x27, 0x01, 0x08, 0xef, 0xa3, 0xcc, 0xb9, 0x45, 0xe6, 0xf5, 0xb9, 0xe2, 0x37, 0x59, 0xc4,
	0x42, 0xea, 0xb7, 0x78, 0x7e, 0x54, 0xb6, 0x01, 0x3d, 0xc3, 0xe5, 0x0e, 0x2a, 0x6b, 0x2d, 0x6e,
	0xcf, 0xc9, 0xdb, 0xc4, 0xe5, 0x92, 0x76, 0x93, 0x61, 0x66, 0x1d, 0xec, 0x93, 0xb9, 0x7c, 0x68,
	0xd5, 0x05, 0xc3, 0x57, 0xc8, 0xa4, 0xee, 0x46, 0x92, 0x0e, 0x65, 0x49, 0x90, 0x86, 0x3c, 0x69,
	0xbb, 0x1c, 0x4f, 0x31, 0x76, 0xa8, 0xf6, 0x3a, 0x9b, 0x46, 0xa8, 0xe7, 0xa5, 0xfb, 0x24, 0xe8,
	0x0c, 0xdc, 0x1f, 0x43, 0x76, 0x8d, 0xa0, 0xa0, 0x26, 0x9d, 0x35, 0xb2, 0x60, 0x0e, 0xaf, 0x8c,
	0x89, 0x98, 0x26, 0x4c, 0xe5, 0xe7, 0xd7, 0x27, 0xd6, 0xe7, 0x5a, 0xd8, 0xab, 0x33, 0x11, 0xef,
	0x31, 0x65, 0x4f, 0xb0, 0x81, 0x47, 0x83, 0xb6, 0xec, 0x74, 0x0b, 0x07, 0xb7, 0x1b, 0x0d, 0x3e,
	0x1a, 0xdc, 0xd3, 0x80, 0xfc, 0xd4, 0xd6, 0x85, 0x0a, 0x4d, 0xfc, 0x40, 0x9f, 0x6d, 0x6e, 0x0c,
	0xf8, 0x51, 0x90, 0xd5, 0x40, 0xa4, 0x0f, 0x08, 0x84, 0x44, 0x69, 0x90, 0x09, 0xd6, 0xa2, 0x92,
	0x29, 0x37, 0xc1, 0x7e, 0x09, 0x14, 0x3b, 0x28, 0x6f, 0x30, 0xa5, 0xf7, 0xa6, 0x84, 0x75, 0x53,
	0x98, 0xe4, 0x58, 0x11, 0xe7, 0xbc, 0x4c, 0x26, 0x10, 0x94, 0x09, 0x96, 0xb1, 0x24, 0x94, 0x6e,
	0x86, 0xbd, 0x2d, 0x48, 0xeb, 0x46, 0xe8, 0xd4, 0xc9, 0xcb, 0xfd, 0x83, 0x09, 0xc3, 0xcb, 0x6e,
	0x0c, 0x56, 0xe1, 0x6e, 0xc2, 0x75, 0xa7, 0xe3, 0x7e, 0x0a, 0xbe, 0x5c, 0xcd, 0xc1, 0x3b, 0x1a,
	0x6b, 0x76, 0x17, 0x1a, 0xfa, 0x87, 0x08, 0xd4, 0x25, 0x17, 0xb7, 0x13, 0x89, 0x74, 0x36, 0x04,
	0x9f, 0xb8, 0x02, 0xa3, 0x14, 0x35, 0x60, 0xd6, 0xd0, 0xf2, 0xa5, 0x9b, 0x64, 0x6e, 0xbb, 0x7e,
	0xb0, 0xb6, 0xdf, 0x4d, 0x12, 0x16, 0x99, 0xb6, 0x19, 0x4e, 0xc1, 0x59, 0x72, 0x0e, 0x23, 0x13,
	0x1f, 0x99, 0xf1, 0xc7, 0xd2, 0x0d, 0xe2, 0x68, 0xf8, 0xee, 0xc6, 0xfe, 0x93, 0xb1, 0x6f, 0x90,
	0x05, 0x6f, 0x7f, 0x3d, 0x4d, 0xa4, 0x12, 0x3e, 0x4f, 0xd4, 0x93, 0x0d, 0x5e, 0x25, 0x93, 0xdb,
	0xf5, 0x83, 0xea, 0x93, 0x81, 0x7b, 0xc4, 0xd5, 0x09, 0x0b, 0x55, 0x41, 0x0a, 0x73, 0x4e, 0xe9,
	0x12, 0x49, 0x95, 0xb3, 0x4a, 0xe6, 0x8e, 0xcb, 0x99, 0x94, 0xc0, 0x30, 0xe6, 0xcd, 0x68, 0x65,
	0xc3, 0xe8, 0xcc, 0x48, 0x05, 0xbe, 0xea, 0x63, 0xf8, 0xaa, 0x5f, 0xc5, 0x57, 0x1d, 0xe4, 0xbb,
	0x4d, 0xa6, 0x34, 0x5f, 0xb4, 0xda, 0xcb, 0x12, 0xcb, 0x73, 0x8d, 0x8c, 0xf7, 0x7f, 0xf7, 0xed,
	0xc7, 0x40, 0x68, 0x0d, 0x5f, 0x27, 0xb3, 0x3b, 0xab, 0x07, 0xf5, 0xbd, 0xcd, 0x83, 0xfa, 0xde,
	0x93, 0x97, 0xe1, 0x1d, 0x32, 0xd7, 0x1f, 0x26, 0x96, 0xd9, 0xa3, 0xff, 0x6b, 0xac, 0xd7, 0xc8,
	0x8c, 0x5e, 0xed, 0xdd, 0xa7, 0x1a, 0x0a, 0xc1, 0x6b, 0x4f, 0x07, 0x5e, 0x26, 0x53, 0x3b, 0x0d,
	0xba, 0xd3, 0x78, 0xaa, 0x10, 0xd9, 0xae, 0xf7, 0xd6, 0xb6, 0xa2, 0xf4, 0x91, 0xcc, 0x58, 0xf0,
	0xb4, 0x06, 0xd5, 0xa7, 0x37, 0xf8, 0xf3, 0x15, 0x32, 0x56, 0x3c, 0x40, 0x9d, 0x29, 0x72, 0xc6,
	0x6f, 0x71, 0x03, 0xd2, 0x7f, 0xea, 0xea, 0x00, 0x11, 0x63, 0x17, 0x0b, 0xef, 0x80, 0x46, 0xb5,
	0xcc, 0xf0, 0xc3, 0x53, 0x8c, 0x86, 0x98, 0x87, 0x12, 0x03, 0xc4, 0x2b, 0xa1, 0x29, 0xad, 0xc1,
	0xa7, 0x91, 0x01, 0x34, 0xe6, 0x9f, 0x45, 0x9f, 0xed, 0xa3, 0x21, 0xff, 0x2c, 0xfa, 0xaf, 0x15,
	0x02, 0x41, 0x49, 0x15, 0xe4, 0x60, 0x8e, 0x3f, 0x07, 0x07, 0xf8, 0x2f, 0x2b, 0xcf, 0xf8, 0x24,
	0x1c, 0x5a, 0x0d, 0xbc, 0x69, 0x3d, 0x6e, 0x49, 0xec, 0xfc, 0xbe, 0x42, 0xa6, 0x70, 0x51, 0xc2,
	0xfe, 0x92, 0x3c, 0x0f, 0x4e, 0x7f, 0x7e, 0x12, 0x4e, 0x97, 0x6b, 0x92, 0x37, 0x01, 0xdb, 0x12,
	0xe6, 0x9b, 0xb2, 0x6c, 0xbc, 0x2d, 0xa6, 0xc5, 0x79, 0x6c, 0x6b, 0xb5, 0xfc, 0x20, 0x4f, 0x8c,
	0xbc, 0x82, 0xf4, 0xb2, 0xc4, 0xc7, 0x1d, 0x37, 0xf0, 0x11, 0x80, 0xcf, 0x18, 0xb8, 0xbf, 0xdb,
	0x57, 0x39, 0xbf, 0xa9, 0x40, 0x10, 0x55, 0x73, 0xea, 0x17, 0x60, 0x21, 0x3e, 0x7b, 0xf6, 0xeb,
	0x50, 0x2c, 0x9f, 0x10, 0xc4, 0xd5, 0xc2, 0x86, 0x39, 0xe0, 0x63, 0x39, 0x8a, 0xc9, 0xa9, 0xf0,
	0x54, 0x6f, 0x4e, 0xb5, 0x94, 0x45, 0xb9, 0xbb, 0xe5, 0x34, 0x1a, 0x3d, 0x3d, 0xee, 0x96, 0xd2,
	0xf8, 0x77, 0x98, 0x0e, 0xd5, 0x52, 0x80, 0x8d, 0x9d, 0x0a, 0x67, 0x75, 0x80, 0x57, 0x0b, 0x01,
	0xfe, 0x65, 0x85, 0xcc, 0xe7, 0xae, 0x96, 0x83, 0x61, 0xfc, 0x54, 0x38, 0x3c, 0x63, 0x1c, 0x2e,
	0xc5, 0xc3, 0x1f, 0x2a, 0xc4, 0x89, 0x56, 0xb5, 0xcf, 0xbd, 0x2c, 0x92, 0xb9, 0xc7, 0x13, 0x27,
	0xf6, 0x9c, 0x53, 0x3c, 0xde, 0xbd, 0xa9, 0x68, 0xf5, 0x00, 0x3d, 0xb3, 0xfe, 0xfe, 0xbd, 0x42,
	0xe6, 0x84, 0xee, 0x52, 0x6d, 0x03, 0x94, 0xbb, 0x3c, 0x09, 0x2e, 0xff, 0xea, 0x59, 0x17, 0xc9,
	0xc7, 0x34, 0x63, 0xde, 0x8c, 0x50, 0xc7, 0x14, 0xce, 0x1f, 0x2b, 0x64, 0x1a, 0x8b, 0x45, 0x31,
	0x9e, 0xa7, 0xc0, 0xf3, 0x9f, 0x9f, 0x40, 0x79, 0x1f, 0xec, 0x53, 0xbc, 0x49, 0x28, 0x18, 0xfd,
	0x7e, 0xc6, 0x7a, 0xbc, 0x56, 0xf6, 0x78, 0xfa, 0xc4, 0x3c, 0x5e, 0x1b, 0xe6, 0xf1, 0x5a, 0xd1,
	0xe3, 0x2f, 0x2b, 0x64, 0x06, 0x23, 0x9a, 0xb2, 0xa2, 0xcf, 0x0e, 0xf8, 0xfc, 0x8b, 0x67, 0xed,
	0xf3, 0xb0, 0xce, 0xd3, 0xc4, 0xf5, 0x66, 0xc1, 0xeb, 0xdf, 0x56, 0xc8, 0x78, 0x24, 0x69, 0x21,
	0x05, 0x67, 0x4e, 0x24, 0x05, 0x07, 0x5b, 0x4c, 0x6f, 0x34, 0x92, 0x3b, 0x79, 0xf6, 0xfd, 0xa5,
	0xbf, 0xb6, 0x79, 0x67, 0xac, 0x7d, 0x9d, 0x3d, 0x99, 0xae, 0x6a, 0x68, 0x9f, 0x6e, 0x16, 0x77,
	0x57, 0x66, 0x8f, 0x8a, 0x45, 0x03, 0x9c, 0x69, 0x99, 0x0e, 0x37, 0x77, 0x7c, 0xee, 0x64, 0x8a,
	0xc6, 0x63, 0xda, 0x73, 0xec, 0x82, 0x06, 0x14, 0xd6, 0xfb, 0xea, 0x71, 0xef, 0xe7, 0x4f, 0xcc,
	0xfb, 0xea, 0xe3, 0xbc, 0x1f, 0x54, 0x38, 0xff, 0xaa, 0x90, 0x0b, 0x79, 0x8b, 0x78, 0x6c, 0x06,
	0x0b, 0xa7, 0x6b, 0xfd, 0xe7, 0x4d, 0x17, 0xfa, 0x98, 0x49, 0x54, 0x87, 0x4f, 0xc2, 0x3d, 0x5d,
	0xdb, 0x30, 0x6f, 0xce, 0xf9, 0xc1, 0x49, 0xfc, 0x03, 0x1b, 0x14, 0xfd, 0x10, 0x4f, 0x07, 0x9e,
	0xba, 0x2f, 0xc0, 0x0c, 0xbe, 0x38, 0x89, 0xfc, 0x1d, 0x76, 0xdd, 0x60, 0xef, 0x13, 0xea, 0xc5,
	0xe7, 0x7f, 0xeb, 0x7f, 0x75, 0x88, 0xff, 0x17, 0x4f, 0xd4, 0xff, 0xea, 0x50, 0xff, 0xab, 0x03,
	0xfe, 0x2f, 0x7d, 0x71, 0x16, 0x2f, 0x30, 0x8a, 0x37, 0xb9, 0x4e, 0x95, 0x2c, 0x58, 0x4a, 0x96,
	0x30, 0x81, 0x6f, 0x5d, 0x02, 0x3f, 0x8a, 0xf0, 0x7a, 0x61, 0xdc, 0x33, 0x17, 0xba, 0xf7, 0x72,
	0xed, 0xba, 0x56, 0x3a, 0xf7, 0xc8, 0xe2, 0x71, 0xbb, 0x4c, 0xb0, 0x16, 0x3f, 0x64, 0xd2, 0x5c,
	0xf0, 0x3f, 0x07, 0x04, 0x2f, 0x0e, 0x12, 0xd4, 0x0d, 0x0a, 0xef, 0xfa, 0x77, 0xc8, 0xb5, 0xe3,
	0x44, 0x4d, 0x36, 0xc8, 0x75, 0x06, 0xb8, 0x5e, 0x1a, 0xe4, 0xba, 0xcb, 0xca, 0x6c, 0x43, 0xdd,
	0x8a, 0x99, 0x94, 0x7e, 0x3b, 0xa7, 0x3a, 0x3b, 0xdc, 0xad, 0x5d, 0x83, 0x42, 0xa2, 0x35, 0x32,
	0x7f, 0x9c, 0x48, 0xf1, 0x98, 0x99, 0x2f, 0x3d, 0x66, 0x07, 0xcd, 0xf7, 0x79, 0xcc, 0x9c, 0x37,
	0x61, 0x35, 0xdb, 0x0c, 0xa1, 0x42, 0xef, 0xa9, 0x50, 0x68, 0xa6, 0x9f, 0xa1, 0xcf, 0x82, 0x59,
	0x9b, 0x01, 0x58, 0x34, 0xb4, 0x12, 0xcc, 0x6e, 0xc1, 0x60, 0x45, 0xb3, 0x34, 0x43, 0xab, 0xf3,
	0x60, 0x35, 0x53, 0xb2, 0x4a, 0x33, 0x30, 0x7a, 0x8b, 0x5c, 0x28, 0x19, 0xd9, 0xcf, 0x4a, 0xc0,
	0x6e, 0x04, 0xec, 0xe6, 0x0b, 0x76, 0x75, 0x54, 0xeb, 0xbf, 0x97, 0xfe, 0x3d, 0x42, 0x1c, 0x7b,
	0x37, 0x8e, 0x5f, 0xac, 0x40, 0x2c, 0xdc, 0x21, 0x17, 0xcd, 0x9c, 0x4b, 0x5f, 0xb7, 0x98, 0x4f,
	0x49, 0x30, 0x1c, 0x4c, 0xb4, 0x6c, 0xf5, 0xbf, 0x73, 0x31, 0x1f, 0x94, 0x1c, 0x7f, 0xaf, 0xf2,
	0xdc, 0x69, 0x7b, 0xaf, 0x32, 0x4d, 0xce, 0x0a, 0xaa, 0xa4, 0x89, 0xa5, 0x33, 0x62, 0x5f, 0x3a,
	0x4b, 0x64, 0xbc, 0x65, 0xa6, 0xd9, 0x8a, 0xfc, 0xb6, 0x34, 0xc1, 0x31, 0xda, 0x82, 0xa9, 0x6d,
	0x69, 0x91, 0x73, 0x83, 0x4c, 0x5b, 0x8c, 0xa5, 0x93, 0x26, 0x0a, 0x26, 0x11, 0xb7, 0x67, 0xc5,
	0xce, 0x16, 0x59, 0xb4, 0xd8, 0x40, 0x30, 0x5f, 0xb1, 0xd0, 0x46, 0x1f, 0x65, 0x11, 0xbc, 0xb1,
	0xc3, 0xdb, 0x94, 0x71, 0xef, 0x32, 0x9a, 0xae, 0x23, 0xca, 0x04, 0xdf, 0xa6, 0xc1, 0x14, 0x79,
	0x42, 0x16, 0xb1, 0xa1, 0x3c, 0xe7, 0x8b, 0x3c, 0x1b, 0x88, 0x1a, 0xe4, 0xd9, 0x20, 0x2f, 0x59,
	0x9e, 0x4f, 0xbb, 0xac, 0x3b, 0x8c, 0x66, 0x04, 0x68, 0x2e, 0x21, 0xcd, 0x87, 0x00, 0x1a, 0x64,
	0x79, 0x97, 0x5c, 0xb2, 0x2c, 0xf9, 0x4d, 0x75, 0x98, 0x67, 0x28, 0xdc, 0x8a, 0x8c, 0x7b, 0x2e,
	0x32, 0xe4, 0xaf, 0x27, 0x43, 0x9b, 0x99, 0xce, 0x7d, 0x72, 0xd5, 0x9a, 0xab, 0x54, 0xf9, 0xd1,
	0x50, 0x12, 0x82, 0x59, 0x89, 0x24, 0xfb, 0x1a, 0x36, 0x84, 0xe9, 0x0e, 0xb9, 0x68, 0x99, 0x1e,
	0x71, 0xd5, 0x09, 0x85, 0xff, 0xa8, 0x5f, 0x75, 0xe0, 0x12, 0x61, 0xdc, 0x5b, 0x40, 0x8a, 0x8f,
	0xac, 0x3e, 0x37, 0x2e, 0xac, 0x29, 0xba, 0x31, 0x84, 0x62, 0xac, 0xb8, 0xa6, 0xe0, 0xc5, 0x71,
	0x9e, 0x5d, 0x72, 0xbd, 0xcc, 0x93, 0xa4, 0x09, 0x4d, 0x33, 0xc5, 0xe3, 0xf2, 0x8c, 0xc6, 0xb1,
	0x64, 0x15, 0xb8, 0xf6, 0xd2, 0xe4, 0x81, 0xc5, 0xe5, 0x74, 0xb7, 0x89, 0x6b, 0xe9, 0xe4, 0x27,
	0x3c, 0xcb, 0x8a, 0x14, 0x13, 0x58, 0x82, 0x91, 0xa2, 0x81, 0xda, 0xdc, 0xb0, 0xb0, 0x2b, 0xb2,
	0x9b, 0x65, 0xba, 0xc6, 0x17, 0x6d, 0x27, 0x8b, 0xbb, 0xd2, 0xc8, 0x01, 0xb9, 0xf9, 0x12, 0x19,
	0xe7, 0x92, 0x0a, 0x78, 0x95, 0x21, 0x59, 0xa2, 0xe0, 0x31, 0x70, 0xc4, 0x1b, 0xe5, 0xd2, 0x53,
	0x75, 0x14, 0xc1, 0xfb, 0xf8, 0x43, 0xc5, 0x92, 0x90, 0x85, 0x85, 0x17, 0x33, 0xd3, 0x8b, 0x67,
	0xe0, 0x7d, 0xbc, 0xd1, 0xe4, 0x6f, 0x64, 0x96, 0xfe, 0x73, 0x86, 0x4c, 0x0e, 0xbc, 0x73, 0x33,
	0x25, 0xb1, 0xfc, 0x4a, 0xb0, 0x54, 0x51, 0x66, 0xcb, 0x2f, 0xe5, 0x4c, 0x39, 0xb9, 0x4a, 0xc6,
	0x8a, 0x45, 0xc8, 0x9c, 0x25, 0xa3, 0x85, 0xef, 0xeb, 0x9c, 0x6b, 0x64, 0xe2, 0x91, 0xcf, 0x15,
	0x6d, 0xa5, 0x82, 0xb2, 0x94, 0x0a, 0x4c, 0xec, 0x11, 0x6f, 0x54, 0x4b, 0xb7, 0x52, 0xb1, 0x99,
	0x7a, 0xd0, 0xbc, 0xba, 0xc3, 0x8a, 0x1a, 0x54, 0xa8, 0xb3, 0x50, 0xa1, 0x3e, 0xaf, 0x9c, 0xd0,
	0x6b, 0xc9, 0x7e, 0xe9, 0xb5, 0xa7, 0x6c, 0xa1, 0xac, 0x42, 0xc5, 0x3a, 0x5e, 0x54, 0xcf, 0x9d,
	0xb2, 0xa2, 0xda, 0x7c, 0x1e, 0x3e, 0x0d, 0xbd, 0xf5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f,
	0x3d, 0x41, 0x53, 0x32, 0x2a, 0x00, 0x00,
}
