// Code generated by protoc-gen-go.
// source: bgp_attr_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_attributes_attribute is a generated protocol buffer package.

It is generated from these files:
	bgp_attr_bag.proto

It has these top-level messages:
	BgpAttrBag_KEYS
	BgpAttrBag
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	MACAddressType
	BgpAttrRnhAddrT
	BgpIpv4SrpolicyAddrT
	BgpIpv6SrpolicyAddrT
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
	BgpPedistlblEntry_
	SrSid_
	BgpBindingSidT
	SrExppath_
	BgpSrpolicyEntry_
	BgpTunencapEntry_
	BgpBagLargecomm_
	BgpCommonAttrEntry_
	BgpAttr_
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_instances_instance_instance_standby_attributes_attribute

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP attribute information
type BgpAttrBag_KEYS struct {
	InstanceName         string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	AttributeIid         uint32 `protobuf:"varint,2,opt,name=attribute_iid,json=attributeIid" json:"attribute_iid,omitempty"`
	AttributeCacheBucket uint32 `protobuf:"varint,3,opt,name=attribute_cache_bucket,json=attributeCacheBucket" json:"attribute_cache_bucket,omitempty"`
	AttributeCacheId     uint32 `protobuf:"varint,4,opt,name=attribute_cache_id,json=attributeCacheId" json:"attribute_cache_id,omitempty"`
}

func (m *BgpAttrBag_KEYS) Reset()                    { *m = BgpAttrBag_KEYS{} }
func (m *BgpAttrBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpAttrBag_KEYS) ProtoMessage()               {}
func (*BgpAttrBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpAttrBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpAttrBag_KEYS) GetAttributeIid() uint32 {
	if m != nil {
		return m.AttributeIid
	}
	return 0
}

func (m *BgpAttrBag_KEYS) GetAttributeCacheBucket() uint32 {
	if m != nil {
		return m.AttributeCacheBucket
	}
	return 0
}

func (m *BgpAttrBag_KEYS) GetAttributeCacheId() uint32 {
	if m != nil {
		return m.AttributeCacheId
	}
	return 0
}

type BgpAttrBag struct {
	// Process instance ID
	ProcessInstanceId uint32 `protobuf:"varint,50,opt,name=process_instance_id,json=processInstanceId" json:"process_instance_id,omitempty"`
	// Attribute Instance ID
	AttributeInstanceId uint32 `protobuf:"varint,51,opt,name=attribute_instance_id,json=attributeInstanceId" json:"attribute_instance_id,omitempty"`
	// ID of attribute structure
	AttributeStructureId uint32 `protobuf:"varint,52,opt,name=attribute_structure_id,json=attributeStructureId" json:"attribute_structure_id,omitempty"`
	// Hash value for attribute structure
	AttributeStructureHashValue uint32 `protobuf:"varint,53,opt,name=attribute_structure_hash_value,json=attributeStructureHashValue" json:"attribute_structure_hash_value,omitempty"`
	// Number of paths which use this attribute structure
	ReferenceCount uint32 `protobuf:"varint,54,opt,name=reference_count,json=referenceCount" json:"reference_count,omitempty"`
	// Attributes
	AttributeInfo *BgpAttr_ `protobuf:"bytes,55,opt,name=attribute_info,json=attributeInfo" json:"attribute_info,omitempty"`
}

func (m *BgpAttrBag) Reset()                    { *m = BgpAttrBag{} }
func (m *BgpAttrBag) String() string            { return proto.CompactTextString(m) }
func (*BgpAttrBag) ProtoMessage()               {}
func (*BgpAttrBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpAttrBag) GetProcessInstanceId() uint32 {
	if m != nil {
		return m.ProcessInstanceId
	}
	return 0
}

func (m *BgpAttrBag) GetAttributeInstanceId() uint32 {
	if m != nil {
		return m.AttributeInstanceId
	}
	return 0
}

func (m *BgpAttrBag) GetAttributeStructureId() uint32 {
	if m != nil {
		return m.AttributeStructureId
	}
	return 0
}

func (m *BgpAttrBag) GetAttributeStructureHashValue() uint32 {
	if m != nil {
		return m.AttributeStructureHashValue
	}
	return 0
}

func (m *BgpAttrBag) GetReferenceCount() uint32 {
	if m != nil {
		return m.ReferenceCount
	}
	return 0
}

func (m *BgpAttrBag) GetAttributeInfo() *BgpAttr_ {
	if m != nil {
		return m.AttributeInfo
	}
	return nil
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// MAC Address type
type MACAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *MACAddressType) Reset()                    { *m = MACAddressType{} }
func (m *MACAddressType) String() string            { return proto.CompactTextString(m) }
func (*MACAddressType) ProtoMessage()               {}
func (*MACAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MACAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAttrRnhAddrT struct {
	Len string `protobuf:"bytes,1,opt,name=len" json:"len,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// MAC Addr
	MacAddress *MACAddressType `protobuf:"bytes,4,opt,name=mac_address,json=macAddress" json:"mac_address,omitempty"`
}

func (m *BgpAttrRnhAddrT) Reset()                    { *m = BgpAttrRnhAddrT{} }
func (m *BgpAttrRnhAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpAttrRnhAddrT) ProtoMessage()               {}
func (*BgpAttrRnhAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BgpAttrRnhAddrT) GetLen() string {
	if m != nil {
		return m.Len
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAttrRnhAddrT) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAttrRnhAddrT) GetMacAddress() *MACAddressType {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()                    { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()                    { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
	// IPV4 Policy Addr
	Ipv4SrPolicyAddress *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress" json:"ipv4_sr_policy_address,omitempty"`
	// IPV6 Policy Addr
	Ipv6SrPolicyAddress *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress" json:"ipv6_sr_policy_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpPedistlblEntry_ struct {
	//  PE address
	PeAddress string `protobuf:"bytes,1,opt,name=pe_address,json=peAddress" json:"pe_address,omitempty"`
	// Label
	Label uint32 `protobuf:"varint,2,opt,name=label" json:"label,omitempty"`
}

func (m *BgpPedistlblEntry_) Reset()                    { *m = BgpPedistlblEntry_{} }
func (m *BgpPedistlblEntry_) String() string            { return proto.CompactTextString(m) }
func (*BgpPedistlblEntry_) ProtoMessage()               {}
func (*BgpPedistlblEntry_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BgpPedistlblEntry_) GetPeAddress() string {
	if m != nil {
		return m.PeAddress
	}
	return ""
}

func (m *BgpPedistlblEntry_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

type SrSid_ struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// MPLS Label value
	Label uint32 `protobuf:"varint,2,opt,name=label" json:"label,omitempty"`
	// IPv4 Address value
	Ipv4Address string `protobuf:"bytes,3,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv6 address value
	Ipv6Address *IPV6AddressType `protobuf:"bytes,4,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
}

func (m *SrSid_) Reset()                    { *m = SrSid_{} }
func (m *SrSid_) String() string            { return proto.CompactTextString(m) }
func (*SrSid_) ProtoMessage()               {}
func (*SrSid_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SrSid_) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SrSid_) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *SrSid_) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *SrSid_) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

type BgpBindingSidT struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// MPLS Label
	Label uint32 `protobuf:"varint,2,opt,name=label" json:"label,omitempty"`
	// IPv6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,3,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
}

func (m *BgpBindingSidT) Reset()                    { *m = BgpBindingSidT{} }
func (m *BgpBindingSidT) String() string            { return proto.CompactTextString(m) }
func (*BgpBindingSidT) ProtoMessage()               {}
func (*BgpBindingSidT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BgpBindingSidT) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BgpBindingSidT) GetLabel() uint32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *BgpBindingSidT) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

type SrExppath_ struct {
	// Weight of segment list
	Weight uint32 `protobuf:"varint,1,opt,name=weight" json:"weight,omitempty"`
	// Segments in segment list
	Segment []*SrSid_ `protobuf:"bytes,2,rep,name=segment" json:"segment,omitempty"`
}

func (m *SrExppath_) Reset()                    { *m = SrExppath_{} }
func (m *SrExppath_) String() string            { return proto.CompactTextString(m) }
func (*SrExppath_) ProtoMessage()               {}
func (*SrExppath_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SrExppath_) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *SrExppath_) GetSegment() []*SrSid_ {
	if m != nil {
		return m.Segment
	}
	return nil
}

type BgpSrpolicyEntry_ struct {
	// Tunnel Encapsulation Type
	TunnelEncapType uint32 `protobuf:"varint,1,opt,name=tunnel_encap_type,json=tunnelEncapType" json:"tunnel_encap_type,omitempty"`
	// SR Policy incoming Binding sid
	BindingSid *BgpBindingSidT `protobuf:"bytes,2,opt,name=binding_sid,json=bindingSid" json:"binding_sid,omitempty"`
	// SR Policy allocated Binding sid by the router
	AllocatedBindingSid *BgpBindingSidT `protobuf:"bytes,3,opt,name=allocated_binding_sid,json=allocatedBindingSid" json:"allocated_binding_sid,omitempty"`
	// SR Policy Preference
	Preference uint32 `protobuf:"varint,4,opt,name=preference" json:"preference,omitempty"`
	// SR Policy active state in forwarding
	State bool `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	// SR Policy programming Status
	RequestState string `protobuf:"bytes,6,opt,name=request_state,json=requestState" json:"request_state,omitempty"`
	// SR Policy Segment Lists
	SegmentLists []*SrExppath_ `protobuf:"bytes,7,rep,name=segment_lists,json=segmentLists" json:"segment_lists,omitempty"`
}

func (m *BgpSrpolicyEntry_) Reset()                    { *m = BgpSrpolicyEntry_{} }
func (m *BgpSrpolicyEntry_) String() string            { return proto.CompactTextString(m) }
func (*BgpSrpolicyEntry_) ProtoMessage()               {}
func (*BgpSrpolicyEntry_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *BgpSrpolicyEntry_) GetTunnelEncapType() uint32 {
	if m != nil {
		return m.TunnelEncapType
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.BindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetAllocatedBindingSid() *BgpBindingSidT {
	if m != nil {
		return m.AllocatedBindingSid
	}
	return nil
}

func (m *BgpSrpolicyEntry_) GetPreference() uint32 {
	if m != nil {
		return m.Preference
	}
	return 0
}

func (m *BgpSrpolicyEntry_) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *BgpSrpolicyEntry_) GetRequestState() string {
	if m != nil {
		return m.RequestState
	}
	return ""
}

func (m *BgpSrpolicyEntry_) GetSegmentLists() []*SrExppath_ {
	if m != nil {
		return m.SegmentLists
	}
	return nil
}

type BgpTunencapEntry_ struct {
	// Tunnel encap type SR policy
	SrPolicy *BgpSrpolicyEntry_ `protobuf:"bytes,1,opt,name=sr_policy,json=srPolicy" json:"sr_policy,omitempty"`
}

func (m *BgpTunencapEntry_) Reset()                    { *m = BgpTunencapEntry_{} }
func (m *BgpTunencapEntry_) String() string            { return proto.CompactTextString(m) }
func (*BgpTunencapEntry_) ProtoMessage()               {}
func (*BgpTunencapEntry_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *BgpTunencapEntry_) GetSrPolicy() *BgpSrpolicyEntry_ {
	if m != nil {
		return m.SrPolicy
	}
	return nil
}

type BgpBagLargecomm_ struct {
	// Global Administrator
	GlobalAdmin uint32 `protobuf:"varint,1,opt,name=global_admin,json=globalAdmin" json:"global_admin,omitempty"`
	// Local Data 1
	LocalData1 uint32 `protobuf:"varint,2,opt,name=local_data1,json=localData1" json:"local_data1,omitempty"`
	// Local Data 2
	LocalData2 uint32 `protobuf:"varint,3,opt,name=local_data2,json=localData2" json:"local_data2,omitempty"`
}

func (m *BgpBagLargecomm_) Reset()                    { *m = BgpBagLargecomm_{} }
func (m *BgpBagLargecomm_) String() string            { return proto.CompactTextString(m) }
func (*BgpBagLargecomm_) ProtoMessage()               {}
func (*BgpBagLargecomm_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BgpBagLargecomm_) GetGlobalAdmin() uint32 {
	if m != nil {
		return m.GlobalAdmin
	}
	return 0
}

func (m *BgpBagLargecomm_) GetLocalData1() uint32 {
	if m != nil {
		return m.LocalData1
	}
	return 0
}

func (m *BgpBagLargecomm_) GetLocalData2() uint32 {
	if m != nil {
		return m.LocalData2
	}
	return 0
}

type BgpCommonAttrEntry_ struct {
	// Metric attribute present
	IsMetricPresent bool `protobuf:"varint,1,opt,name=is_metric_present,json=isMetricPresent" json:"is_metric_present,omitempty"`
	// Local Preference attribute present
	IsLocalPrefPresent bool `protobuf:"varint,2,opt,name=is_local_pref_present,json=isLocalPrefPresent" json:"is_local_pref_present,omitempty"`
	// Atomic aggregate attribute present
	IsAtomicAggregatePresent bool `protobuf:"varint,3,opt,name=is_atomic_aggregate_present,json=isAtomicAggregatePresent" json:"is_atomic_aggregate_present,omitempty"`
	// Aggregator attribute present
	IsAggregatorPresent bool `protobuf:"varint,4,opt,name=is_aggregator_present,json=isAggregatorPresent" json:"is_aggregator_present,omitempty"`
	// Origin attribute present
	IsOriginPresent bool `protobuf:"varint,5,opt,name=is_origin_present,json=isOriginPresent" json:"is_origin_present,omitempty"`
	// AS path attribute present
	IsAsPathPresent bool `protobuf:"varint,6,opt,name=is_as_path_present,json=isAsPathPresent" json:"is_as_path_present,omitempty"`
	// Community attribute present
	IsCommunityPresent bool `protobuf:"varint,7,opt,name=is_community_present,json=isCommunityPresent" json:"is_community_present,omitempty"`
	// Extended community attribute present
	IsExtendedCommunityPresent bool `protobuf:"varint,8,opt,name=is_extended_community_present,json=isExtendedCommunityPresent" json:"is_extended_community_present,omitempty"`
	// SSA attribute present
	IsSsaPresent bool `protobuf:"varint,9,opt,name=is_ssa_present,json=isSsaPresent" json:"is_ssa_present,omitempty"`
	// Connector present
	IsConnectorPresent bool `protobuf:"varint,10,opt,name=is_connector_present,json=isConnectorPresent" json:"is_connector_present,omitempty"`
	// PMSI Attribute  present
	IsPmsiPresent bool `protobuf:"varint,11,opt,name=is_pmsi_present,json=isPmsiPresent" json:"is_pmsi_present,omitempty"`
	// PPMP Attribute  present
	IsPppmpPresent bool `protobuf:"varint,12,opt,name=is_pppmp_present,json=isPppmpPresent" json:"is_pppmp_present,omitempty"`
	// AIGP Present
	IsAigpPresent bool `protobuf:"varint,13,opt,name=is_aigp_present,json=isAigpPresent" json:"is_aigp_present,omitempty"`
	// PE distinguisher label  attribute present
	IsPeDistinguisherLabelPresent bool `protobuf:"varint,14,opt,name=is_pe_distinguisher_label_present,json=isPeDistinguisherLabelPresent" json:"is_pe_distinguisher_label_present,omitempty"`
	// BGP LS attribute present
	IsLsAttributePresent bool `protobuf:"varint,15,opt,name=is_ls_attribute_present,json=isLsAttributePresent" json:"is_ls_attribute_present,omitempty"`
	// Label Index attribute present
	IsLabelIndexPresent bool `protobuf:"varint,16,opt,name=is_label_index_present,json=isLabelIndexPresent" json:"is_label_index_present,omitempty"`
	// Neighbor AS number
	NeighborAs uint32 `protobuf:"varint,17,opt,name=neighbor_as,json=neighborAs" json:"neighbor_as,omitempty"`
	// AS where aggregation was last performed
	AggregatorAs uint32 `protobuf:"varint,18,opt,name=aggregator_as,json=aggregatorAs" json:"aggregator_as,omitempty"`
	// Address where aggregation was performed
	AggregatorAddress string `protobuf:"bytes,19,opt,name=aggregator_address,json=aggregatorAddress" json:"aggregator_address,omitempty"`
	// Metric
	Metric uint32 `protobuf:"varint,20,opt,name=metric" json:"metric,omitempty"`
	// Local preference
	LocalPreference uint32 `protobuf:"varint,21,opt,name=local_preference,json=localPreference" json:"local_preference,omitempty"`
	// Origin
	Origin uint32 `protobuf:"varint,22,opt,name=origin" json:"origin,omitempty"`
	// AS path attribute
	AsPath string `protobuf:"bytes,23,opt,name=as_path,json=asPath" json:"as_path,omitempty"`
	// Community attribute
	Community []uint32 `protobuf:"varint,24,rep,packed,name=community" json:"community,omitempty"`
	// Extended community Flags
	ExtendedCommunityFlags uint32 `protobuf:"varint,25,opt,name=extended_community_flags,json=extendedCommunityFlags" json:"extended_community_flags,omitempty"`
	// Extended community attribute
	ExtendedCommunity []uint32 `protobuf:"varint,26,rep,packed,name=extended_community,json=extendedCommunity" json:"extended_community,omitempty"`
	// Unknown attributes
	UnknownAttributes []uint32 `protobuf:"varint,27,rep,packed,name=unknown_attributes,json=unknownAttributes" json:"unknown_attributes,omitempty"`
	// Cluster list attribute
	ClusterList []uint32 `protobuf:"varint,28,rep,packed,name=cluster_list,json=clusterList" json:"cluster_list,omitempty"`
	// Originator attribute
	Originator string `protobuf:"bytes,29,opt,name=originator" json:"originator,omitempty"`
	// L2TPv3 session id
	L2TPv3SessionId uint32 `protobuf:"varint,30,opt,name=l2_t_pv3_session_id,json=l2TPv3SessionId" json:"l2_t_pv3_session_id,omitempty"`
	// L2TPv3 Cookie
	L2TPv3Cookie []uint32 `protobuf:"varint,31,rep,packed,name=l2_t_pv3_cookie,json=l2TPv3Cookie" json:"l2_t_pv3_cookie,omitempty"`
	// Connector Type
	ConnectorType uint32 `protobuf:"varint,32,opt,name=connector_type,json=connectorType" json:"connector_type,omitempty"`
	// Connector Value
	ConnectorValue []uint32 `protobuf:"varint,33,rep,packed,name=connector_value,json=connectorValue" json:"connector_value,omitempty"`
	// AIGP metric value
	AigpMetricValue uint64 `protobuf:"varint,34,opt,name=aigp_metric_value,json=aigpMetricValue" json:"aigp_metric_value,omitempty"`
	// PMSI Type
	PmsiType uint32 `protobuf:"varint,35,opt,name=pmsi_type,json=pmsiType" json:"pmsi_type,omitempty"`
	// PMSI Value
	PmsiFlags uint32 `protobuf:"varint,36,opt,name=pmsi_flags,json=pmsiFlags" json:"pmsi_flags,omitempty"`
	// PMSI label
	PmsiLabel uint32 `protobuf:"varint,37,opt,name=pmsi_label,json=pmsiLabel" json:"pmsi_label,omitempty"`
	// PMSI Value
	PmsiValue []uint32 `protobuf:"varint,38,rep,packed,name=pmsi_value,json=pmsiValue" json:"pmsi_value,omitempty"`
	// PPMP Value
	PpmPvalue uint32 `protobuf:"varint,39,opt,name=ppm_pvalue,json=ppmPvalue" json:"ppm_pvalue,omitempty"`
	// PE distinguisher label attribute
	PeDistinguisherLabel []*BgpPedistlblEntry_ `protobuf:"bytes,40,rep,name=pe_distinguisher_label,json=peDistinguisherLabel" json:"pe_distinguisher_label,omitempty"`
	// BGP LS attribute
	LsAttr []uint32 `protobuf:"varint,41,rep,packed,name=ls_attr,json=lsAttr" json:"ls_attr,omitempty"`
	// Label Index attribute
	LabelIndexAttr []uint32 `protobuf:"varint,42,rep,packed,name=label_index_attr,json=labelIndexAttr" json:"label_index_attr,omitempty"`
	// Tunnel Encapsulation attribute
	TunnelEncap *BgpTunencapEntry_ `protobuf:"bytes,43,opt,name=tunnel_encap,json=tunnelEncap" json:"tunnel_encap,omitempty"`
	// Large Community attribute present
	IsLargeCommunityPresent bool `protobuf:"varint,44,opt,name=is_large_community_present,json=isLargeCommunityPresent" json:"is_large_community_present,omitempty"`
	// Large Community attribute
	LargeCommunity []*BgpBagLargecomm_ `protobuf:"bytes,45,rep,name=large_community,json=largeCommunity" json:"large_community,omitempty"`
}

func (m *BgpCommonAttrEntry_) Reset()                    { *m = BgpCommonAttrEntry_{} }
func (m *BgpCommonAttrEntry_) String() string            { return proto.CompactTextString(m) }
func (*BgpCommonAttrEntry_) ProtoMessage()               {}
func (*BgpCommonAttrEntry_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *BgpCommonAttrEntry_) GetIsMetricPresent() bool {
	if m != nil {
		return m.IsMetricPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLocalPrefPresent() bool {
	if m != nil {
		return m.IsLocalPrefPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAtomicAggregatePresent() bool {
	if m != nil {
		return m.IsAtomicAggregatePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAggregatorPresent() bool {
	if m != nil {
		return m.IsAggregatorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsOriginPresent() bool {
	if m != nil {
		return m.IsOriginPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAsPathPresent() bool {
	if m != nil {
		return m.IsAsPathPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsCommunityPresent() bool {
	if m != nil {
		return m.IsCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsExtendedCommunityPresent() bool {
	if m != nil {
		return m.IsExtendedCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsSsaPresent() bool {
	if m != nil {
		return m.IsSsaPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsConnectorPresent() bool {
	if m != nil {
		return m.IsConnectorPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPmsiPresent() bool {
	if m != nil {
		return m.IsPmsiPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPppmpPresent() bool {
	if m != nil {
		return m.IsPppmpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsAigpPresent() bool {
	if m != nil {
		return m.IsAigpPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsPeDistinguisherLabelPresent() bool {
	if m != nil {
		return m.IsPeDistinguisherLabelPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLsAttributePresent() bool {
	if m != nil {
		return m.IsLsAttributePresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetIsLabelIndexPresent() bool {
	if m != nil {
		return m.IsLabelIndexPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetNeighborAs() uint32 {
	if m != nil {
		return m.NeighborAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAs() uint32 {
	if m != nil {
		return m.AggregatorAs
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAggregatorAddress() string {
	if m != nil {
		return m.AggregatorAddress
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetMetric() uint32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetLocalPreference() uint32 {
	if m != nil {
		return m.LocalPreference
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetAsPath() string {
	if m != nil {
		return m.AsPath
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetCommunity() []uint32 {
	if m != nil {
		return m.Community
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunityFlags() uint32 {
	if m != nil {
		return m.ExtendedCommunityFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetExtendedCommunity() []uint32 {
	if m != nil {
		return m.ExtendedCommunity
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetUnknownAttributes() []uint32 {
	if m != nil {
		return m.UnknownAttributes
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetClusterList() []uint32 {
	if m != nil {
		return m.ClusterList
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetOriginator() string {
	if m != nil {
		return m.Originator
	}
	return ""
}

func (m *BgpCommonAttrEntry_) GetL2TPv3SessionId() uint32 {
	if m != nil {
		return m.L2TPv3SessionId
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetL2TPv3Cookie() []uint32 {
	if m != nil {
		return m.L2TPv3Cookie
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetConnectorType() uint32 {
	if m != nil {
		return m.ConnectorType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetConnectorValue() []uint32 {
	if m != nil {
		return m.ConnectorValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetAigpMetricValue() uint64 {
	if m != nil {
		return m.AigpMetricValue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiType() uint32 {
	if m != nil {
		return m.PmsiType
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiFlags() uint32 {
	if m != nil {
		return m.PmsiFlags
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiLabel() uint32 {
	if m != nil {
		return m.PmsiLabel
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPmsiValue() []uint32 {
	if m != nil {
		return m.PmsiValue
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetPpmPvalue() uint32 {
	if m != nil {
		return m.PpmPvalue
	}
	return 0
}

func (m *BgpCommonAttrEntry_) GetPeDistinguisherLabel() []*BgpPedistlblEntry_ {
	if m != nil {
		return m.PeDistinguisherLabel
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetLsAttr() []uint32 {
	if m != nil {
		return m.LsAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetLabelIndexAttr() []uint32 {
	if m != nil {
		return m.LabelIndexAttr
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetTunnelEncap() *BgpTunencapEntry_ {
	if m != nil {
		return m.TunnelEncap
	}
	return nil
}

func (m *BgpCommonAttrEntry_) GetIsLargeCommunityPresent() bool {
	if m != nil {
		return m.IsLargeCommunityPresent
	}
	return false
}

func (m *BgpCommonAttrEntry_) GetLargeCommunity() []*BgpBagLargecomm_ {
	if m != nil {
		return m.LargeCommunity
	}
	return nil
}

type BgpAttr_ struct {
	// AS path encoded as 2-byte
	IsAsPath2Byte bool `protobuf:"varint,1,opt,name=is_as_path2_byte,json=isAsPath2Byte" json:"is_as_path2_byte,omitempty"`
	// Application gateway present
	IsApplicationGatewayPresent bool `protobuf:"varint,2,opt,name=is_application_gateway_present,json=isApplicationGatewayPresent" json:"is_application_gateway_present,omitempty"`
	// BGP ATTR_SET attribute present
	IsAttrSetPresent bool `protobuf:"varint,3,opt,name=is_attr_set_present,json=isAttrSetPresent" json:"is_attr_set_present,omitempty"`
	// AIGP set by policy inbound IGP
	SetAigpInboundIgp bool `protobuf:"varint,4,opt,name=set_aigp_inbound_igp,json=setAigpInboundIgp" json:"set_aigp_inbound_igp,omitempty"`
	// AIGP set by policy inbound metric
	SetAigpInboundMetric bool `protobuf:"varint,5,opt,name=set_aigp_inbound_metric,json=setAigpInboundMetric" json:"set_aigp_inbound_metric,omitempty"`
	// RNH Attribute  present
	IsRnhPresent bool `protobuf:"varint,6,opt,name=is_rnh_present,json=isRnhPresent" json:"is_rnh_present,omitempty"`
	// RIB RNH Attribute  present
	IsRibrnhPresent bool `protobuf:"varint,7,opt,name=is_ribrnh_present,json=isRibrnhPresent" json:"is_ribrnh_present,omitempty"`
	// Attribute key number
	AttributeKeyNumber uint32 `protobuf:"varint,8,opt,name=attribute_key_number,json=attributeKeyNumber" json:"attribute_key_number,omitempty"`
	// Attribute reuse ID Configured
	AttributeReuseIdConfig bool `protobuf:"varint,9,opt,name=attribute_reuse_id_config,json=attributeReuseIdConfig" json:"attribute_reuse_id_config,omitempty"`
	// Attribute reuse ID maximum ID
	AttributeReuseIdMaxId uint32 `protobuf:"varint,10,opt,name=attribute_reuse_id_max_id,json=attributeReuseIdMaxId" json:"attribute_reuse_id_max_id,omitempty"`
	// Attribute reuse ID nodes
	AttributeReuseIdNode uint32 `protobuf:"varint,11,opt,name=attribute_reuse_id_node,json=attributeReuseIdNode" json:"attribute_reuse_id_node,omitempty"`
	// Attribute reuse ID current ID
	AttributeReuseIdCurrent uint32 `protobuf:"varint,12,opt,name=attribute_reuse_id_current,json=attributeReuseIdCurrent" json:"attribute_reuse_id_current,omitempty"`
	// Attribute reuse ID allocated keys
	AttributeReuseIdKeys uint32 `protobuf:"varint,13,opt,name=attribute_reuse_id_keys,json=attributeReuseIdKeys" json:"attribute_reuse_id_keys,omitempty"`
	// Attribute reuse ID timer in seconds
	AttributeReuseIdRecoverSec uint32 `protobuf:"varint,14,opt,name=attribute_reuse_id_recover_sec,json=attributeReuseIdRecoverSec" json:"attribute_reuse_id_recover_sec,omitempty"`
	// VPN Distinguisher
	VpnDistinguisher uint32 `protobuf:"varint,15,opt,name=vpn_distinguisher,json=vpnDistinguisher" json:"vpn_distinguisher,omitempty"`
	// Common attributes
	CommonAttributes *BgpCommonAttrEntry_ `protobuf:"bytes,16,opt,name=common_attributes,json=commonAttributes" json:"common_attributes,omitempty"`
	// ATTR_SET attribute
	AttrSet *BgpCommonAttrEntry_ `protobuf:"bytes,17,opt,name=attr_set,json=attrSet" json:"attr_set,omitempty"`
	// RNH Type
	RnhType uint32 `protobuf:"varint,18,opt,name=rnh_type,json=rnhType" json:"rnh_type,omitempty"`
	// RNH Length
	RnhLen uint32 `protobuf:"varint,19,opt,name=rnh_len,json=rnhLen" json:"rnh_len,omitempty"`
	// RNH Address Length
	RnhAddrLen uint32 `protobuf:"varint,20,opt,name=rnh_addr_len,json=rnhAddrLen" json:"rnh_addr_len,omitempty"`
	// RNH Address
	RnhAddr *BgpAttrRnhAddrT `protobuf:"bytes,21,opt,name=rnh_addr,json=rnhAddr" json:"rnh_addr,omitempty"`
	// RIB RNH Table
	RibrnhTable uint32 `protobuf:"varint,22,opt,name=ribrnh_table,json=ribrnhTable" json:"ribrnh_table,omitempty"`
	// RIB RNH MAC Address
	RibrnhMac string `protobuf:"bytes,23,opt,name=ribrnh_mac,json=ribrnhMac" json:"ribrnh_mac,omitempty"`
	// RIB RNH IP Address
	RibrnhIp *BgpAddrtype `protobuf:"bytes,24,opt,name=ribrnh_ip,json=ribrnhIp" json:"ribrnh_ip,omitempty"`
	// RIB RNH IP Table
	RibrnhipTable uint32 `protobuf:"varint,25,opt,name=ribrnhip_table,json=ribrnhipTable" json:"ribrnhip_table,omitempty"`
	// RIB RNH Vni
	RibrnhVni uint32 `protobuf:"varint,26,opt,name=ribrnh_vni,json=ribrnhVni" json:"ribrnh_vni,omitempty"`
	// RIB RNH Encapsulation Type
	RibrnhEncap uint32 `protobuf:"varint,27,opt,name=ribrnh_encap,json=ribrnhEncap" json:"ribrnh_encap,omitempty"`
}

func (m *BgpAttr_) Reset()                    { *m = BgpAttr_{} }
func (m *BgpAttr_) String() string            { return proto.CompactTextString(m) }
func (*BgpAttr_) ProtoMessage()               {}
func (*BgpAttr_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *BgpAttr_) GetIsAsPath2Byte() bool {
	if m != nil {
		return m.IsAsPath2Byte
	}
	return false
}

func (m *BgpAttr_) GetIsApplicationGatewayPresent() bool {
	if m != nil {
		return m.IsApplicationGatewayPresent
	}
	return false
}

func (m *BgpAttr_) GetIsAttrSetPresent() bool {
	if m != nil {
		return m.IsAttrSetPresent
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundIgp() bool {
	if m != nil {
		return m.SetAigpInboundIgp
	}
	return false
}

func (m *BgpAttr_) GetSetAigpInboundMetric() bool {
	if m != nil {
		return m.SetAigpInboundMetric
	}
	return false
}

func (m *BgpAttr_) GetIsRnhPresent() bool {
	if m != nil {
		return m.IsRnhPresent
	}
	return false
}

func (m *BgpAttr_) GetIsRibrnhPresent() bool {
	if m != nil {
		return m.IsRibrnhPresent
	}
	return false
}

func (m *BgpAttr_) GetAttributeKeyNumber() uint32 {
	if m != nil {
		return m.AttributeKeyNumber
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdConfig() bool {
	if m != nil {
		return m.AttributeReuseIdConfig
	}
	return false
}

func (m *BgpAttr_) GetAttributeReuseIdMaxId() uint32 {
	if m != nil {
		return m.AttributeReuseIdMaxId
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdNode() uint32 {
	if m != nil {
		return m.AttributeReuseIdNode
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdCurrent() uint32 {
	if m != nil {
		return m.AttributeReuseIdCurrent
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdKeys() uint32 {
	if m != nil {
		return m.AttributeReuseIdKeys
	}
	return 0
}

func (m *BgpAttr_) GetAttributeReuseIdRecoverSec() uint32 {
	if m != nil {
		return m.AttributeReuseIdRecoverSec
	}
	return 0
}

func (m *BgpAttr_) GetVpnDistinguisher() uint32 {
	if m != nil {
		return m.VpnDistinguisher
	}
	return 0
}

func (m *BgpAttr_) GetCommonAttributes() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.CommonAttributes
	}
	return nil
}

func (m *BgpAttr_) GetAttrSet() *BgpCommonAttrEntry_ {
	if m != nil {
		return m.AttrSet
	}
	return nil
}

func (m *BgpAttr_) GetRnhType() uint32 {
	if m != nil {
		return m.RnhType
	}
	return 0
}

func (m *BgpAttr_) GetRnhLen() uint32 {
	if m != nil {
		return m.RnhLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddrLen() uint32 {
	if m != nil {
		return m.RnhAddrLen
	}
	return 0
}

func (m *BgpAttr_) GetRnhAddr() *BgpAttrRnhAddrT {
	if m != nil {
		return m.RnhAddr
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhTable() uint32 {
	if m != nil {
		return m.RibrnhTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhMac() string {
	if m != nil {
		return m.RibrnhMac
	}
	return ""
}

func (m *BgpAttr_) GetRibrnhIp() *BgpAddrtype {
	if m != nil {
		return m.RibrnhIp
	}
	return nil
}

func (m *BgpAttr_) GetRibrnhipTable() uint32 {
	if m != nil {
		return m.RibrnhipTable
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhVni() uint32 {
	if m != nil {
		return m.RibrnhVni
	}
	return 0
}

func (m *BgpAttr_) GetRibrnhEncap() uint32 {
	if m != nil {
		return m.RibrnhEncap
	}
	return 0
}

func init() {
	proto.RegisterType((*BgpAttrBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_attr_bag_KEYS")
	proto.RegisterType((*BgpAttrBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_attr_bag")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.IPV6AddressType")
	proto.RegisterType((*MACAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.MACAddressType")
	proto.RegisterType((*BgpAttrRnhAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_attr_rnh_addr_t")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_addrtype")
	proto.RegisterType((*BgpPedistlblEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_pedistlbl_entry_")
	proto.RegisterType((*SrSid_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.sr_sid_")
	proto.RegisterType((*BgpBindingSidT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_binding_sid_t")
	proto.RegisterType((*SrExppath_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.sr_exppath_")
	proto.RegisterType((*BgpSrpolicyEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_srpolicy_entry_")
	proto.RegisterType((*BgpTunencapEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_tunencap_entry_")
	proto.RegisterType((*BgpBagLargecomm_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_bag_largecomm_")
	proto.RegisterType((*BgpCommonAttrEntry_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_common_attr_entry_")
	proto.RegisterType((*BgpAttr_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.instances.instance.instance_standby.attributes.attribute.bgp_attr_")
}

func init() { proto.RegisterFile("bgp_attr_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4b, 0x73, 0x1b, 0xc7,
	0x11, 0xae, 0x15, 0x25, 0x92, 0x68, 0x60, 0x49, 0x60, 0xc0, 0xc7, 0x4a, 0xb2, 0x64, 0x1a, 0xb2,
	0x2d, 0x5a, 0x0f, 0x3a, 0x86, 0x68, 0xd8, 0xa9, 0x24, 0x07, 0x8a, 0x96, 0x63, 0x94, 0x48, 0x05,
	0xb5, 0x54, 0x31, 0x95, 0xd3, 0x64, 0xb1, 0x3b, 0x04, 0x26, 0x5c, 0xec, 0xae, 0x77, 0x16, 0x94,
	0x90, 0x63, 0x2e, 0x89, 0xe3, 0x4a, 0xa5, 0x2a, 0x95, 0xd7, 0xc1, 0x71, 0x55, 0x1e, 0x95, 0x4b,
	0x7e, 0x45, 0xce, 0xf9, 0x01, 0x39, 0xe4, 0x94, 0x4a, 0xae, 0xf9, 0x0f, 0xa9, 0xe9, 0x99, 0x7d,
	0xe0, 0xa1, 0x88, 0x3e, 0x80, 0xca, 0x09, 0xd8, 0xee, 0xaf, 0x67, 0xbe, 0x99, 0xe9, 0xee, 0xe9,
	0x99, 0x5d, 0x20, 0xdd, 0x5e, 0x44, 0x9d, 0x24, 0x89, 0x69, 0xd7, 0xe9, 0xed, 0x44, 0x71, 0x98,
	0x84, 0xe4, 0xbb, 0x2e, 0x17, 0x6e, 0x48, 0x79, 0x28, 0xe8, 0xf3, 0x98, 0xf2, 0xe8, 0x6c, 0x97,
	0x4a, 0x54, 0x18, 0xb1, 0x78, 0xa7, 0xdb, 0x8b, 0x76, 0x78, 0x20, 0x12, 0x27, 0x70, 0x99, 0xc8,
	0xfe, 0x65, 0x7f, 0xa8, 0xfc, 0xf1, 0xba, 0xa3, 0x1d, 0xd9, 0x24, 0xef, 0x0e, 0x13, 0x26, 0xf2,
	0xbf, 0x8d, 0xbf, 0x1a, 0x50, 0x2b, 0xf6, 0x47, 0x1f, 0x3f, 0xfa, 0xde, 0x11, 0xb9, 0x05, 0x66,
	0x66, 0x1e, 0x38, 0x03, 0x66, 0x19, 0x5b, 0xc6, 0x76, 0xc9, 0xae, 0xa4, 0xc2, 0x27, 0xce, 0x80,
	0x49, 0x50, 0xd6, 0x0e, 0xe5, 0xdc, 0xb3, 0x2e, 0x6d, 0x19, 0xdb, 0xa6, 0x5d, 0xc9, 0x84, 0x6d,
	0xee, 0x91, 0x5d, 0xd8, 0xc8, 0x41, 0xae, 0xe3, 0xf6, 0x19, 0xed, 0x0e, 0xdd, 0x53, 0x96, 0x58,
	0x0b, 0x88, 0x5e, 0xcb, 0xb4, 0xfb, 0x52, 0xf9, 0x10, 0x75, 0xe4, 0x1e, 0x90, 0x49, 0x2b, 0xee,
	0x59, 0x97, 0xd1, 0xa2, 0x3a, 0x6e, 0xd1, 0xf6, 0x1a, 0x7f, 0x58, 0x80, 0x4a, 0x71, 0x0c, 0x64,
	0x07, 0xea, 0x51, 0x1c, 0xba, 0x4c, 0x08, 0x9a, 0x0d, 0x83, 0x7b, 0x56, 0x13, 0xed, 0x6b, 0x5a,
	0xd5, 0xd6, 0x9a, 0xb6, 0x47, 0x9a, 0xb0, 0x5e, 0x18, 0x49, 0xc1, 0xe2, 0x01, 0x5a, 0xd4, 0xf3,
	0x11, 0xe5, 0x36, 0x63, 0x03, 0x13, 0x49, 0x3c, 0x74, 0x93, 0x61, 0x8c, 0x46, 0xbb, 0x13, 0x03,
	0x3b, 0x4a, 0x95, 0x6d, 0x8f, 0xec, 0xc3, 0xcd, 0x59, 0x56, 0x7d, 0x47, 0xf4, 0xe9, 0x99, 0xe3,
	0x0f, 0x99, 0xf5, 0x3e, 0x5a, 0x5f, 0x9f, 0xb6, 0xfe, 0xc4, 0x11, 0xfd, 0x63, 0x09, 0x21, 0xb7,
	0x61, 0x35, 0x66, 0x27, 0x2c, 0x66, 0x92, 0xa5, 0x1b, 0x0e, 0x83, 0xc4, 0x6a, 0xa1, 0xd5, 0x4a,
	0x26, 0xde, 0x97, 0x52, 0xf2, 0x99, 0x01, 0x2b, 0xc5, 0x81, 0x9d, 0x84, 0xd6, 0x07, 0x5b, 0xc6,
	0x76, 0xb9, 0xd9, 0xdd, 0x99, 0x93, 0x3f, 0xed, 0x64, 0xeb, 0x60, 0x9b, 0x85, 0x59, 0x3b, 0x09,
	0x1b, 0xf7, 0x61, 0xbd, 0xdd, 0x39, 0xde, 0x7d, 0x3a, 0x0c, 0x02, 0xe6, 0xef, 0x79, 0x5e, 0xcc,
	0x84, 0x78, 0x3a, 0x8a, 0x18, 0x59, 0x83, 0x2b, 0x6a, 0xe4, 0xca, 0xc7, 0xd4, 0x43, 0xe3, 0x0e,
	0x10, 0x09, 0x3f, 0xfc, 0xe8, 0xe9, 0xcb, 0xb1, 0xef, 0xc2, 0xa6, 0xfd, 0x74, 0x3f, 0x0c, 0x44,
	0x12, 0x3b, 0x3c, 0x48, 0x5e, 0x6e, 0x70, 0x1b, 0x56, 0xdb, 0x9d, 0xe3, 0xd6, 0xcb, 0x81, 0x6f,
	0xc3, 0xca, 0xe1, 0xde, 0xfe, 0xcb, 0x71, 0xff, 0xba, 0x04, 0xf5, 0x6c, 0xe4, 0x71, 0xd0, 0xa7,
	0x8e, 0xe7, 0xc5, 0x34, 0x21, 0x55, 0x58, 0xf0, 0x59, 0xa0, 0xb1, 0xf2, 0x2f, 0x79, 0x03, 0x2a,
	0x38, 0xdb, 0x8e, 0x6a, 0x13, 0x63, 0xa6, 0x64, 0x97, 0xa5, 0x4c, 0x77, 0x43, 0x3e, 0x37, 0x10,
	0xd3, 0xca, 0x30, 0x0b, 0xb8, 0x66, 0xfd, 0xb9, 0xad, 0xd9, 0xc4, 0x5c, 0x20, 0x9b, 0x54, 0x40,
	0x7e, 0x62, 0x40, 0x79, 0xe0, 0xb8, 0x19, 0x99, 0xcb, 0x48, 0xa6, 0x37, 0x37, 0x32, 0xe3, 0xf3,
	0x6d, 0xc3, 0xc0, 0x71, 0xf5, 0x73, 0xe3, 0x09, 0x58, 0xb2, 0x0f, 0xec, 0x4c, 0xc4, 0x51, 0xe8,
	0x73, 0x77, 0x94, 0xce, 0x74, 0x13, 0xd6, 0xa7, 0xe5, 0x92, 0xaf, 0x9c, 0xfb, 0x8a, 0x5d, 0x97,
	0xca, 0x23, 0xad, 0x9b, 0x6e, 0xaf, 0xf5, 0x82, 0xf6, 0x5a, 0xff, 0xab, 0xbd, 0xd6, 0x64, 0x7b,
	0x1f, 0x40, 0x55, 0xb6, 0xe7, 0x37, 0xcf, 0xa2, 0x20, 0x6d, 0xe7, 0x16, 0x98, 0xf9, 0x73, 0x6e,
	0x5f, 0x41, 0x61, 0x6a, 0x78, 0x0f, 0xd6, 0x0e, 0x9a, 0xc7, 0x9d, 0x27, 0x8f, 0x8e, 0x3b, 0x4f,
	0x5e, 0xee, 0x6c, 0xdf, 0x84, 0xf5, 0xbc, 0x9b, 0x81, 0x88, 0x9e, 0x7d, 0xa5, 0xbe, 0xee, 0x42,
	0x5d, 0xae, 0xf7, 0xe1, 0xb9, 0xba, 0x52, 0xe0, 0xdd, 0xf3, 0x81, 0xb7, 0xa1, 0x7a, 0x70, 0x44,
	0x0f, 0x8e, 0xce, 0x15, 0xb0, 0xed, 0xce, 0xd9, 0xee, 0xc7, 0x7e, 0xf8, 0x4c, 0x44, 0xcc, 0x3d,
	0xaf, 0x41, 0xeb, 0xfc, 0x06, 0xff, 0xb9, 0xa6, 0xb7, 0x04, 0xcf, 0x8b, 0x13, 0x09, 0xab, 0xc2,
	0x82, 0x73, 0xc2, 0xd3, 0x48, 0x74, 0x4e, 0xf8, 0x79, 0x22, 0xf1, 0x1e, 0x10, 0x84, 0x0c, 0x5c,
	0x47, 0x24, 0x63, 0xe1, 0x58, 0xb2, 0xab, 0x52, 0x73, 0x28, 0x15, 0x93, 0x68, 0xdf, 0xe9, 0x32,
	0x7f, 0x2c, 0x5e, 0x34, 0xfa, 0x40, 0x2a, 0x52, 0xf4, 0x97, 0x06, 0xa0, 0x53, 0xd2, 0x04, 0x33,
	0x62, 0x86, 0xbf, 0x82, 0xf1, 0x15, 0xcc, 0x33, 0xd8, 0xa7, 0x93, 0xb0, 0x5d, 0x93, 0x3d, 0x8c,
	0x89, 0xc9, 0xaf, 0x0c, 0xa8, 0xaa, 0xd1, 0x7b, 0xf9, 0xd8, 0x17, 0x91, 0xdd, 0xe9, 0x5c, 0xd9,
	0x8d, 0xe7, 0x7c, 0x7b, 0x05, 0x27, 0xda, 0xcb, 0xa6, 0x79, 0x5b, 0xd3, 0x2a, 0x3a, 0xfa, 0x12,
	0x4e, 0x32, 0x22, 0x8f, 0x33, 0x57, 0xcf, 0x72, 0xc2, 0x59, 0x14, 0x38, 0x6a, 0x0d, 0x35, 0x7c,
	0x19, 0xe1, 0x75, 0x0d, 0x77, 0x0e, 0x73, 0xd5, 0x74, 0xf2, 0x2d, 0xbd, 0xca, 0xe4, 0xfb, 0x6b,
	0x03, 0x7d, 0xaa, 0x35, 0xe1, 0x81, 0x70, 0xc1, 0x9c, 0xe4, 0x84, 0xb7, 0xc6, 0x7c, 0x3d, 0x23,
	0x36, 0xee, 0xec, 0xe5, 0x57, 0x41, 0x6c, 0x2c, 0xac, 0x7e, 0xa1, 0xbc, 0xb6, 0x35, 0xe6, 0x1e,
	0x95, 0x0b, 0xa6, 0x25, 0x1d, 0xb1, 0x55, 0x70, 0xc4, 0xdf, 0x19, 0xb0, 0x91, 0x91, 0x1a, 0x5f,
	0x4a, 0xf3, 0x82, 0xa9, 0xd5, 0x35, 0xb5, 0xb1, 0xd5, 0xfc, 0x8d, 0x01, 0xc4, 0x6f, 0x4a, 0x76,
	0x67, 0x91, 0x2f, 0x32, 0x6e, 0x2b, 0xc8, 0x8d, 0xcf, 0xb5, 0x56, 0x2c, 0x6e, 0x96, 0x76, 0xd5,
	0x6f, 0x1e, 0x2b, 0x0e, 0x29, 0xb3, 0x3f, 0x19, 0xb0, 0x1e, 0x27, 0xd4, 0xcd, 0x8a, 0xbb, 0x8c,
	0xdc, 0x2a, 0x92, 0x8b, 0xe6, 0x46, 0xee, 0x05, 0x15, 0xa5, 0x5d, 0x8f, 0x93, 0x29, 0x05, 0xf9,
	0xad, 0x01, 0x35, 0x15, 0xa7, 0x45, 0xb7, 0xab, 0x22, 0x45, 0x7f, 0xae, 0x6b, 0x3b, 0xb1, 0x35,
	0xdb, 0xab, 0x18, 0xaa, 0xf9, 0x7e, 0x9f, 0x52, 0xdb, 0x1d, 0xa7, 0x56, 0x9b, 0x3f, 0xb5, 0xdd,
	0x59, 0xd4, 0x76, 0x8b, 0xd4, 0xbe, 0x30, 0xa0, 0xae, 0xdc, 0x8e, 0xb2, 0x22, 0x39, 0x82, 0xe4,
	0x06, 0x73, 0x23, 0x37, 0xab, 0xd6, 0xd2, 0xbe, 0xf7, 0xa8, 0x40, 0xef, 0x67, 0x06, 0x98, 0xbe,
	0xa0, 0x85, 0x80, 0xa8, 0xcf, 0x39, 0x20, 0x26, 0xcb, 0x27, 0xbb, 0xec, 0x8b, 0x03, 0x51, 0xc8,
	0x22, 0xe9, 0x74, 0x65, 0x55, 0x9f, 0x64, 0xb5, 0x36, 0xe7, 0x8a, 0x61, 0x66, 0xb1, 0xa9, 0xe7,
	0xeb, 0x50, 0x44, 0xcf, 0x8a, 0xb1, 0x8a, 0xdd, 0x9e, 0xe8, 0x32, 0x2d, 0x63, 0xb8, 0x3e, 0xe7,
	0x58, 0x7d, 0x41, 0x31, 0xa9, 0x76, 0xf8, 0x09, 0x45, 0x4a, 0xb3, 0x35, 0x4d, 0x73, 0x63, 0xfe,
	0x34, 0x5b, 0x2f, 0xa2, 0x39, 0xa9, 0x20, 0x7f, 0x31, 0xe0, 0x6a, 0x56, 0xe7, 0x4c, 0x51, 0xdd,
	0x7c, 0x45, 0x33, 0xba, 0xa1, 0x6b, 0xa6, 0x17, 0xb0, 0x6d, 0xcd, 0x66, 0x6b, 0xbd, 0xa2, 0x89,
	0xdd, 0xd0, 0x9b, 0xdd, 0x24, 0xdb, 0x3f, 0xab, 0xfd, 0x58, 0x9e, 0x16, 0xe9, 0xc4, 0xf1, 0xee,
	0x2a, 0x52, 0xfd, 0x74, 0xae, 0xc1, 0x34, 0xeb, 0x00, 0x9b, 0x9e, 0x50, 0x3b, 0xc5, 0x13, 0x65,
	0x4a, 0xb4, 0x35, 0x83, 0xe8, 0xb5, 0x8b, 0x21, 0xda, 0x9a, 0x49, 0xb4, 0x35, 0x41, 0xb4, 0xf1,
	0x18, 0xd6, 0xa4, 0x41, 0xc4, 0x3c, 0x2e, 0x12, 0xbf, 0xeb, 0x53, 0x16, 0x24, 0xf1, 0x88, 0x92,
	0x1b, 0x00, 0x11, 0x1b, 0x3b, 0x8f, 0x96, 0xec, 0x52, 0xc4, 0xd2, 0xf1, 0xad, 0xc1, 0x15, 0x2c,
	0x20, 0xf5, 0xd5, 0xa1, 0x7a, 0x68, 0xfc, 0xdb, 0x80, 0x25, 0x11, 0x53, 0xc1, 0x3d, 0x4a, 0x08,
	0x5c, 0x96, 0xe7, 0x37, 0x6d, 0x8a, 0xff, 0x67, 0x5b, 0x4d, 0x9d, 0xe7, 0x16, 0xce, 0x71, 0xb3,
	0x72, 0xf9, 0x15, 0x16, 0xf7, 0x8d, 0xbf, 0xe9, 0xab, 0xd7, 0x2e, 0x0f, 0x3c, 0x1e, 0xf4, 0x70,
	0xbc, 0xc9, 0x57, 0x18, 0xf0, 0xff, 0xd5, 0x3d, 0x51, 0xe3, 0xf7, 0x06, 0x94, 0x45, 0x4c, 0xd9,
	0xf3, 0x28, 0x72, 0x92, 0x3e, 0x25, 0x1b, 0xb0, 0xf8, 0x8c, 0xf1, 0x5e, 0x3f, 0xc1, 0x91, 0x98,
	0xb6, 0x7e, 0x22, 0x3f, 0x84, 0x25, 0xc1, 0x7a, 0x03, 0x16, 0x24, 0xd6, 0xa5, 0xad, 0x85, 0xed,
	0x72, 0xf3, 0xfb, 0x73, 0xe3, 0xab, 0x7d, 0xc8, 0x4e, 0x3b, 0x6c, 0xfc, 0xfd, 0xb2, 0xba, 0xa6,
	0xcb, 0x5c, 0x5a, 0x7b, 0xe9, 0x1d, 0xa8, 0xe9, 0x53, 0x38, 0x0b, 0x5c, 0x27, 0xa2, 0xd9, 0x02,
	0x98, 0xf6, 0xaa, 0x52, 0x3c, 0x92, 0x72, 0xbc, 0x6f, 0xf8, 0xdc, 0x80, 0x72, 0x61, 0xc5, 0x70,
	0x49, 0xca, 0xcd, 0x1f, 0xcc, 0x35, 0x0e, 0xc7, 0x3c, 0xc4, 0x06, 0xfd, 0x78, 0xc4, 0x3d, 0xf2,
	0xa5, 0x01, 0xeb, 0x8e, 0xef, 0x87, 0xae, 0x93, 0x30, 0xaf, 0x88, 0xd3, 0xce, 0x70, 0x91, 0xbc,
	0xea, 0x19, 0x91, 0x87, 0x39, 0xc1, 0x9b, 0x00, 0x51, 0x76, 0x2b, 0xad, 0x6f, 0xf0, 0x0b, 0x12,
	0xe9, 0xda, 0x22, 0x71, 0x12, 0x86, 0xf7, 0x1e, 0xcb, 0xb6, 0x7a, 0x20, 0xb7, 0xc0, 0x8c, 0xd9,
	0xa7, 0x43, 0x26, 0x12, 0xaa, 0xb4, 0x8b, 0xea, 0xfd, 0x83, 0x16, 0x1e, 0x21, 0xe8, 0x33, 0x03,
	0x4c, 0xbd, 0xb2, 0xd4, 0xe7, 0x22, 0x11, 0xd6, 0x12, 0x3a, 0x94, 0x37, 0x4f, 0x87, 0x4a, 0xfd,
	0xdb, 0xae, 0xe8, 0xae, 0x0f, 0x64, 0xcf, 0xd2, 0xfb, 0xd1, 0xb3, 0x92, 0x61, 0xa0, 0x5c, 0x48,
	0x7b, 0xd6, 0x67, 0x06, 0x94, 0xb2, 0xdc, 0x8d, 0x2e, 0x35, 0xcf, 0xaa, 0x7b, 0x86, 0x6f, 0xdb,
	0xcb, 0x42, 0xa7, 0xea, 0xc6, 0x48, 0xbd, 0x59, 0xea, 0x3a, 0x3d, 0xea, 0x3b, 0x71, 0x8f, 0xb9,
	0xe1, 0x60, 0x40, 0x65, 0xda, 0xec, 0xf9, 0x61, 0xd7, 0x91, 0x87, 0xf8, 0x01, 0x0f, 0xb4, 0xdb,
	0x97, 0x95, 0x6c, 0x4f, 0x8a, 0xc8, 0xeb, 0x50, 0x96, 0x0b, 0xeb, 0x53, 0xcf, 0x49, 0x9c, 0xf7,
	0x74, 0x12, 0x02, 0x14, 0x7d, 0x24, 0x25, 0xe3, 0x80, 0xa6, 0x7e, 0xb3, 0x93, 0x03, 0x9a, 0x8d,
	0x7f, 0xd4, 0x60, 0x43, 0xf6, 0x2d, 0xbb, 0x0c, 0x03, 0x75, 0x4d, 0x9e, 0xc7, 0x1e, 0x17, 0x74,
	0xc0, 0x92, 0x98, 0xbb, 0x34, 0x8a, 0x99, 0x90, 0x99, 0xc1, 0x40, 0x67, 0x58, 0xe5, 0xe2, 0x10,
	0xe5, 0x1d, 0x25, 0x26, 0xef, 0xc1, 0x3a, 0x17, 0x54, 0x75, 0x25, 0x7d, 0x28, 0xc3, 0x5f, 0x42,
	0x3c, 0xe1, 0xe2, 0x40, 0xea, 0x3a, 0x31, 0x3b, 0x49, 0x4d, 0xbe, 0x05, 0xd7, 0xb9, 0xa0, 0x4e,
	0x12, 0x0e, 0xb8, 0x4b, 0x9d, 0x5e, 0x2f, 0x66, 0x3d, 0x27, 0x61, 0x99, 0xe1, 0x02, 0x1a, 0x5a,
	0x5c, 0xec, 0x21, 0x62, 0x2f, 0x05, 0xa4, 0xe6, 0x4d, 0xec, 0x31, 0xb5, 0x0b, 0xe3, 0xcc, 0xf0,
	0x32, 0x1a, 0xd6, 0xb9, 0xd8, 0xcb, 0x74, 0xa9, 0x8d, 0x1a, 0x51, 0x18, 0xf3, 0x1e, 0x0f, 0x32,
	0xfc, 0x95, 0x74, 0x44, 0xdf, 0x41, 0x79, 0x8a, 0xbd, 0x0b, 0x44, 0xb6, 0x2f, 0x28, 0x3a, 0x55,
	0x0a, 0x5e, 0x4c, 0xc1, 0x7b, 0xa2, 0xe3, 0x24, 0xfd, 0x14, 0xfc, 0x35, 0x58, 0xe3, 0x02, 0xe7,
	0x70, 0x18, 0xf0, 0x64, 0x94, 0xc1, 0x97, 0xd2, 0xd1, 0xef, 0xa7, 0xaa, 0xd4, 0x62, 0x0f, 0x6e,
	0x70, 0x41, 0xd9, 0xf3, 0x84, 0x05, 0x1e, 0xf3, 0x66, 0x98, 0x2e, 0xa3, 0xe9, 0x35, 0x2e, 0x1e,
	0x69, 0xcc, 0x54, 0x13, 0x6f, 0xc2, 0x0a, 0x17, 0x54, 0x08, 0x27, 0xb3, 0x29, 0xa1, 0x4d, 0x85,
	0x8b, 0x23, 0xe1, 0x4c, 0x52, 0x0b, 0x02, 0xe6, 0x16, 0xa7, 0x09, 0x72, 0x6a, 0x5a, 0x95, 0x5a,
	0xbc, 0x0d, 0xab, 0x5c, 0xd0, 0x68, 0x20, 0x78, 0x06, 0x2e, 0x23, 0xd8, 0xe4, 0xa2, 0x33, 0x10,
	0x3c, 0xc5, 0x6d, 0x43, 0x55, 0xe2, 0xa2, 0x68, 0x10, 0x65, 0xc0, 0x0a, 0x02, 0x57, 0xb8, 0xe8,
	0x48, 0xf1, 0x78, 0x8b, 0x0e, 0xef, 0xe5, 0x40, 0x33, 0x6d, 0x71, 0x8f, 0xf7, 0x32, 0xdc, 0x27,
	0xf0, 0x86, 0x6c, 0x91, 0x51, 0x59, 0xab, 0xf0, 0xa0, 0x37, 0xe4, 0xa2, 0xcf, 0x62, 0x7d, 0x93,
	0x95, 0x5a, 0xae, 0xa0, 0xe5, 0x0d, 0x2e, 0x3a, 0xec, 0xa3, 0x22, 0x0c, 0x2f, 0x9b, 0xd2, 0x96,
	0xde, 0x87, 0x4d, 0xae, 0x0e, 0x88, 0xd9, 0x4b, 0xb6, 0xd4, 0x7e, 0x15, 0xed, 0xd7, 0xb8, 0x3c,
	0xbf, 0xa5, 0xca, 0xd4, 0xec, 0x01, 0x6c, 0x48, 0x33, 0xec, 0x8f, 0x07, 0x1e, 0x7b, 0x9e, 0x59,
	0x55, 0x53, 0xaf, 0xc2, 0x6e, 0xda, 0x52, 0x97, 0x1a, 0xbd, 0x0e, 0xe5, 0x40, 0xee, 0xa0, 0xdd,
	0x30, 0xa6, 0x8e, 0x3a, 0xc0, 0x9b, 0x36, 0xa4, 0xa2, 0x3d, 0x81, 0xaf, 0x63, 0x73, 0x3f, 0x75,
	0xd4, 0x31, 0xda, 0xb4, 0x2b, 0xb9, 0x70, 0x4f, 0x90, 0xfb, 0x40, 0x8a, 0xa0, 0xc2, 0xb9, 0xb6,
	0x64, 0xd7, 0x0a, 0x48, 0x5d, 0x30, 0x6d, 0xc0, 0xa2, 0x8a, 0x4c, 0x3c, 0x64, 0x9a, 0xb6, 0x7e,
	0x22, 0xef, 0x40, 0x35, 0x8f, 0x42, 0x9d, 0xdb, 0xd7, 0xd5, 0x7e, 0xe9, 0xa7, 0x11, 0xa8, 0x13,
	0xfc, 0x06, 0x2c, 0xaa, 0x50, 0xc0, 0xe3, 0x95, 0x69, 0xeb, 0x27, 0xb2, 0x09, 0x4b, 0xda, 0xed,
	0xf1, 0x30, 0x53, 0xb2, 0x17, 0x1d, 0x74, 0x76, 0xf2, 0x1a, 0x94, 0x32, 0x3f, 0xb5, 0xac, 0xad,
	0x85, 0x6d, 0xd3, 0xce, 0x05, 0xe4, 0x43, 0xb0, 0x66, 0xb8, 0xf3, 0x89, 0xef, 0xf4, 0x54, 0xed,
	0x6e, 0xda, 0x1b, 0x6c, 0xd2, 0x95, 0x3f, 0x96, 0x5a, 0x39, 0xf4, 0x69, 0x4b, 0xeb, 0x1a, 0x76,
	0x50, 0x9b, 0xb2, 0x91, 0xf0, 0x61, 0x70, 0x1a, 0x84, 0xcf, 0x82, 0x7c, 0x75, 0x85, 0x75, 0x5d,
	0xc1, 0xb5, 0x26, 0x5b, 0x59, 0x21, 0xd3, 0xa8, 0xeb, 0x0f, 0x45, 0x22, 0x1d, 0x89, 0x8b, 0xc4,
	0x7a, 0x0d, 0x81, 0x65, 0x2d, 0x93, 0x9b, 0x84, 0xdc, 0x0a, 0xd5, 0xd8, 0xe5, 0x0c, 0x5b, 0x37,
	0x70, 0xd0, 0x05, 0x09, 0xb9, 0x87, 0xc7, 0xfb, 0x84, 0x46, 0x67, 0x0f, 0xa8, 0x60, 0x42, 0xf0,
	0x30, 0xa0, 0xdc, 0xb3, 0x6e, 0xea, 0x79, 0x6d, 0x3e, 0xed, 0x9c, 0x3d, 0x38, 0x52, 0xf2, 0xb6,
	0x47, 0xde, 0x82, 0xd5, 0x0c, 0xed, 0x86, 0xe1, 0x29, 0x67, 0xd6, 0xeb, 0xd8, 0x67, 0x45, 0x21,
	0xf7, 0x51, 0x46, 0xde, 0x82, 0x95, 0x3c, 0x2a, 0xb1, 0xae, 0xd9, 0xc2, 0xf6, 0xcc, 0x4c, 0x8a,
	0x55, 0xcd, 0x6d, 0x58, 0xcd, 0x61, 0xea, 0x7d, 0xca, 0x1b, 0xd8, 0x5a, 0x6e, 0xad, 0xde, 0x3d,
	0xdf, 0x81, 0x1a, 0x46, 0x98, 0x4e, 0xd8, 0x0a, 0xda, 0xd8, 0x32, 0xb6, 0x2f, 0xdb, 0xab, 0x52,
	0xa1, 0x12, 0xb6, 0xc2, 0x5e, 0x87, 0x12, 0xc6, 0x37, 0x76, 0x7b, 0x0b, 0xbb, 0x5d, 0x96, 0x02,
	0xec, 0x51, 0x9e, 0x0c, 0xa4, 0x52, 0x2d, 0xdd, 0x9b, 0xa8, 0x45, 0xb8, 0x5a, 0xad, 0x54, 0xad,
	0xea, 0xde, 0xb7, 0x72, 0x35, 0x46, 0x46, 0xa6, 0x56, 0xfd, 0xbf, 0xad, 0xbc, 0x44, 0x4a, 0x54,
	0xcf, 0x52, 0x1d, 0x0d, 0x68, 0xa4, 0xd4, 0xb7, 0xb5, 0x75, 0x34, 0xe8, 0xa0, 0x80, 0xfc, 0xd1,
	0x80, 0x8d, 0xd9, 0xf1, 0x6f, 0x6d, 0x63, 0x09, 0x31, 0x98, 0xeb, 0x16, 0x3d, 0x79, 0x4a, 0xb2,
	0xd7, 0xa2, 0x19, 0x49, 0x46, 0x46, 0x88, 0x4e, 0x2d, 0xd6, 0x3b, 0x38, 0xc0, 0x45, 0x1f, 0x73,
	0x89, 0x4c, 0x89, 0xc5, 0xe4, 0x81, 0x88, 0x3b, 0x6a, 0xb5, 0xfc, 0x2c, 0x6f, 0x20, 0xf2, 0xe7,
	0x06, 0x54, 0x8a, 0x95, 0xad, 0x75, 0xf7, 0x02, 0x2a, 0x90, 0x89, 0x1a, 0xc8, 0x2e, 0x17, 0x4a,
	0x68, 0xf2, 0x0d, 0xb8, 0x86, 0xb9, 0x2f, 0xee, 0xb1, 0x19, 0xdb, 0xd1, 0x3d, 0xcc, 0x7f, 0x9b,
	0x32, 0xff, 0xc5, 0x3d, 0x36, 0xb5, 0x17, 0xfd, 0xd2, 0x80, 0xd5, 0x09, 0x53, 0xeb, 0x3e, 0x2e,
	0xd8, 0xe9, 0x7c, 0xeb, 0xdc, 0xb1, 0x92, 0x49, 0xce, 0x72, 0x91, 0x5d, 0xe3, 0x9f, 0x15, 0x28,
	0x65, 0x6f, 0xff, 0xc9, 0x6d, 0xdc, 0xb0, 0x74, 0x6e, 0x6b, 0xd2, 0xee, 0x28, 0x61, 0xba, 0x9e,
	0x31, 0xd3, 0x0d, 0xbd, 0xf9, 0x70, 0x94, 0x30, 0xb2, 0x0f, 0x37, 0x25, 0x30, 0x8a, 0x7c, 0xee,
	0x3a, 0x89, 0x8c, 0x76, 0x59, 0x79, 0x3c, 0x73, 0x46, 0x13, 0x65, 0xcd, 0x75, 0x2e, 0xf6, 0x72,
	0xd0, 0xb7, 0x15, 0x26, 0x9d, 0x92, 0xfb, 0x50, 0xe7, 0xca, 0x49, 0xa8, 0x60, 0xc9, 0x44, 0x5d,
	0x53, 0xe5, 0xe8, 0x30, 0x47, 0x2c, 0x49, 0xe1, 0xef, 0xc2, 0x9a, 0x84, 0x61, 0x08, 0xf3, 0xa0,
	0x1b, 0x0e, 0x03, 0x8f, 0xf2, 0x5e, 0xa4, 0xcb, 0x99, 0x9a, 0x60, 0x89, 0xdc, 0x29, 0xdb, 0x4a,
	0xd3, 0xee, 0x45, 0x72, 0x8b, 0x9b, 0x32, 0xd0, 0x5b, 0x82, 0x2a, 0x69, 0xd6, 0xc6, 0x6d, 0x54,
	0xfc, 0xeb, 0xaa, 0x21, 0x0e, 0x26, 0x6b, 0x9a, 0x0a, 0x17, 0x76, 0xd0, 0x1f, 0xaf, 0x94, 0x62,
	0xde, 0x2d, 0x02, 0x97, 0xd2, 0xe2, 0xc7, 0x46, 0x79, 0xa1, 0xc2, 0xc8, 0x77, 0xd9, 0x53, 0x36,
	0xa2, 0xc1, 0x70, 0xd0, 0x65, 0x31, 0x56, 0x30, 0xa6, 0x9d, 0x7f, 0x2e, 0xf4, 0x98, 0x8d, 0x9e,
	0xa0, 0x86, 0x7c, 0x1d, 0xae, 0xe6, 0x16, 0x31, 0x1b, 0x0a, 0x46, 0xb9, 0x4c, 0xfd, 0xc1, 0x09,
	0xef, 0xe9, 0x22, 0x26, 0xff, 0x84, 0xc7, 0x96, 0xfa, 0xb6, 0xb7, 0x8f, 0x5a, 0xf2, 0xe1, 0x4c,
	0xd3, 0x81, 0xf3, 0x5c, 0x26, 0x64, 0xc0, 0x1e, 0xd7, 0x27, 0x4d, 0x0f, 0x9d, 0xe7, 0x6d, 0x4f,
	0xce, 0xd7, 0x0c, 0xcb, 0x20, 0xf4, 0x18, 0x96, 0x37, 0xc5, 0xef, 0x82, 0xb4, 0xdd, 0x93, 0xd0,
	0x63, 0x32, 0x2c, 0x66, 0x71, 0x1d, 0xc6, 0x71, 0x5a, 0xef, 0x98, 0xf6, 0xe6, 0x14, 0x59, 0xa5,
	0x7e, 0x41, 0x9f, 0xa7, 0x6c, 0xa4, 0x5e, 0x2f, 0xcd, 0xe8, 0xf3, 0x31, 0x1b, 0x09, 0xf2, 0xb0,
	0xf8, 0x2d, 0x52, 0x66, 0x16, 0x33, 0x37, 0x3c, 0x63, 0xd2, 0x9b, 0x5c, 0x2c, 0x82, 0x4c, 0xfb,
	0xda, 0xa4, 0xb5, 0xad, 0x20, 0x47, 0xcc, 0x25, 0x77, 0xa1, 0x76, 0x16, 0x05, 0xe3, 0x99, 0x14,
	0x6b, 0x1f, 0xd3, 0xae, 0x9e, 0x45, 0xc1, 0x58, 0x56, 0x23, 0x5f, 0x18, 0x50, 0x2b, 0x9c, 0x00,
	0xf4, 0x96, 0xaa, 0xde, 0x92, 0x84, 0x73, 0x0d, 0xe0, 0xe9, 0x73, 0x87, 0x5d, 0x55, 0xb2, 0xc2,
	0x16, 0xfe, 0x53, 0x03, 0x96, 0xd3, 0x40, 0xd2, 0x2f, 0x48, 0x2e, 0x9c, 0xd5, 0x92, 0xa3, 0xe2,
	0x95, 0x5c, 0x85, 0x65, 0x19, 0x14, 0xb8, 0x75, 0xaa, 0x42, 0x6e, 0x29, 0x0e, 0xfa, 0xb8, 0x73,
	0x6e, 0x82, 0xfc, 0x4b, 0x7d, 0x16, 0x60, 0xe1, 0x66, 0xda, 0x8b, 0x71, 0xd0, 0x3f, 0x60, 0x01,
	0xd9, 0x82, 0x4a, 0xf6, 0xed, 0x91, 0xd4, 0xaa, 0x9a, 0x0d, 0xe2, 0xa0, 0x2f, 0xeb, 0x39, 0x89,
	0xf8, 0xb1, 0xa1, 0x9a, 0x95, 0x10, 0x7d, 0x2b, 0xef, 0xcf, 0xff, 0x53, 0xb0, 0xfc, 0x83, 0x28,
	0x1c, 0x84, 0x24, 0x23, 0xeb, 0x25, 0x1d, 0xf7, 0x89, 0xd3, 0xf5, 0x99, 0x2e, 0x0e, 0xcb, 0x4a,
	0xf6, 0x54, 0x8a, 0xe4, 0x26, 0xae, 0x21, 0x03, 0xc7, 0xd5, 0x45, 0x62, 0x49, 0x49, 0x0e, 0x1d,
	0x97, 0xfc, 0xc8, 0x00, 0xfd, 0x44, 0x79, 0xa4, 0xaf, 0x98, 0xd9, 0x7c, 0x07, 0xa3, 0x3f, 0x26,
	0xb1, 0x97, 0x55, 0xbf, 0xed, 0x48, 0x96, 0x57, 0xea, 0x3f, 0x8f, 0xf4, 0x40, 0x54, 0x11, 0x6a,
	0xa6, 0xd2, 0xc9, 0xa1, 0x9c, 0x05, 0x1c, 0xaf, 0x6e, 0xcd, 0x74, 0x28, 0xc7, 0x01, 0x2f, 0x4c,
	0x86, 0xda, 0xa5, 0xaf, 0x17, 0x27, 0x03, 0xf7, 0xcd, 0xee, 0x22, 0x7e, 0x07, 0xfa, 0xe0, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x43, 0xe8, 0x88, 0xf9, 0x1d, 0x2a, 0x00, 0x00,
}
