// Code generated by protoc-gen-go.
// source: bgp_config_entity_bag.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_instance_default_vrf_entity_configurations_entity_configuration is a generated protocol buffer package.

It is generated from these files:
	bgp_config_entity_bag.proto

It has these top-level messages:
	BgpConfigEntityBag_KEYS
	BgpConfigEntityBag
	IPV4TunnelAddressType
	IPV4MDTAddressType
	RTConstraintAddressType
	IPV6AddressType
	BgpIpv4SrpolicyAddrT
	BgpIpv6SrpolicyAddrT
	BgpL2VpnAddrT
	L2VPNEVPNAddressType
	BgpL2VpnMspwAddrT
	IPV6MVPNAddressType
	IPV4MVPNAddressType
	LS_LSAddressType
	IPv4FlowspecAddressType
	IPv6FlowspecAddressType
	BgpAddrtype
	BgpConfigEntid_
	BgpConfigEntid_Item
	BgpConfigInfo_
	BgpAfDep_
	BgpAfIndep_
	BgpAfP
*/
package cisco_ios_xr_ipv4_bgp_oper_bgp_config_instances_config_instance_config_instance_default_vrf_entity_configurations_entity_configuration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BGP entity config information
type BgpConfigEntityBag_KEYS struct {
	InstanceName    string `protobuf:"bytes,1,opt,name=instance_name,json=instanceName" json:"instance_name,omitempty"`
	EntityType      string `protobuf:"bytes,2,opt,name=entity_type,json=entityType" json:"entity_type,omitempty"`
	NeighborAddress string `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	EntityName      string `protobuf:"bytes,4,opt,name=entity_name,json=entityName" json:"entity_name,omitempty"`
}

func (m *BgpConfigEntityBag_KEYS) Reset()                    { *m = BgpConfigEntityBag_KEYS{} }
func (m *BgpConfigEntityBag_KEYS) String() string            { return proto.CompactTextString(m) }
func (*BgpConfigEntityBag_KEYS) ProtoMessage()               {}
func (*BgpConfigEntityBag_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BgpConfigEntityBag_KEYS) GetInstanceName() string {
	if m != nil {
		return m.InstanceName
	}
	return ""
}

func (m *BgpConfigEntityBag_KEYS) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *BgpConfigEntityBag_KEYS) GetNeighborAddress() string {
	if m != nil {
		return m.NeighborAddress
	}
	return ""
}

func (m *BgpConfigEntityBag_KEYS) GetEntityName() string {
	if m != nil {
		return m.EntityName
	}
	return ""
}

type BgpConfigEntityBag struct {
	// Neighbor Address
	NeighborAddress *BgpAddrtype `protobuf:"bytes,50,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Entity/group name
	GroupName string `protobuf:"bytes,51,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	// Entity type
	ConfigurationType string `protobuf:"bytes,52,opt,name=configuration_type,json=configurationType" json:"configuration_type,omitempty"`
	// AF identifier
	AddressFamilyIdentifier uint32 `protobuf:"varint,53,opt,name=address_family_identifier,json=addressFamilyIdentifier" json:"address_family_identifier,omitempty"`
	// AF-independent config
	AfIndependentConfig *BgpAfIndep_ `protobuf:"bytes,54,opt,name=af_independent_config,json=afIndependentConfig" json:"af_independent_config,omitempty"`
	// Af-dependent config
	AfDependentConfig []*BgpAfP `protobuf:"bytes,55,rep,name=af_dependent_config,json=afDependentConfig" json:"af_dependent_config,omitempty"`
}

func (m *BgpConfigEntityBag) Reset()                    { *m = BgpConfigEntityBag{} }
func (m *BgpConfigEntityBag) String() string            { return proto.CompactTextString(m) }
func (*BgpConfigEntityBag) ProtoMessage()               {}
func (*BgpConfigEntityBag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BgpConfigEntityBag) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpConfigEntityBag) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *BgpConfigEntityBag) GetConfigurationType() string {
	if m != nil {
		return m.ConfigurationType
	}
	return ""
}

func (m *BgpConfigEntityBag) GetAddressFamilyIdentifier() uint32 {
	if m != nil {
		return m.AddressFamilyIdentifier
	}
	return 0
}

func (m *BgpConfigEntityBag) GetAfIndependentConfig() *BgpAfIndep_ {
	if m != nil {
		return m.AfIndependentConfig
	}
	return nil
}

func (m *BgpConfigEntityBag) GetAfDependentConfig() []*BgpAfP {
	if m != nil {
		return m.AfDependentConfig
	}
	return nil
}

// IPV4Tunnel Address type
type IPV4TunnelAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4TunnelAddressType) Reset()                    { *m = IPV4TunnelAddressType{} }
func (m *IPV4TunnelAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4TunnelAddressType) ProtoMessage()               {}
func (*IPV4TunnelAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IPV4TunnelAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4MDT Address type
type IPV4MDTAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MDTAddressType) Reset()                    { *m = IPV4MDTAddressType{} }
func (m *IPV4MDTAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MDTAddressType) ProtoMessage()               {}
func (*IPV4MDTAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IPV4MDTAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 RTConstraint Address type
type RTConstraintAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *RTConstraintAddressType) Reset()                    { *m = RTConstraintAddressType{} }
func (m *RTConstraintAddressType) String() string            { return proto.CompactTextString(m) }
func (*RTConstraintAddressType) ProtoMessage()               {}
func (*RTConstraintAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RTConstraintAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV6 Address type
type IPV6AddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6AddressType) Reset()                    { *m = IPV6AddressType{} }
func (m *IPV6AddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6AddressType) ProtoMessage()               {}
func (*IPV6AddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IPV6AddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpIpv4SrpolicyAddrT struct {
	Ipv4SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv4_srpolicy_address,json=ipv4SrpolicyAddress,proto3" json:"ipv4_srpolicy_address,omitempty"`
}

func (m *BgpIpv4SrpolicyAddrT) Reset()                    { *m = BgpIpv4SrpolicyAddrT{} }
func (m *BgpIpv4SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv4SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv4SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BgpIpv4SrpolicyAddrT) GetIpv4SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv4SrpolicyAddress
	}
	return nil
}

type BgpIpv6SrpolicyAddrT struct {
	Ipv6SrpolicyAddress []byte `protobuf:"bytes,1,opt,name=ipv6_srpolicy_address,json=ipv6SrpolicyAddress,proto3" json:"ipv6_srpolicy_address,omitempty"`
}

func (m *BgpIpv6SrpolicyAddrT) Reset()                    { *m = BgpIpv6SrpolicyAddrT{} }
func (m *BgpIpv6SrpolicyAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpIpv6SrpolicyAddrT) ProtoMessage()               {}
func (*BgpIpv6SrpolicyAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BgpIpv6SrpolicyAddrT) GetIpv6SrpolicyAddress() []byte {
	if m != nil {
		return m.Ipv6SrpolicyAddress
	}
	return nil
}

type BgpL2VpnAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnAddrT) Reset()                    { *m = BgpL2VpnAddrT{} }
func (m *BgpL2VpnAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnAddrT) ProtoMessage()               {}
func (*BgpL2VpnAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BgpL2VpnAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// L2VPN EVPN Address type
type L2VPNEVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *L2VPNEVPNAddressType) Reset()                    { *m = L2VPNEVPNAddressType{} }
func (m *L2VPNEVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*L2VPNEVPNAddressType) ProtoMessage()               {}
func (*L2VPNEVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *L2VPNEVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpL2VpnMspwAddrT struct {
	L2VpnAddress []byte `protobuf:"bytes,1,opt,name=l2vpn_address,json=l2vpnAddress,proto3" json:"l2vpn_address,omitempty"`
}

func (m *BgpL2VpnMspwAddrT) Reset()                    { *m = BgpL2VpnMspwAddrT{} }
func (m *BgpL2VpnMspwAddrT) String() string            { return proto.CompactTextString(m) }
func (*BgpL2VpnMspwAddrT) ProtoMessage()               {}
func (*BgpL2VpnMspwAddrT) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *BgpL2VpnMspwAddrT) GetL2VpnAddress() []byte {
	if m != nil {
		return m.L2VpnAddress
	}
	return nil
}

// IPV6 MVPN Address type
type IPV6MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV6MVPNAddressType) Reset()                    { *m = IPV6MVPNAddressType{} }
func (m *IPV6MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV6MVPNAddressType) ProtoMessage()               {}
func (*IPV6MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IPV6MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPV4 MVPN Address type
type IPV4MVPNAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPV4MVPNAddressType) Reset()                    { *m = IPV4MVPNAddressType{} }
func (m *IPV4MVPNAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPV4MVPNAddressType) ProtoMessage()               {}
func (*IPV4MVPNAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *IPV4MVPNAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LINKSTATE LINKSTATE Address type
type LS_LSAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *LS_LSAddressType) Reset()                    { *m = LS_LSAddressType{} }
func (m *LS_LSAddressType) String() string            { return proto.CompactTextString(m) }
func (*LS_LSAddressType) ProtoMessage()               {}
func (*LS_LSAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *LS_LSAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv4 Flowspec Address type
type IPv4FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv4FlowspecAddressType) Reset()                    { *m = IPv4FlowspecAddressType{} }
func (m *IPv4FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv4FlowspecAddressType) ProtoMessage()               {}
func (*IPv4FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *IPv4FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// IPv6 Flowspec Address type
type IPv6FlowspecAddressType struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *IPv6FlowspecAddressType) Reset()                    { *m = IPv6FlowspecAddressType{} }
func (m *IPv6FlowspecAddressType) String() string            { return proto.CompactTextString(m) }
func (*IPv6FlowspecAddressType) ProtoMessage()               {}
func (*IPv6FlowspecAddressType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *IPv6FlowspecAddressType) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BgpAddrtype struct {
	Afi string `protobuf:"bytes,1,opt,name=afi" json:"afi,omitempty"`
	// IPv4 Addr
	Ipv4Address string `protobuf:"bytes,2,opt,name=ipv4_address,json=ipv4Address" json:"ipv4_address,omitempty"`
	// IPv4 Mcast Addr
	Ipv4McastAddress string `protobuf:"bytes,3,opt,name=ipv4_mcast_address,json=ipv4McastAddress" json:"ipv4_mcast_address,omitempty"`
	// IPv4 Label Addr
	Ipv4LabelAddress string `protobuf:"bytes,4,opt,name=ipv4_label_address,json=ipv4LabelAddress" json:"ipv4_label_address,omitempty"`
	// IPv4 Tunnel
	Ipv4TunnelAddress *IPV4TunnelAddressType `protobuf:"bytes,5,opt,name=ipv4_tunnel_address,json=ipv4TunnelAddress" json:"ipv4_tunnel_address,omitempty"`
	// IPv4 MDT Addr
	Ipv4MdtAddress *IPV4MDTAddressType `protobuf:"bytes,6,opt,name=ipv4_mdt_address,json=ipv4MdtAddress" json:"ipv4_mdt_address,omitempty"`
	// IPv4 VPN Addr
	Ipv4VpnAddress string `protobuf:"bytes,7,opt,name=ipv4_vpn_address,json=ipv4VpnAddress" json:"ipv4_vpn_address,omitempty"`
	// IPv4 VPN Mcast Addr
	Ipv4VpnaMcastddress string `protobuf:"bytes,8,opt,name=ipv4_vpna_mcastddress,json=ipv4VpnaMcastddress" json:"ipv4_vpna_mcastddress,omitempty"`
	// IPV6 Addr
	Ipv6Address *IPV6AddressType `protobuf:"bytes,9,opt,name=ipv6_address,json=ipv6Address" json:"ipv6_address,omitempty"`
	// IPV6 Mcast Addr
	Ipv6McastAddress *IPV6AddressType `protobuf:"bytes,10,opt,name=ipv6_mcast_address,json=ipv6McastAddress" json:"ipv6_mcast_address,omitempty"`
	// IPv6 Label Addr
	Ipv6LabelAddress *IPV6AddressType `protobuf:"bytes,11,opt,name=ipv6_label_address,json=ipv6LabelAddress" json:"ipv6_label_address,omitempty"`
	// IPv6 VPN Addr
	Ipv6VpnAddress *IPV6AddressType `protobuf:"bytes,12,opt,name=ipv6_vpn_address,json=ipv6VpnAddress" json:"ipv6_vpn_address,omitempty"`
	// IPv6 VPN Mcast Addr
	Ipv6VpnMcastAddress *IPV6AddressType `protobuf:"bytes,13,opt,name=ipv6_vpn_mcast_address,json=ipv6VpnMcastAddress" json:"ipv6_vpn_mcast_address,omitempty"`
	// L2VPN VPLS Addr
	L2VpnvplsAddress *BgpL2VpnAddrT `protobuf:"bytes,14,opt,name=l2_vpnvpls_address,json=l2VpnvplsAddress" json:"l2_vpnvpls_address,omitempty"`
	// RT Constrt Addr
	RtConstraintAddress *RTConstraintAddressType `protobuf:"bytes,15,opt,name=rt_constraint_address,json=rtConstraintAddress" json:"rt_constraint_address,omitempty"`
	// MVPN addr
	Ipv6MvpnAddress *IPV6MVPNAddressType `protobuf:"bytes,16,opt,name=ipv6_mvpn_address,json=ipv6MvpnAddress" json:"ipv6_mvpn_address,omitempty"`
	// MVPN4 addr
	Ipv4MvpnAddress *IPV4MVPNAddressType `protobuf:"bytes,17,opt,name=ipv4_mvpn_address,json=ipv4MvpnAddress" json:"ipv4_mvpn_address,omitempty"`
	// L2VPN EVPN Addr
	L2VpnEvpnAddress *L2VPNEVPNAddressType `protobuf:"bytes,18,opt,name=l2_vpn_evpn_address,json=l2VpnEvpnAddress" json:"l2_vpn_evpn_address,omitempty"`
	// LINKSTATE LINKSTATE Addr
	LsLsAddress *LS_LSAddressType `protobuf:"bytes,19,opt,name=ls_ls_address,json=lsLsAddress" json:"ls_ls_address,omitempty"`
	// L2VPN MSPW Addr
	L2VpnMspwAddress *BgpL2VpnMspwAddrT `protobuf:"bytes,20,opt,name=l2_vpn_mspw_address,json=l2VpnMspwAddress" json:"l2_vpn_mspw_address,omitempty"`
	// IPV4 Flowspec Addr
	Ipv4FlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,21,opt,name=ipv4_flowspec_address,json=ipv4FlowspecAddress" json:"ipv4_flowspec_address,omitempty"`
	// IPV6 Flowspec Addr
	Ipv6FlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,22,opt,name=ipv6_flowspec_address,json=ipv6FlowspecAddress" json:"ipv6_flowspec_address,omitempty"`
	// IPV4 VPN Flowspec Addr
	Ipv4VpnFlowspecAddress *IPv4FlowspecAddressType `protobuf:"bytes,23,opt,name=ipv4_vpn_flowspec_address,json=ipv4VpnFlowspecAddress" json:"ipv4_vpn_flowspec_address,omitempty"`
	// IPV6 VPN Flowspec Addr
	Ipv6VpnFlowspecAddress *IPv6FlowspecAddressType `protobuf:"bytes,24,opt,name=ipv6_vpn_flowspec_address,json=ipv6VpnFlowspecAddress" json:"ipv6_vpn_flowspec_address,omitempty"`
	// IPV4 Policy Addr
	Ipv4SrPolicyAddress *BgpIpv4SrpolicyAddrT `protobuf:"bytes,25,opt,name=ipv4_sr_policy_address,json=ipv4SrPolicyAddress" json:"ipv4_sr_policy_address,omitempty"`
	// IPV6 Policy Addr
	Ipv6SrPolicyAddress *BgpIpv6SrpolicyAddrT `protobuf:"bytes,26,opt,name=ipv6_sr_policy_address,json=ipv6SrPolicyAddress" json:"ipv6_sr_policy_address,omitempty"`
}

func (m *BgpAddrtype) Reset()                    { *m = BgpAddrtype{} }
func (m *BgpAddrtype) String() string            { return proto.CompactTextString(m) }
func (*BgpAddrtype) ProtoMessage()               {}
func (*BgpAddrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BgpAddrtype) GetAfi() string {
	if m != nil {
		return m.Afi
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4McastAddress() string {
	if m != nil {
		return m.Ipv4McastAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4LabelAddress() string {
	if m != nil {
		return m.Ipv4LabelAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4TunnelAddress() *IPV4TunnelAddressType {
	if m != nil {
		return m.Ipv4TunnelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MdtAddress() *IPV4MDTAddressType {
	if m != nil {
		return m.Ipv4MdtAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnAddress() string {
	if m != nil {
		return m.Ipv4VpnAddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv4VpnaMcastddress() string {
	if m != nil {
		return m.Ipv4VpnaMcastddress
	}
	return ""
}

func (m *BgpAddrtype) GetIpv6Address() *IPV6AddressType {
	if m != nil {
		return m.Ipv6Address
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6McastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6McastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6LabelAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6LabelAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnMcastAddress() *IPV6AddressType {
	if m != nil {
		return m.Ipv6VpnMcastAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnvplsAddress() *BgpL2VpnAddrT {
	if m != nil {
		return m.L2VpnvplsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetRtConstraintAddress() *RTConstraintAddressType {
	if m != nil {
		return m.RtConstraintAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6MvpnAddress() *IPV6MVPNAddressType {
	if m != nil {
		return m.Ipv6MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4MvpnAddress() *IPV4MVPNAddressType {
	if m != nil {
		return m.Ipv4MvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnEvpnAddress() *L2VPNEVPNAddressType {
	if m != nil {
		return m.L2VpnEvpnAddress
	}
	return nil
}

func (m *BgpAddrtype) GetLsLsAddress() *LS_LSAddressType {
	if m != nil {
		return m.LsLsAddress
	}
	return nil
}

func (m *BgpAddrtype) GetL2VpnMspwAddress() *BgpL2VpnMspwAddrT {
	if m != nil {
		return m.L2VpnMspwAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4FlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6FlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6FlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4VpnFlowspecAddress() *IPv4FlowspecAddressType {
	if m != nil {
		return m.Ipv4VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6VpnFlowspecAddress() *IPv6FlowspecAddressType {
	if m != nil {
		return m.Ipv6VpnFlowspecAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv4SrPolicyAddress() *BgpIpv4SrpolicyAddrT {
	if m != nil {
		return m.Ipv4SrPolicyAddress
	}
	return nil
}

func (m *BgpAddrtype) GetIpv6SrPolicyAddress() *BgpIpv6SrpolicyAddrT {
	if m != nil {
		return m.Ipv6SrPolicyAddress
	}
	return nil
}

type BgpConfigEntid_ struct {
	// Next entry in the list
	BgpConfigEntid_ []*BgpConfigEntid_Item `protobuf:"bytes,1,rep,name=bgp_config_entid_,json=bgpConfigEntid" json:"bgp_config_entid_,omitempty"`
}

func (m *BgpConfigEntid_) Reset()                    { *m = BgpConfigEntid_{} }
func (m *BgpConfigEntid_) String() string            { return proto.CompactTextString(m) }
func (*BgpConfigEntid_) ProtoMessage()               {}
func (*BgpConfigEntid_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BgpConfigEntid_) GetBgpConfigEntid_() []*BgpConfigEntid_Item {
	if m != nil {
		return m.BgpConfigEntid_
	}
	return nil
}

type BgpConfigEntid_Item struct {
	// Address family identfier
	AddressFamilyIdentifier uint32 `protobuf:"varint,1,opt,name=address_family_identifier,json=addressFamilyIdentifier" json:"address_family_identifier,omitempty"`
	// Entity type
	ConfigurationType string `protobuf:"bytes,2,opt,name=configuration_type,json=configurationType" json:"configuration_type,omitempty"`
	// Neighbor Address
	NeighborAddress *BgpAddrtype `protobuf:"bytes,3,opt,name=neighbor_address,json=neighborAddress" json:"neighbor_address,omitempty"`
	// Group name
	GroupName string `protobuf:"bytes,4,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
}

func (m *BgpConfigEntid_Item) Reset()                    { *m = BgpConfigEntid_Item{} }
func (m *BgpConfigEntid_Item) String() string            { return proto.CompactTextString(m) }
func (*BgpConfigEntid_Item) ProtoMessage()               {}
func (*BgpConfigEntid_Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BgpConfigEntid_Item) GetAddressFamilyIdentifier() uint32 {
	if m != nil {
		return m.AddressFamilyIdentifier
	}
	return 0
}

func (m *BgpConfigEntid_Item) GetConfigurationType() string {
	if m != nil {
		return m.ConfigurationType
	}
	return ""
}

func (m *BgpConfigEntid_Item) GetNeighborAddress() *BgpAddrtype {
	if m != nil {
		return m.NeighborAddress
	}
	return nil
}

func (m *BgpConfigEntid_Item) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type BgpConfigInfo_ struct {
	// TRUE if the item value is a configured value different from the default
	IsItemConfigured bool `protobuf:"varint,1,opt,name=is_item_configured,json=isItemConfigured" json:"is_item_configured,omitempty"`
	// Pointer to the inheritance chain
	InheritanceChain *BgpConfigEntid_ `protobuf:"bytes,2,opt,name=inheritance_chain,json=inheritanceChain" json:"inheritance_chain,omitempty"`
}

func (m *BgpConfigInfo_) Reset()                    { *m = BgpConfigInfo_{} }
func (m *BgpConfigInfo_) String() string            { return proto.CompactTextString(m) }
func (*BgpConfigInfo_) ProtoMessage()               {}
func (*BgpConfigInfo_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BgpConfigInfo_) GetIsItemConfigured() bool {
	if m != nil {
		return m.IsItemConfigured
	}
	return false
}

func (m *BgpConfigInfo_) GetInheritanceChain() *BgpConfigEntid_ {
	if m != nil {
		return m.InheritanceChain
	}
	return nil
}

type BgpAfDep_ struct {
	HasOrfCapability                          uint32          `protobuf:"varint,1,opt,name=has_orf_capability,json=hasOrfCapability" json:"has_orf_capability,omitempty"`
	IsDefaultOriginateNotDisabled             bool            `protobuf:"varint,2,opt,name=is_default_originate_not_disabled,json=isDefaultOriginateNotDisabled" json:"is_default_originate_not_disabled,omitempty"`
	DefaultOriginateRoutePolicy               string          `protobuf:"bytes,3,opt,name=default_originate_route_policy,json=defaultOriginateRoutePolicy" json:"default_originate_route_policy,omitempty"`
	MaxPrefixes                               uint32          `protobuf:"varint,4,opt,name=max_prefixes,json=maxPrefixes" json:"max_prefixes,omitempty"`
	MaxPrefixWarnThreshold                    uint32          `protobuf:"varint,5,opt,name=max_prefix_warn_threshold,json=maxPrefixWarnThreshold" json:"max_prefix_warn_threshold,omitempty"`
	IsMaxPrefixWarnOnly                       bool            `protobuf:"varint,6,opt,name=is_max_prefix_warn_only,json=isMaxPrefixWarnOnly" json:"is_max_prefix_warn_only,omitempty"`
	MaxPrefixRestartTime                      uint32          `protobuf:"varint,7,opt,name=max_prefix_restart_time,json=maxPrefixRestartTime" json:"max_prefix_restart_time,omitempty"`
	OrrRootAddress                            *BgpAddrtype    `protobuf:"bytes,8,opt,name=orr_root_address,json=orrRootAddress" json:"orr_root_address,omitempty"`
	IsMaxPrefixDiscardExtraPaths              bool            `protobuf:"varint,9,opt,name=is_max_prefix_discard_extra_paths,json=isMaxPrefixDiscardExtraPaths" json:"is_max_prefix_discard_extra_paths,omitempty"`
	IsNextHopSelfDisabled                     bool            `protobuf:"varint,10,opt,name=is_next_hop_self_disabled,json=isNextHopSelfDisabled" json:"is_next_hop_self_disabled,omitempty"`
	IsNextHopUnchanged                        bool            `protobuf:"varint,11,opt,name=is_next_hop_unchanged,json=isNextHopUnchanged" json:"is_next_hop_unchanged,omitempty"`
	PermanentNetwork                          bool            `protobuf:"varint,12,opt,name=permanent_network,json=permanentNetwork" json:"permanent_network,omitempty"`
	RoutePolicyIn                             string          `protobuf:"bytes,13,opt,name=route_policy_in,json=routePolicyIn" json:"route_policy_in,omitempty"`
	RoutePolicyOut                            string          `protobuf:"bytes,14,opt,name=route_policy_out,json=routePolicyOut" json:"route_policy_out,omitempty"`
	PrefixOrfFilter                           string          `protobuf:"bytes,15,opt,name=prefix_orf_filter,json=prefixOrfFilter" json:"prefix_orf_filter,omitempty"`
	RemovePrivateAsOut                        bool            `protobuf:"varint,16,opt,name=remove_private_as_out,json=removePrivateAsOut" json:"remove_private_as_out,omitempty"`
	EntireAspathOut                           bool            `protobuf:"varint,17,opt,name=entire_aspath_out,json=entireAspathOut" json:"entire_aspath_out,omitempty"`
	RemovePrivateAsin                         bool            `protobuf:"varint,18,opt,name=remove_private_asin,json=removePrivateAsin" json:"remove_private_asin,omitempty"`
	EntireAspathIn                            bool            `protobuf:"varint,19,opt,name=entire_aspath_in,json=entireAspathIn" json:"entire_aspath_in,omitempty"`
	ClientRouteReflector                      bool            `protobuf:"varint,20,opt,name=client_route_reflector,json=clientRouteReflector" json:"client_route_reflector,omitempty"`
	AcceptRouteLegacyPeRt                     bool            `protobuf:"varint,21,opt,name=accept_route_legacy_pe_rt,json=acceptRouteLegacyPeRt" json:"accept_route_legacy_pe_rt,omitempty"`
	IsAfEnabled                               bool            `protobuf:"varint,22,opt,name=is_af_enabled,json=isAfEnabled" json:"is_af_enabled,omitempty"`
	SendCommunityAttribute                    bool            `protobuf:"varint,23,opt,name=send_community_attribute,json=sendCommunityAttribute" json:"send_community_attribute,omitempty"`
	SendGracefulShutCommunityAttributes       bool            `protobuf:"varint,24,opt,name=send_graceful_shut_community_attributes,json=sendGracefulShutCommunityAttributes" json:"send_graceful_shut_community_attributes,omitempty"`
	SendExtendedCommunityAttribute            bool            `protobuf:"varint,25,opt,name=send_extended_community_attribute,json=sendExtendedCommunityAttribute" json:"send_extended_community_attribute,omitempty"`
	SoftReconfigNotDisabled                   bool            `protobuf:"varint,26,opt,name=soft_reconfig_not_disabled,json=softReconfigNotDisabled" json:"soft_reconfig_not_disabled,omitempty"`
	AlwayUseSoftReconfig                      bool            `protobuf:"varint,27,opt,name=alway_use_soft_reconfig,json=alwayUseSoftReconfig" json:"alway_use_soft_reconfig,omitempty"`
	SiteOfOrigin                              string          `protobuf:"bytes,28,opt,name=site_of_origin,json=siteOfOrigin" json:"site_of_origin,omitempty"`
	DefaultWeight                             uint32          `protobuf:"varint,29,opt,name=default_weight,json=defaultWeight" json:"default_weight,omitempty"`
	DefaultAllowas                            uint32          `protobuf:"varint,30,opt,name=default_allowas,json=defaultAllowas" json:"default_allowas,omitempty"`
	AfLongLivedGracefulRestartStaleTimeSend   uint32          `protobuf:"varint,31,opt,name=af_long_lived_graceful_restart_stale_time_send,json=afLongLivedGracefulRestartStaleTimeSend" json:"af_long_lived_graceful_restart_stale_time_send,omitempty"`
	AfLongLivedGracefulRestartStaleTimeAccept uint32          `protobuf:"varint,32,opt,name=af_long_lived_graceful_restart_stale_time_accept,json=afLongLivedGracefulRestartStaleTimeAccept" json:"af_long_lived_graceful_restart_stale_time_accept,omitempty"`
	AfLongLivedGracefulRestartCapable         uint32          `protobuf:"varint,33,opt,name=af_long_lived_graceful_restart_capable,json=afLongLivedGracefulRestartCapable" json:"af_long_lived_graceful_restart_capable,omitempty"`
	IsAsOverrideDisabled                      bool            `protobuf:"varint,34,opt,name=is_as_override_disabled,json=isAsOverrideDisabled" json:"is_as_override_disabled,omitempty"`
	IsAigpEnabled                             bool            `protobuf:"varint,35,opt,name=is_aigp_enabled,json=isAigpEnabled" json:"is_aigp_enabled,omitempty"`
	IsAigpCostCommunityEnabled                bool            `protobuf:"varint,36,opt,name=is_aigp_cost_community_enabled,json=isAigpCostCommunityEnabled" json:"is_aigp_cost_community_enabled,omitempty"`
	IsAigpCostCommunityId                     uint32          `protobuf:"varint,37,opt,name=is_aigp_cost_community_id,json=isAigpCostCommunityId" json:"is_aigp_cost_community_id,omitempty"`
	IsAigpCostCommunityTransitive             uint32          `protobuf:"varint,38,opt,name=is_aigp_cost_community_transitive,json=isAigpCostCommunityTransitive" json:"is_aigp_cost_community_transitive,omitempty"`
	AigpCostCommunityPoi                      uint32          `protobuf:"varint,39,opt,name=aigp_cost_community_poi,json=aigpCostCommunityPoi" json:"aigp_cost_community_poi,omitempty"`
	IsAigpMedEnabled                          bool            `protobuf:"varint,40,opt,name=is_aigp_med_enabled,json=isAigpMedEnabled" json:"is_aigp_med_enabled,omitempty"`
	AcceptOwn                                 bool            `protobuf:"varint,41,opt,name=accept_own,json=acceptOwn" json:"accept_own,omitempty"`
	Multipath                                 bool            `protobuf:"varint,42,opt,name=multipath" json:"multipath,omitempty"`
	IsFspecValidEnabled                       bool            `protobuf:"varint,43,opt,name=is_fspec_valid_enabled,json=isFspecValidEnabled" json:"is_fspec_valid_enabled,omitempty"`
	IsNextHopUnchangedMpath                   bool            `protobuf:"varint,44,opt,name=is_next_hop_unchanged_mpath,json=isNextHopUnchangedMpath" json:"is_next_hop_unchanged_mpath,omitempty"`
	IsSendMcastAttrEnabled                    bool            `protobuf:"varint,45,opt,name=is_send_mcast_attr_enabled,json=isSendMcastAttrEnabled" json:"is_send_mcast_attr_enabled,omitempty"`
	AdvertiseV4                               uint32          `protobuf:"varint,46,opt,name=advertise_v4,json=advertiseV4" json:"advertise_v4,omitempty"`
	AdvertiseV6                               uint32          `protobuf:"varint,47,opt,name=advertise_v6,json=advertiseV6" json:"advertise_v6,omitempty"`
	AdvertiseL2Vpnevpn                        uint32          `protobuf:"varint,48,opt,name=advertise_l2_vpnevpn,json=advertiseL2Vpnevpn" json:"advertise_l2_vpnevpn,omitempty"`
	AdvertiseDisable                          uint32          `protobuf:"varint,49,opt,name=advertise_disable,json=advertiseDisable" json:"advertise_disable,omitempty"`
	AdvertiseDefVrfImpDisableV4               uint32          `protobuf:"varint,50,opt,name=advertise_def_vrf_imp_disable_v4,json=advertiseDefVrfImpDisableV4" json:"advertise_def_vrf_imp_disable_v4,omitempty"`
	AdvertiseDefVrfImpDisableV6               uint32          `protobuf:"varint,51,opt,name=advertise_def_vrf_imp_disable_v6,json=advertiseDefVrfImpDisableV6" json:"advertise_def_vrf_imp_disable_v6,omitempty"`
	AdvertiseVrfReImpDisableV4                uint32          `protobuf:"varint,52,opt,name=advertise_vrf_re_imp_disable_v4,json=advertiseVrfReImpDisableV4" json:"advertise_vrf_re_imp_disable_v4,omitempty"`
	AdvertiseVrfReImpDisableV6                uint32          `protobuf:"varint,53,opt,name=advertise_vrf_re_imp_disable_v6,json=advertiseVrfReImpDisableV6" json:"advertise_vrf_re_imp_disable_v6,omitempty"`
	EncapsulationType                         uint32          `protobuf:"varint,54,opt,name=encapsulation_type,json=encapsulationType" json:"encapsulation_type,omitempty"`
	Import                                    bool            `protobuf:"varint,55,opt,name=import" json:"import,omitempty"`
	ImportStitching                           bool            `protobuf:"varint,56,opt,name=import_stitching,json=importStitching" json:"import_stitching,omitempty"`
	ImportReoriginate                         bool            `protobuf:"varint,57,opt,name=import_reoriginate,json=importReoriginate" json:"import_reoriginate,omitempty"`
	ImportReoriginateStitching                bool            `protobuf:"varint,58,opt,name=import_reoriginate_stitching,json=importReoriginateStitching" json:"import_reoriginate_stitching,omitempty"`
	AdvertiseLocalLabeledRoute                uint32          `protobuf:"varint,59,opt,name=advertise_local_labeled_route,json=advertiseLocalLabeledRoute" json:"advertise_local_labeled_route,omitempty"`
	EnforceMultipleLabels                     uint32          `protobuf:"varint,60,opt,name=enforce_multiple_labels,json=enforceMultipleLabels" json:"enforce_multiple_labels,omitempty"`
	OrfCapabilityInfo                         *BgpConfigInfo_ `protobuf:"bytes,61,opt,name=orf_capability_info,json=orfCapabilityInfo" json:"orf_capability_info,omitempty"`
	DefaultOriginateInfo                      *BgpConfigInfo_ `protobuf:"bytes,62,opt,name=default_originate_info,json=defaultOriginateInfo" json:"default_originate_info,omitempty"`
	MaxPrefixesInfo                           *BgpConfigInfo_ `protobuf:"bytes,63,opt,name=max_prefixes_info,json=maxPrefixesInfo" json:"max_prefixes_info,omitempty"`
	OrrInfo                                   *BgpConfigInfo_ `protobuf:"bytes,64,opt,name=orr_info,json=orrInfo" json:"orr_info,omitempty"`
	NextHopSelfInfo                           *BgpConfigInfo_ `protobuf:"bytes,65,opt,name=next_hop_self_info,json=nextHopSelfInfo" json:"next_hop_self_info,omitempty"`
	NextHopUnchangedInfo                      *BgpConfigInfo_ `protobuf:"bytes,66,opt,name=next_hop_unchanged_info,json=nextHopUnchangedInfo" json:"next_hop_unchanged_info,omitempty"`
	RoutePolicyInInfo                         *BgpConfigInfo_ `protobuf:"bytes,67,opt,name=route_policy_in_info,json=routePolicyInInfo" json:"route_policy_in_info,omitempty"`
	RoutePolicyOutInfo                        *BgpConfigInfo_ `protobuf:"bytes,68,opt,name=route_policy_out_info,json=routePolicyOutInfo" json:"route_policy_out_info,omitempty"`
	PrefixFilterInfo                          *BgpConfigInfo_ `protobuf:"bytes,69,opt,name=prefix_filter_info,json=prefixFilterInfo" json:"prefix_filter_info,omitempty"`
	RemovePrivateAsInfo                       *BgpConfigInfo_ `protobuf:"bytes,70,opt,name=remove_private_as_info,json=removePrivateAsInfo" json:"remove_private_as_info,omitempty"`
	RemovePrivateAsInInfo                     *BgpConfigInfo_ `protobuf:"bytes,71,opt,name=remove_private_as_in_info,json=removePrivateAsInInfo" json:"remove_private_as_in_info,omitempty"`
	RouteReflectorInfo                        *BgpConfigInfo_ `protobuf:"bytes,72,opt,name=route_reflector_info,json=routeReflectorInfo" json:"route_reflector_info,omitempty"`
	LegacyPeRtInfo                            *BgpConfigInfo_ `protobuf:"bytes,73,opt,name=legacy_pe_rt_info,json=legacyPeRtInfo" json:"legacy_pe_rt_info,omitempty"`
	AfEnabledInfo                             *BgpConfigInfo_ `protobuf:"bytes,74,opt,name=af_enabled_info,json=afEnabledInfo" json:"af_enabled_info,omitempty"`
	SendCommunityInfo                         *BgpConfigInfo_ `protobuf:"bytes,75,opt,name=send_community_info,json=sendCommunityInfo" json:"send_community_info,omitempty"`
	SendGracefulShutdownCommunityInfo         *BgpConfigInfo_ `protobuf:"bytes,76,opt,name=send_graceful_shutdown_community_info,json=sendGracefulShutdownCommunityInfo" json:"send_graceful_shutdown_community_info,omitempty"`
	SendExtendedCommunityInfo                 *BgpConfigInfo_ `protobuf:"bytes,77,opt,name=send_extended_community_info,json=sendExtendedCommunityInfo" json:"send_extended_community_info,omitempty"`
	SoftReconfigInfo                          *BgpConfigInfo_ `protobuf:"bytes,78,opt,name=soft_reconfig_info,json=softReconfigInfo" json:"soft_reconfig_info,omitempty"`
	SoOInfo                                   *BgpConfigInfo_ `protobuf:"bytes,79,opt,name=so_o_info,json=soOInfo" json:"so_o_info,omitempty"`
	WeightInfo                                *BgpConfigInfo_ `protobuf:"bytes,80,opt,name=weight_info,json=weightInfo" json:"weight_info,omitempty"`
	AllowasInInfo                             *BgpConfigInfo_ `protobuf:"bytes,81,opt,name=allowas_in_info,json=allowasInInfo" json:"allowas_in_info,omitempty"`
	AfLongLivedGracefulStartStaleTimeInfo     *BgpConfigInfo_ `protobuf:"bytes,82,opt,name=af_long_lived_graceful_start_stale_time_info,json=afLongLivedGracefulStartStaleTimeInfo" json:"af_long_lived_graceful_start_stale_time_info,omitempty"`
	AfLongLivedGracefulStartCapableInfo       *BgpConfigInfo_ `protobuf:"bytes,83,opt,name=af_long_lived_graceful_start_capable_info,json=afLongLivedGracefulStartCapableInfo" json:"af_long_lived_graceful_start_capable_info,omitempty"`
	AsOverrideInfo                            *BgpConfigInfo_ `protobuf:"bytes,84,opt,name=as_override_info,json=asOverrideInfo" json:"as_override_info,omitempty"`
	AigpInfo                                  *BgpConfigInfo_ `protobuf:"bytes,85,opt,name=aigp_info,json=aigpInfo" json:"aigp_info,omitempty"`
	AigpCostCommunityInfo                     *BgpConfigInfo_ `protobuf:"bytes,86,opt,name=aigp_cost_community_info,json=aigpCostCommunityInfo" json:"aigp_cost_community_info,omitempty"`
	AigpMed                                   *BgpConfigInfo_ `protobuf:"bytes,87,opt,name=aigp_med,json=aigpMed" json:"aigp_med,omitempty"`
	AcceptOwnInfo                             *BgpConfigInfo_ `protobuf:"bytes,88,opt,name=accept_own_info,json=acceptOwnInfo" json:"accept_own_info,omitempty"`
	MultipathInfo                             *BgpConfigInfo_ `protobuf:"bytes,89,opt,name=multipath_info,json=multipathInfo" json:"multipath_info,omitempty"`
	FspecValidInfo                            *BgpConfigInfo_ `protobuf:"bytes,90,opt,name=fspec_valid_info,json=fspecValidInfo" json:"fspec_valid_info,omitempty"`
	NextHopUnchangedMpathInfo                 *BgpConfigInfo_ `protobuf:"bytes,91,opt,name=next_hop_unchanged_mpath_info,json=nextHopUnchangedMpathInfo" json:"next_hop_unchanged_mpath_info,omitempty"`
	PermanentNetworkInfo                      *BgpConfigInfo_ `protobuf:"bytes,92,opt,name=permanent_network_info,json=permanentNetworkInfo" json:"permanent_network_info,omitempty"`
	SendMcastAttrInfo                         *BgpConfigInfo_ `protobuf:"bytes,93,opt,name=send_mcast_attr_info,json=sendMcastAttrInfo" json:"send_mcast_attr_info,omitempty"`
	AdvertiseV4AfiInfo                        *BgpConfigInfo_ `protobuf:"bytes,94,opt,name=advertise_v4_afi_info,json=advertiseV4AfiInfo" json:"advertise_v4_afi_info,omitempty"`
	AdvertiseV6AfiInfo                        *BgpConfigInfo_ `protobuf:"bytes,95,opt,name=advertise_v6_afi_info,json=advertiseV6AfiInfo" json:"advertise_v6_afi_info,omitempty"`
	AdvertiseL2VpnevpnAfiInfo                 *BgpConfigInfo_ `protobuf:"bytes,96,opt,name=advertise_l2_vpnevpn_afi_info,json=advertiseL2VpnevpnAfiInfo" json:"advertise_l2_vpnevpn_afi_info,omitempty"`
	AdvertiseDisInfo                          *BgpConfigInfo_ `protobuf:"bytes,97,opt,name=advertise_dis_info,json=advertiseDisInfo" json:"advertise_dis_info,omitempty"`
	AdvertiseDefVrfImpDisableAfiV4Info        *BgpConfigInfo_ `protobuf:"bytes,98,opt,name=advertise_def_vrf_imp_disable_afi_v4_info,json=advertiseDefVrfImpDisableAfiV4Info" json:"advertise_def_vrf_imp_disable_afi_v4_info,omitempty"`
	AdvertiseDefVrfImpDisableAfiV6Info        *BgpConfigInfo_ `protobuf:"bytes,99,opt,name=advertise_def_vrf_imp_disable_afi_v6_info,json=advertiseDefVrfImpDisableAfiV6Info" json:"advertise_def_vrf_imp_disable_afi_v6_info,omitempty"`
	AdvertiseVrfReImpDisableAfiV4Info         *BgpConfigInfo_ `protobuf:"bytes,100,opt,name=advertise_vrf_re_imp_disable_afi_v4_info,json=advertiseVrfReImpDisableAfiV4Info" json:"advertise_vrf_re_imp_disable_afi_v4_info,omitempty"`
	AdvertiseVrfReImpDisableAfiV6Info         *BgpConfigInfo_ `protobuf:"bytes,101,opt,name=advertise_vrf_re_imp_disable_afi_v6_info,json=advertiseVrfReImpDisableAfiV6Info" json:"advertise_vrf_re_imp_disable_afi_v6_info,omitempty"`
	AfEncapsulationTypeInfo                   *BgpConfigInfo_ `protobuf:"bytes,102,opt,name=af_encapsulation_type_info,json=afEncapsulationTypeInfo" json:"af_encapsulation_type_info,omitempty"`
	ImportAfiInfo                             *BgpConfigInfo_ `protobuf:"bytes,103,opt,name=import_afi_info,json=importAfiInfo" json:"import_afi_info,omitempty"`
	AdvertiseLocalLabeledRouteInfo            *BgpConfigInfo_ `protobuf:"bytes,104,opt,name=advertise_local_labeled_route_info,json=advertiseLocalLabeledRouteInfo" json:"advertise_local_labeled_route_info,omitempty"`
	EnforceMultipleLabelsInfo                 *BgpConfigInfo_ `protobuf:"bytes,105,opt,name=enforce_multiple_labels_info,json=enforceMultipleLabelsInfo" json:"enforce_multiple_labels_info,omitempty"`
}

func (m *BgpAfDep_) Reset()                    { *m = BgpAfDep_{} }
func (m *BgpAfDep_) String() string            { return proto.CompactTextString(m) }
func (*BgpAfDep_) ProtoMessage()               {}
func (*BgpAfDep_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *BgpAfDep_) GetHasOrfCapability() uint32 {
	if m != nil {
		return m.HasOrfCapability
	}
	return 0
}

func (m *BgpAfDep_) GetIsDefaultOriginateNotDisabled() bool {
	if m != nil {
		return m.IsDefaultOriginateNotDisabled
	}
	return false
}

func (m *BgpAfDep_) GetDefaultOriginateRoutePolicy() string {
	if m != nil {
		return m.DefaultOriginateRoutePolicy
	}
	return ""
}

func (m *BgpAfDep_) GetMaxPrefixes() uint32 {
	if m != nil {
		return m.MaxPrefixes
	}
	return 0
}

func (m *BgpAfDep_) GetMaxPrefixWarnThreshold() uint32 {
	if m != nil {
		return m.MaxPrefixWarnThreshold
	}
	return 0
}

func (m *BgpAfDep_) GetIsMaxPrefixWarnOnly() bool {
	if m != nil {
		return m.IsMaxPrefixWarnOnly
	}
	return false
}

func (m *BgpAfDep_) GetMaxPrefixRestartTime() uint32 {
	if m != nil {
		return m.MaxPrefixRestartTime
	}
	return 0
}

func (m *BgpAfDep_) GetOrrRootAddress() *BgpAddrtype {
	if m != nil {
		return m.OrrRootAddress
	}
	return nil
}

func (m *BgpAfDep_) GetIsMaxPrefixDiscardExtraPaths() bool {
	if m != nil {
		return m.IsMaxPrefixDiscardExtraPaths
	}
	return false
}

func (m *BgpAfDep_) GetIsNextHopSelfDisabled() bool {
	if m != nil {
		return m.IsNextHopSelfDisabled
	}
	return false
}

func (m *BgpAfDep_) GetIsNextHopUnchanged() bool {
	if m != nil {
		return m.IsNextHopUnchanged
	}
	return false
}

func (m *BgpAfDep_) GetPermanentNetwork() bool {
	if m != nil {
		return m.PermanentNetwork
	}
	return false
}

func (m *BgpAfDep_) GetRoutePolicyIn() string {
	if m != nil {
		return m.RoutePolicyIn
	}
	return ""
}

func (m *BgpAfDep_) GetRoutePolicyOut() string {
	if m != nil {
		return m.RoutePolicyOut
	}
	return ""
}

func (m *BgpAfDep_) GetPrefixOrfFilter() string {
	if m != nil {
		return m.PrefixOrfFilter
	}
	return ""
}

func (m *BgpAfDep_) GetRemovePrivateAsOut() bool {
	if m != nil {
		return m.RemovePrivateAsOut
	}
	return false
}

func (m *BgpAfDep_) GetEntireAspathOut() bool {
	if m != nil {
		return m.EntireAspathOut
	}
	return false
}

func (m *BgpAfDep_) GetRemovePrivateAsin() bool {
	if m != nil {
		return m.RemovePrivateAsin
	}
	return false
}

func (m *BgpAfDep_) GetEntireAspathIn() bool {
	if m != nil {
		return m.EntireAspathIn
	}
	return false
}

func (m *BgpAfDep_) GetClientRouteReflector() bool {
	if m != nil {
		return m.ClientRouteReflector
	}
	return false
}

func (m *BgpAfDep_) GetAcceptRouteLegacyPeRt() bool {
	if m != nil {
		return m.AcceptRouteLegacyPeRt
	}
	return false
}

func (m *BgpAfDep_) GetIsAfEnabled() bool {
	if m != nil {
		return m.IsAfEnabled
	}
	return false
}

func (m *BgpAfDep_) GetSendCommunityAttribute() bool {
	if m != nil {
		return m.SendCommunityAttribute
	}
	return false
}

func (m *BgpAfDep_) GetSendGracefulShutCommunityAttributes() bool {
	if m != nil {
		return m.SendGracefulShutCommunityAttributes
	}
	return false
}

func (m *BgpAfDep_) GetSendExtendedCommunityAttribute() bool {
	if m != nil {
		return m.SendExtendedCommunityAttribute
	}
	return false
}

func (m *BgpAfDep_) GetSoftReconfigNotDisabled() bool {
	if m != nil {
		return m.SoftReconfigNotDisabled
	}
	return false
}

func (m *BgpAfDep_) GetAlwayUseSoftReconfig() bool {
	if m != nil {
		return m.AlwayUseSoftReconfig
	}
	return false
}

func (m *BgpAfDep_) GetSiteOfOrigin() string {
	if m != nil {
		return m.SiteOfOrigin
	}
	return ""
}

func (m *BgpAfDep_) GetDefaultWeight() uint32 {
	if m != nil {
		return m.DefaultWeight
	}
	return 0
}

func (m *BgpAfDep_) GetDefaultAllowas() uint32 {
	if m != nil {
		return m.DefaultAllowas
	}
	return 0
}

func (m *BgpAfDep_) GetAfLongLivedGracefulRestartStaleTimeSend() uint32 {
	if m != nil {
		return m.AfLongLivedGracefulRestartStaleTimeSend
	}
	return 0
}

func (m *BgpAfDep_) GetAfLongLivedGracefulRestartStaleTimeAccept() uint32 {
	if m != nil {
		return m.AfLongLivedGracefulRestartStaleTimeAccept
	}
	return 0
}

func (m *BgpAfDep_) GetAfLongLivedGracefulRestartCapable() uint32 {
	if m != nil {
		return m.AfLongLivedGracefulRestartCapable
	}
	return 0
}

func (m *BgpAfDep_) GetIsAsOverrideDisabled() bool {
	if m != nil {
		return m.IsAsOverrideDisabled
	}
	return false
}

func (m *BgpAfDep_) GetIsAigpEnabled() bool {
	if m != nil {
		return m.IsAigpEnabled
	}
	return false
}

func (m *BgpAfDep_) GetIsAigpCostCommunityEnabled() bool {
	if m != nil {
		return m.IsAigpCostCommunityEnabled
	}
	return false
}

func (m *BgpAfDep_) GetIsAigpCostCommunityId() uint32 {
	if m != nil {
		return m.IsAigpCostCommunityId
	}
	return 0
}

func (m *BgpAfDep_) GetIsAigpCostCommunityTransitive() uint32 {
	if m != nil {
		return m.IsAigpCostCommunityTransitive
	}
	return 0
}

func (m *BgpAfDep_) GetAigpCostCommunityPoi() uint32 {
	if m != nil {
		return m.AigpCostCommunityPoi
	}
	return 0
}

func (m *BgpAfDep_) GetIsAigpMedEnabled() bool {
	if m != nil {
		return m.IsAigpMedEnabled
	}
	return false
}

func (m *BgpAfDep_) GetAcceptOwn() bool {
	if m != nil {
		return m.AcceptOwn
	}
	return false
}

func (m *BgpAfDep_) GetMultipath() bool {
	if m != nil {
		return m.Multipath
	}
	return false
}

func (m *BgpAfDep_) GetIsFspecValidEnabled() bool {
	if m != nil {
		return m.IsFspecValidEnabled
	}
	return false
}

func (m *BgpAfDep_) GetIsNextHopUnchangedMpath() bool {
	if m != nil {
		return m.IsNextHopUnchangedMpath
	}
	return false
}

func (m *BgpAfDep_) GetIsSendMcastAttrEnabled() bool {
	if m != nil {
		return m.IsSendMcastAttrEnabled
	}
	return false
}

func (m *BgpAfDep_) GetAdvertiseV4() uint32 {
	if m != nil {
		return m.AdvertiseV4
	}
	return 0
}

func (m *BgpAfDep_) GetAdvertiseV6() uint32 {
	if m != nil {
		return m.AdvertiseV6
	}
	return 0
}

func (m *BgpAfDep_) GetAdvertiseL2Vpnevpn() uint32 {
	if m != nil {
		return m.AdvertiseL2Vpnevpn
	}
	return 0
}

func (m *BgpAfDep_) GetAdvertiseDisable() uint32 {
	if m != nil {
		return m.AdvertiseDisable
	}
	return 0
}

func (m *BgpAfDep_) GetAdvertiseDefVrfImpDisableV4() uint32 {
	if m != nil {
		return m.AdvertiseDefVrfImpDisableV4
	}
	return 0
}

func (m *BgpAfDep_) GetAdvertiseDefVrfImpDisableV6() uint32 {
	if m != nil {
		return m.AdvertiseDefVrfImpDisableV6
	}
	return 0
}

func (m *BgpAfDep_) GetAdvertiseVrfReImpDisableV4() uint32 {
	if m != nil {
		return m.AdvertiseVrfReImpDisableV4
	}
	return 0
}

func (m *BgpAfDep_) GetAdvertiseVrfReImpDisableV6() uint32 {
	if m != nil {
		return m.AdvertiseVrfReImpDisableV6
	}
	return 0
}

func (m *BgpAfDep_) GetEncapsulationType() uint32 {
	if m != nil {
		return m.EncapsulationType
	}
	return 0
}

func (m *BgpAfDep_) GetImport() bool {
	if m != nil {
		return m.Import
	}
	return false
}

func (m *BgpAfDep_) GetImportStitching() bool {
	if m != nil {
		return m.ImportStitching
	}
	return false
}

func (m *BgpAfDep_) GetImportReoriginate() bool {
	if m != nil {
		return m.ImportReoriginate
	}
	return false
}

func (m *BgpAfDep_) GetImportReoriginateStitching() bool {
	if m != nil {
		return m.ImportReoriginateStitching
	}
	return false
}

func (m *BgpAfDep_) GetAdvertiseLocalLabeledRoute() uint32 {
	if m != nil {
		return m.AdvertiseLocalLabeledRoute
	}
	return 0
}

func (m *BgpAfDep_) GetEnforceMultipleLabels() uint32 {
	if m != nil {
		return m.EnforceMultipleLabels
	}
	return 0
}

func (m *BgpAfDep_) GetOrfCapabilityInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.OrfCapabilityInfo
	}
	return nil
}

func (m *BgpAfDep_) GetDefaultOriginateInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.DefaultOriginateInfo
	}
	return nil
}

func (m *BgpAfDep_) GetMaxPrefixesInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.MaxPrefixesInfo
	}
	return nil
}

func (m *BgpAfDep_) GetOrrInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.OrrInfo
	}
	return nil
}

func (m *BgpAfDep_) GetNextHopSelfInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NextHopSelfInfo
	}
	return nil
}

func (m *BgpAfDep_) GetNextHopUnchangedInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NextHopUnchangedInfo
	}
	return nil
}

func (m *BgpAfDep_) GetRoutePolicyInInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.RoutePolicyInInfo
	}
	return nil
}

func (m *BgpAfDep_) GetRoutePolicyOutInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.RoutePolicyOutInfo
	}
	return nil
}

func (m *BgpAfDep_) GetPrefixFilterInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.PrefixFilterInfo
	}
	return nil
}

func (m *BgpAfDep_) GetRemovePrivateAsInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.RemovePrivateAsInfo
	}
	return nil
}

func (m *BgpAfDep_) GetRemovePrivateAsInInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.RemovePrivateAsInInfo
	}
	return nil
}

func (m *BgpAfDep_) GetRouteReflectorInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.RouteReflectorInfo
	}
	return nil
}

func (m *BgpAfDep_) GetLegacyPeRtInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.LegacyPeRtInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAfEnabledInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AfEnabledInfo
	}
	return nil
}

func (m *BgpAfDep_) GetSendCommunityInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.SendCommunityInfo
	}
	return nil
}

func (m *BgpAfDep_) GetSendGracefulShutdownCommunityInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.SendGracefulShutdownCommunityInfo
	}
	return nil
}

func (m *BgpAfDep_) GetSendExtendedCommunityInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.SendExtendedCommunityInfo
	}
	return nil
}

func (m *BgpAfDep_) GetSoftReconfigInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.SoftReconfigInfo
	}
	return nil
}

func (m *BgpAfDep_) GetSoOInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.SoOInfo
	}
	return nil
}

func (m *BgpAfDep_) GetWeightInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.WeightInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAllowasInInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AllowasInInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAfLongLivedGracefulStartStaleTimeInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AfLongLivedGracefulStartStaleTimeInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAfLongLivedGracefulStartCapableInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AfLongLivedGracefulStartCapableInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAsOverrideInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AsOverrideInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAigpInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AigpInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAigpCostCommunityInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AigpCostCommunityInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAigpMed() *BgpConfigInfo_ {
	if m != nil {
		return m.AigpMed
	}
	return nil
}

func (m *BgpAfDep_) GetAcceptOwnInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AcceptOwnInfo
	}
	return nil
}

func (m *BgpAfDep_) GetMultipathInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.MultipathInfo
	}
	return nil
}

func (m *BgpAfDep_) GetFspecValidInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.FspecValidInfo
	}
	return nil
}

func (m *BgpAfDep_) GetNextHopUnchangedMpathInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NextHopUnchangedMpathInfo
	}
	return nil
}

func (m *BgpAfDep_) GetPermanentNetworkInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.PermanentNetworkInfo
	}
	return nil
}

func (m *BgpAfDep_) GetSendMcastAttrInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.SendMcastAttrInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAdvertiseV4AfiInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AdvertiseV4AfiInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAdvertiseV6AfiInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AdvertiseV6AfiInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAdvertiseL2VpnevpnAfiInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AdvertiseL2VpnevpnAfiInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAdvertiseDisInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AdvertiseDisInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAdvertiseDefVrfImpDisableAfiV4Info() *BgpConfigInfo_ {
	if m != nil {
		return m.AdvertiseDefVrfImpDisableAfiV4Info
	}
	return nil
}

func (m *BgpAfDep_) GetAdvertiseDefVrfImpDisableAfiV6Info() *BgpConfigInfo_ {
	if m != nil {
		return m.AdvertiseDefVrfImpDisableAfiV6Info
	}
	return nil
}

func (m *BgpAfDep_) GetAdvertiseVrfReImpDisableAfiV4Info() *BgpConfigInfo_ {
	if m != nil {
		return m.AdvertiseVrfReImpDisableAfiV4Info
	}
	return nil
}

func (m *BgpAfDep_) GetAdvertiseVrfReImpDisableAfiV6Info() *BgpConfigInfo_ {
	if m != nil {
		return m.AdvertiseVrfReImpDisableAfiV6Info
	}
	return nil
}

func (m *BgpAfDep_) GetAfEncapsulationTypeInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AfEncapsulationTypeInfo
	}
	return nil
}

func (m *BgpAfDep_) GetImportAfiInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.ImportAfiInfo
	}
	return nil
}

func (m *BgpAfDep_) GetAdvertiseLocalLabeledRouteInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AdvertiseLocalLabeledRouteInfo
	}
	return nil
}

func (m *BgpAfDep_) GetEnforceMultipleLabelsInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.EnforceMultipleLabelsInfo
	}
	return nil
}

type BgpAfIndep_ struct {
	// First half of Remote ASN
	RemoteAsNumberXx uint32 `protobuf:"varint,1,opt,name=remote_as_number_xx,json=remoteAsNumberXx" json:"remote_as_number_xx,omitempty"`
	// Second half of Remote ASN
	RemoteAsNumberYy uint32 `protobuf:"varint,2,opt,name=remote_as_number_yy,json=remoteAsNumberYy" json:"remote_as_number_yy,omitempty"`
	// Configured speaker ID
	ConfiguredSpeakerId uint32 `protobuf:"varint,3,opt,name=configured_speaker_id,json=configuredSpeakerId" json:"configured_speaker_id,omitempty"`
	// Maximum Segment Size
	TcpMss uint32 `protobuf:"varint,4,opt,name=tcp_mss,json=tcpMss" json:"tcp_mss,omitempty"`
	// Minimum advertisement interval, secs part
	MinAdvertisementInterval uint32 `protobuf:"varint,5,opt,name=min_advertisement_interval,json=minAdvertisementInterval" json:"min_advertisement_interval,omitempty"`
	// Minimum advertisement interval, msecs part
	MinAdvertisementIntervalMsecs uint32 `protobuf:"varint,6,opt,name=min_advertisement_interval_msecs,json=minAdvertisementIntervalMsecs" json:"min_advertisement_interval_msecs,omitempty"`
	// Description
	Description string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	// EBGP neighbors hop count
	EbgpHopCount uint32 `protobuf:"varint,8,opt,name=ebgp_hop_count,json=ebgpHopCount" json:"ebgp_hop_count,omitempty"`
	// BMP Servers activated
	BmpServers uint32 `protobuf:"varint,9,opt,name=bmp_servers,json=bmpServers" json:"bmp_servers,omitempty"`
	// If true, MPLS and NULL rewrite is disabled; if false, it is enabled
	IsEbgpMultihopBgpmplsForwardingDisabled bool `protobuf:"varint,10,opt,name=is_ebgp_multihop_bgpmpls_forwarding_disabled,json=isEbgpMultihopBgpmplsForwardingDisabled" json:"is_ebgp_multihop_bgpmpls_forwarding_disabled,omitempty"`
	// Neighbor keychain Name
	Keychain string `protobuf:"bytes,11,opt,name=keychain" json:"keychain,omitempty"`
	// First half of Local ASN
	LocalAsNumberXx uint32 `protobuf:"varint,12,opt,name=local_as_number_xx,json=localAsNumberXx" json:"local_as_number_xx,omitempty"`
	// Second half of Local ASN
	LocalAsNumberYy uint32 `protobuf:"varint,13,opt,name=local_as_number_yy,json=localAsNumberYy" json:"local_as_number_yy,omitempty"`
	// Local AS no-prepend option
	LocalAsNoPrepend bool `protobuf:"varint,14,opt,name=local_as_no_prepend,json=localAsNoPrepend" json:"local_as_no_prepend,omitempty"`
	// Neighbor password
	Password string `protobuf:"bytes,15,opt,name=password" json:"password,omitempty"`
	// Socket receive buffer size
	SocketBufferReceiveSize uint32 `protobuf:"varint,16,opt,name=socket_buffer_receive_size,json=socketBufferReceiveSize" json:"socket_buffer_receive_size,omitempty"`
	// BGP receive buffer size
	BgpBufferReceiveSize uint32 `protobuf:"varint,17,opt,name=bgp_buffer_receive_size,json=bgpBufferReceiveSize" json:"bgp_buffer_receive_size,omitempty"`
	// Socket send buffer size
	SocketBufferSendSize uint32 `protobuf:"varint,18,opt,name=socket_buffer_send_size,json=socketBufferSendSize" json:"socket_buffer_send_size,omitempty"`
	// BGP send buffer size
	BgpBufferSendSize uint32 `protobuf:"varint,19,opt,name=bgp_buffer_send_size,json=bgpBufferSendSize" json:"bgp_buffer_send_size,omitempty"`
	// Administrative shutdown
	AdminstrativeShutdown bool `protobuf:"varint,20,opt,name=adminstrative_shutdown,json=adminstrativeShutdown" json:"adminstrative_shutdown,omitempty"`
	// Keepalive interval
	KeepaliveInterval uint32 `protobuf:"varint,21,opt,name=keepalive_interval,json=keepaliveInterval" json:"keepalive_interval,omitempty"`
	// Holdtime
	HoldTimeValue uint32 `protobuf:"varint,22,opt,name=hold_time_value,json=holdTimeValue" json:"hold_time_value,omitempty"`
	// Min acceptable holdtimefrom neighbor
	MinAccHoldTimeValue uint32 `protobuf:"varint,23,opt,name=min_acc_hold_time_value,json=minAccHoldTimeValue" json:"min_acc_hold_time_value,omitempty"`
	// Local ipv4 or ipv6 address for neighbor connection
	LocalIpAddress *BgpAddrtype `protobuf:"bytes,24,opt,name=local_ip_address,json=localIpAddress" json:"local_ip_address,omitempty"`
	// Message Log Inbound buffer count
	MsgLogInBufCount uint32 `protobuf:"varint,25,opt,name=msg_log_in_buf_count,json=msgLogInBufCount" json:"msg_log_in_buf_count,omitempty"`
	// Message Log Outbound buffer count
	MsgLogOutBufCount uint32 `protobuf:"varint,26,opt,name=msg_log_out_buf_count,json=msgLogOutBufCount" json:"msg_log_out_buf_count,omitempty"`
	// Source of routing updates
	RouteUpdatesSource string `protobuf:"bytes,27,opt,name=route_updates_source,json=routeUpdatesSource" json:"route_updates_source,omitempty"`
	// Propagate the DMZ link bandwidth
	DmzLinkBandwidth uint32 `protobuf:"varint,28,opt,name=dmz_link_bandwidth,json=dmzLinkBandwidth" json:"dmz_link_bandwidth,omitempty"`
	// Receive Bandwidth of link to single-hop eBGP peer
	EbgpRecvDmz uint32 `protobuf:"varint,29,opt,name=ebgp_recv_dmz,json=ebgpRecvDmz" json:"ebgp_recv_dmz,omitempty"`
	// Send DMZ link bandwidthto ebgp peer
	EbgpSendDmzMode string `protobuf:"bytes,30,opt,name=ebgp_send_dmz_mode,json=ebgpSendDmzMode" json:"ebgp_send_dmz_mode,omitempty"`
	// Enable BGP TTL Security
	TtlSecurity uint32 `protobuf:"varint,31,opt,name=ttl_security,json=ttlSecurity" json:"ttl_security,omitempty"`
	// Suppress BGP 4byteas Cap
	Suppress4ByteAs uint32 `protobuf:"varint,32,opt,name=suppress4_byte_as,json=suppress4ByteAs" json:"suppress4_byte_as,omitempty"`
	// Capability negotiation is suppressed
	CapabilityNegotiationSuppressed uint32 `protobuf:"varint,33,opt,name=capability_negotiation_suppressed,json=capabilityNegotiationSuppressed" json:"capability_negotiation_suppressed,omitempty"`
	// TCP open mode to be used
	SessionOpenMode string `protobuf:"bytes,34,opt,name=session_open_mode,json=sessionOpenMode" json:"session_open_mode,omitempty"`
	// Fast failure detection using BFD
	Bfd uint32 `protobuf:"varint,35,opt,name=bfd" json:"bfd,omitempty"`
	// BFD Minimum Interval
	BfdMininterval uint32 `protobuf:"varint,36,opt,name=bfd_mininterval,json=bfdMininterval" json:"bfd_mininterval,omitempty"`
	// BFD Multiplier
	BfdMultiplier uint32 `protobuf:"varint,37,opt,name=bfd_multiplier,json=bfdMultiplier" json:"bfd_multiplier,omitempty"`
	// Precedence or DSCP type
	TosTypeInfo uint32 `protobuf:"varint,38,opt,name=tos_type_info,json=tosTypeInfo" json:"tos_type_info,omitempty"`
	// Precedence or DSCP value
	TosValueInfo uint32 `protobuf:"varint,39,opt,name=tos_value_info,json=tosValueInfo" json:"tos_value_info,omitempty"`
	// Support for NSR
	NsrDisabled uint32 `protobuf:"varint,40,opt,name=nsr_disabled,json=nsrDisabled" json:"nsr_disabled,omitempty"`
	// Support for graceful-restart
	GracefulRestartDisabled uint32 `protobuf:"varint,41,opt,name=graceful_restart_disabled,json=gracefulRestartDisabled" json:"graceful_restart_disabled,omitempty"`
	// Restart time (in seconds)
	NbrRestartTime uint32 `protobuf:"varint,42,opt,name=nbr_restart_time,json=nbrRestartTime" json:"nbr_restart_time,omitempty"`
	// Stale-path time(in seconds)
	NbrStalePathTime uint32 `protobuf:"varint,43,opt,name=nbr_stale_path_time,json=nbrStalePathTime" json:"nbr_stale_path_time,omitempty"`
	// Neighbor enforce first AS status
	NbrEnforceFirstAsStatus bool `protobuf:"varint,44,opt,name=nbr_enforce_first_as_status,json=nbrEnforceFirstAsStatus" json:"nbr_enforce_first_as_status,omitempty"`
	// Cluster ID Type
	NbrClusterIdTypeInfo uint32 `protobuf:"varint,45,opt,name=nbr_cluster_id_type_info,json=nbrClusterIdTypeInfo" json:"nbr_cluster_id_type_info,omitempty"`
	// Cluster ID value
	NbrClusterIdInfo uint32 `protobuf:"varint,46,opt,name=nbr_cluster_id_info,json=nbrClusterIdInfo" json:"nbr_cluster_id_info,omitempty"`
	// If true, don't do NHconnected check for nbr
	IgnoreConnectedCheck bool `protobuf:"varint,47,opt,name=ignore_connected_check,json=ignoreConnectedCheck" json:"ignore_connected_check,omitempty"`
	// If true, the VPN client isan iBGP CE peer
	InternalVpnClient bool `protobuf:"varint,48,opt,name=internal_vpn_client,json=internalVpnClient" json:"internal_vpn_client,omitempty"`
	// Indicates if addpath send capability is enabled or disabled
	AddpathSendCapability uint32 `protobuf:"varint,49,opt,name=addpath_send_capability,json=addpathSendCapability" json:"addpath_send_capability,omitempty"`
	// Indicates if avoid-reset behavior is enabled during update error-handling
	UpdateErrorHandlingNoReset uint32 `protobuf:"varint,50,opt,name=update_error_handling_no_reset,json=updateErrorHandlingNoReset" json:"update_error_handling_no_reset,omitempty"`
	// Indicates if addpath receive capability is enabled or disabled
	AddpathReceiveCapability uint32 `protobuf:"varint,51,opt,name=addpath_receive_capability,json=addpathReceiveCapability" json:"addpath_receive_capability,omitempty"`
	// Indicates egress peer engineering is enabled
	EgressPeerEngineering uint32 `protobuf:"varint,52,opt,name=egress_peer_engineering,json=egressPeerEngineering" json:"egress_peer_engineering,omitempty"`
	// Prefix validation disable
	PrefixValidationDisable uint32 `protobuf:"varint,53,opt,name=prefix_validation_disable,json=prefixValidationDisable" json:"prefix_validation_disable,omitempty"`
	// Bestpath Use Origin-AS Va
	BestpathUseOriginAsValidity uint32 `protobuf:"varint,54,opt,name=bestpath_use_origin_as_validity,json=bestpathUseOriginAsValidity" json:"bestpath_use_origin_as_validity,omitempty"`
	// Prefix validation allow invalid
	PrefixValidationAllowInvalid uint32 `protobuf:"varint,55,opt,name=prefix_validation_allow_invalid,json=prefixValidationAllowInvalid" json:"prefix_validation_allow_invalid,omitempty"`
	// Prefix validation signal ibgp
	PrefixValidationSignalIbgp uint32 `protobuf:"varint,56,opt,name=prefix_validation_signal_ibgp,json=prefixValidationSignalIbgp" json:"prefix_validation_signal_ibgp,omitempty"`
	// Indicates if neighbor filter configuration exists
	NeighborUpdateFilterExists bool `protobuf:"varint,57,opt,name=neighbor_update_filter_exists,json=neighborUpdateFilterExists" json:"neighbor_update_filter_exists,omitempty"`
	// Count of neighbor filter message buffers
	NeighborUpdateFilterMessageBufferCount uint32 `protobuf:"varint,58,opt,name=neighbor_update_filter_message_buffer_count,json=neighborUpdateFilterMessageBufferCount" json:"neighbor_update_filter_message_buffer_count,omitempty"`
	// Indicates if neighbor update filter message buffer is circular or not
	NeighborUpdateFilterMessageBufferIsNonCircular bool `protobuf:"varint,59,opt,name=neighbor_update_filter_message_buffer_is_non_circular,json=neighborUpdateFilterMessageBufferIsNonCircular" json:"neighbor_update_filter_message_buffer_is_non_circular,omitempty"`
	// Indicates if neighbor filter logging is disabled
	NeighborUpdateFilterLoggingDisable bool `protobuf:"varint,60,opt,name=neighbor_update_filter_logging_disable,json=neighborUpdateFilterLoggingDisable" json:"neighbor_update_filter_logging_disable,omitempty"`
	// Neighbor filter attribute-filter group name
	NeighborUpdateFilterAttributeFilterGroupName string `protobuf:"bytes,61,opt,name=neighbor_update_filter_attribute_filter_group_name,json=neighborUpdateFilterAttributeFilterGroupName" json:"neighbor_update_filter_attribute_filter_group_name,omitempty"`
	// re-advertise all routes to and from this neighbor with the GSHUT community during Shutdown or bring-up
	GracefulShutdownExists uint32 `protobuf:"varint,62,opt,name=graceful_shutdown_exists,json=gracefulShutdownExists" json:"graceful_shutdown_exists,omitempty"`
	// Local Preference to advertise routes with during Graceful Shutdown to IBGP. Default=No Touch
	GracefulShutdownLocPref uint32 `protobuf:"varint,63,opt,name=graceful_shutdown_loc_pref,json=gracefulShutdownLocPref" json:"graceful_shutdown_loc_pref,omitempty"`
	// Prepend the local AS this many times to the AS path of routes advertised during Graceful Shutdown
	GracefulShutdownAsPrepends uint32 `protobuf:"varint,64,opt,name=graceful_shutdown_as_prepends,json=gracefulShutdownAsPrepends" json:"graceful_shutdown_as_prepends,omitempty"`
	// Graceful Shutdown state is activated
	GracefulShutdownActivate uint32 `protobuf:"varint,65,opt,name=graceful_shutdown_activate,json=gracefulShutdownActivate" json:"graceful_shutdown_activate,omitempty"`
	// Neighbor Range remote-as-list group name
	NeighborRemoteAsListGroupName string `protobuf:"bytes,66,opt,name=neighbor_remote_as_list_group_name,json=neighborRemoteAsListGroupName" json:"neighbor_remote_as_list_group_name,omitempty"`
	// Maximum dynamic nbrs in range
	MaxPeers uint32 `protobuf:"varint,67,opt,name=max_peers,json=maxPeers" json:"max_peers,omitempty"`
	// Idle Watch time(in seconds)
	IdleWatchTime uint32 `protobuf:"varint,68,opt,name=idle_watch_time,json=idleWatchTime" json:"idle_watch_time,omitempty"`
	// Remote AS number item info
	RemoteAsInfo *BgpConfigInfo_ `protobuf:"bytes,69,opt,name=remote_as_info,json=remoteAsInfo" json:"remote_as_info,omitempty"`
	// Configured speaker ID item info
	SpeakerIdInfo *BgpConfigInfo_ `protobuf:"bytes,70,opt,name=speaker_id_info,json=speakerIdInfo" json:"speaker_id_info,omitempty"`
	// Minimum advertisement interval item info
	MinAdvertisementInfo *BgpConfigInfo_ `protobuf:"bytes,71,opt,name=min_advertisement_info,json=minAdvertisementInfo" json:"min_advertisement_info,omitempty"`
	// Description item info
	DescriptionInfo *BgpConfigInfo_ `protobuf:"bytes,72,opt,name=description_info,json=descriptionInfo" json:"description_info,omitempty"`
	// EBGP neighbors hop count item info
	EbgpHopCountInfo *BgpConfigInfo_ `protobuf:"bytes,73,opt,name=ebgp_hop_count_info,json=ebgpHopCountInfo" json:"ebgp_hop_count_info,omitempty"`
	// TCP Maximum Segment Size item info
	TcpmssInfo *BgpConfigInfo_ `protobuf:"bytes,74,opt,name=tcpmss_info,json=tcpmssInfo" json:"tcpmss_info,omitempty"`
	// BMP Servers Configuredinfo
	BmpServersInfo *BgpConfigInfo_ `protobuf:"bytes,75,opt,name=bmp_servers_info,json=bmpServersInfo" json:"bmp_servers_info,omitempty"`
	// Neighbor Keychain item info
	KeychainInfo *BgpConfigInfo_ `protobuf:"bytes,76,opt,name=keychain_info,json=keychainInfo" json:"keychain_info,omitempty"`
	// Local AS number item info
	LocalAsInfo *BgpConfigInfo_ `protobuf:"bytes,77,opt,name=local_as_info,json=localAsInfo" json:"local_as_info,omitempty"`
	// Neighbor password item info
	PasswordInfo *BgpConfigInfo_ `protobuf:"bytes,78,opt,name=password_info,json=passwordInfo" json:"password_info,omitempty"`
	// Receive buffer sizes item info
	ReceiveBufferInfo *BgpConfigInfo_ `protobuf:"bytes,79,opt,name=receive_buffer_info,json=receiveBufferInfo" json:"receive_buffer_info,omitempty"`
	// Send buffer sizes item info
	SendBufferInfo *BgpConfigInfo_ `protobuf:"bytes,80,opt,name=send_buffer_info,json=sendBufferInfo" json:"send_buffer_info,omitempty"`
	// Shutdown item info
	ShutdownInfo *BgpConfigInfo_ `protobuf:"bytes,81,opt,name=shutdown_info,json=shutdownInfo" json:"shutdown_info,omitempty"`
	// Timers item info
	TimersInfo *BgpConfigInfo_ `protobuf:"bytes,82,opt,name=timers_info,json=timersInfo" json:"timers_info,omitempty"`
	// Local address item info
	LocalAddressInfo *BgpConfigInfo_ `protobuf:"bytes,83,opt,name=local_address_info,json=localAddressInfo" json:"local_address_info,omitempty"`
	// Message Log Inbound item info
	MsgLogInInfo *BgpConfigInfo_ `protobuf:"bytes,84,opt,name=msg_log_in_info,json=msgLogInInfo" json:"msg_log_in_info,omitempty"`
	// Message Log Outbound item info
	MsgLogOutInfo *BgpConfigInfo_ `protobuf:"bytes,85,opt,name=msg_log_out_info,json=msgLogOutInfo" json:"msg_log_out_info,omitempty"`
	// Update source item info
	UpdateSourceInfo *BgpConfigInfo_ `protobuf:"bytes,86,opt,name=update_source_info,json=updateSourceInfo" json:"update_source_info,omitempty"`
	// DMZ link bandwidth item
	DmzLinkBandwidthInfo *BgpConfigInfo_ `protobuf:"bytes,87,opt,name=dmz_link_bandwidth_info,json=dmzLinkBandwidthInfo" json:"dmz_link_bandwidth_info,omitempty"`
	// EBGP receive DMZ link bandwidth item info
	EbgpRecvDmzInfo *BgpConfigInfo_ `protobuf:"bytes,88,opt,name=ebgp_recv_dmz_info,json=ebgpRecvDmzInfo" json:"ebgp_recv_dmz_info,omitempty"`
	// EBGP send DMZ link bandwidth item info
	EbgpSendDmzInfo *BgpConfigInfo_ `protobuf:"bytes,89,opt,name=ebgp_send_dmz_info,json=ebgpSendDmzInfo" json:"ebgp_send_dmz_info,omitempty"`
	// BGP TTL Security item info
	TtlSecurityInfo *BgpConfigInfo_ `protobuf:"bytes,90,opt,name=ttl_security_info,json=ttlSecurityInfo" json:"ttl_security_info,omitempty"`
	// BGP suppress 4byte-as item info
	Suppress4BbyteAsInfo *BgpConfigInfo_ `protobuf:"bytes,91,opt,name=suppress4_bbyte_as_info,json=suppress4BbyteAsInfo" json:"suppress4_bbyte_as_info,omitempty"`
	// TCP conn open mode info
	SessionOpenModeInfo *BgpConfigInfo_ `protobuf:"bytes,92,opt,name=session_open_mode_info,json=sessionOpenModeInfo" json:"session_open_mode_info,omitempty"`
	// BFD item info
	BfdInfo *BgpConfigInfo_ `protobuf:"bytes,93,opt,name=bfd_info,json=bfdInfo" json:"bfd_info,omitempty"`
	// BFD Mininterval item info
	BfdMinintervalInfo *BgpConfigInfo_ `protobuf:"bytes,94,opt,name=bfd_mininterval_info,json=bfdMinintervalInfo" json:"bfd_mininterval_info,omitempty"`
	// BFD Multiplier item info
	BfdMultiplierInfo *BgpConfigInfo_ `protobuf:"bytes,95,opt,name=bfd_multiplier_info,json=bfdMultiplierInfo" json:"bfd_multiplier_info,omitempty"`
	// TOS item info
	TosInfo *BgpConfigInfo_ `protobuf:"bytes,96,opt,name=tos_info,json=tosInfo" json:"tos_info,omitempty"`
	// NSR item info
	NsrDisabledInfo *BgpConfigInfo_ `protobuf:"bytes,97,opt,name=nsr_disabled_info,json=nsrDisabledInfo" json:"nsr_disabled_info,omitempty"`
	// Graceful-restart item info
	GracefulRestartDisabledInfo *BgpConfigInfo_ `protobuf:"bytes,98,opt,name=graceful_restart_disabled_info,json=gracefulRestartDisabledInfo" json:"graceful_restart_disabled_info,omitempty"`
	// Restart time item info
	NbrRestartTimeInfo *BgpConfigInfo_ `protobuf:"bytes,99,opt,name=nbr_restart_time_info,json=nbrRestartTimeInfo" json:"nbr_restart_time_info,omitempty"`
	// Stale-path time item info
	NbrStalePathTimeInfo *BgpConfigInfo_ `protobuf:"bytes,100,opt,name=nbr_stale_path_time_info,json=nbrStalePathTimeInfo" json:"nbr_stale_path_time_info,omitempty"`
	// Neighbor enforce first AS info
	NbrEnforceFirstAsInfo *BgpConfigInfo_ `protobuf:"bytes,101,opt,name=nbr_enforce_first_as_info,json=nbrEnforceFirstAsInfo" json:"nbr_enforce_first_as_info,omitempty"`
	// Cluster ID item info
	ClusterIdInfo *BgpConfigInfo_ `protobuf:"bytes,102,opt,name=cluster_id_info,json=clusterIdInfo" json:"cluster_id_info,omitempty"`
	// Ignore Connected Info
	IgnoreConnectedInfo *BgpConfigInfo_ `protobuf:"bytes,103,opt,name=ignore_connected_info,json=ignoreConnectedInfo" json:"ignore_connected_info,omitempty"`
	// Internal VPN Client Info
	InternalVpnClientInfo *BgpConfigInfo_ `protobuf:"bytes,104,opt,name=internal_vpn_client_info,json=internalVpnClientInfo" json:"internal_vpn_client_info,omitempty"`
	// Addpath send capability info
	AddpathSendCapabilityInfo *BgpConfigInfo_ `protobuf:"bytes,105,opt,name=addpath_send_capability_info,json=addpathSendCapabilityInfo" json:"addpath_send_capability_info,omitempty"`
	// Addpath receive capability info
	AddpathReceiveCapabilityInfo *BgpConfigInfo_ `protobuf:"bytes,106,opt,name=addpath_receive_capability_info,json=addpathReceiveCapabilityInfo" json:"addpath_receive_capability_info,omitempty"`
	// Egress Peer Engineering info
	EgressPeerEngineeringInfo *BgpConfigInfo_ `protobuf:"bytes,107,opt,name=egress_peer_engineering_info,json=egressPeerEngineeringInfo" json:"egress_peer_engineering_info,omitempty"`
	// Error-handling avoid-reset config info
	UpdateErrorHandlingNoResetInfo *BgpConfigInfo_ `protobuf:"bytes,108,opt,name=update_error_handling_no_reset_info,json=updateErrorHandlingNoResetInfo" json:"update_error_handling_no_reset_info,omitempty"`
	// RPKI disable info
	PrefixValidationDisableInfo *BgpConfigInfo_ `protobuf:"bytes,109,opt,name=prefix_validation_disable_info,json=prefixValidationDisableInfo" json:"prefix_validation_disable_info,omitempty"`
	// RPKI use validity
	PrefixValidationUseValiditInfo *BgpConfigInfo_ `protobuf:"bytes,110,opt,name=prefix_validation_use_validit_info,json=prefixValidationUseValiditInfo" json:"prefix_validation_use_validit_info,omitempty"`
	// RPKI allow invalid info
	PrefixValidationAllowInvalidInfo *BgpConfigInfo_ `protobuf:"bytes,111,opt,name=prefix_validation_allow_invalid_info,json=prefixValidationAllowInvalidInfo" json:"prefix_validation_allow_invalid_info,omitempty"`
	// RPKI signal ibgp info
	PrefixValidationSignalIbgpInfo *BgpConfigInfo_ `protobuf:"bytes,112,opt,name=prefix_validation_signal_ibgp_info,json=prefixValidationSignalIbgpInfo" json:"prefix_validation_signal_ibgp_info,omitempty"`
	// Neighbor update filter configuration info
	NeighborUpdateFilterExistsInfo *BgpConfigInfo_ `protobuf:"bytes,113,opt,name=neighbor_update_filter_exists_info,json=neighborUpdateFilterExistsInfo" json:"neighbor_update_filter_exists_info,omitempty"`
	// Neighbor update filter message buffer count info
	NeighborUpdateFilterMessageBufferCountInfo *BgpConfigInfo_ `protobuf:"bytes,114,opt,name=neighbor_update_filter_message_buffer_count_info,json=neighborUpdateFilterMessageBufferCountInfo" json:"neighbor_update_filter_message_buffer_count_info,omitempty"`
	// Neighbor update filter syslog disable info
	NeighborUpdateFilterSyslogDisableInfo *BgpConfigInfo_ `protobuf:"bytes,115,opt,name=neighbor_update_filter_syslog_disable_info,json=neighborUpdateFilterSyslogDisableInfo" json:"neighbor_update_filter_syslog_disable_info,omitempty"`
	// Neighbor update filter attribute-filter group info
	NeighborUpdateFilterAttributeInfo *BgpConfigInfo_ `protobuf:"bytes,116,opt,name=neighbor_update_filter_attribute_info,json=neighborUpdateFilterAttributeInfo" json:"neighbor_update_filter_attribute_info,omitempty"`
	// GracefulShutdown info
	GracefulShutdownInfo *BgpConfigInfo_ `protobuf:"bytes,117,opt,name=graceful_shutdown_info,json=gracefulShutdownInfo" json:"graceful_shutdown_info,omitempty"`
	// GracefulShutdownLocPref info
	GracefulShutdownLocPrefInfo *BgpConfigInfo_ `protobuf:"bytes,118,opt,name=graceful_shutdown_loc_pref_info,json=gracefulShutdownLocPrefInfo" json:"graceful_shutdown_loc_pref_info,omitempty"`
	// GracefulShutdownASPrepends info
	GracefulShutdownAsPrependsInfo *BgpConfigInfo_ `protobuf:"bytes,119,opt,name=graceful_shutdown_as_prepends_info,json=gracefulShutdownAsPrependsInfo" json:"graceful_shutdown_as_prepends_info,omitempty"`
	// GracefulShutdownAcivate info
	GracefulShutdownActivateInfo *BgpConfigInfo_ `protobuf:"bytes,120,opt,name=graceful_shutdown_activate_info,json=gracefulShutdownActivateInfo" json:"graceful_shutdown_activate_info,omitempty"`
	// Capability negotiation suppressed info
	CapabilityNegotiationSuppressedInfo *BgpConfigInfo_ `protobuf:"bytes,121,opt,name=capability_negotiation_suppressed_info,json=capabilityNegotiationSuppressedInfo" json:"capability_negotiation_suppressed_info,omitempty"`
	// Local AS Replace-AS option
	LocalAsReplaceAs bool `protobuf:"varint,122,opt,name=local_as_replace_as,json=localAsReplaceAs" json:"local_as_replace_as,omitempty"`
	// Local AS Dual-AS option
	LocalAsDualAs bool `protobuf:"varint,123,opt,name=local_as_dual_as,json=localAsDualAs" json:"local_as_dual_as,omitempty"`
	// Neighbor range  remote-as-list group info
	NeighborRemoteAsListInfo *BgpConfigInfo_ `protobuf:"bytes,124,opt,name=neighbor_remote_as_list_info,json=neighborRemoteAsListInfo" json:"neighbor_remote_as_list_info,omitempty"`
	// Max dynamic nbrs in range info
	MaxPeersInfo *BgpConfigInfo_ `protobuf:"bytes,125,opt,name=max_peers_info,json=maxPeersInfo" json:"max_peers_info,omitempty"`
	// Idle Watch time item info
	IdleWatchTimeInfo *BgpConfigInfo_ `protobuf:"bytes,126,opt,name=idle_watch_time_info,json=idleWatchTimeInfo" json:"idle_watch_time_info,omitempty"`
}

func (m *BgpAfIndep_) Reset()                    { *m = BgpAfIndep_{} }
func (m *BgpAfIndep_) String() string            { return proto.CompactTextString(m) }
func (*BgpAfIndep_) ProtoMessage()               {}
func (*BgpAfIndep_) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *BgpAfIndep_) GetRemoteAsNumberXx() uint32 {
	if m != nil {
		return m.RemoteAsNumberXx
	}
	return 0
}

func (m *BgpAfIndep_) GetRemoteAsNumberYy() uint32 {
	if m != nil {
		return m.RemoteAsNumberYy
	}
	return 0
}

func (m *BgpAfIndep_) GetConfiguredSpeakerId() uint32 {
	if m != nil {
		return m.ConfiguredSpeakerId
	}
	return 0
}

func (m *BgpAfIndep_) GetTcpMss() uint32 {
	if m != nil {
		return m.TcpMss
	}
	return 0
}

func (m *BgpAfIndep_) GetMinAdvertisementInterval() uint32 {
	if m != nil {
		return m.MinAdvertisementInterval
	}
	return 0
}

func (m *BgpAfIndep_) GetMinAdvertisementIntervalMsecs() uint32 {
	if m != nil {
		return m.MinAdvertisementIntervalMsecs
	}
	return 0
}

func (m *BgpAfIndep_) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BgpAfIndep_) GetEbgpHopCount() uint32 {
	if m != nil {
		return m.EbgpHopCount
	}
	return 0
}

func (m *BgpAfIndep_) GetBmpServers() uint32 {
	if m != nil {
		return m.BmpServers
	}
	return 0
}

func (m *BgpAfIndep_) GetIsEbgpMultihopBgpmplsForwardingDisabled() bool {
	if m != nil {
		return m.IsEbgpMultihopBgpmplsForwardingDisabled
	}
	return false
}

func (m *BgpAfIndep_) GetKeychain() string {
	if m != nil {
		return m.Keychain
	}
	return ""
}

func (m *BgpAfIndep_) GetLocalAsNumberXx() uint32 {
	if m != nil {
		return m.LocalAsNumberXx
	}
	return 0
}

func (m *BgpAfIndep_) GetLocalAsNumberYy() uint32 {
	if m != nil {
		return m.LocalAsNumberYy
	}
	return 0
}

func (m *BgpAfIndep_) GetLocalAsNoPrepend() bool {
	if m != nil {
		return m.LocalAsNoPrepend
	}
	return false
}

func (m *BgpAfIndep_) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *BgpAfIndep_) GetSocketBufferReceiveSize() uint32 {
	if m != nil {
		return m.SocketBufferReceiveSize
	}
	return 0
}

func (m *BgpAfIndep_) GetBgpBufferReceiveSize() uint32 {
	if m != nil {
		return m.BgpBufferReceiveSize
	}
	return 0
}

func (m *BgpAfIndep_) GetSocketBufferSendSize() uint32 {
	if m != nil {
		return m.SocketBufferSendSize
	}
	return 0
}

func (m *BgpAfIndep_) GetBgpBufferSendSize() uint32 {
	if m != nil {
		return m.BgpBufferSendSize
	}
	return 0
}

func (m *BgpAfIndep_) GetAdminstrativeShutdown() bool {
	if m != nil {
		return m.AdminstrativeShutdown
	}
	return false
}

func (m *BgpAfIndep_) GetKeepaliveInterval() uint32 {
	if m != nil {
		return m.KeepaliveInterval
	}
	return 0
}

func (m *BgpAfIndep_) GetHoldTimeValue() uint32 {
	if m != nil {
		return m.HoldTimeValue
	}
	return 0
}

func (m *BgpAfIndep_) GetMinAccHoldTimeValue() uint32 {
	if m != nil {
		return m.MinAccHoldTimeValue
	}
	return 0
}

func (m *BgpAfIndep_) GetLocalIpAddress() *BgpAddrtype {
	if m != nil {
		return m.LocalIpAddress
	}
	return nil
}

func (m *BgpAfIndep_) GetMsgLogInBufCount() uint32 {
	if m != nil {
		return m.MsgLogInBufCount
	}
	return 0
}

func (m *BgpAfIndep_) GetMsgLogOutBufCount() uint32 {
	if m != nil {
		return m.MsgLogOutBufCount
	}
	return 0
}

func (m *BgpAfIndep_) GetRouteUpdatesSource() string {
	if m != nil {
		return m.RouteUpdatesSource
	}
	return ""
}

func (m *BgpAfIndep_) GetDmzLinkBandwidth() uint32 {
	if m != nil {
		return m.DmzLinkBandwidth
	}
	return 0
}

func (m *BgpAfIndep_) GetEbgpRecvDmz() uint32 {
	if m != nil {
		return m.EbgpRecvDmz
	}
	return 0
}

func (m *BgpAfIndep_) GetEbgpSendDmzMode() string {
	if m != nil {
		return m.EbgpSendDmzMode
	}
	return ""
}

func (m *BgpAfIndep_) GetTtlSecurity() uint32 {
	if m != nil {
		return m.TtlSecurity
	}
	return 0
}

func (m *BgpAfIndep_) GetSuppress4ByteAs() uint32 {
	if m != nil {
		return m.Suppress4ByteAs
	}
	return 0
}

func (m *BgpAfIndep_) GetCapabilityNegotiationSuppressed() uint32 {
	if m != nil {
		return m.CapabilityNegotiationSuppressed
	}
	return 0
}

func (m *BgpAfIndep_) GetSessionOpenMode() string {
	if m != nil {
		return m.SessionOpenMode
	}
	return ""
}

func (m *BgpAfIndep_) GetBfd() uint32 {
	if m != nil {
		return m.Bfd
	}
	return 0
}

func (m *BgpAfIndep_) GetBfdMininterval() uint32 {
	if m != nil {
		return m.BfdMininterval
	}
	return 0
}

func (m *BgpAfIndep_) GetBfdMultiplier() uint32 {
	if m != nil {
		return m.BfdMultiplier
	}
	return 0
}

func (m *BgpAfIndep_) GetTosTypeInfo() uint32 {
	if m != nil {
		return m.TosTypeInfo
	}
	return 0
}

func (m *BgpAfIndep_) GetTosValueInfo() uint32 {
	if m != nil {
		return m.TosValueInfo
	}
	return 0
}

func (m *BgpAfIndep_) GetNsrDisabled() uint32 {
	if m != nil {
		return m.NsrDisabled
	}
	return 0
}

func (m *BgpAfIndep_) GetGracefulRestartDisabled() uint32 {
	if m != nil {
		return m.GracefulRestartDisabled
	}
	return 0
}

func (m *BgpAfIndep_) GetNbrRestartTime() uint32 {
	if m != nil {
		return m.NbrRestartTime
	}
	return 0
}

func (m *BgpAfIndep_) GetNbrStalePathTime() uint32 {
	if m != nil {
		return m.NbrStalePathTime
	}
	return 0
}

func (m *BgpAfIndep_) GetNbrEnforceFirstAsStatus() bool {
	if m != nil {
		return m.NbrEnforceFirstAsStatus
	}
	return false
}

func (m *BgpAfIndep_) GetNbrClusterIdTypeInfo() uint32 {
	if m != nil {
		return m.NbrClusterIdTypeInfo
	}
	return 0
}

func (m *BgpAfIndep_) GetNbrClusterIdInfo() uint32 {
	if m != nil {
		return m.NbrClusterIdInfo
	}
	return 0
}

func (m *BgpAfIndep_) GetIgnoreConnectedCheck() bool {
	if m != nil {
		return m.IgnoreConnectedCheck
	}
	return false
}

func (m *BgpAfIndep_) GetInternalVpnClient() bool {
	if m != nil {
		return m.InternalVpnClient
	}
	return false
}

func (m *BgpAfIndep_) GetAddpathSendCapability() uint32 {
	if m != nil {
		return m.AddpathSendCapability
	}
	return 0
}

func (m *BgpAfIndep_) GetUpdateErrorHandlingNoReset() uint32 {
	if m != nil {
		return m.UpdateErrorHandlingNoReset
	}
	return 0
}

func (m *BgpAfIndep_) GetAddpathReceiveCapability() uint32 {
	if m != nil {
		return m.AddpathReceiveCapability
	}
	return 0
}

func (m *BgpAfIndep_) GetEgressPeerEngineering() uint32 {
	if m != nil {
		return m.EgressPeerEngineering
	}
	return 0
}

func (m *BgpAfIndep_) GetPrefixValidationDisable() uint32 {
	if m != nil {
		return m.PrefixValidationDisable
	}
	return 0
}

func (m *BgpAfIndep_) GetBestpathUseOriginAsValidity() uint32 {
	if m != nil {
		return m.BestpathUseOriginAsValidity
	}
	return 0
}

func (m *BgpAfIndep_) GetPrefixValidationAllowInvalid() uint32 {
	if m != nil {
		return m.PrefixValidationAllowInvalid
	}
	return 0
}

func (m *BgpAfIndep_) GetPrefixValidationSignalIbgp() uint32 {
	if m != nil {
		return m.PrefixValidationSignalIbgp
	}
	return 0
}

func (m *BgpAfIndep_) GetNeighborUpdateFilterExists() bool {
	if m != nil {
		return m.NeighborUpdateFilterExists
	}
	return false
}

func (m *BgpAfIndep_) GetNeighborUpdateFilterMessageBufferCount() uint32 {
	if m != nil {
		return m.NeighborUpdateFilterMessageBufferCount
	}
	return 0
}

func (m *BgpAfIndep_) GetNeighborUpdateFilterMessageBufferIsNonCircular() bool {
	if m != nil {
		return m.NeighborUpdateFilterMessageBufferIsNonCircular
	}
	return false
}

func (m *BgpAfIndep_) GetNeighborUpdateFilterLoggingDisable() bool {
	if m != nil {
		return m.NeighborUpdateFilterLoggingDisable
	}
	return false
}

func (m *BgpAfIndep_) GetNeighborUpdateFilterAttributeFilterGroupName() string {
	if m != nil {
		return m.NeighborUpdateFilterAttributeFilterGroupName
	}
	return ""
}

func (m *BgpAfIndep_) GetGracefulShutdownExists() uint32 {
	if m != nil {
		return m.GracefulShutdownExists
	}
	return 0
}

func (m *BgpAfIndep_) GetGracefulShutdownLocPref() uint32 {
	if m != nil {
		return m.GracefulShutdownLocPref
	}
	return 0
}

func (m *BgpAfIndep_) GetGracefulShutdownAsPrepends() uint32 {
	if m != nil {
		return m.GracefulShutdownAsPrepends
	}
	return 0
}

func (m *BgpAfIndep_) GetGracefulShutdownActivate() uint32 {
	if m != nil {
		return m.GracefulShutdownActivate
	}
	return 0
}

func (m *BgpAfIndep_) GetNeighborRemoteAsListGroupName() string {
	if m != nil {
		return m.NeighborRemoteAsListGroupName
	}
	return ""
}

func (m *BgpAfIndep_) GetMaxPeers() uint32 {
	if m != nil {
		return m.MaxPeers
	}
	return 0
}

func (m *BgpAfIndep_) GetIdleWatchTime() uint32 {
	if m != nil {
		return m.IdleWatchTime
	}
	return 0
}

func (m *BgpAfIndep_) GetRemoteAsInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.RemoteAsInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetSpeakerIdInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.SpeakerIdInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetMinAdvertisementInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.MinAdvertisementInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetDescriptionInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.DescriptionInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetEbgpHopCountInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.EbgpHopCountInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetTcpmssInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.TcpmssInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetBmpServersInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.BmpServersInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetKeychainInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.KeychainInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetLocalAsInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.LocalAsInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetPasswordInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.PasswordInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetReceiveBufferInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.ReceiveBufferInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetSendBufferInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.SendBufferInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetShutdownInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.ShutdownInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetTimersInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.TimersInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetLocalAddressInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.LocalAddressInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetMsgLogInInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.MsgLogInInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetMsgLogOutInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.MsgLogOutInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetUpdateSourceInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.UpdateSourceInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetDmzLinkBandwidthInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.DmzLinkBandwidthInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetEbgpRecvDmzInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.EbgpRecvDmzInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetEbgpSendDmzInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.EbgpSendDmzInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetTtlSecurityInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.TtlSecurityInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetSuppress4BbyteAsInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.Suppress4BbyteAsInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetSessionOpenModeInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.SessionOpenModeInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetBfdInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.BfdInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetBfdMinintervalInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.BfdMinintervalInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetBfdMultiplierInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.BfdMultiplierInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetTosInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.TosInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetNsrDisabledInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NsrDisabledInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetGracefulRestartDisabledInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.GracefulRestartDisabledInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetNbrRestartTimeInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NbrRestartTimeInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetNbrStalePathTimeInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NbrStalePathTimeInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetNbrEnforceFirstAsInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NbrEnforceFirstAsInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetClusterIdInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.ClusterIdInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetIgnoreConnectedInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.IgnoreConnectedInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetInternalVpnClientInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.InternalVpnClientInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetAddpathSendCapabilityInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AddpathSendCapabilityInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetAddpathReceiveCapabilityInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.AddpathReceiveCapabilityInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetEgressPeerEngineeringInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.EgressPeerEngineeringInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetUpdateErrorHandlingNoResetInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.UpdateErrorHandlingNoResetInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetPrefixValidationDisableInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.PrefixValidationDisableInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetPrefixValidationUseValiditInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.PrefixValidationUseValiditInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetPrefixValidationAllowInvalidInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.PrefixValidationAllowInvalidInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetPrefixValidationSignalIbgpInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.PrefixValidationSignalIbgpInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetNeighborUpdateFilterExistsInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NeighborUpdateFilterExistsInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetNeighborUpdateFilterMessageBufferCountInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NeighborUpdateFilterMessageBufferCountInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetNeighborUpdateFilterSyslogDisableInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NeighborUpdateFilterSyslogDisableInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetNeighborUpdateFilterAttributeInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NeighborUpdateFilterAttributeInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetGracefulShutdownInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.GracefulShutdownInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetGracefulShutdownLocPrefInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.GracefulShutdownLocPrefInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetGracefulShutdownAsPrependsInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.GracefulShutdownAsPrependsInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetGracefulShutdownActivateInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.GracefulShutdownActivateInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetCapabilityNegotiationSuppressedInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.CapabilityNegotiationSuppressedInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetLocalAsReplaceAs() bool {
	if m != nil {
		return m.LocalAsReplaceAs
	}
	return false
}

func (m *BgpAfIndep_) GetLocalAsDualAs() bool {
	if m != nil {
		return m.LocalAsDualAs
	}
	return false
}

func (m *BgpAfIndep_) GetNeighborRemoteAsListInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.NeighborRemoteAsListInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetMaxPeersInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.MaxPeersInfo
	}
	return nil
}

func (m *BgpAfIndep_) GetIdleWatchTimeInfo() *BgpConfigInfo_ {
	if m != nil {
		return m.IdleWatchTimeInfo
	}
	return nil
}

type BgpAfP struct {
	Value *BgpAfDep_ `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *BgpAfP) Reset()                    { *m = BgpAfP{} }
func (m *BgpAfP) String() string            { return proto.CompactTextString(m) }
func (*BgpAfP) ProtoMessage()               {}
func (*BgpAfP) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *BgpAfP) GetValue() *BgpAfDep_ {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*BgpConfigEntityBag_KEYS)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_config_entity_bag_KEYS")
	proto.RegisterType((*BgpConfigEntityBag)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_config_entity_bag")
	proto.RegisterType((*IPV4TunnelAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.IPV4TunnelAddressType")
	proto.RegisterType((*IPV4MDTAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.IPV4MDTAddressType")
	proto.RegisterType((*RTConstraintAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.RTConstraintAddressType")
	proto.RegisterType((*IPV6AddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.IPV6AddressType")
	proto.RegisterType((*BgpIpv4SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_ipv4_srpolicy_addr_t")
	proto.RegisterType((*BgpIpv6SrpolicyAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_ipv6_srpolicy_addr_t")
	proto.RegisterType((*BgpL2VpnAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_l2vpn_addr_t")
	proto.RegisterType((*L2VPNEVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.L2VPNEVPNAddressType")
	proto.RegisterType((*BgpL2VpnMspwAddrT)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_l2vpn_mspw_addr_t")
	proto.RegisterType((*IPV6MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.IPV6MVPNAddressType")
	proto.RegisterType((*IPV4MVPNAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.IPV4MVPNAddressType")
	proto.RegisterType((*LS_LSAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.LS_LSAddressType")
	proto.RegisterType((*IPv4FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.IPv4FlowspecAddressType")
	proto.RegisterType((*IPv6FlowspecAddressType)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.IPv6FlowspecAddressType")
	proto.RegisterType((*BgpAddrtype)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_addrtype")
	proto.RegisterType((*BgpConfigEntid_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_config_entid_")
	proto.RegisterType((*BgpConfigEntid_Item)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_config_entid__item")
	proto.RegisterType((*BgpConfigInfo_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_config_info_")
	proto.RegisterType((*BgpAfDep_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_af_dep_")
	proto.RegisterType((*BgpAfIndep_)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_af_indep_")
	proto.RegisterType((*BgpAfP)(nil), "cisco_ios_xr_ipv4_bgp_oper.bgp.config_instances.config_instance.config_instance_default_vrf.entity_configurations.entity_configuration.bgp_af_p")
}

func init() { proto.RegisterFile("bgp_config_entity_bag.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5d, 0x59, 0x6c, 0x1c, 0xc9,
	0x79, 0x46, 0xef, 0x7a, 0x77, 0x87, 0x45, 0x0e, 0x39, 0x6c, 0x5e, 0x23, 0xea, 0xe6, 0xee, 0x4a,
	0x5a, 0xad, 0x24, 0xaf, 0x69, 0xee, 0x78, 0xbd, 0x5e, 0x3b, 0xa6, 0x28, 0x6a, 0x97, 0x36, 0x29,
	0xd1, 0x4d, 0x89, 0xeb, 0x8d, 0xe3, 0x54, 0x7a, 0xba, 0xab, 0x87, 0x15, 0xf5, 0x74, 0x77, 0xaa,
	0x7a, 0x78, 0x28, 0xc7, 0x63, 0x1e, 0xf2, 0x14, 0x20, 0x09, 0x72, 0x1f, 0xcf, 0x41, 0x92, 0xa7,
	0x1c, 0x40, 0x82, 0xc4, 0x47, 0xe2, 0x23, 0x8e, 0xed, 0x9c, 0x30, 0x90, 0x18, 0x48, 0x8c, 0x00,
	0x0e, 0x10, 0x18, 0x08, 0x12, 0x20, 0xc9, 0x6b, 0x82, 0xfa, 0xff, 0xea, 0x9a, 0x9e, 0x9e, 0x1e,
	0x4a, 0x7e, 0xeb, 0x79, 0xb1, 0xc5, 0xfa, 0xff, 0x3a, 0xbe, 0x3a, 0xfe, 0xae, 0xfa, 0xff, 0xef,
	0x9f, 0x25, 0x67, 0xdb, 0x9d, 0x84, 0x7a, 0x71, 0x14, 0xf0, 0x0e, 0x65, 0x51, 0xca, 0xd3, 0x13,
	0xda, 0x76, 0x3b, 0xb7, 0x12, 0x11, 0xa7, 0xb1, 0xfd, 0xd3, 0x96, 0xc7, 0xa5, 0x17, 0x53, 0x1e,
	0x4b, 0x7a, 0x2c, 0x28, 0x4f, 0x0e, 0xd7, 0xa8, 0xd2, 0x8f, 0x13, 0x26, 0x6e, 0xb5, 0x3b, 0xc9,
	0x2d, 0x5d, 0x91, 0x47, 0x32, 0x75, 0x23, 0x8f, 0xc9, 0x62, 0x41, 0xf1, 0x6f, 0xea, 0xb3, 0xc0,
	0xed, 0x85, 0x29, 0x3d, 0x14, 0xc1, 0x2d, 0xdd, 0x1d, 0xaa, 0xf4, 0x84, 0x9b, 0xf2, 0x38, 0x92,
	0xa5, 0xa5, 0x2b, 0xbf, 0x67, 0x91, 0xe5, 0xd2, 0x81, 0xd2, 0x4f, 0x6e, 0xbe, 0xb7, 0x67, 0xbf,
	0x48, 0xea, 0xa6, 0x87, 0xc8, 0xed, 0xb2, 0xa6, 0x75, 0xc9, 0xba, 0x36, 0xe1, 0x4c, 0x65, 0x85,
	0xf7, 0xdc, 0x2e, 0xb3, 0x2f, 0x92, 0x49, 0x5d, 0x2f, 0x3d, 0x49, 0x58, 0xf3, 0x19, 0x50, 0x21,
	0x58, 0xf4, 0xe0, 0x24, 0x61, 0xf6, 0x2b, 0xa4, 0x11, 0x31, 0xde, 0x39, 0x68, 0xc7, 0x82, 0xba,
	0xbe, 0x2f, 0x98, 0x94, 0xcd, 0x67, 0x41, 0x6b, 0x26, 0x2b, 0x5f, 0xc7, 0xe2, 0x5c, 0x5b, 0xd0,
	0xdd, 0xfb, 0xf2, 0x6d, 0xa9, 0xce, 0x56, 0xfe, 0xe7, 0x39, 0xb2, 0x50, 0x3a, 0x60, 0xfb, 0xf3,
	0x56, 0x49, 0x37, 0xab, 0x97, 0xac, 0x6b, 0x93, 0xab, 0x3f, 0x6f, 0xdd, 0xaa, 0xc6, 0x7c, 0xab,
	0xbe, 0x60, 0x6c, 0x6a, 0xa6, 0x86, 0xd1, 0x9f, 0x27, 0xa4, 0x23, 0xe2, 0x5e, 0x82, 0xe0, 0x3f,
	0x08, 0xe0, 0x27, 0xa0, 0x04, 0x26, 0xfa, 0x26, 0xb1, 0x07, 0x5a, 0xc3, 0xf9, 0x5e, 0x03, 0xb5,
	0xd9, 0x01, 0x09, 0x4c, 0xfb, 0x9b, 0xe4, 0x8c, 0x9e, 0x06, 0x1a, 0xb8, 0x5d, 0x1e, 0x9e, 0x50,
	0xee, 0xab, 0x41, 0x05, 0x9c, 0x89, 0xe6, 0xeb, 0x97, 0xac, 0x6b, 0x75, 0x67, 0x49, 0x2b, 0xdc,
	0x05, 0xf9, 0x96, 0x11, 0xdb, 0x5f, 0xb3, 0xc8, 0x82, 0x1b, 0x50, 0x1e, 0xf9, 0x2c, 0x61, 0x91,
	0x2a, 0xd7, 0x40, 0x9a, 0x2d, 0x98, 0xd1, 0x5f, 0xa8, 0xd6, 0x8c, 0xea, 0x91, 0x52, 0x67, 0xce,
	0x0d, 0xb6, 0xfa, 0x63, 0xde, 0x00, 0x4d, 0xfb, 0x0b, 0x16, 0x99, 0x73, 0x03, 0x3a, 0x04, 0xe5,
	0x43, 0x97, 0x9e, 0xbd, 0x36, 0xb9, 0xfa, 0xb3, 0x55, 0x83, 0x92, 0x38, 0xb3, 0x6e, 0x70, 0x67,
	0x10, 0xc3, 0xca, 0x4d, 0xb2, 0xb0, 0xb5, 0xbb, 0xbf, 0xf6, 0xa0, 0x17, 0x45, 0x2c, 0xd4, 0xfb,
	0x05, 0x56, 0x79, 0x9e, 0x3c, 0x77, 0xe8, 0x86, 0xbd, 0xec, 0x68, 0xe2, 0x1f, 0x2b, 0xd7, 0x89,
	0xad, 0xd4, 0x77, 0xee, 0x3c, 0x78, 0xb2, 0xee, 0xfb, 0xc9, 0x92, 0xf3, 0x60, 0x23, 0x8e, 0x64,
	0x2a, 0x5c, 0x1e, 0xa5, 0x4f, 0xae, 0x70, 0x95, 0xcc, 0x6c, 0xed, 0xee, 0xb7, 0x9e, 0xac, 0x78,
	0x8f, 0x34, 0x15, 0x26, 0x98, 0x51, 0x29, 0x92, 0x38, 0xe4, 0xde, 0x09, 0x6c, 0x7f, 0x9a, 0xda,
	0xab, 0x64, 0x61, 0xb8, 0x5c, 0x1d, 0x59, 0xd5, 0xc2, 0x94, 0x33, 0xa7, 0x84, 0x7b, 0x5a, 0xa6,
	0x7b, 0xca, 0xb5, 0xd7, 0x1a, 0xd1, 0x5e, 0xeb, 0xb4, 0xf6, 0x5a, 0xc5, 0xf6, 0x3e, 0x44, 0x1a,
	0xaa, 0xbd, 0x70, 0xf5, 0x30, 0x89, 0xb2, 0x76, 0x5e, 0x24, 0xf5, 0xfe, 0xdf, 0xfd, 0xfa, 0x53,
	0x50, 0x98, 0x55, 0xbc, 0x41, 0xe6, 0xb7, 0x57, 0xf7, 0x77, 0xef, 0x6d, 0xee, 0xef, 0xde, 0x7b,
	0xf2, 0x34, 0xbc, 0x85, 0x26, 0x0b, 0x9b, 0xed, 0xca, 0xe4, 0xe8, 0xfb, 0xea, 0xeb, 0x55, 0x32,
	0xa7, 0x66, 0x7b, 0xe7, 0xa9, 0xba, 0x42, 0xe5, 0xb5, 0xa7, 0x53, 0xbe, 0x46, 0x1a, 0xdb, 0x7b,
	0x74, 0x7b, 0xef, 0xa9, 0xb6, 0xc8, 0xd6, 0xee, 0xe1, 0xda, 0xdd, 0x30, 0x3e, 0x92, 0x09, 0xf3,
	0x9e, 0xb6, 0x42, 0xeb, 0xe9, 0x2b, 0xfc, 0xee, 0x0a, 0x99, 0xca, 0x1b, 0x47, 0xbb, 0x41, 0x9e,
	0x75, 0x03, 0xae, 0x95, 0xd4, 0x3f, 0xed, 0xcb, 0x64, 0x0a, 0x76, 0x4c, 0x36, 0x59, 0xf8, 0xa1,
	0x99, 0x54, 0x65, 0x99, 0x01, 0xbd, 0x41, 0x6c, 0x50, 0xe9, 0x7a, 0xae, 0x4c, 0x0b, 0xdf, 0x9a,
	0x86, 0x92, 0xec, 0x28, 0x41, 0x51, 0x3b, 0x74, 0xdb, 0x2c, 0x34, 0xda, 0xef, 0xeb, 0x6b, 0x6f,
	0x2b, 0x41, 0xa6, 0xfd, 0x4d, 0x8b, 0xc0, 0xa6, 0xa4, 0x29, 0x9c, 0x41, 0xa3, 0xff, 0x1c, 0x18,
	0xc4, 0x5f, 0xaf, 0x8c, 0x15, 0x29, 0x35, 0x13, 0xce, 0xac, 0x1a, 0xd0, 0x40, 0xb1, 0xfd, 0x25,
	0x8b, 0x34, 0x70, 0xb6, 0xfc, 0xfe, 0x5c, 0x3d, 0x0f, 0x68, 0x7e, 0xa5, 0x52, 0x68, 0x06, 0xad,
	0x98, 0x33, 0x0d, 0x0b, 0xe9, 0x9b, 0x65, 0xbc, 0xa6, 0x61, 0xe4, 0x0f, 0xd2, 0x0b, 0xb0, 0x88,
	0xa0, 0xb9, 0x6f, 0x8e, 0x92, 0xb1, 0x39, 0x87, 0x49, 0xe4, 0xe2, 0x1e, 0xd1, 0xea, 0x35, 0x50,
	0x9f, 0xd3, 0xea, 0xee, 0x4e, 0x5f, 0x64, 0xff, 0x89, 0x05, 0xdb, 0xae, 0x65, 0x9a, 0x9e, 0x80,
	0x19, 0xfa, 0xc5, 0x2a, 0xcd, 0x50, 0xde, 0x14, 0xc3, 0x81, 0xc8, 0x0a, 0xec, 0x2f, 0x5b, 0xb0,
	0xc7, 0x5b, 0x85, 0x13, 0x41, 0x2a, 0x8e, 0x41, 0x2d, 0x68, 0x6b, 0xe0, 0xac, 0x1a, 0x20, 0x83,
	0x87, 0x75, 0x72, 0x1c, 0x80, 0x0c, 0x98, 0x91, 0x2f, 0xe2, 0xa9, 0x6b, 0x0d, 0x6c, 0xd7, 0xa9,
	0x8a, 0xc3, 0x50, 0x07, 0xa9, 0x95, 0x3b, 0x48, 0xdf, 0xb0, 0xc8, 0xa2, 0x01, 0x31, 0xb8, 0xb5,
	0xea, 0x15, 0x87, 0x32, 0xa7, 0xa1, 0x0c, 0xec, 0xae, 0xaf, 0x58, 0xc4, 0x0e, 0x57, 0x15, 0x9a,
	0xc3, 0x24, 0x94, 0x06, 0xcb, 0x34, 0x60, 0xf9, 0xa5, 0x4a, 0x5d, 0x10, 0xf3, 0x97, 0x15, 0xa7,
	0x11, 0xae, 0xee, 0xe3, 0x98, 0x33, 0x24, 0xff, 0x60, 0x91, 0x05, 0x01, 0x37, 0x5c, 0x7d, 0x9d,
	0x33, 0x60, 0x66, 0x00, 0xcc, 0x6f, 0x56, 0x06, 0xcc, 0x88, 0x3b, 0xa7, 0x33, 0x27, 0xd2, 0x21,
	0x81, 0xfd, 0x55, 0x8b, 0xcc, 0xa2, 0x1d, 0xcb, 0x1f, 0x9b, 0x06, 0x40, 0xfa, 0xd5, 0x4a, 0xed,
	0xb5, 0xc2, 0xd5, 0xcb, 0x99, 0x01, 0x53, 0xd6, 0xbf, 0xcf, 0x65, 0x50, 0xd6, 0x06, 0xa1, 0xcc,
	0x56, 0x0f, 0xca, 0x5a, 0x19, 0x94, 0xb5, 0x3c, 0x94, 0xaf, 0x5b, 0x64, 0x0e, 0x8f, 0x0d, 0x65,
	0x79, 0x30, 0x36, 0x80, 0xf9, 0xb5, 0xca, 0x80, 0x29, 0xbb, 0xab, 0xeb, 0xb3, 0xb3, 0x99, 0x83,
	0xf3, 0xa7, 0x16, 0xa9, 0x87, 0x92, 0xe6, 0x0c, 0xc0, 0x5c, 0xc5, 0x0c, 0x40, 0xf1, 0xba, 0xee,
	0x4c, 0x86, 0x72, 0x5b, 0xe6, 0xac, 0x72, 0xb6, 0x1c, 0xe6, 0x95, 0xa1, 0x50, 0xcc, 0x57, 0xec,
	0x86, 0x5a, 0xfa, 0x18, 0xd2, 0xeb, 0xb1, 0x23, 0x93, 0xa3, 0xbc, 0x2d, 0x83, 0x51, 0x06, 0xfa,
	0x19, 0x61, 0x10, 0x2d, 0x54, 0xcc, 0x96, 0x8d, 0x78, 0x1c, 0xe1, 0x8d, 0xb2, 0x20, 0xc8, 0x60,
	0xb5, 0x86, 0x61, 0x2d, 0x56, 0x0f, 0x56, 0x6b, 0x14, 0xac, 0xa2, 0xc0, 0xfe, 0xb6, 0x45, 0xce,
	0x98, 0x7b, 0xf8, 0x10, 0xb4, 0xa5, 0x31, 0x59, 0xb1, 0x45, 0xfd, 0x06, 0x18, 0x81, 0xae, 0x55,
	0x8e, 0xae, 0x39, 0x26, 0x0b, 0xb7, 0xa8, 0x2f, 0x3f, 0x45, 0x74, 0xdf, 0xc2, 0xfb, 0xdc, 0x1a,
	0x95, 0x82, 0x16, 0xdc, 0x27, 0x67, 0x00, 0xda, 0x6f, 0x55, 0xca, 0x78, 0x94, 0x39, 0x94, 0x32,
	0x8f, 0xd1, 0x6e, 0xde, 0xc3, 0x93, 0x01, 0x6b, 0x95, 0x00, 0x5b, 0xae, 0x26, 0xb0, 0x56, 0x29,
	0xb0, 0x56, 0x01, 0xd8, 0xca, 0x77, 0x2c, 0x32, 0x5b, 0xf0, 0x83, 0xfb, 0xd4, 0xfe, 0x5a, 0x59,
	0x69, 0xd3, 0x02, 0x3f, 0xe7, 0x6f, 0x54, 0x0a, 0xe9, 0xc0, 0x08, 0x29, 0x4f, 0x59, 0xd7, 0x99,
	0x6e, 0x77, 0x12, 0xf4, 0x76, 0x6e, 0xaa, 0xd2, 0x95, 0xef, 0x3e, 0x43, 0x16, 0xcb, 0x55, 0x4f,
	0x77, 0x6d, 0x5b, 0xa7, 0xbb, 0xb6, 0xcb, 0xbd, 0xe8, 0xcf, 0x8c, 0xf2, 0xa2, 0x97, 0x86, 0x15,
	0x9e, 0x1d, 0xe3, 0xb0, 0xc2, 0xfb, 0x0a, 0x61, 0x85, 0x95, 0x9f, 0x79, 0x06, 0xdd, 0xa0, 0x66,
	0x2c, 0x41, 0x4c, 0xc1, 0x37, 0x26, 0x61, 0xb2, 0x4d, 0x57, 0xcc, 0x87, 0xa9, 0xad, 0x39, 0x0d,
	0x2e, 0xb7, 0x52, 0xd6, 0xdd, 0x30, 0xe5, 0xea, 0xfd, 0x34, 0xcb, 0xa3, 0x03, 0x26, 0x38, 0xc2,
	0xf0, 0x0e, 0x5c, 0x1e, 0xc1, 0x9c, 0x4e, 0xae, 0xfe, 0x72, 0x75, 0xf7, 0x9d, 0xd3, 0xc8, 0x0d,
	0x7a, 0x43, 0x8d, 0x79, 0xe5, 0x5f, 0x7d, 0x32, 0xa9, 0xfd, 0xf0, 0x3e, 0x4b, 0x60, 0x1e, 0x0e,
	0x5c, 0x49, 0x63, 0x11, 0x50, 0xcf, 0x4d, 0xdc, 0x36, 0x0f, 0x79, 0x7a, 0xa2, 0xb7, 0x58, 0xe3,
	0xc0, 0x95, 0xf7, 0x45, 0xb0, 0x61, 0xca, 0xed, 0x77, 0xc8, 0x65, 0x2e, 0xcd, 0xf0, 0x62, 0xc1,
	0x3b, 0x3c, 0x72, 0x53, 0x46, 0xa3, 0x38, 0xa5, 0x3e, 0x97, 0x6e, 0x3b, 0x64, 0x3e, 0x4c, 0x4b,
	0xcd, 0x39, 0xcf, 0xe5, 0x1d, 0xd4, 0xbb, 0x9f, 0xa9, 0xdd, 0x8b, 0xd3, 0x3b, 0x5a, 0xc9, 0xde,
	0x20, 0x17, 0x86, 0x9b, 0x11, 0x71, 0x2f, 0x65, 0xda, 0x8e, 0x69, 0xaf, 0xe6, 0x59, 0xbf, 0xd0,
	0x88, 0xa3, 0x74, 0xd0, 0x56, 0xd8, 0x97, 0xc9, 0x54, 0xd7, 0x3d, 0xa6, 0x89, 0x60, 0x01, 0x3f,
	0x66, 0xe8, 0xda, 0xac, 0x3b, 0x93, 0x5d, 0xf7, 0x78, 0x57, 0x17, 0xd9, 0x1f, 0x26, 0x67, 0xfa,
	0x2a, 0xf4, 0xc8, 0x15, 0x11, 0x4d, 0x0f, 0x04, 0x93, 0x07, 0x71, 0xe8, 0x83, 0x6b, 0xb3, 0xee,
	0x2c, 0x1a, 0xfd, 0x77, 0x5d, 0x11, 0x3d, 0xc8, 0xa4, 0xf6, 0x1a, 0x59, 0xe2, 0x92, 0x16, 0x6b,
	0xc7, 0x51, 0x78, 0x02, 0x5e, 0xc4, 0x9a, 0x33, 0xc7, 0xe5, 0x4e, 0xbe, 0xea, 0xfd, 0x28, 0x3c,
	0xb1, 0x5f, 0x27, 0x4b, 0xb9, 0x2a, 0x82, 0xc9, 0xd4, 0x15, 0x29, 0x4d, 0x79, 0x97, 0x81, 0xd3,
	0xae, 0xee, 0xcc, 0x9b, 0xee, 0x1c, 0x14, 0x3e, 0xe0, 0x5d, 0x66, 0x7f, 0xce, 0x22, 0x8d, 0x58,
	0x08, 0x2a, 0xe2, 0xb8, 0xff, 0xa4, 0xad, 0x55, 0xf9, 0x18, 0x4e, 0xc7, 0x42, 0x38, 0x71, 0x6c,
	0x9e, 0xb0, 0x6f, 0xc3, 0xde, 0xc8, 0x61, 0xf7, 0xb9, 0xf4, 0x5c, 0xe1, 0x53, 0x76, 0x9c, 0x0a,
	0x97, 0x26, 0x6e, 0x7a, 0x80, 0xce, 0xc5, 0x9a, 0x73, 0x2e, 0x37, 0x71, 0x77, 0x50, 0x6b, 0x53,
	0x29, 0xed, 0x2a, 0x1d, 0xfb, 0x0d, 0x72, 0x86, 0x4b, 0x1a, 0xb1, 0xe3, 0x94, 0x1e, 0xc4, 0x09,
	0x95, 0x2c, 0x0c, 0xfa, 0x9b, 0x8b, 0x40, 0x03, 0x0b, 0x5c, 0xde, 0x63, 0xc7, 0xe9, 0x3b, 0x71,
	0xb2, 0xc7, 0xc2, 0xc0, 0x6c, 0xaa, 0x0f, 0x90, 0x85, 0x7c, 0xcd, 0x5e, 0xe4, 0x1d, 0xb8, 0x51,
	0x87, 0xf9, 0xe0, 0x46, 0xab, 0x39, 0xb6, 0xa9, 0xf5, 0x30, 0x93, 0xd8, 0xaf, 0x92, 0xd9, 0x84,
	0x89, 0xae, 0x1b, 0xb1, 0x28, 0xa5, 0x11, 0x4b, 0x8f, 0x62, 0xf1, 0x08, 0xdc, 0x55, 0x35, 0xa7,
	0x61, 0x04, 0xf7, 0xb0, 0xdc, 0xbe, 0x42, 0x66, 0xf2, 0x5b, 0x94, 0xf2, 0x08, 0xdc, 0x41, 0x13,
	0x4e, 0x5d, 0xf4, 0x77, 0xe5, 0x56, 0x64, 0x5f, 0x23, 0x8d, 0x01, 0xbd, 0xb8, 0x97, 0x82, 0xaf,
	0x65, 0xc2, 0x99, 0xce, 0x29, 0xde, 0xef, 0xa5, 0xf6, 0x75, 0x32, 0xab, 0x67, 0x4b, 0x9d, 0xc0,
	0x80, 0x87, 0x29, 0x13, 0xe0, 0xc9, 0x98, 0x70, 0x66, 0x50, 0x70, 0x5f, 0x04, 0x77, 0xa1, 0x58,
	0xa1, 0x13, 0xac, 0x1b, 0x1f, 0x32, 0x9a, 0x08, 0x7e, 0xa8, 0xce, 0x8b, 0x3a, 0xb8, 0xbd, 0x14,
	0xdc, 0x04, 0x35, 0xc7, 0x46, 0xe1, 0x2e, 0xca, 0xd6, 0xa5, 0x6e, 0x5e, 0x2d, 0xa4, 0x50, 0xaa,
	0x6a, 0x01, 0x40, 0x7d, 0x16, 0xd4, 0x67, 0x50, 0xb0, 0x0e, 0xe5, 0x4a, 0xf7, 0x16, 0x99, 0x1b,
	0x6a, 0x9e, 0x47, 0xf0, 0xd6, 0xad, 0x39, 0xb3, 0x85, 0xc6, 0x39, 0x80, 0x1c, 0x6c, 0x9b, 0x47,
	0xf0, 0x9e, 0xac, 0x39, 0xd3, 0xf9, 0xa6, 0xb7, 0x22, 0x7b, 0x8d, 0x2c, 0x7a, 0x21, 0x57, 0x13,
	0x8c, 0xb3, 0x22, 0x58, 0x10, 0x32, 0x2f, 0x8d, 0x05, 0xbc, 0xdc, 0x6a, 0xce, 0x3c, 0x4a, 0xe1,
	0x64, 0x3b, 0x99, 0x4c, 0x6d, 0x03, 0xd7, 0xf3, 0x58, 0x92, 0xd5, 0x0a, 0x59, 0xc7, 0xf5, 0x4e,
	0x68, 0xc2, 0xa8, 0x48, 0xe1, 0x81, 0x54, 0x73, 0x16, 0x50, 0x01, 0x2a, 0x6e, 0x83, 0x78, 0x97,
	0x39, 0xa9, 0xbd, 0x42, 0xea, 0x5c, 0x2a, 0x0b, 0xc7, 0x22, 0xdc, 0x34, 0x8b, 0xa0, 0x3d, 0xc9,
	0xe5, 0x7a, 0xb0, 0x89, 0x45, 0xf6, 0x1b, 0xa4, 0x29, 0x59, 0xe4, 0x53, 0x2f, 0xee, 0x76, 0x7b,
	0x91, 0xda, 0xea, 0x6e, 0x9a, 0x0a, 0xde, 0xee, 0xa5, 0x0c, 0xee, 0xf2, 0x35, 0x67, 0x51, 0xc9,
	0x37, 0x32, 0xf1, 0x7a, 0x26, 0xb5, 0x1f, 0x90, 0xab, 0x50, 0xb3, 0x23, 0x5c, 0x8f, 0x05, 0xbd,
	0x90, 0xca, 0x83, 0x5e, 0x5a, 0xd6, 0x0e, 0x5e, 0x9b, 0x6b, 0xce, 0x8b, 0x4a, 0xfd, 0x6d, 0xad,
	0xbd, 0x77, 0xd0, 0x4b, 0x87, 0x1b, 0x95, 0xf6, 0x16, 0xb9, 0x0c, 0xad, 0xb2, 0xe3, 0x94, 0x45,
	0x3e, 0x2b, 0x1f, 0xd8, 0x19, 0x68, 0xef, 0x82, 0x52, 0xdc, 0xd4, 0x7a, 0x25, 0x03, 0xfc, 0x08,
	0x59, 0x96, 0x71, 0x90, 0x52, 0xc1, 0xf4, 0xb1, 0x1f, 0xb0, 0xce, 0xcb, 0xd0, 0xc6, 0x92, 0xd2,
	0x70, 0xb4, 0x42, 0xde, 0x2e, 0xbf, 0x4e, 0x96, 0xdc, 0xf0, 0xc8, 0x3d, 0xa1, 0x3d, 0xc9, 0xe8,
	0x40, 0x33, 0xcd, 0xb3, 0xb8, 0x58, 0x20, 0x7e, 0x28, 0xd9, 0x5e, 0xae, 0x05, 0xfb, 0x25, 0x32,
	0x2d, 0x79, 0xca, 0x68, 0x1c, 0x68, 0x73, 0xde, 0x3c, 0x87, 0x4c, 0x0a, 0x55, 0x7a, 0x3f, 0x40,
	0xeb, 0x6d, 0xbf, 0x4c, 0xa6, 0x33, 0xcb, 0x73, 0xa4, 0xbe, 0xe1, 0x69, 0xf3, 0x3c, 0x98, 0xc4,
	0xba, 0x2e, 0x7d, 0x17, 0x0a, 0xed, 0xab, 0x64, 0x26, 0x53, 0x73, 0xc3, 0x30, 0x3e, 0x72, 0x65,
	0xf3, 0x02, 0xe8, 0x65, 0xb5, 0xd7, 0xb1, 0xd4, 0xa6, 0xe4, 0x96, 0x1b, 0xd0, 0x30, 0x8e, 0x3a,
	0x34, 0xe4, 0x87, 0x2c, 0xb7, 0x26, 0x99, 0xdd, 0x95, 0xa9, 0x1b, 0x32, 0xb0, 0xbe, 0x54, 0xcd,
	0x5a, 0xf3, 0x22, 0xb4, 0x73, 0xd5, 0x0d, 0xb6, 0xe3, 0xa8, 0xb3, 0xad, 0xea, 0x64, 0x0b, 0xa3,
	0x8d, 0xf1, 0x9e, 0xaa, 0xa0, 0x2c, 0xf2, 0x1e, 0x8b, 0x7c, 0xdb, 0x23, 0xaf, 0x3d, 0x7d, 0x07,
	0xb8, 0x19, 0x9b, 0x97, 0xa0, 0x8b, 0x57, 0x9e, 0xa2, 0x8b, 0x75, 0xa8, 0x60, 0x7f, 0x8a, 0x5c,
	0x79, 0x42, 0x27, 0xf0, 0x65, 0x0e, 0x59, 0xf3, 0x32, 0x34, 0x7d, 0x79, 0x74, 0xd3, 0x1b, 0xa8,
	0xa8, 0x56, 0x51, 0x9d, 0x00, 0x49, 0xe3, 0x43, 0x26, 0x04, 0xf7, 0x59, 0x7f, 0xfd, 0x57, 0x70,
	0x15, 0xb9, 0x5c, 0x97, 0xf7, 0xb5, 0xd0, 0x2c, 0xfe, 0x15, 0x32, 0xa3, 0xaa, 0xf1, 0x4e, 0x62,
	0x8e, 0xce, 0x8b, 0xa0, 0x5e, 0xe7, 0x72, 0x9d, 0x77, 0x92, 0xec, 0xf0, 0xdc, 0x26, 0x17, 0x32,
	0x3d, 0x2f, 0x96, 0xf9, 0xcd, 0x9f, 0x55, 0x7b, 0x09, 0xaa, 0x2d, 0x63, 0xb5, 0x8d, 0x58, 0xf6,
	0xf7, 0x7c, 0xff, 0x00, 0x9e, 0x19, 0xd1, 0x06, 0xf7, 0x9b, 0x2f, 0x03, 0xd0, 0x85, 0x92, 0xea,
	0x5b, 0xbe, 0xbe, 0x84, 0x94, 0xd5, 0x4c, 0x85, 0x1b, 0x49, 0x9e, 0xf2, 0x43, 0xd6, 0xbc, 0x02,
	0x2d, 0x9c, 0x2f, 0x69, 0xe1, 0x81, 0x51, 0x82, 0xcd, 0x5e, 0xd2, 0x4c, 0x12, 0xf3, 0xe6, 0x55,
	0xfc, 0x56, 0xbb, 0xc5, 0xda, 0xbb, 0x31, 0xb7, 0x6f, 0x92, 0xb9, 0x6c, 0x00, 0x5d, 0xe6, 0x1b,
	0xcc, 0xd7, 0xb2, 0xcb, 0xa3, 0xea, 0x72, 0x87, 0xf9, 0x19, 0xd2, 0xf3, 0x84, 0x68, 0x43, 0x16,
	0x1f, 0x45, 0xcd, 0x57, 0x40, 0x6b, 0x02, 0x4b, 0xee, 0x1f, 0x45, 0xf6, 0x39, 0x32, 0xd1, 0xed,
	0x85, 0x29, 0x57, 0xc6, 0xb2, 0x79, 0x1d, 0xa5, 0xa6, 0xc0, 0xfe, 0x20, 0x59, 0xe4, 0x92, 0x06,
	0xf0, 0x1a, 0x3f, 0x74, 0x43, 0xde, 0xef, 0xee, 0xd5, 0xec, 0x0e, 0x72, 0x57, 0x09, 0xf7, 0x95,
	0x2c, 0xeb, 0xf1, 0x2d, 0x72, 0xb6, 0xf4, 0x3b, 0x48, 0xbb, 0xd0, 0xc9, 0x0d, 0x34, 0x01, 0xc3,
	0x5f, 0xc3, 0x1d, 0xe8, 0xf2, 0x4d, 0xb2, 0xcc, 0x25, 0x1c, 0x97, 0x2c, 0xf4, 0x91, 0xa6, 0xc2,
	0x74, 0x7b, 0x13, 0x8d, 0x23, 0x97, 0xea, 0x80, 0x60, 0x90, 0x21, 0x4d, 0x45, 0xd6, 0xf3, 0x65,
	0x32, 0xe5, 0xfa, 0x87, 0x4c, 0xa4, 0x5c, 0x32, 0x7a, 0xb8, 0xd6, 0xbc, 0x85, 0x37, 0x32, 0x53,
	0xb6, 0xbf, 0x56, 0x50, 0x69, 0x35, 0xdf, 0x5f, 0x54, 0x69, 0xd9, 0xaf, 0x91, 0xf9, 0xbe, 0x0a,
	0x7a, 0xfc, 0xd8, 0x61, 0x12, 0x35, 0x5f, 0x03, 0x55, 0xdb, 0xc8, 0xb6, 0x57, 0xf7, 0x51, 0xa2,
	0x3e, 0xe3, 0xfd, 0x1a, 0x7a, 0xaf, 0x37, 0x3f, 0x80, 0xb7, 0x58, 0x23, 0xd0, 0xfb, 0xdc, 0xde,
	0x24, 0x97, 0x72, 0xca, 0x2c, 0x50, 0xd7, 0x20, 0xca, 0xbb, 0x49, 0x56, 0x51, 0x0d, 0x7c, 0x15,
	0xea, 0x9e, 0xed, 0xd7, 0x65, 0xc1, 0xbe, 0x08, 0xb6, 0xba, 0x89, 0x6e, 0x64, 0x7f, 0xed, 0x29,
	0x9a, 0x69, 0x01, 0xc7, 0xe9, 0xd4, 0x66, 0x5a, 0xf6, 0x06, 0xb9, 0x98, 0x9b, 0x0f, 0x11, 0x50,
	0xc1, 0x8a, 0x83, 0x59, 0x83, 0x56, 0x96, 0xfb, 0x53, 0x24, 0x02, 0x87, 0x0d, 0x8c, 0xe5, 0x89,
	0x8d, 0xb4, 0x34, 0x23, 0x6a, 0x74, 0x23, 0x2d, 0xf5, 0x72, 0x64, 0x91, 0xe7, 0x26, 0xb2, 0x17,
	0xe6, 0x5e, 0x8e, 0x2d, 0xa8, 0x37, 0x3b, 0x20, 0x81, 0x97, 0xe3, 0x22, 0x79, 0x9e, 0x77, 0x93,
	0x58, 0xa4, 0xcd, 0x0f, 0xc1, 0x9e, 0xd0, 0x7f, 0xd9, 0xaf, 0x90, 0x06, 0xfe, 0x8b, 0xca, 0x94,
	0xa7, 0xde, 0x01, 0x8f, 0x3a, 0xcd, 0x37, 0xf0, 0xce, 0x81, 0xe5, 0x7b, 0x59, 0xb1, 0xea, 0x51,
	0xab, 0x0a, 0x66, 0x9e, 0x01, 0xcd, 0x0f, 0xe3, 0x95, 0x03, 0x25, 0x4e, 0x5f, 0x60, 0x7f, 0x9c,
	0x9c, 0x1b, 0x56, 0xcf, 0xf5, 0xf2, 0xa6, 0xb6, 0x3a, 0xc5, 0x8a, 0xfd, 0x0e, 0xd7, 0xc9, 0xf9,
	0xdc, 0xce, 0x8a, 0x3d, 0x37, 0xc4, 0x80, 0x2b, 0xf3, 0xf1, 0x96, 0xd1, 0xfc, 0x48, 0x61, 0x96,
	0xb6, 0x95, 0xce, 0x36, 0xaa, 0xc0, 0x3d, 0xc3, 0x6e, 0x91, 0x25, 0x16, 0x05, 0xb1, 0xf0, 0x18,
	0xc5, 0x63, 0x1a, 0x32, 0x6c, 0x43, 0x36, 0xdf, 0x42, 0xb3, 0xa5, 0xc5, 0x3b, 0x5a, 0x0a, 0xb5,
	0xa5, 0xfd, 0x97, 0x16, 0x99, 0x1b, 0x7c, 0x66, 0xc1, 0x53, 0xb4, 0xf9, 0xd1, 0x0a, 0x06, 0xe1,
	0xf2, 0x4f, 0x65, 0x67, 0x36, 0xce, 0xbf, 0x01, 0xb7, 0xa2, 0x20, 0xb6, 0xff, 0xda, 0x22, 0x8b,
	0xc3, 0xcf, 0x37, 0x80, 0xf3, 0xb1, 0xaa, 0xc3, 0x99, 0x2f, 0xbe, 0x28, 0x01, 0xd1, 0x97, 0x2c,
	0x32, 0x9b, 0x7f, 0x4b, 0x22, 0x98, 0x1f, 0xa8, 0x3a, 0x98, 0x99, 0xdc, 0x5b, 0x17, 0x70, 0xfc,
	0xbe, 0x45, 0x6a, 0xea, 0x1d, 0x09, 0xc3, 0xff, 0x78, 0xd5, 0x87, 0xff, 0x42, 0x2c, 0x04, 0x0c,
	0xfb, 0xcb, 0x16, 0xb1, 0x07, 0x5f, 0x7c, 0x00, 0x60, 0xbd, 0xf2, 0xf3, 0x1f, 0xf5, 0x9f, 0xa1,
	0x00, 0xe4, 0x6f, 0x2c, 0xb2, 0x54, 0xf2, 0xe1, 0x05, 0x34, 0xb7, 0x2b, 0x7f, 0x34, 0xa2, 0xc2,
	0x85, 0x00, 0x20, 0x7d, 0xcd, 0x22, 0xf3, 0x85, 0x67, 0x2f, 0xe2, 0xd9, 0xa8, 0xbc, 0xe5, 0x1a,
	0x78, 0x96, 0x03, 0x98, 0xaf, 0x5b, 0x64, 0xa1, 0xf8, 0x36, 0x47, 0x34, 0x77, 0xaa, 0x8e, 0xc6,
	0x1e, 0xf4, 0x1d, 0x00, 0x9c, 0xaf, 0x58, 0xc4, 0xd6, 0x0e, 0x04, 0x74, 0x1e, 0x20, 0x96, 0xcd,
	0xaa, 0x63, 0x69, 0xe0, 0xa0, 0xd1, 0xb3, 0x01, 0x48, 0xbe, 0x69, 0x91, 0xc5, 0x61, 0xf7, 0x06,
	0xa0, 0xb9, 0x5b, 0x75, 0x34, 0x73, 0x05, 0xef, 0x08, 0x00, 0xfa, 0x7b, 0x8b, 0x9c, 0x29, 0x03,
	0x84, 0x98, 0xde, 0xae, 0x3a, 0xa6, 0x85, 0x21, 0x4c, 0x80, 0xea, 0xaf, 0x8c, 0x31, 0x30, 0x5e,
	0x1c, 0x04, 0xf4, 0xce, 0x78, 0x1c, 0x1f, 0xe3, 0x5f, 0x02, 0x34, 0x7f, 0x61, 0x91, 0xd9, 0xbc,
	0x5f, 0x09, 0xa1, 0x6c, 0x55, 0x1d, 0xca, 0x74, 0x68, 0x9c, 0x5d, 0x00, 0xe3, 0x0b, 0x16, 0x99,
	0xe9, 0xbb, 0xbb, 0x10, 0xc4, 0x27, 0xaa, 0x0e, 0xa2, 0xee, 0x66, 0xce, 0x38, 0xc0, 0xa0, 0xae,
	0xc7, 0x05, 0x8f, 0x1c, 0xe0, 0xf8, 0x64, 0xe5, 0x3f, 0x32, 0x03, 0x7e, 0x42, 0xc0, 0xf2, 0x3d,
	0x8b, 0xbc, 0x3c, 0xec, 0x23, 0xf4, 0xe3, 0xa3, 0xa8, 0x88, 0x6e, 0xbb, 0xea, 0xe8, 0x2e, 0x17,
	0x9d, 0x97, 0x0a, 0xc5, 0x20, 0xda, 0x7f, 0xb2, 0xc8, 0xb9, 0x51, 0xbe, 0x4b, 0x00, 0xb9, 0x53,
	0x75, 0x90, 0x67, 0x4a, 0x3d, 0xaa, 0xe6, 0x03, 0x3b, 0xe8, 0x4d, 0x05, 0x48, 0xf7, 0x2a, 0xff,
	0x81, 0xcd, 0x3b, 0x78, 0x01, 0xc9, 0x1f, 0x58, 0x64, 0x42, 0xc6, 0x34, 0x46, 0x00, 0xf7, 0x2b,
	0xff, 0x34, 0x90, 0xf1, 0x7d, 0x18, 0xf7, 0x1f, 0x5b, 0x64, 0x12, 0xbd, 0xc5, 0x38, 0xf2, 0xdd,
	0xaa, 0x8f, 0x9c, 0xe0, 0x68, 0xfb, 0x96, 0x19, 0xbd, 0xd5, 0xe6, 0xd3, 0xff, 0xa9, 0xea, 0x5b,
	0x66, 0x1c, 0xb1, 0xfe, 0xe4, 0xff, 0xaf, 0x45, 0x6e, 0x8c, 0x70, 0x50, 0x0f, 0xf9, 0xc0, 0x01,
	0xa0, 0x53, 0x75, 0x80, 0x2f, 0x97, 0x78, 0xd0, 0xf7, 0x06, 0x5c, 0xf3, 0x00, 0xfc, 0xbf, 0x2c,
	0xf2, 0xca, 0xa9, 0xc0, 0xb5, 0x5f, 0x1e, 0x51, 0xef, 0x55, 0x1d, 0xf5, 0x8b, 0xa3, 0x50, 0xeb,
	0xa8, 0x01, 0x60, 0xfe, 0x73, 0x8b, 0x34, 0xf2, 0x71, 0x03, 0x80, 0xf6, 0xa0, 0xf2, 0x17, 0x22,
	0xd7, 0x04, 0x33, 0x00, 0xc5, 0x1f, 0x5a, 0x64, 0x02, 0xfc, 0xf3, 0x30, 0xfc, 0x87, 0x55, 0x1f,
	0x7e, 0x4d, 0x8d, 0x15, 0x06, 0xfe, 0x77, 0x16, 0x69, 0x96, 0xc6, 0x44, 0x14, 0x8e, 0xfd, 0xca,
	0xbf, 0x19, 0x86, 0xc2, 0x25, 0xc6, 0x27, 0x95, 0x45, 0x4b, 0x9a, 0xef, 0x56, 0xfe, 0xc3, 0xe3,
	0x62, 0xf8, 0x06, 0x6d, 0xb7, 0x09, 0xdc, 0xe0, 0x12, 0x7c, 0xba, 0xfa, 0xb6, 0x3b, 0x0b, 0x2c,
	0xc1, 0xd4, 0x7f, 0xde, 0x22, 0xd3, 0x26, 0x98, 0x84, 0x10, 0xde, 0xab, 0x3c, 0x04, 0x33, 0x60,
	0x63, 0x91, 0xf2, 0xf1, 0x2f, 0x00, 0xf1, 0x83, 0x95, 0xb7, 0x48, 0x81, 0x89, 0xca, 0x01, 0x8a,
	0x6f, 0x5b, 0xe4, 0xfc, 0xa8, 0x80, 0x1c, 0x42, 0xfa, 0x4c, 0xe5, 0x6f, 0xc9, 0x51, 0x59, 0xb8,
	0xd0, 0xc4, 0x03, 0x86, 0x68, 0x34, 0x08, 0xeb, 0x87, 0x2a, 0xef, 0xf4, 0x2c, 0xd2, 0x7c, 0x8c,
	0xd3, 0xb3, 0x18, 0x02, 0x05, 0x3c, 0x9f, 0x1d, 0x8b, 0xf7, 0xa8, 0x09, 0xcc, 0x1a, 0xa7, 0x67,
	0x3e, 0x2c, 0x4b, 0xdd, 0x80, 0x23, 0x9a, 0x1f, 0xae, 0xbc, 0xd7, 0x26, 0x17, 0x3a, 0x5e, 0x0f,
	0x78, 0x19, 0x9c, 0x56, 0x1f, 0x0e, 0x1d, 0x23, 0x38, 0xad, 0x0c, 0x8e, 0x32, 0x0d, 0x65, 0xe1,
	0xee, 0x3e, 0xac, 0x1f, 0xa9, 0xbc, 0x69, 0x18, 0x0e, 0xc9, 0x67, 0xe8, 0xd4, 0x03, 0x7a, 0x20,
	0x34, 0x8f, 0x90, 0xdc, 0xca, 0x3f, 0xa0, 0xf3, 0xb4, 0x01, 0x40, 0xf2, 0x9f, 0xea, 0x39, 0x70,
	0x6a, 0xc0, 0x5f, 0x2d, 0xd8, 0xe1, 0x1a, 0x02, 0x6c, 0x57, 0x1d, 0xe0, 0xca, 0x48, 0x52, 0xc2,
	0x7a, 0xc0, 0xf7, 0xd7, 0xbe, 0x1f, 0xc8, 0x2d, 0x84, 0xec, 0x8d, 0x37, 0xe4, 0x16, 0x40, 0xfe,
	0x0f, 0x8b, 0x5c, 0x3b, 0x95, 0x4a, 0x91, 0x5f, 0x64, 0xbf, 0xf2, 0xee, 0xbb, 0x51, 0x74, 0x8f,
	0xfe, 0x1a, 0x3f, 0x1d, 0x60, 0xbd, 0xc4, 0x6c, 0xac, 0x01, 0xe3, 0x0a, 0x7f, 0xcb, 0x22, 0xcb,
	0xe0, 0x2d, 0x2f, 0x52, 0x5d, 0x10, 0x62, 0x50, 0x75, 0x88, 0x4b, 0x6e, 0xb0, 0x59, 0x24, 0xe3,
	0x18, 0x67, 0x93, 0xe6, 0xc7, 0x98, 0x4f, 0x47, 0xa7, 0xf2, 0xb7, 0x7d, 0x1c, 0x71, 0xf6, 0xb9,
	0xf8, 0xae, 0x45, 0x56, 0x4e, 0x65, 0xe8, 0x20, 0xac, 0x83, 0xaa, 0xc3, 0xba, 0x30, 0x9a, 0x41,
	0x64, 0x9c, 0xe6, 0x23, 0x68, 0x44, 0x88, 0x90, 0x57, 0xfe, 0x9b, 0x5f, 0x4a, 0x73, 0x52, 0xe0,
	0x56, 0x7e, 0xe7, 0x31, 0xa9, 0x0f, 0xfc, 0x6e, 0x95, 0x7d, 0x13, 0xc9, 0xe5, 0x18, 0x03, 0x8d,
	0x7a, 0xdd, 0x36, 0x13, 0xf4, 0xf8, 0x38, 0xcb, 0x33, 0x41, 0xd1, 0xba, 0xbc, 0x07, 0x82, 0x4f,
	0x1f, 0x97, 0xaa, 0x9f, 0x9c, 0x40, 0x66, 0xc9, 0x90, 0xfa, 0x7b, 0x27, 0xf6, 0x2a, 0x59, 0xe8,
	0x27, 0xf1, 0x50, 0x99, 0x30, 0xf7, 0x11, 0x13, 0x94, 0xfb, 0x90, 0x43, 0x52, 0x77, 0xe6, 0xfa,
	0xc2, 0x3d, 0x94, 0x6d, 0xf9, 0xf6, 0x12, 0x79, 0x21, 0xf5, 0x12, 0xda, 0x95, 0x59, 0xda, 0xc8,
	0xf3, 0xa9, 0x97, 0xec, 0x48, 0x69, 0xbf, 0x45, 0x96, 0xbb, 0x3c, 0xa2, 0x66, 0xfd, 0xba, 0xea,
	0x49, 0xc3, 0xa3, 0x94, 0x89, 0x43, 0x37, 0xd4, 0x29, 0x23, 0xcd, 0x2e, 0x8f, 0xd6, 0xf3, 0x0a,
	0x5b, 0x5a, 0x6e, 0xbf, 0x4d, 0x2e, 0x8d, 0xae, 0x4d, 0xbb, 0x92, 0x79, 0xf8, 0x1b, 0x34, 0x75,
	0xe7, 0xfc, 0xa8, 0x36, 0x76, 0x94, 0x92, 0x7d, 0x89, 0x4c, 0xfa, 0x4c, 0x7a, 0x82, 0x27, 0x6a,
	0xfa, 0xf5, 0x0f, 0xbe, 0xe4, 0x8b, 0xec, 0x97, 0xc8, 0x34, 0x53, 0xb3, 0xac, 0x5e, 0x94, 0x5e,
	0xdc, 0x8b, 0x52, 0xc8, 0x17, 0xa9, 0x3b, 0x53, 0xaa, 0xf4, 0x9d, 0x38, 0xd9, 0x50, 0x65, 0xf6,
	0x45, 0x32, 0xd9, 0xee, 0x26, 0x54, 0x32, 0x71, 0xc8, 0x04, 0x26, 0x60, 0xd4, 0x1d, 0xd2, 0xee,
	0x26, 0x7b, 0x58, 0x62, 0x7f, 0x96, 0xdc, 0xe0, 0x92, 0x42, 0x4b, 0xb0, 0x11, 0x55, 0x73, 0xed,
	0x4e, 0xd2, 0x4d, 0x42, 0x49, 0x83, 0x58, 0x1c, 0xb9, 0xc2, 0xe7, 0x51, 0xa7, 0x98, 0x81, 0x71,
	0x95, 0xcb, 0xcd, 0x76, 0x27, 0xd9, 0xd1, 0x35, 0x6e, 0x63, 0x85, 0xbb, 0x46, 0xdf, 0x70, 0x8a,
	0x97, 0x49, 0xed, 0x11, 0x3b, 0xc1, 0x84, 0xa9, 0x49, 0x00, 0x61, 0xfe, 0xb6, 0x5f, 0x25, 0x36,
	0x9e, 0xf0, 0x81, 0x4d, 0x31, 0x05, 0x43, 0x9c, 0x01, 0x49, 0x6e, 0x4f, 0x94, 0x28, 0x9f, 0x9c,
	0x40, 0xfe, 0x45, 0x51, 0xf9, 0xbd, 0x13, 0xb5, 0x81, 0xfa, 0xca, 0x31, 0x4d, 0x04, 0xfc, 0xdc,
	0x18, 0x24, 0x61, 0xd4, 0x9c, 0x46, 0xa6, 0x1d, 0xef, 0x62, 0xb9, 0x1a, 0x64, 0xe2, 0x4a, 0x79,
	0x14, 0x0b, 0x5f, 0x67, 0x5f, 0x98, 0xbf, 0x91, 0x4e, 0xef, 0x3d, 0x62, 0x29, 0x6d, 0xf7, 0x82,
	0x80, 0x09, 0x2a, 0x98, 0xc7, 0xf8, 0x21, 0xa3, 0x92, 0x3f, 0x66, 0x90, 0x7b, 0x51, 0x77, 0x96,
	0x50, 0xe3, 0x36, 0x28, 0x38, 0x28, 0xdf, 0xe3, 0x8f, 0x81, 0x61, 0xac, 0x26, 0xb6, 0xac, 0xe6,
	0x2c, 0x32, 0x8c, 0xdb, 0x9d, 0xa4, 0xb4, 0xda, 0x60, 0x9f, 0xf0, 0x14, 0x85, 0x6a, 0x36, 0x56,
	0xcb, 0x77, 0xb8, 0xc7, 0x22, 0x1f, 0xaa, 0xbd, 0x9f, 0xcc, 0xe7, 0x7a, 0xeb, 0xd7, 0x99, 0x43,
	0x0a, 0xa7, 0xe9, 0xca, 0x54, 0x78, 0x9d, 0x2c, 0xba, 0x7e, 0x97, 0xc3, 0xaf, 0x51, 0xa4, 0x30,
	0x32, 0x1d, 0xe1, 0xd3, 0x99, 0x19, 0x0b, 0x03, 0xd2, 0x2c, 0xfc, 0x67, 0xdf, 0x24, 0xf6, 0x23,
	0xc6, 0x12, 0x37, 0x54, 0x55, 0xcc, 0xd1, 0x58, 0xc0, 0x5e, 0x8c, 0xc4, 0x9c, 0x89, 0x2b, 0x64,
	0xe6, 0x20, 0x0e, 0x7d, 0x8c, 0x10, 0xe0, 0x6f, 0x63, 0x2d, 0x22, 0xef, 0x5f, 0x15, 0x3f, 0xe0,
	0x5d, 0xb6, 0xaf, 0x0a, 0xed, 0x35, 0xb2, 0x04, 0x67, 0xc7, 0xf3, 0x68, 0x51, 0x7f, 0x09, 0x0f,
	0xb2, 0x3a, 0x32, 0x9e, 0xf7, 0xce, 0x40, 0xad, 0xcf, 0x59, 0x04, 0x17, 0x94, 0xf2, 0xa4, 0x90,
	0xb0, 0x5c, 0xd5, 0xcc, 0x29, 0x18, 0xee, 0x56, 0x92, 0x65, 0x4e, 0xdd, 0x22, 0xf3, 0x5d, 0xd9,
	0xa1, 0x61, 0xac, 0xfa, 0x51, 0xab, 0xa7, 0x8f, 0xf3, 0x19, 0x34, 0x77, 0x5d, 0xd9, 0xd9, 0x8e,
	0x3b, 0x5b, 0xd1, 0xed, 0x5e, 0x80, 0x47, 0xfa, 0x35, 0xb2, 0x90, 0xe9, 0xc7, 0xbd, 0x34, 0x57,
	0x61, 0x19, 0x57, 0x00, 0x2b, 0xdc, 0xef, 0xa5, 0xb9, 0x1a, 0x9a, 0xb4, 0xd1, 0x4b, 0x7c, 0x37,
	0x65, 0x92, 0xca, 0xb8, 0x27, 0x3c, 0x06, 0x29, 0x1d, 0x13, 0x9a, 0x19, 0xf1, 0x10, 0x45, 0x7b,
	0x20, 0xb1, 0x6f, 0x10, 0xdb, 0xef, 0x3e, 0xa6, 0x21, 0x8f, 0x1e, 0xd1, 0xb6, 0x1b, 0xf9, 0x47,
	0xdc, 0x4f, 0x0f, 0x20, 0xa9, 0xa3, 0xee, 0x34, 0xfc, 0xee, 0xe3, 0x6d, 0x1e, 0x3d, 0xba, 0x9d,
	0x95, 0xdb, 0x2b, 0xa4, 0x0e, 0x06, 0x44, 0x30, 0xef, 0x90, 0xfa, 0xdd, 0xc7, 0x3a, 0xaf, 0x63,
	0x52, 0x15, 0x3a, 0xcc, 0x3b, 0xbc, 0xd3, 0x7d, 0xac, 0xce, 0x2f, 0xe8, 0xc0, 0xb6, 0x54, 0x6d,
	0x77, 0x63, 0x9f, 0x41, 0x62, 0xc7, 0x84, 0x33, 0xa3, 0x24, 0x6a, 0x57, 0xde, 0xe9, 0x3e, 0xde,
	0x89, 0x7d, 0x66, 0x5f, 0x26, 0x53, 0x69, 0x1a, 0x52, 0xc9, 0xbc, 0x9e, 0xe0, 0xe9, 0x89, 0xce,
	0xdb, 0x98, 0x4c, 0xd3, 0x70, 0x4f, 0x17, 0xd9, 0xd7, 0xc9, 0xac, 0xec, 0x25, 0x89, 0x9a, 0xc1,
	0x35, 0xda, 0x3e, 0x81, 0x6f, 0x85, 0x4e, 0xbe, 0x98, 0x31, 0x82, 0xdb, 0x27, 0xea, 0x43, 0x61,
	0x7f, 0x82, 0x5c, 0xce, 0xd1, 0x6e, 0x23, 0xd6, 0x89, 0x53, 0x8e, 0xf7, 0xbe, 0x4c, 0x93, 0xf9,
	0x3a, 0xbb, 0xe2, 0x62, 0x5f, 0xf1, 0x5e, 0x5f, 0x6f, 0xcf, 0xa8, 0x41, 0xbf, 0x4c, 0x4a, 0x55,
	0x39, 0x4e, 0x58, 0x84, 0x30, 0x56, 0x10, 0x86, 0x16, 0xdc, 0x4f, 0x58, 0x04, 0x30, 0x1a, 0xe4,
	0xd9, 0x76, 0x80, 0x49, 0x14, 0x75, 0x47, 0xfd, 0xd3, 0xbe, 0x4a, 0x66, 0xda, 0x81, 0x4f, 0xbb,
	0x3c, 0x32, 0xe7, 0xe6, 0x25, 0xcc, 0x6d, 0x69, 0x07, 0xfe, 0x4e, 0xbf, 0xd4, 0x7e, 0x99, 0x4c,
	0x83, 0x22, 0x7e, 0x5d, 0x39, 0x13, 0x3a, 0x29, 0xa2, 0xae, 0xf4, 0x4c, 0xa1, 0x9a, 0xf9, 0x34,
	0x96, 0xb9, 0xeb, 0xeb, 0x15, 0x3d, 0x53, 0xb1, 0x34, 0xf7, 0xc2, 0x97, 0xc8, 0xb4, 0xd2, 0x81,
	0x93, 0x84, 0x4a, 0x98, 0xdd, 0x30, 0x95, 0xc6, 0x12, 0xce, 0x10, 0x68, 0x5d, 0x26, 0x53, 0x91,
	0x14, 0x7d, 0x3b, 0x7f, 0x0d, 0x1b, 0x8a, 0xa4, 0x30, 0xb6, 0xfc, 0x4d, 0x72, 0x66, 0x28, 0x37,
	0xc5, 0xe8, 0xbf, 0x82, 0x96, 0xb0, 0x33, 0x98, 0x91, 0x62, 0xea, 0x5e, 0x23, 0x8d, 0xa8, 0x2d,
	0x06, 0x13, 0x22, 0xaf, 0x23, 0xf2, 0xa8, 0x2d, 0xf2, 0xa9, 0x90, 0x37, 0xc9, 0x9c, 0xd2, 0xc4,
	0xa8, 0x22, 0xf8, 0x47, 0x41, 0xf9, 0x55, 0xdc, 0x7b, 0x51, 0x5b, 0x40, 0x94, 0x6e, 0xd7, 0x4d,
	0x0f, 0x40, 0xfd, 0x2d, 0x72, 0x56, 0xa9, 0x67, 0x97, 0xa9, 0x80, 0x0b, 0x99, 0x2a, 0xb3, 0x2f,
	0x53, 0x37, 0xed, 0xc9, 0x2c, 0xd9, 0x21, 0x6a, 0x8b, 0x4d, 0xd4, 0xb8, 0xab, 0x14, 0xd6, 0xe5,
	0x1e, 0x88, 0xed, 0x16, 0x69, 0xaa, 0xda, 0x5e, 0xd8, 0x93, 0xc0, 0x9e, 0xf3, 0x73, 0x53, 0x79,
	0x13, 0x4d, 0x6d, 0xd4, 0x16, 0x1b, 0x28, 0xde, 0xf2, 0xcd, 0x9c, 0xea, 0x41, 0xe6, 0xea, 0x41,
	0x95, 0x5b, 0x66, 0x90, 0xa6, 0x0a, 0xa8, 0xaf, 0x91, 0x45, 0xde, 0x89, 0x62, 0xc1, 0x94, 0x5d,
	0x88, 0x98, 0x97, 0x32, 0x9f, 0x7a, 0x07, 0xcc, 0x7b, 0x04, 0xe9, 0x0f, 0x35, 0x67, 0x1e, 0xa5,
	0x1b, 0x99, 0x70, 0x43, 0xc9, 0xec, 0x5b, 0x64, 0x0e, 0xf6, 0x43, 0xe4, 0x86, 0xf0, 0xbb, 0x0c,
	0x98, 0x27, 0x07, 0x69, 0x10, 0x35, 0x67, 0x36, 0x13, 0xed, 0x27, 0xd1, 0x06, 0x08, 0xec, 0x16,
	0x59, 0x72, 0x7d, 0x1f, 0xa6, 0x0c, 0xa9, 0x34, 0xfd, 0x8c, 0x5e, 0xcc, 0x85, 0x58, 0xd0, 0x62,
	0x75, 0xd4, 0x72, 0x69, 0xbd, 0xb7, 0xc9, 0x05, 0x34, 0x0c, 0x94, 0x09, 0x11, 0x0b, 0x7a, 0xe0,
	0x46, 0x7e, 0xa8, 0x3e, 0xfa, 0x51, 0xac, 0x16, 0x8c, 0xa5, 0x3a, 0x1d, 0x62, 0x19, 0xb5, 0x36,
	0x95, 0xd2, 0x3b, 0x5a, 0xe7, 0x5e, 0xec, 0x28, 0x0d, 0x75, 0x6d, 0xca, 0xfa, 0xce, 0x3e, 0x73,
	0xb9, 0xee, 0x31, 0x0f, 0xa2, 0xa9, 0x35, 0xf4, 0xa7, 0x2e, 0x37, 0x82, 0x16, 0x59, 0x62, 0x1d,
	0xc8, 0x77, 0x4f, 0x18, 0x53, 0x8b, 0xd9, 0xe1, 0x11, 0x63, 0x82, 0x47, 0x1d, 0x9d, 0xfc, 0xb0,
	0x80, 0xe2, 0x5d, 0xc6, 0xc4, 0x66, 0x5f, 0xa8, 0x76, 0xa4, 0xa6, 0x3f, 0x42, 0x70, 0x00, 0xcf,
	0x74, 0x96, 0xff, 0xa1, 0x7f, 0x03, 0x16, 0x15, 0xf6, 0x8d, 0x3c, 0x4b, 0x03, 0xb9, 0x43, 0x2e,
	0xb6, 0x99, 0x4c, 0x61, 0xc8, 0x3d, 0xc9, 0x34, 0x91, 0x5d, 0x6d, 0x1d, 0x68, 0x4b, 0x0d, 0x1b,
	0x73, 0x1f, 0xce, 0x66, 0x6a, 0x0f, 0x25, 0x43, 0xd6, 0xf8, 0xba, 0xdc, 0xd7, 0x2a, 0xf6, 0x26,
	0xb9, 0x38, 0x3c, 0x02, 0x08, 0xa0, 0x53, 0x1e, 0x41, 0x11, 0xa4, 0x47, 0xd4, 0x9d, 0x73, 0xc5,
	0x71, 0x40, 0x16, 0xdb, 0x16, 0xea, 0xd8, 0xeb, 0xe4, 0xfc, 0x70, 0x33, 0x92, 0x77, 0xd4, 0xd2,
	0xf3, 0x76, 0x27, 0x81, 0x0c, 0x8a, 0xba, 0xb3, 0x5c, 0x6c, 0x64, 0x0f, 0x54, 0xb6, 0xda, 0x9d,
	0x44, 0x35, 0x61, 0x12, 0xf9, 0xf5, 0x72, 0x6a, 0x4e, 0x28, 0x3b, 0xe6, 0x32, 0x95, 0x3a, 0xaf,
	0x62, 0x39, 0x53, 0x42, 0x83, 0x8f, 0x14, 0xcc, 0x4d, 0xd0, 0xb0, 0x3f, 0x43, 0x5e, 0x1d, 0xd1,
	0x44, 0x97, 0x49, 0xe9, 0x76, 0x58, 0x76, 0xb7, 0xc0, 0xef, 0xcd, 0x9b, 0x30, 0xa6, 0x2b, 0x65,
	0x0d, 0xee, 0xa0, 0x3e, 0xde, 0x37, 0xf0, 0x23, 0xd4, 0x25, 0xaf, 0x3f, 0x5d, 0xe3, 0x5c, 0xdd,
	0xd9, 0x22, 0xea, 0x71, 0xe1, 0xf5, 0x42, 0x57, 0x40, 0x4e, 0x46, 0xcd, 0xb9, 0xf5, 0xc4, 0x6e,
	0xb6, 0xe4, 0xbd, 0x38, 0xda, 0xd0, 0xb5, 0x6c, 0x87, 0x5c, 0x19, 0xd1, 0x5d, 0x18, 0x77, 0x3a,
	0xb9, 0x2b, 0x2d, 0xa4, 0x6d, 0xd4, 0x9c, 0x95, 0xb2, 0xf6, 0xb7, 0x51, 0x35, 0xdb, 0x32, 0x07,
	0x64, 0x75, 0x44, 0x9b, 0x26, 0x49, 0x33, 0x2b, 0xc8, 0xfd, 0x22, 0xc1, 0x47, 0xe1, 0xe3, 0x70,
	0xa3, 0xac, 0x7d, 0x93, 0xb5, 0x89, 0x7f, 0xbe, 0x6d, 0x7e, 0x0b, 0xf9, 0x0d, 0xd2, 0x1c, 0x26,
	0x8f, 0xe9, 0x75, 0xfc, 0x18, 0xa6, 0xad, 0x77, 0x0a, 0xac, 0x2c, 0xbd, 0x86, 0x1f, 0x21, 0xcb,
	0xc3, 0x35, 0xc3, 0xd8, 0x83, 0xd4, 0x06, 0xc8, 0x68, 0xc8, 0x59, 0xe9, 0xac, 0xee, 0x76, 0xec,
	0xed, 0x0a, 0x16, 0xa8, 0x3d, 0x34, 0x5c, 0xd9, 0x95, 0xd9, 0x05, 0x5a, 0x42, 0x4a, 0x41, 0xdd,
	0x59, 0x2e, 0xd6, 0x5f, 0x97, 0xfa, 0x2a, 0x0d, 0xef, 0xa7, 0x92, 0x26, 0xbc, 0x14, 0x78, 0xa4,
	0xc0, 0xe8, 0xaf, 0x3b, 0xcd, 0xa1, 0xfa, 0x5a, 0x6e, 0x6f, 0x11, 0xb3, 0x0e, 0xb4, 0xff, 0x04,
	0x0c, 0xb9, 0x4c, 0xf3, 0x33, 0x7a, 0x1b, 0x66, 0xd4, 0x6c, 0x77, 0x47, 0x3f, 0x08, 0xb7, 0xb9,
	0x4c, 0xfb, 0x53, 0x78, 0x96, 0x4c, 0x40, 0x46, 0x07, 0x53, 0xef, 0x9e, 0x0d, 0xe8, 0xb7, 0xd6,
	0x75, 0x8f, 0x95, 0x09, 0x91, 0x90, 0xea, 0xe8, 0x87, 0x8c, 0x1e, 0xb9, 0xa9, 0xa7, 0x3f, 0x30,
	0x77, 0xf0, 0xfb, 0xaa, 0x8a, 0xdf, 0x55, 0xa5, 0x59, 0x5e, 0xfe, 0x74, 0x7f, 0x1c, 0xe3, 0x41,
	0xae, 0x9e, 0xca, 0x1e, 0xc8, 0xc6, 0x2b, 0xd4, 0x7f, 0x12, 0x8f, 0x09, 0xa3, 0xba, 0x2e, 0xb3,
	0x87, 0xba, 0x89, 0x2f, 0x96, 0x3d, 0xab, 0xc7, 0x81, 0x48, 0x3d, 0x3f, 0xfc, 0xce, 0x47, 0xe6,
	0x71, 0x23, 0xf7, 0x98, 0x1f, 0x13, 0x0e, 0xf5, 0x4c, 0x6e, 0xc8, 0x00, 0xe3, 0xab, 0x16, 0x99,
	0x1b, 0x74, 0x42, 0x8c, 0x09, 0x85, 0xba, 0x91, 0x77, 0x92, 0x18, 0x9e, 0x61, 0xea, 0x25, 0x5d,
	0x29, 0xc7, 0x84, 0x40, 0x4d, 0x70, 0xb4, 0x86, 0x24, 0x91, 0x73, 0xf3, 0x8c, 0x09, 0x75, 0x7a,
	0xba, 0xef, 0x86, 0x02, 0x14, 0x7f, 0x66, 0x91, 0x7a, 0xe6, 0x1c, 0x1a, 0x13, 0x7e, 0xf4, 0x54,
	0x36, 0x5e, 0x00, 0x00, 0xbf, 0xb0, 0x98, 0xf9, 0x9d, 0xc6, 0x83, 0xfb, 0x3c, 0xa9, 0x9d, 0x61,
	0x66, 0x01, 0x32, 0xc7, 0xd7, 0x98, 0x10, 0x9d, 0xa7, 0xb2, 0xf1, 0x9a, 0x2c, 0x82, 0xec, 0xf9,
	0x91, 0xdd, 0x26, 0xc7, 0x82, 0xee, 0x3c, 0xab, 0x47, 0xad, 0x6f, 0xb2, 0xd9, 0x99, 0x86, 0x67,
	0x5c, 0x1e, 0x48, 0xe5, 0xd9, 0xcf, 0xd3, 0x6a, 0xc8, 0x39, 0x14, 0x6a, 0x4b, 0x99, 0x6b, 0xe0,
	0x78, 0xf0, 0x9f, 0xa7, 0xb2, 0xf1, 0xf6, 0xbf, 0x0b, 0xbc, 0x6b, 0xac, 0xaa, 0x53, 0xfd, 0xef,
	0x02, 0x8c, 0xd6, 0xb0, 0x2f, 0xb4, 0x41, 0xd2, 0xbf, 0x27, 0x37, 0x1e, 0x5c, 0x65, 0xed, 0xa2,
	0xc7, 0x31, 0x67, 0x4c, 0xc6, 0x99, 0x9c, 0x97, 0x74, 0x3c, 0x78, 0xc9, 0x53, 0x99, 0xef, 0x16,
	0x20, 0x7c, 0xd1, 0x22, 0x8d, 0xbc, 0xe3, 0x76, 0x3c, 0xc8, 0xc9, 0x75, 0xe3, 0x4e, 0x36, 0x3b,
	0x4a, 0x3f, 0x7d, 0xd1, 0x89, 0x3c, 0x26, 0xdc, 0xe4, 0x06, 0x0e, 0x1a, 0xdd, 0xdb, 0x26, 0x55,
	0x7b, 0xd8, 0xc7, 0x8d, 0x70, 0xde, 0xad, 0xfe, 0xaf, 0x18, 0x14, 0x7c, 0xf0, 0x26, 0x8d, 0x7e,
	0xc0, 0x11, 0x3f, 0x26, 0xac, 0xe5, 0x99, 0x5c, 0xa0, 0x60, 0x10, 0x88, 0x89, 0x16, 0x8c, 0x07,
	0x77, 0x39, 0x1f, 0xc8, 0x30, 0xbf, 0x2b, 0x91, 0x8f, 0x64, 0x8c, 0x09, 0x7d, 0x79, 0x26, 0x17,
	0x69, 0x31, 0x87, 0x25, 0x17, 0x6e, 0xd1, 0xf1, 0x96, 0x31, 0x61, 0x2e, 0xcf, 0xf7, 0xe3, 0x41,
	0xed, 0x13, 0xe3, 0x18, 0xf9, 0xa6, 0x45, 0x16, 0x87, 0x22, 0x39, 0x63, 0x42, 0x5a, 0x9e, 0x2b,
	0x44, 0x9a, 0x4c, 0x9e, 0x45, 0x3b, 0xf0, 0xc7, 0x84, 0xa7, 0xfc, 0x42, 0x3b, 0xf0, 0x4d, 0x4a,
	0x79, 0x21, 0x26, 0x36, 0x2e, 0xe4, 0xe4, 0xc1, 0x98, 0x9d, 0x79, 0x81, 0x0c, 0x06, 0xee, 0xc6,
	0x84, 0x9a, 0x3c, 0x3b, 0x10, 0x58, 0x34, 0x1b, 0x2a, 0x8d, 0xe5, 0x98, 0x90, 0x90, 0x5f, 0x48,
	0x63, 0x69, 0x6c, 0x6e, 0x3e, 0x94, 0x39, 0x26, 0x8c, 0xe3, 0x99, 0x5c, 0xa8, 0x15, 0x70, 0xfc,
	0xb3, 0x45, 0x2e, 0x8c, 0x8c, 0xb7, 0x8e, 0x09, 0xcb, 0xf8, 0xec, 0x88, 0x78, 0xb0, 0x21, 0xf2,
	0x17, 0x83, 0xc2, 0x63, 0x42, 0x25, 0xb6, 0x07, 0x83, 0xd6, 0x00, 0xe7, 0x6f, 0x2d, 0x0c, 0x26,
	0x17, 0x22, 0xd7, 0x63, 0x42, 0x15, 0x9e, 0x2f, 0x46, 0xd6, 0xcd, 0xaf, 0x98, 0x94, 0x86, 0xd7,
	0xc7, 0x83, 0x0e, 0xbc, 0x30, 0x14, 0xf7, 0x37, 0x31, 0x91, 0x62, 0xe8, 0xbe, 0xf2, 0xbc, 0xdf,
	0xba, 0x37, 0x40, 0x29, 0xf8, 0x86, 0x45, 0x16, 0x86, 0x38, 0x05, 0xe3, 0xc1, 0xf9, 0x9d, 0x2b,
	0xb0, 0x1d, 0x4c, 0xea, 0x6b, 0x09, 0xdb, 0x61, 0x4c, 0xf8, 0xbe, 0x0b, 0x43, 0x6c, 0x0c, 0x43,
	0xf3, 0x1d, 0x41, 0xc9, 0x18, 0x17, 0x9a, 0x6f, 0x29, 0x65, 0x04, 0xc0, 0x7d, 0xc7, 0x22, 0x17,
	0x47, 0x73, 0x3e, 0x10, 0xdf, 0x8f, 0x56, 0x1d, 0xdf, 0xb9, 0x51, 0x9c, 0x94, 0x3e, 0x4d, 0xbb,
	0x9c, 0x98, 0x82, 0xf8, 0x1e, 0x55, 0x9f, 0xa6, 0x5d, 0x46, 0x9c, 0x01, 0x70, 0xff, 0x66, 0x91,
	0x17, 0x4f, 0xe7, 0xfd, 0x20, 0xc6, 0xb0, 0xf2, 0x64, 0xfb, 0xd1, 0xbc, 0x24, 0x73, 0x91, 0x1a,
	0x49, 0x13, 0x42, 0x8c, 0xdd, 0xca, 0x5f, 0xa4, 0x46, 0xd0, 0x98, 0x4c, 0xd6, 0xc4, 0x30, 0xc0,
	0x9e, 0x64, 0x19, 0x95, 0x09, 0x41, 0x46, 0x95, 0x5f, 0xc8, 0x22, 0xc8, 0x87, 0x92, 0x69, 0xa6,
	0x15, 0xe0, 0xfc, 0x77, 0x8b, 0xbc, 0xf4, 0x04, 0xb6, 0x15, 0x22, 0x8d, 0xab, 0x8e, 0xf4, 0xd2,
	0x69, 0x6c, 0xb0, 0x53, 0xd6, 0x34, 0x47, 0x09, 0x43, 0xa4, 0xc9, 0xd8, 0xad, 0x69, 0x9f, 0xb2,
	0x66, 0x70, 0x9e, 0xca, 0x5b, 0x43, 0x9c, 0x3f, 0x56, 0x79, 0x9c, 0xa3, 0x79, 0x75, 0x80, 0xf3,
	0xff, 0x2c, 0xf2, 0xda, 0xf7, 0x41, 0xae, 0x43, 0xd4, 0xa2, 0xea, 0xa8, 0xaf, 0x3f, 0x1d, 0xf9,
	0x0f, 0x66, 0xe0, 0xbf, 0x2d, 0x72, 0x7d, 0xc4, 0x0c, 0xc8, 0x13, 0x19, 0xc6, 0x9d, 0x41, 0x93,
	0x2c, 0x2b, 0xff, 0x33, 0x42, 0x65, 0xd8, 0xf7, 0x00, 0x49, 0xde, 0x38, 0x7f, 0xcf, 0x22, 0x2f,
	0x3f, 0x91, 0x35, 0x08, 0x88, 0xd3, 0xca, 0x67, 0x57, 0x9e, 0xca, 0x61, 0x34, 0x54, 0xad, 0x61,
	0xfe, 0x1f, 0xc0, 0xeb, 0x55, 0xfe, 0x09, 0x5c, 0xa4, 0x25, 0x02, 0xa2, 0x7f, 0xb1, 0xc8, 0xc5,
	0xd1, 0x8c, 0x4a, 0x84, 0x76, 0x38, 0x36, 0x7e, 0x98, 0x02, 0xe3, 0xd3, 0x98, 0xe0, 0x53, 0x69,
	0x9f, 0x08, 0xf2, 0xa8, 0xf2, 0x26, 0x78, 0x34, 0x2d, 0xd5, 0x3c, 0x58, 0x46, 0x73, 0x53, 0x11,
	0xe4, 0x71, 0xe5, 0x1f, 0x2c, 0xa3, 0xb8, 0xb3, 0x59, 0x36, 0xf7, 0x95, 0x27, 0xa6, 0xba, 0x20,
	0xd2, 0x93, 0xca, 0xff, 0x60, 0xd9, 0x13, 0x52, 0x71, 0xb2, 0x44, 0x0c, 0xc3, 0xb8, 0x12, 0x2c,
	0x09, 0x5d, 0x0f, 0x12, 0x81, 0x1e, 0x0f, 0x64, 0xfa, 0x39, 0x28, 0x58, 0x97, 0xf6, 0xd5, 0x2c,
	0x59, 0xcc, 0x95, 0xd4, 0xef, 0xc1, 0xff, 0x37, 0x7f, 0x1c, 0xff, 0x1b, 0x27, 0x5a, 0xf7, 0x4e,
	0x4f, 0xfd, 0xaf, 0xfd, 0x8f, 0x16, 0x39, 0x37, 0x8a, 0x89, 0x0c, 0xd3, 0xf7, 0x13, 0x55, 0x9f,
	0xbe, 0x66, 0x19, 0x3d, 0x1a, 0xe6, 0xec, 0x73, 0x16, 0x99, 0x36, 0xd4, 0x68, 0x44, 0xf3, 0x93,
	0xd5, 0xa7, 0x52, 0x68, 0xea, 0xb6, 0xf9, 0x79, 0x9e, 0x02, 0x7f, 0x1b, 0x71, 0xfc, 0x54, 0xe5,
	0xc3, 0x2c, 0x03, 0xfc, 0x72, 0x48, 0x97, 0xfe, 0x23, 0x8b, 0xd4, 0x74, 0xba, 0x74, 0x62, 0xff,
	0xb6, 0x45, 0x9e, 0xc3, 0x9c, 0x47, 0x0b, 0xa0, 0xfc, 0x5c, 0xb5, 0x72, 0x18, 0xf1, 0x3f, 0x1b,
	0xe8, 0xe0, 0x10, 0xdb, 0xcf, 0x27, 0x22, 0x4e, 0xe3, 0x0f, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x38, 0x9a, 0x02, 0x19, 0x0d, 0x8c, 0x00, 0x00,
}
