// Code generated by protoc-gen-go.
// source: ipv6_acl_edm_ace.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence is a generated protocol buffer package.

It is generated from these files:
	ipv6_acl_edm_ace.proto

It has these top-level messages:
	Ipv6AclEdmAce_KEYS
	Ipv6AclEdmAce
	AclUdfAce
	Ipv6AclBagNhInfo
	Ipv6AclBagHwNhInfo
*/
package cisco_ios_xr_ipv6_acl_oper_ipv6_acl_and_prefix_list_access_list_manager_accesses_access_access_list_sequences_access_list_sequence

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ACLE bag
type Ipv6AclEdmAce_KEYS struct {
	AccessListName string `protobuf:"bytes,1,opt,name=access_list_name,json=accessListName" json:"access_list_name,omitempty"`
	SequenceNumber uint32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
}

func (m *Ipv6AclEdmAce_KEYS) Reset()                    { *m = Ipv6AclEdmAce_KEYS{} }
func (m *Ipv6AclEdmAce_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ipv6AclEdmAce_KEYS) ProtoMessage()               {}
func (*Ipv6AclEdmAce_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ipv6AclEdmAce_KEYS) GetAccessListName() string {
	if m != nil {
		return m.AccessListName
	}
	return ""
}

func (m *Ipv6AclEdmAce_KEYS) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

type Ipv6AclEdmAce struct {
	// ACE type (acl, remark)
	IsAceType string `protobuf:"bytes,50,opt,name=is_ace_type,json=isAceType" json:"is_ace_type,omitempty"`
	// ACLE sequence number
	IsAceSequenceNumber uint32 `protobuf:"varint,51,opt,name=is_ace_sequence_number,json=isAceSequenceNumber" json:"is_ace_sequence_number,omitempty"`
	// Grant value permit/deny
	IsPacketAllowOrDeny string `protobuf:"bytes,52,opt,name=is_packet_allow_or_deny,json=isPacketAllowOrDeny" json:"is_packet_allow_or_deny,omitempty"`
	// Protocol operator
	IsProtocolOperator string `protobuf:"bytes,53,opt,name=is_protocol_operator,json=isProtocolOperator" json:"is_protocol_operator,omitempty"`
	// Protocol 1
	IsIpv6ProtocolType int32 `protobuf:"zigzag32,54,opt,name=is_ipv6_protocol_type,json=isIpv6ProtocolType" json:"is_ipv6_protocol_type,omitempty"`
	// Protocol 2
	IsIpv6Protocol2Type         int32  `protobuf:"zigzag32,55,opt,name=is_ipv6_protocol2_type,json=isIpv6Protocol2Type" json:"is_ipv6_protocol2_type,omitempty"`
	IsSourceAddressInNumbers    string `protobuf:"bytes,56,opt,name=is_source_address_in_numbers,json=isSourceAddressInNumbers" json:"is_source_address_in_numbers,omitempty"`
	IsSourceAddressPrefixLength uint32 `protobuf:"varint,57,opt,name=is_source_address_prefix_length,json=isSourceAddressPrefixLength" json:"is_source_address_prefix_length,omitempty"`
	// Source Mask
	SourceMask                       string `protobuf:"bytes,58,opt,name=source_mask,json=sourceMask" json:"source_mask,omitempty"`
	IsDestinationAddressInNumbers    string `protobuf:"bytes,59,opt,name=is_destination_address_in_numbers,json=isDestinationAddressInNumbers" json:"is_destination_address_in_numbers,omitempty"`
	IsDestinationAddressPrefixLength uint32 `protobuf:"varint,60,opt,name=is_destination_address_prefix_length,json=isDestinationAddressPrefixLength" json:"is_destination_address_prefix_length,omitempty"`
	// Destination Mask
	DestinationMask string `protobuf:"bytes,61,opt,name=destination_mask,json=destinationMask" json:"destination_mask,omitempty"`
	// eq, ne, lt, etc...
	IsSourceOperator string `protobuf:"bytes,62,opt,name=is_source_operator,json=isSourceOperator" json:"is_source_operator,omitempty"`
	IsSourcePort1    uint32 `protobuf:"varint,63,opt,name=is_source_port1,json=isSourcePort1" json:"is_source_port1,omitempty"`
	IsSourcePort2    uint32 `protobuf:"varint,64,opt,name=is_source_port2,json=isSourcePort2" json:"is_source_port2,omitempty"`
	// eq, ne, lt, etc...
	IsDestinationOperator string `protobuf:"bytes,65,opt,name=is_destination_operator,json=isDestinationOperator" json:"is_destination_operator,omitempty"`
	IsDestinationPort1    uint32 `protobuf:"varint,66,opt,name=is_destination_port1,json=isDestinationPort1" json:"is_destination_port1,omitempty"`
	IsDestinationPort2    uint32 `protobuf:"varint,67,opt,name=is_destination_port2,json=isDestinationPort2" json:"is_destination_port2,omitempty"`
	IsLogOption           string `protobuf:"bytes,68,opt,name=is_log_option,json=isLogOption" json:"is_log_option,omitempty"`
	// Counter name
	CounterName         string `protobuf:"bytes,69,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	IsTcpBitsOperator   string `protobuf:"bytes,70,opt,name=is_tcp_bits_operator,json=isTcpBitsOperator" json:"is_tcp_bits_operator,omitempty"`
	IsTcpBits           uint32 `protobuf:"varint,71,opt,name=is_tcp_bits,json=isTcpBits" json:"is_tcp_bits,omitempty"`
	IsTcpBitsMask       uint32 `protobuf:"varint,72,opt,name=is_tcp_bits_mask,json=isTcpBitsMask" json:"is_tcp_bits_mask,omitempty"`
	IsDscpPresent       int32  `protobuf:"zigzag32,73,opt,name=is_dscp_present,json=isDscpPresent" json:"is_dscp_present,omitempty"`
	IsDscpValu          uint32 `protobuf:"varint,74,opt,name=is_dscp_valu,json=isDscpValu" json:"is_dscp_valu,omitempty"`
	IsPrecedencePresent int32  `protobuf:"zigzag32,75,opt,name=is_precedence_present,json=isPrecedencePresent" json:"is_precedence_present,omitempty"`
	// range from 0 to 7
	IsPrecedenceValue uint32 `protobuf:"varint,76,opt,name=is_precedence_value,json=isPrecedenceValue" json:"is_precedence_value,omitempty"`
	// Match if routing header is presant
	IsHeaderMatches uint32 `protobuf:"varint,77,opt,name=is_header_matches,json=isHeaderMatches" json:"is_header_matches,omitempty"`
	// Match if routing header is presant
	IsPacketLengthOperator string `protobuf:"bytes,78,opt,name=is_packet_length_operator,json=isPacketLengthOperator" json:"is_packet_length_operator,omitempty"`
	IsPacketLengthStart    uint32 `protobuf:"varint,79,opt,name=is_packet_length_start,json=isPacketLengthStart" json:"is_packet_length_start,omitempty"`
	IsPacketLengthEnd      uint32 `protobuf:"varint,80,opt,name=is_packet_length_end,json=isPacketLengthEnd" json:"is_packet_length_end,omitempty"`
	IsTimeToLiveOperator   string `protobuf:"bytes,81,opt,name=is_time_to_live_operator,json=isTimeToLiveOperator" json:"is_time_to_live_operator,omitempty"`
	IsTimeToLiveStart      uint32 `protobuf:"varint,82,opt,name=is_time_to_live_start,json=isTimeToLiveStart" json:"is_time_to_live_start,omitempty"`
	IsTimeToLiveEnd        uint32 `protobuf:"varint,83,opt,name=is_time_to_live_end,json=isTimeToLiveEnd" json:"is_time_to_live_end,omitempty"`
	NoStats                int32  `protobuf:"zigzag32,84,opt,name=no_stats,json=noStats" json:"no_stats,omitempty"`
	Hits                   uint64 `protobuf:"varint,85,opt,name=hits" json:"hits,omitempty"`
	// Capture option, TRUE if enabled
	Capture uint32 `protobuf:"varint,86,opt,name=capture" json:"capture,omitempty"`
	// Undetermined transport option, TRUE if enabled
	UndeterminedTransport uint32 `protobuf:"varint,87,opt,name=undetermined_transport,json=undeterminedTransport" json:"undetermined_transport,omitempty"`
	// Don't generate the icmp message
	IsIcmpMessageOff int32 `protobuf:"zigzag32,88,opt,name=is_icmp_message_off,json=isIcmpMessageOff" json:"is_icmp_message_off,omitempty"`
	// Set qos-group
	QosGroup          uint32 `protobuf:"varint,89,opt,name=qos_group,json=qosGroup" json:"qos_group,omitempty"`
	IsCommentForEntry string `protobuf:"bytes,90,opt,name=is_comment_for_entry,json=isCommentForEntry" json:"is_comment_for_entry,omitempty"`
	// Next hop type
	NextHopType string `protobuf:"bytes,91,opt,name=next_hop_type,json=nextHopType" json:"next_hop_type,omitempty"`
	// Next hop info
	NextHopInfo []*Ipv6AclBagNhInfo `protobuf:"bytes,92,rep,name=next_hop_info,json=nextHopInfo" json:"next_hop_info,omitempty"`
	// HW Next hop info
	HwNextHopInfo *Ipv6AclBagHwNhInfo `protobuf:"bytes,93,opt,name=hw_next_hop_info,json=hwNextHopInfo" json:"hw_next_hop_info,omitempty"`
	IsFlowId      uint32              `protobuf:"varint,94,opt,name=is_flow_id,json=isFlowId" json:"is_flow_id,omitempty"`
	// Source prefix object-group
	SourcePrefixGroup string `protobuf:"bytes,95,opt,name=source_prefix_group,json=sourcePrefixGroup" json:"source_prefix_group,omitempty"`
	// Destination prefix object-group
	DestinationPrefixGroup string `protobuf:"bytes,96,opt,name=destination_prefix_group,json=destinationPrefixGroup" json:"destination_prefix_group,omitempty"`
	// Source port object-group
	SourcePortGroup string `protobuf:"bytes,97,opt,name=source_port_group,json=sourcePortGroup" json:"source_port_group,omitempty"`
	// Destination port object-group
	DestinationPortGroup string `protobuf:"bytes,98,opt,name=destination_port_group,json=destinationPortGroup" json:"destination_port_group,omitempty"`
	// ACL Name
	AclName string `protobuf:"bytes,99,opt,name=acl_name,json=aclName" json:"acl_name,omitempty"`
	// Sequence String
	SequenceStr string `protobuf:"bytes,100,opt,name=sequence_str,json=sequenceStr" json:"sequence_str,omitempty"`
	// UDF
	Udf []*AclUdfAce `protobuf:"bytes,101,rep,name=udf" json:"udf,omitempty"`
	// SetTTL
	SetTtl uint32 `protobuf:"varint,102,opt,name=set_ttl,json=setTtl" json:"set_ttl,omitempty"`
}

func (m *Ipv6AclEdmAce) Reset()                    { *m = Ipv6AclEdmAce{} }
func (m *Ipv6AclEdmAce) String() string            { return proto.CompactTextString(m) }
func (*Ipv6AclEdmAce) ProtoMessage()               {}
func (*Ipv6AclEdmAce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ipv6AclEdmAce) GetIsAceType() string {
	if m != nil {
		return m.IsAceType
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsAceSequenceNumber() uint32 {
	if m != nil {
		return m.IsAceSequenceNumber
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPacketAllowOrDeny() string {
	if m != nil {
		return m.IsPacketAllowOrDeny
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsProtocolOperator() string {
	if m != nil {
		return m.IsProtocolOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsIpv6ProtocolType() int32 {
	if m != nil {
		return m.IsIpv6ProtocolType
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsIpv6Protocol2Type() int32 {
	if m != nil {
		return m.IsIpv6Protocol2Type
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsSourceAddressInNumbers() string {
	if m != nil {
		return m.IsSourceAddressInNumbers
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsSourceAddressPrefixLength() uint32 {
	if m != nil {
		return m.IsSourceAddressPrefixLength
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetSourceMask() string {
	if m != nil {
		return m.SourceMask
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsDestinationAddressInNumbers() string {
	if m != nil {
		return m.IsDestinationAddressInNumbers
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsDestinationAddressPrefixLength() uint32 {
	if m != nil {
		return m.IsDestinationAddressPrefixLength
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetDestinationMask() string {
	if m != nil {
		return m.DestinationMask
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsSourceOperator() string {
	if m != nil {
		return m.IsSourceOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsSourcePort1() uint32 {
	if m != nil {
		return m.IsSourcePort1
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsSourcePort2() uint32 {
	if m != nil {
		return m.IsSourcePort2
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsDestinationOperator() string {
	if m != nil {
		return m.IsDestinationOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsDestinationPort1() uint32 {
	if m != nil {
		return m.IsDestinationPort1
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsDestinationPort2() uint32 {
	if m != nil {
		return m.IsDestinationPort2
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsLogOption() string {
	if m != nil {
		return m.IsLogOption
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetCounterName() string {
	if m != nil {
		return m.CounterName
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsTcpBitsOperator() string {
	if m != nil {
		return m.IsTcpBitsOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsTcpBits() uint32 {
	if m != nil {
		return m.IsTcpBits
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsTcpBitsMask() uint32 {
	if m != nil {
		return m.IsTcpBitsMask
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsDscpPresent() int32 {
	if m != nil {
		return m.IsDscpPresent
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsDscpValu() uint32 {
	if m != nil {
		return m.IsDscpValu
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPrecedencePresent() int32 {
	if m != nil {
		return m.IsPrecedencePresent
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPrecedenceValue() uint32 {
	if m != nil {
		return m.IsPrecedenceValue
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsHeaderMatches() uint32 {
	if m != nil {
		return m.IsHeaderMatches
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPacketLengthOperator() string {
	if m != nil {
		return m.IsPacketLengthOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsPacketLengthStart() uint32 {
	if m != nil {
		return m.IsPacketLengthStart
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsPacketLengthEnd() uint32 {
	if m != nil {
		return m.IsPacketLengthEnd
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsTimeToLiveOperator() string {
	if m != nil {
		return m.IsTimeToLiveOperator
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetIsTimeToLiveStart() uint32 {
	if m != nil {
		return m.IsTimeToLiveStart
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsTimeToLiveEnd() uint32 {
	if m != nil {
		return m.IsTimeToLiveEnd
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetNoStats() int32 {
	if m != nil {
		return m.NoStats
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetHits() uint64 {
	if m != nil {
		return m.Hits
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetCapture() uint32 {
	if m != nil {
		return m.Capture
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetUndeterminedTransport() uint32 {
	if m != nil {
		return m.UndeterminedTransport
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsIcmpMessageOff() int32 {
	if m != nil {
		return m.IsIcmpMessageOff
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetQosGroup() uint32 {
	if m != nil {
		return m.QosGroup
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetIsCommentForEntry() string {
	if m != nil {
		return m.IsCommentForEntry
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetNextHopType() string {
	if m != nil {
		return m.NextHopType
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetNextHopInfo() []*Ipv6AclBagNhInfo {
	if m != nil {
		return m.NextHopInfo
	}
	return nil
}

func (m *Ipv6AclEdmAce) GetHwNextHopInfo() *Ipv6AclBagHwNhInfo {
	if m != nil {
		return m.HwNextHopInfo
	}
	return nil
}

func (m *Ipv6AclEdmAce) GetIsFlowId() uint32 {
	if m != nil {
		return m.IsFlowId
	}
	return 0
}

func (m *Ipv6AclEdmAce) GetSourcePrefixGroup() string {
	if m != nil {
		return m.SourcePrefixGroup
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetDestinationPrefixGroup() string {
	if m != nil {
		return m.DestinationPrefixGroup
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetSourcePortGroup() string {
	if m != nil {
		return m.SourcePortGroup
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetDestinationPortGroup() string {
	if m != nil {
		return m.DestinationPortGroup
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetAclName() string {
	if m != nil {
		return m.AclName
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetSequenceStr() string {
	if m != nil {
		return m.SequenceStr
	}
	return ""
}

func (m *Ipv6AclEdmAce) GetUdf() []*AclUdfAce {
	if m != nil {
		return m.Udf
	}
	return nil
}

func (m *Ipv6AclEdmAce) GetSetTtl() uint32 {
	if m != nil {
		return m.SetTtl
	}
	return 0
}

type AclUdfAce struct {
	// UDF Name
	UdfName []byte `protobuf:"bytes,1,opt,name=udf_name,json=udfName,proto3" json:"udf_name,omitempty"`
	// UDF Value
	UdfValue uint32 `protobuf:"varint,2,opt,name=udf_value,json=udfValue" json:"udf_value,omitempty"`
	// UDF Mask
	UdfMask uint32 `protobuf:"varint,3,opt,name=udf_mask,json=udfMask" json:"udf_mask,omitempty"`
}

func (m *AclUdfAce) Reset()                    { *m = AclUdfAce{} }
func (m *AclUdfAce) String() string            { return proto.CompactTextString(m) }
func (*AclUdfAce) ProtoMessage()               {}
func (*AclUdfAce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AclUdfAce) GetUdfName() []byte {
	if m != nil {
		return m.UdfName
	}
	return nil
}

func (m *AclUdfAce) GetUdfValue() uint32 {
	if m != nil {
		return m.UdfValue
	}
	return 0
}

func (m *AclUdfAce) GetUdfMask() uint32 {
	if m != nil {
		return m.UdfMask
	}
	return 0
}

// NH_Info structure
type Ipv6AclBagNhInfo struct {
	// The next hop
	NextHop string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	// Vrf Name
	VrfName string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
	// Track name
	TrackName string `protobuf:"bytes,3,opt,name=track_name,json=trackName" json:"track_name,omitempty"`
	// The next hop status
	Status string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	// The next hop at status
	AtStatus string `protobuf:"bytes,5,opt,name=at_status,json=atStatus" json:"at_status,omitempty"`
	// The nexthop exist
	AclNhExist int32 `protobuf:"zigzag32,6,opt,name=acl_nh_exist,json=aclNhExist" json:"acl_nh_exist,omitempty"`
}

func (m *Ipv6AclBagNhInfo) Reset()                    { *m = Ipv6AclBagNhInfo{} }
func (m *Ipv6AclBagNhInfo) String() string            { return proto.CompactTextString(m) }
func (*Ipv6AclBagNhInfo) ProtoMessage()               {}
func (*Ipv6AclBagNhInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ipv6AclBagNhInfo) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetTrackName() string {
	if m != nil {
		return m.TrackName
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetAtStatus() string {
	if m != nil {
		return m.AtStatus
	}
	return ""
}

func (m *Ipv6AclBagNhInfo) GetAclNhExist() int32 {
	if m != nil {
		return m.AclNhExist
	}
	return 0
}

// HW_NH_Info structure
type Ipv6AclBagHwNhInfo struct {
	// The next-hop type
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// The Next Hop
	NextHop string `protobuf:"bytes,2,opt,name=next_hop,json=nextHop" json:"next_hop,omitempty"`
	// Table ID
	TableId uint32 `protobuf:"varint,3,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Vrf Name
	VrfName string `protobuf:"bytes,4,opt,name=vrf_name,json=vrfName" json:"vrf_name,omitempty"`
}

func (m *Ipv6AclBagHwNhInfo) Reset()                    { *m = Ipv6AclBagHwNhInfo{} }
func (m *Ipv6AclBagHwNhInfo) String() string            { return proto.CompactTextString(m) }
func (*Ipv6AclBagHwNhInfo) ProtoMessage()               {}
func (*Ipv6AclBagHwNhInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ipv6AclBagHwNhInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Ipv6AclBagHwNhInfo) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *Ipv6AclBagHwNhInfo) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *Ipv6AclBagHwNhInfo) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func init() {
	proto.RegisterType((*Ipv6AclEdmAce_KEYS)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_edm_ace_KEYS")
	proto.RegisterType((*Ipv6AclEdmAce)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_edm_ace")
	proto.RegisterType((*AclUdfAce)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.acl_udf_ace")
	proto.RegisterType((*Ipv6AclBagNhInfo)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_bag_nh_info")
	proto.RegisterType((*Ipv6AclBagHwNhInfo)(nil), "cisco_ios_xr_ipv6_acl_oper.ipv6_acl_and_prefix_list.access_list_manager.accesses.access.access_list_sequences.access_list_sequence.ipv6_acl_bag_hw_nh_info")
}

func init() { proto.RegisterFile("ipv6_acl_edm_ace.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4b, 0x73, 0x1c, 0x35,
	0x10, 0xae, 0x8d, 0x8d, 0x1f, 0xb2, 0x1d, 0xaf, 0xe5, 0x78, 0xa3, 0x54, 0x12, 0xb2, 0x71, 0x51,
	0x64, 0x49, 0x05, 0x43, 0x36, 0x89, 0x49, 0x78, 0x04, 0x9c, 0xd8, 0x89, 0x97, 0xf8, 0xb1, 0x78,
	0x97, 0x40, 0x78, 0x29, 0xf2, 0x8c, 0x66, 0x57, 0x78, 0x67, 0x34, 0x91, 0x34, 0x6b, 0xfb, 0xc2,
	0x81, 0x3f, 0xc0, 0x95, 0x2a, 0x2e, 0x14, 0xff, 0x83, 0x0b, 0x55, 0xfc, 0x2f, 0x4a, 0xad, 0x99,
	0xd9, 0x19, 0xdb, 0x39, 0x93, 0xdb, 0x4c, 0x77, 0x7f, 0xad, 0xaf, 0xbb, 0xd5, 0xdd, 0x42, 0x35,
	0x11, 0x0f, 0x57, 0x29, 0xf3, 0x06, 0x94, 0xfb, 0x21, 0x65, 0x1e, 0x5f, 0x89, 0x95, 0x34, 0x12,
	0xff, 0x5a, 0xf1, 0x84, 0xf6, 0x24, 0x15, 0x52, 0xd3, 0x23, 0x45, 0x73, 0x2b, 0x19, 0x73, 0xb5,
	0x92, 0xff, 0xb1, 0xc8, 0xa7, 0xb1, 0xe2, 0x81, 0x38, 0xa2, 0x03, 0xa1, 0xcd, 0x0a, 0xf3, 0x3c,
	0xae, 0x35, 0x7c, 0xd3, 0x90, 0x45, 0xac, 0xc7, 0x55, 0x2a, 0xe3, 0x3a, 0xfd, 0x28, 0xd9, 0x68,
	0xfe, 0x2a, 0xe1, 0x91, 0xc7, 0xcf, 0x96, 0x2e, 0xff, 0x8c, 0x96, 0x4e, 0xd2, 0xa3, 0xcf, 0x36,
	0x5e, 0x74, 0x70, 0x03, 0x55, 0x8b, 0x80, 0x88, 0x85, 0x9c, 0x54, 0xea, 0x95, 0xc6, 0xf4, 0xde,
	0x79, 0x27, 0xdf, 0x12, 0xda, 0xec, 0xb0, 0x90, 0xe3, 0x1b, 0x68, 0x3e, 0x73, 0x47, 0xa3, 0x24,
	0xdc, 0xe7, 0x8a, 0x9c, 0xab, 0x57, 0x1a, 0x73, 0x7b, 0xe7, 0x33, 0xf1, 0x0e, 0x48, 0x97, 0xff,
	0xac, 0xa1, 0xea, 0xc9, 0xc3, 0xf0, 0xdb, 0x68, 0x46, 0x68, 0x38, 0xd6, 0x1c, 0xc7, 0x9c, 0x34,
	0xe1, 0x88, 0x69, 0xa1, 0xd7, 0x3c, 0xde, 0x3d, 0x8e, 0x39, 0xbe, 0x83, 0x6a, 0xa9, 0xfe, 0xe4,
	0x21, 0x77, 0xe0, 0x90, 0x45, 0x30, 0xed, 0x94, 0x4e, 0xc2, 0x77, 0xd1, 0x45, 0xa1, 0x69, 0xcc,
	0xbc, 0x03, 0x6e, 0x28, 0x1b, 0x0c, 0xe4, 0x21, 0x95, 0x8a, 0xfa, 0x3c, 0x3a, 0x26, 0x77, 0xe1,
	0x80, 0x45, 0xa1, 0xdb, 0xa0, 0x5d, 0xb3, 0xca, 0x5d, 0xb5, 0xce, 0xa3, 0x63, 0xfc, 0x21, 0xba,
	0x60, 0x51, 0xb6, 0x38, 0x9e, 0x74, 0x75, 0x60, 0x46, 0x2a, 0x72, 0x0f, 0x20, 0x58, 0xe8, 0x76,
	0xaa, 0xda, 0x4d, 0x35, 0xf8, 0x36, 0x5a, 0x12, 0xda, 0x55, 0x2e, 0x87, 0x41, 0x18, 0xab, 0xf5,
	0x4a, 0x63, 0xc1, 0x42, 0x5a, 0xf1, 0x70, 0x35, 0x83, 0x15, 0xe2, 0x29, 0x41, 0x9a, 0x0e, 0xf3,
	0x11, 0x60, 0x16, 0xcb, 0x98, 0x26, 0x80, 0x1e, 0xa2, 0x2b, 0x42, 0x53, 0x2d, 0x13, 0xe5, 0x71,
	0xca, 0x7c, 0x5f, 0xd9, 0xba, 0x88, 0x28, 0xcd, 0x84, 0x26, 0xf7, 0x81, 0x21, 0x11, 0xba, 0x03,
	0x26, 0x6b, 0xce, 0xa2, 0x15, 0xb9, 0x74, 0x68, 0xbc, 0x8e, 0xae, 0x9d, 0xc6, 0x67, 0xb7, 0x8a,
	0x47, 0x3d, 0xd3, 0x27, 0x0f, 0x20, 0x9b, 0x97, 0x4f, 0xb8, 0x68, 0x83, 0xcd, 0x16, 0x98, 0xe0,
	0x6b, 0x68, 0x26, 0x75, 0x11, 0x32, 0x7d, 0x40, 0x3e, 0x86, 0x43, 0x91, 0x13, 0x6d, 0x33, 0x7d,
	0x80, 0x37, 0xd1, 0x75, 0xa1, 0xa9, 0xcf, 0xb5, 0x11, 0x11, 0x33, 0x42, 0x46, 0x67, 0x71, 0xfd,
	0x04, 0x60, 0x57, 0x85, 0x5e, 0x1f, 0xd9, 0x9d, 0x22, 0xbc, 0x83, 0xde, 0x79, 0x8d, 0xa7, 0x32,
	0xeb, 0x4f, 0x81, 0x75, 0xfd, 0x2c, 0x67, 0x25, 0xea, 0xef, 0xa1, 0x6a, 0xd1, 0x19, 0xf0, 0xff,
	0x0c, 0x88, 0xcc, 0x17, 0xe4, 0x10, 0xc4, 0x2d, 0x84, 0x47, 0xb9, 0xca, 0xef, 0xc0, 0x43, 0x30,
	0xae, 0x66, 0xe9, 0xc9, 0x6f, 0xc0, 0xbb, 0x68, 0x7e, 0x64, 0x1d, 0x4b, 0x65, 0x6e, 0x93, 0xcf,
	0x81, 0xd3, 0x5c, 0x66, 0xda, 0xb6, 0xc2, 0xd3, 0x76, 0x4d, 0xf2, 0xc5, 0x69, 0xbb, 0x26, 0x5e,
	0x85, 0x9b, 0x5b, 0xe4, 0x9a, 0x53, 0x58, 0x03, 0x0a, 0x4b, 0xa5, 0x58, 0x73, 0x1e, 0xee, 0xee,
	0x16, 0x71, 0x8e, 0xcc, 0x23, 0x38, 0x04, 0x97, 0x40, 0x8e, 0xd1, 0xd9, 0x88, 0x26, 0x79, 0xfc,
	0x1a, 0x44, 0x13, 0x2f, 0xa3, 0x39, 0xa1, 0xe9, 0x40, 0xf6, 0xa8, 0x8c, 0xad, 0x94, 0xac, 0x03,
	0xa3, 0x19, 0xa1, 0xb7, 0x64, 0x6f, 0x17, 0x44, 0xf8, 0x3a, 0x9a, 0xf5, 0x64, 0x12, 0x19, 0xae,
	0xdc, 0xc8, 0xd8, 0x70, 0x26, 0xa9, 0x0c, 0xe6, 0xc5, 0x07, 0x70, 0xb0, 0xf1, 0x62, 0xba, 0x2f,
	0x8c, 0x1e, 0xc5, 0xf7, 0x04, 0x4c, 0x17, 0x84, 0xee, 0x7a, 0xf1, 0x23, 0x61, 0x74, 0x1e, 0x9b,
	0x1b, 0x11, 0x19, 0x80, 0x3c, 0x05, 0x82, 0xd3, 0xb9, 0x1d, 0xbe, 0x81, 0xaa, 0x45, 0x87, 0x50,
	0xdc, 0xcd, 0x2c, 0xb9, 0xa9, 0x11, 0x94, 0xd6, 0x15, 0xc1, 0xd7, 0x5e, 0x6c, 0xaf, 0x91, 0xe6,
	0x91, 0x21, 0x2d, 0x68, 0xba, 0x39, 0xa1, 0xd7, 0xb5, 0x17, 0xb7, 0x9d, 0x10, 0xd7, 0xd1, 0x6c,
	0x66, 0x37, 0x64, 0x83, 0x84, 0x7c, 0x09, 0xce, 0x90, 0x33, 0x7a, 0xce, 0x06, 0x09, 0x6e, 0x42,
	0xe3, 0xc7, 0x8a, 0x7b, 0xdc, 0x87, 0x99, 0x94, 0xf9, 0x7b, 0x96, 0x35, 0x71, 0x3b, 0xd7, 0x65,
	0x5e, 0x57, 0xd0, 0x62, 0x19, 0x63, 0x7d, 0x73, 0xb2, 0x05, 0xce, 0x17, 0x8a, 0x08, 0x7b, 0x04,
	0xc7, 0x37, 0xd1, 0x82, 0xd0, 0xb4, 0xcf, 0x99, 0xcf, 0x15, 0x0d, 0x99, 0xf1, 0xfa, 0x5c, 0x93,
	0x6d, 0xb0, 0x9e, 0x17, 0x7a, 0x13, 0xe4, 0xdb, 0x4e, 0x8c, 0x1f, 0xa0, 0x4b, 0xa3, 0x81, 0xe7,
	0x7a, 0x63, 0x94, 0xd8, 0x1d, 0x48, 0x6c, 0x2d, 0x1b, 0x79, 0xae, 0x25, 0xf2, 0xec, 0xba, 0x81,
	0x54, 0x86, 0x6a, 0xc3, 0x94, 0x21, 0xbb, 0xd9, 0x80, 0x2d, 0xe2, 0x3a, 0x56, 0x95, 0xd6, 0xb0,
	0x0c, 0xe2, 0x91, 0x4f, 0xda, 0x79, 0x30, 0x05, 0xc8, 0x46, 0xe4, 0xe3, 0x55, 0x44, 0x6c, 0x8d,
	0x44, 0xc8, 0xa9, 0x91, 0x74, 0x20, 0x86, 0x85, 0xde, 0xfa, 0x0a, 0xf8, 0x5d, 0x10, 0xba, 0x2b,
	0x42, 0xde, 0x95, 0x5b, 0x62, 0xc8, 0x0b, 0xf7, 0x7a, 0xe9, 0x24, 0xce, 0x91, 0xdb, 0xcb, 0x4e,
	0x1a, 0x81, 0x1c, 0xb5, 0x5b, 0x90, 0xe6, 0x12, 0xc2, 0x32, 0xeb, 0x64, 0x89, 0x1b, 0xd9, 0x5b,
	0x5e, 0x97, 0xd0, 0x54, 0x24, 0xad, 0x4b, 0xa3, 0x49, 0x17, 0x6a, 0x37, 0x19, 0xc9, 0x8e, 0xfd,
	0xc5, 0x18, 0x8d, 0xf7, 0xed, 0x7d, 0xfb, 0xba, 0x5e, 0x69, 0x8c, 0xef, 0xc1, 0x37, 0x26, 0x68,
	0xd2, 0x63, 0xb1, 0x49, 0x14, 0x27, 0xcf, 0xc1, 0x61, 0xf6, 0x8b, 0xef, 0xa1, 0x5a, 0x12, 0xf9,
	0xdc, 0x70, 0x15, 0x8a, 0x88, 0xfb, 0xd4, 0x28, 0x16, 0x69, 0xdb, 0x51, 0xe4, 0x1b, 0x30, 0x5c,
	0x2a, 0x6a, 0xbb, 0x99, 0x12, 0xbf, 0x0f, 0x6c, 0x85, 0x17, 0xc6, 0x34, 0xe4, 0x5a, 0xb3, 0x1e,
	0xa7, 0x32, 0x08, 0xc8, 0xb7, 0x40, 0xa5, 0x2a, 0x74, 0xcb, 0x0b, 0xe3, 0x6d, 0xa7, 0xd8, 0x0d,
	0x02, 0x7c, 0x19, 0x4d, 0xbf, 0x92, 0x9a, 0xf6, 0x94, 0x4c, 0x62, 0xf2, 0x02, 0x1c, 0x4f, 0xbd,
	0x92, 0xfa, 0xa9, 0xfd, 0x4f, 0x8b, 0xe2, 0xc9, 0x30, 0xe4, 0x91, 0xa1, 0x81, 0x54, 0x94, 0x47,
	0x46, 0x1d, 0x93, 0xef, 0xb2, 0xc6, 0x7a, 0xec, 0x54, 0x4f, 0xa4, 0xda, 0xb0, 0x0a, 0xdb, 0xd0,
	0x11, 0x3f, 0x32, 0xb4, 0x2f, 0x63, 0xb7, 0x82, 0xbe, 0x77, 0xdd, 0x6a, 0x85, 0x9b, 0x32, 0x86,
	0xd5, 0xf3, 0x77, 0xa5, 0x60, 0x24, 0xa2, 0x40, 0x92, 0x1f, 0xea, 0x63, 0x8d, 0x99, 0xe6, 0xef,
	0x95, 0x95, 0xff, 0xff, 0xf9, 0x32, 0x3a, 0x67, 0x9f, 0xf5, 0x68, 0xd4, 0x07, 0x82, 0x39, 0xff,
	0x56, 0x14, 0x48, 0xfc, 0x6f, 0x05, 0x55, 0xfb, 0x87, 0xb4, 0x1c, 0xc2, 0x8f, 0xf5, 0x4a, 0x63,
	0xa6, 0xf9, 0xc7, 0x9b, 0x17, 0x82, 0x65, 0x9a, 0x46, 0x31, 0xd7, 0x3f, 0xdc, 0x29, 0xc4, 0x71,
	0x05, 0x21, 0xa1, 0x69, 0x60, 0x9f, 0x32, 0xc2, 0x27, 0x3f, 0xb9, 0xd2, 0x0b, 0xfd, 0x64, 0x20,
	0x0f, 0x5b, 0xbe, 0x9d, 0x2d, 0xd9, 0x6e, 0x71, 0x4c, 0xdd, 0x0d, 0xa1, 0xae, 0xf2, 0x4e, 0xe5,
	0x16, 0xa2, 0xbb, 0x2a, 0xf7, 0x11, 0x29, 0x4d, 0xfe, 0x22, 0xe8, 0xa5, 0x1b, 0x17, 0x05, 0x7d,
	0x11, 0x79, 0x13, 0x2d, 0x14, 0xb6, 0x58, 0x0a, 0x61, 0x6e, 0x95, 0xea, 0x7c, 0x91, 0x39, 0xdb,
	0xbb, 0xa8, 0x76, 0x72, 0xbf, 0xa4, 0x80, 0x7d, 0xd7, 0xf2, 0x7e, 0x79, 0xc5, 0x38, 0xd4, 0x25,
	0x34, 0x65, 0xd3, 0x01, 0xeb, 0xc3, 0x03, 0xbb, 0x49, 0xe6, 0x0d, 0x60, 0x75, 0x5c, 0x47, 0xb3,
	0xf9, 0x2b, 0x50, 0x1b, 0x45, 0x7c, 0x77, 0x5f, 0x33, 0x59, 0xc7, 0x28, 0xfc, 0x57, 0x05, 0x8d,
	0x25, 0x7e, 0x40, 0x38, 0xdc, 0xd2, 0xdf, 0xde, 0x88, 0x12, 0xdb, 0x23, 0x12, 0x3f, 0xb0, 0xaf,
	0xd8, 0x3d, 0x4b, 0x0e, 0x5f, 0x44, 0x93, 0x9a, 0x1b, 0x6a, 0xcc, 0x80, 0x04, 0x50, 0xc9, 0x09,
	0xcd, 0x4d, 0xd7, 0x0c, 0x96, 0x5f, 0xa2, 0x99, 0x82, 0xb1, 0x4d, 0x85, 0xfd, 0xcc, 0x1f, 0xdf,
	0xb3, 0x7b, 0x93, 0x89, 0x1f, 0x40, 0x2a, 0x2e, 0xa3, 0x69, 0xab, 0x72, 0x3b, 0xc4, 0xbd, 0xb7,
	0xad, 0xad, 0x5b, 0x1d, 0x29, 0x0e, 0x36, 0xe1, 0x98, 0x9b, 0x53, 0x89, 0x1f, 0xd8, 0x1d, 0xb8,
	0xfc, 0x4f, 0x05, 0x5d, 0x38, 0xab, 0x6b, 0x60, 0x12, 0xa6, 0x4d, 0x92, 0x3e, 0xf4, 0x27, 0xd3,
	0x3e, 0xb2, 0xaa, 0xa1, 0x4a, 0x69, 0x9c, 0x73, 0xaa, 0xa1, 0x72, 0x34, 0xae, 0x22, 0x64, 0x14,
	0xf3, 0x0e, 0x9c, 0x72, 0xcc, 0xbd, 0xde, 0x41, 0x02, 0xea, 0x1a, 0x9a, 0xb0, 0xb3, 0x35, 0xd1,
	0x64, 0x1c, 0x54, 0xe9, 0x9f, 0x65, 0xcf, 0x0c, 0x4d, 0x55, 0x6f, 0x81, 0x6a, 0x8a, 0x99, 0x8e,
	0x53, 0xd6, 0xd1, 0x2c, 0x5c, 0x80, 0x3e, 0xe5, 0x47, 0x42, 0x1b, 0x32, 0x01, 0xc3, 0x10, 0xd9,
	0x4b, 0xd0, 0xdf, 0xb0, 0x92, 0xe5, 0x5f, 0xd0, 0xc5, 0xd7, 0xb4, 0x8d, 0x9d, 0xda, 0x30, 0xca,
	0x5c, 0x08, 0xf0, 0x5d, 0x0a, 0xed, 0xdc, 0xa9, 0xd0, 0x0c, 0xdb, 0x1f, 0x70, 0xdb, 0x54, 0x69,
	0xa6, 0xe0, 0xbf, 0xe5, 0x97, 0xa2, 0x1e, 0x2f, 0x45, 0xbd, 0x3f, 0x01, 0x4f, 0xf7, 0x3b, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0xe1, 0xff, 0xdb, 0x0d, 0x00, 0x00,
}
