// Code generated by protoc-gen-go.
// source: ipv6_nd_if_params.proto
// DO NOT EDIT!

/*
Package cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_interfaces_interface is a generated protocol buffer package.

It is generated from these files:
	ipv6_nd_if_params.proto

It has these top-level messages:
	Ipv6NdIfParams_KEYS
	Ipv6NdIfParams
*/
package cisco_ios_xr_ipv6_nd_oper_ipv6_node_discovery_nodes_node_interfaces_interface

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Detailed Info of ND IPv6 Interface
type Ipv6NdIfParams_KEYS struct {
	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	InterfaceName string `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName" json:"interface_name,omitempty"`
}

func (m *Ipv6NdIfParams_KEYS) Reset()                    { *m = Ipv6NdIfParams_KEYS{} }
func (m *Ipv6NdIfParams_KEYS) String() string            { return proto.CompactTextString(m) }
func (*Ipv6NdIfParams_KEYS) ProtoMessage()               {}
func (*Ipv6NdIfParams_KEYS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ipv6NdIfParams_KEYS) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *Ipv6NdIfParams_KEYS) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

type Ipv6NdIfParams struct {
	// If true, DAD (D.. A.. D..) is enabled otherwise it is disabled
	IsDadEnabled bool `protobuf:"varint,50,opt,name=is_dad_enabled,json=isDadEnabled" json:"is_dad_enabled,omitempty"`
	// DAD attempt count
	DadAttempts uint32 `protobuf:"varint,51,opt,name=dad_attempts,json=dadAttempts" json:"dad_attempts,omitempty"`
	// ICMP redirect flag
	IsIcmPv6Redirect bool `protobuf:"varint,52,opt,name=is_icm_pv6_redirect,json=isIcmPv6Redirect" json:"is_icm_pv6_redirect,omitempty"`
	// Flag used for utilising DHCP
	IsDhcpManaged bool `protobuf:"varint,53,opt,name=is_dhcp_managed,json=isDhcpManaged" json:"is_dhcp_managed,omitempty"`
	// Flag used to manage routable address
	IsRouteAddressManaged bool `protobuf:"varint,54,opt,name=is_route_address_managed,json=isRouteAddressManaged" json:"is_route_address_managed,omitempty"`
	// Suppress flag
	IsSuppressed bool `protobuf:"varint,55,opt,name=is_suppressed,json=isSuppressed" json:"is_suppressed,omitempty"`
	// unicast RA send flag
	SendUnicastRa bool `protobuf:"varint,56,opt,name=send_unicast_ra,json=sendUnicastRa" json:"send_unicast_ra,omitempty"`
	// ND retransmit interval in msec
	NdRetransmitInterval uint32 `protobuf:"varint,57,opt,name=nd_retransmit_interval,json=ndRetransmitInterval" json:"nd_retransmit_interval,omitempty"`
	// ND router advertisement minimum transmit interval in sec
	NdMinTransmitInterval uint32 `protobuf:"varint,58,opt,name=nd_min_transmit_interval,json=ndMinTransmitInterval" json:"nd_min_transmit_interval,omitempty"`
	// ND router advertisement maximum transmit interval in sec
	NdMaxTransmitInterval uint32 `protobuf:"varint,59,opt,name=nd_max_transmit_interval,json=ndMaxTransmitInterval" json:"nd_max_transmit_interval,omitempty"`
	// ND router advertisement life time in sec
	NdAdvertisementLifetime uint32 `protobuf:"varint,60,opt,name=nd_advertisement_lifetime,json=ndAdvertisementLifetime" json:"nd_advertisement_lifetime,omitempty"`
	// Time to reach ND in msec
	NdReachableTime uint32 `protobuf:"varint,61,opt,name=nd_reachable_time,json=ndReachableTime" json:"nd_reachable_time,omitempty"`
	// Completed adjacency limit per interface
	NdCacheLimit uint32 `protobuf:"varint,62,opt,name=nd_cache_limit,json=ndCacheLimit" json:"nd_cache_limit,omitempty"`
	// Completed PROTO entry Count
	CompleteProtocolCount uint32 `protobuf:"varint,63,opt,name=complete_protocol_count,json=completeProtocolCount" json:"complete_protocol_count,omitempty"`
	// Completed GLEAN entry count
	CompleteGleanCount uint32 `protobuf:"varint,64,opt,name=complete_glean_count,json=completeGleanCount" json:"complete_glean_count,omitempty"`
	// Incomplete PROTO entry count
	IncompleteProtocolCount uint32 `protobuf:"varint,65,opt,name=incomplete_protocol_count,json=incompleteProtocolCount" json:"incomplete_protocol_count,omitempty"`
	// Incomplete GLEAN entry count
	IncompleteGleanCount uint32 `protobuf:"varint,66,opt,name=incomplete_glean_count,json=incompleteGleanCount" json:"incomplete_glean_count,omitempty"`
	// Dropped PROTO entry request count
	DroppedProtocolReqCount uint32 `protobuf:"varint,67,opt,name=dropped_protocol_req_count,json=droppedProtocolReqCount" json:"dropped_protocol_req_count,omitempty"`
	// Dropped GLEAN entry lequest count
	DroppedGleanReqCount uint32 `protobuf:"varint,68,opt,name=dropped_glean_req_count,json=droppedGleanReqCount" json:"dropped_glean_req_count,omitempty"`
}

func (m *Ipv6NdIfParams) Reset()                    { *m = Ipv6NdIfParams{} }
func (m *Ipv6NdIfParams) String() string            { return proto.CompactTextString(m) }
func (*Ipv6NdIfParams) ProtoMessage()               {}
func (*Ipv6NdIfParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Ipv6NdIfParams) GetIsDadEnabled() bool {
	if m != nil {
		return m.IsDadEnabled
	}
	return false
}

func (m *Ipv6NdIfParams) GetDadAttempts() uint32 {
	if m != nil {
		return m.DadAttempts
	}
	return 0
}

func (m *Ipv6NdIfParams) GetIsIcmPv6Redirect() bool {
	if m != nil {
		return m.IsIcmPv6Redirect
	}
	return false
}

func (m *Ipv6NdIfParams) GetIsDhcpManaged() bool {
	if m != nil {
		return m.IsDhcpManaged
	}
	return false
}

func (m *Ipv6NdIfParams) GetIsRouteAddressManaged() bool {
	if m != nil {
		return m.IsRouteAddressManaged
	}
	return false
}

func (m *Ipv6NdIfParams) GetIsSuppressed() bool {
	if m != nil {
		return m.IsSuppressed
	}
	return false
}

func (m *Ipv6NdIfParams) GetSendUnicastRa() bool {
	if m != nil {
		return m.SendUnicastRa
	}
	return false
}

func (m *Ipv6NdIfParams) GetNdRetransmitInterval() uint32 {
	if m != nil {
		return m.NdRetransmitInterval
	}
	return 0
}

func (m *Ipv6NdIfParams) GetNdMinTransmitInterval() uint32 {
	if m != nil {
		return m.NdMinTransmitInterval
	}
	return 0
}

func (m *Ipv6NdIfParams) GetNdMaxTransmitInterval() uint32 {
	if m != nil {
		return m.NdMaxTransmitInterval
	}
	return 0
}

func (m *Ipv6NdIfParams) GetNdAdvertisementLifetime() uint32 {
	if m != nil {
		return m.NdAdvertisementLifetime
	}
	return 0
}

func (m *Ipv6NdIfParams) GetNdReachableTime() uint32 {
	if m != nil {
		return m.NdReachableTime
	}
	return 0
}

func (m *Ipv6NdIfParams) GetNdCacheLimit() uint32 {
	if m != nil {
		return m.NdCacheLimit
	}
	return 0
}

func (m *Ipv6NdIfParams) GetCompleteProtocolCount() uint32 {
	if m != nil {
		return m.CompleteProtocolCount
	}
	return 0
}

func (m *Ipv6NdIfParams) GetCompleteGleanCount() uint32 {
	if m != nil {
		return m.CompleteGleanCount
	}
	return 0
}

func (m *Ipv6NdIfParams) GetIncompleteProtocolCount() uint32 {
	if m != nil {
		return m.IncompleteProtocolCount
	}
	return 0
}

func (m *Ipv6NdIfParams) GetIncompleteGleanCount() uint32 {
	if m != nil {
		return m.IncompleteGleanCount
	}
	return 0
}

func (m *Ipv6NdIfParams) GetDroppedProtocolReqCount() uint32 {
	if m != nil {
		return m.DroppedProtocolReqCount
	}
	return 0
}

func (m *Ipv6NdIfParams) GetDroppedGleanReqCount() uint32 {
	if m != nil {
		return m.DroppedGleanReqCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Ipv6NdIfParams_KEYS)(nil), "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params_KEYS")
	proto.RegisterType((*Ipv6NdIfParams)(nil), "cisco_ios_xr_ipv6_nd_oper.ipv6_node_discovery.nodes.node.interfaces.interface.ipv6_nd_if_params")
}

func init() { proto.RegisterFile("ipv6_nd_if_params.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 594 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xdf, 0x4f, 0x13, 0x4f,
	0x14, 0xc5, 0xd3, 0xef, 0xc3, 0x57, 0x18, 0x29, 0xc8, 0xca, 0x8f, 0x45, 0x5f, 0x10, 0xd1, 0x10,
	0x13, 0x1b, 0x23, 0x50, 0x14, 0xfc, 0x55, 0x81, 0x18, 0x22, 0x18, 0xb2, 0xe0, 0x83, 0x89, 0xc9,
	0xcd, 0x30, 0xf7, 0x42, 0x27, 0xd9, 0x99, 0x5d, 0x66, 0xa6, 0x4d, 0xfd, 0xeb, 0xfc, 0xd7, 0xcc,
	0xcc, 0xec, 0x6e, 0x6b, 0x2a, 0x2f, 0x4d, 0xf7, 0x9c, 0xf3, 0xb9, 0x67, 0xee, 0x4e, 0x96, 0xad,
	0xca, 0x72, 0xd8, 0x05, 0x8d, 0x20, 0xaf, 0xa1, 0xe4, 0x86, 0x2b, 0xdb, 0x29, 0x4d, 0xe1, 0x8a,
	0xe4, 0x4c, 0x48, 0x2b, 0x0a, 0x90, 0x85, 0x85, 0x91, 0x81, 0x3a, 0x55, 0x94, 0x64, 0x3a, 0xf1,
	0xa1, 0x40, 0x02, 0xf4, 0x99, 0x21, 0x99, 0x5f, 0x1d, 0xff, 0x68, 0xc3, 0x6f, 0x47, 0x6a, 0x47,
	0xe6, 0x9a, 0x0b, 0xb2, 0xe3, 0xbf, 0x1b, 0x3f, 0xd9, 0xca, 0x54, 0x13, 0x7c, 0x3d, 0xfe, 0x71,
	0x91, 0x3c, 0x66, 0xb3, 0x61, 0x96, 0xe6, 0x8a, 0xd2, 0xd6, 0x7a, 0x6b, 0x6b, 0x36, 0x9b, 0xf1,
	0xc2, 0x37, 0xae, 0x28, 0x79, 0xc6, 0xe6, 0x9b, 0x19, 0x31, 0xf1, 0x5f, 0x48, 0xb4, 0x1b, 0xd5,
	0xc7, 0x36, 0x7e, 0xdf, 0x63, 0x8b, 0x53, 0xe3, 0x93, 0x4d, 0x36, 0x2f, 0x2d, 0x20, 0x47, 0x20,
	0xcd, 0xaf, 0x72, 0xc2, 0xf4, 0xf5, 0x7a, 0x6b, 0x6b, 0x26, 0x9b, 0x93, 0xf6, 0x88, 0xe3, 0x71,
	0xd4, 0x92, 0x27, 0x6c, 0xce, 0x47, 0xb8, 0x73, 0xa4, 0x4a, 0x67, 0xd3, 0xed, 0xf5, 0xd6, 0x56,
	0x3b, 0xbb, 0x8f, 0x1c, 0x7b, 0x95, 0x94, 0xbc, 0x64, 0x0f, 0xa5, 0x05, 0x29, 0x14, 0xf8, 0x0e,
	0x43, 0x28, 0x0d, 0x09, 0x97, 0xee, 0x84, 0x69, 0x0f, 0xa4, 0x3d, 0x11, 0xea, 0x7c, 0xd8, 0xcd,
	0x2a, 0x3d, 0x79, 0xce, 0x16, 0x7c, 0x6f, 0x5f, 0x94, 0xa0, 0xb8, 0xe6, 0x37, 0x84, 0xe9, 0x6e,
	0x88, 0xb6, 0xa5, 0x3d, 0xea, 0x8b, 0xf2, 0x2c, 0x8a, 0xc9, 0x1e, 0x4b, 0xa5, 0x05, 0x53, 0x0c,
	0x1c, 0x01, 0x47, 0x34, 0x64, 0x6d, 0x03, 0x74, 0x03, 0xb0, 0x2c, 0x6d, 0xe6, 0xed, 0x5e, 0x74,
	0x6b, 0xf0, 0x29, 0x6b, 0x4b, 0x0b, 0x76, 0x50, 0x96, 0x5e, 0x25, 0x4c, 0xf7, 0xea, 0xbd, 0x2e,
	0x1a, 0xcd, 0x9f, 0xc2, 0x92, 0x46, 0x18, 0x68, 0x29, 0xb8, 0x75, 0x60, 0x78, 0xfa, 0x26, 0x9e,
	0xc2, 0xcb, 0xdf, 0xa3, 0x9a, 0xf1, 0x64, 0x87, 0xad, 0x68, 0x04, 0x43, 0xce, 0x70, 0x6d, 0x95,
	0x74, 0x10, 0x5e, 0xed, 0x90, 0xe7, 0xe9, 0xdb, 0xf0, 0x26, 0x96, 0x34, 0x66, 0x8d, 0x79, 0x52,
	0x79, 0xfe, 0xec, 0x1a, 0x41, 0x49, 0x0d, 0xd3, 0xdc, 0x7e, 0xe0, 0x96, 0x35, 0x9e, 0x49, 0x7d,
	0x79, 0x07, 0xc8, 0x47, 0xff, 0x00, 0x0f, 0x1a, 0x90, 0x8f, 0xa6, 0xc0, 0x7d, 0xb6, 0xa6, 0x11,
	0x38, 0x0e, 0xc9, 0x38, 0x69, 0x49, 0x91, 0x76, 0x90, 0xcb, 0x6b, 0x72, 0x52, 0x51, 0xfa, 0x2e,
	0x90, 0xab, 0x1a, 0x7b, 0x93, 0xfe, 0x69, 0x65, 0x27, 0x2f, 0xd8, 0x62, 0xd8, 0x91, 0x8b, 0xbe,
	0xbf, 0x74, 0x08, 0xcc, 0xfb, 0xc0, 0x2c, 0xf8, 0xf5, 0x2a, 0xfd, 0xd2, 0x67, 0x37, 0xd9, 0xbc,
	0x46, 0x10, 0x5c, 0xf4, 0x09, 0x72, 0xa9, 0xa4, 0x4b, 0x3f, 0x84, 0xe0, 0x9c, 0xc6, 0x43, 0x2f,
	0x9e, 0x7a, 0x2d, 0xe9, 0xb2, 0x55, 0x51, 0xa8, 0x32, 0x27, 0x47, 0x10, 0x3e, 0x18, 0x51, 0xe4,
	0x20, 0x8a, 0x81, 0x76, 0xe9, 0xc7, 0xb8, 0x45, 0x6d, 0x9f, 0x57, 0xee, 0xa1, 0x37, 0x93, 0x57,
	0x6c, 0xa9, 0xe1, 0x6e, 0x72, 0xe2, 0xba, 0x82, 0x3e, 0x05, 0x28, 0xa9, 0xbd, 0x2f, 0xde, 0x8a,
	0xc4, 0x3e, 0x5b, 0x93, 0xfa, 0xae, 0xae, 0x5e, 0xdc, 0x7b, 0x1c, 0xf8, 0xbb, 0x6d, 0x87, 0xad,
	0x4c, 0xb0, 0x93, 0x7d, 0x9f, 0xe3, 0xdd, 0x8e, 0xdd, 0x89, 0xc6, 0x03, 0xf6, 0x08, 0x4d, 0x51,
	0x96, 0x84, 0xe3, 0x3a, 0x43, 0xb7, 0x15, 0x79, 0x18, 0x2b, 0xab, 0x44, 0xdd, 0x97, 0xd1, 0x6d,
	0x84, 0x77, 0x59, 0x6d, 0x55, 0x7d, 0x63, 0xf2, 0x28, 0x76, 0x56, 0x76, 0x28, 0xac, 0xb1, 0xab,
	0xff, 0x43, 0xd3, 0xf6, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x84, 0x16, 0xcb, 0x70, 0x90, 0x04,
	0x00, 0x00,
}
